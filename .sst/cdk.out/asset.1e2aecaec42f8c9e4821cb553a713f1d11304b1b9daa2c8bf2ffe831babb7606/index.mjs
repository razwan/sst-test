import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  __name(__, "__");
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  __name(adopt, "adopt");
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    __name(fulfilled, "fulfilled");
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    __name(rejected, "rejected");
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    __name(step, "step");
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  __name(verb, "verb");
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
  __name(step, "step");
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  __name(verb, "verb");
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  __name(resume, "resume");
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  __name(step, "step");
  function fulfill(value) {
    resume("next", value);
  }
  __name(fulfill, "fulfill");
  function reject(value) {
    resume("throw", value);
  }
  __name(reject, "reject");
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
  __name(settle, "settle");
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
  __name(verb, "verb");
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  __name(verb, "verb");
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
  __name(settle, "settle");
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  "../../node_modules/.pnpm/tslib@2.4.1/node_modules/tslib/tslib.es6.js"() {
    extendStatics = /* @__PURE__ */ __name(function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    }, "extendStatics");
    __name(__extends, "__extends");
    __assign = /* @__PURE__ */ __name(function() {
      __assign = Object.assign || /* @__PURE__ */ __name(function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      }, "__assign");
      return __assign.apply(this, arguments);
    }, "__assign");
    __name(__rest, "__rest");
    __name(__decorate, "__decorate");
    __name(__param, "__param");
    __name(__metadata, "__metadata");
    __name(__awaiter, "__awaiter");
    __name(__generator, "__generator");
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __name(__exportStar, "__exportStar");
    __name(__values, "__values");
    __name(__read, "__read");
    __name(__spread, "__spread");
    __name(__spreadArrays, "__spreadArrays");
    __name(__spreadArray, "__spreadArray");
    __name(__await, "__await");
    __name(__asyncGenerator, "__asyncGenerator");
    __name(__asyncDelegator, "__asyncDelegator");
    __name(__asyncValues, "__asyncValues");
    __name(__makeTemplateObject, "__makeTemplateObject");
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    __name(__importStar, "__importStar");
    __name(__importDefault, "__importDefault");
    __name(__classPrivateFieldGet, "__classPrivateFieldGet");
    __name(__classPrivateFieldSet, "__classPrivateFieldSet");
    __name(__classPrivateFieldIn, "__classPrivateFieldIn");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    }, "resolveParamsForS3");
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    }, "isArnBucketName");
    exports.isArnBucketName = isArnBucketName;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config) => {
      const configProvider = /* @__PURE__ */ __name(async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      }, "configProvider");
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    }, "createConfigValueProvider");
    exports.createConfigValueProvider = createConfigValueProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    }, "getEndpointFromInstructions");
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    }, "resolveParams");
    exports.resolveParams = resolveParams;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+querystring-parser@3.208.0/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+querystring-parser@3.208.0/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    __name(parseQueryString, "parseQueryString");
    exports.parseQueryString = parseQueryString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+url-parser@3.208.0/node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+url-parser@3.208.0/node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs();
    var parseUrl = /* @__PURE__ */ __name((url2) => {
      if (typeof url2 === "string") {
        return (0, exports.parseUrl)(new URL(url2));
      }
      const { hostname, pathname, port, protocol, search } = url2;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    }, "parseUrl");
    exports.parseUrl = parseUrl;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs2();
    var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    }, "toEndpointV1");
    exports.toEndpointV1 = toEndpointV1;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = /* @__PURE__ */ __name(({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    }, "endpointMiddleware");
    exports.endpointMiddleware = endpointMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    }, "deserializerMiddleware");
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = /* @__PURE__ */ __name((options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    }, "serializerMiddleware");
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    __name(getSerdePlugin, "getSerdePlugin");
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.208.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs3();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = /* @__PURE__ */ __name((config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports.endpointMiddlewareOptions);
      }
    }), "getEndpointPlugin");
    exports.getEndpointPlugin = getEndpointPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-middleware@3.208.0/node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-middleware@3.208.0/node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = /* @__PURE__ */ __name((input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, "normalizeProvider");
    exports.normalizeProvider = normalizeProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-middleware@3.208.0/node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-middleware@3.208.0/node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = /* @__PURE__ */ __name((input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    }, "resolveEndpointConfig");
    exports.resolveEndpointConfig = resolveEndpointConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.208.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.208.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.208.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var constructStack = /* @__PURE__ */ __name(() => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = /* @__PURE__ */ __name((entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]), "sort");
      const removeByName = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByName");
      const removeByReference = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByReference");
      const cloneTo = /* @__PURE__ */ __name((toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      }, "cloneTo");
      const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      }, "expandRelativeMiddlewareList");
      const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      }, "getMiddlewareList");
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = /* @__PURE__ */ __name((entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          }, "filterCb");
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler2 = middleware(handler2, context);
          }
          return handler2;
        }
      };
      return stack;
    }, "constructStack");
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.208.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.208.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs6();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler2(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    __name(Client, "Client");
    exports.Client = Client;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs6();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    __name(Command, "Command");
    exports.Command = Command;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logger = exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    }, "parseBoolean");
    exports.parseBoolean = parseBoolean;
    var expectBoolean = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    }, "expectBoolean");
    exports.expectBoolean = expectBoolean;
    var expectNumber = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    }, "expectNumber");
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = /* @__PURE__ */ __name((value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    }, "expectFloat32");
    exports.expectFloat32 = expectFloat32;
    var expectLong = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    }, "expectLong");
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = /* @__PURE__ */ __name((value) => expectSizedInt(value, 32), "expectInt32");
    exports.expectInt32 = expectInt32;
    var expectShort = /* @__PURE__ */ __name((value) => expectSizedInt(value, 16), "expectShort");
    exports.expectShort = expectShort;
    var expectByte = /* @__PURE__ */ __name((value) => expectSizedInt(value, 8), "expectByte");
    exports.expectByte = expectByte;
    var expectSizedInt = /* @__PURE__ */ __name((value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    }, "expectSizedInt");
    var castInt = /* @__PURE__ */ __name((value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    }, "castInt");
    var expectNonNull = /* @__PURE__ */ __name((value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    }, "expectNonNull");
    exports.expectNonNull = expectNonNull;
    var expectObject = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    }, "expectObject");
    exports.expectObject = expectObject;
    var expectString = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    }, "expectString");
    exports.expectString = expectString;
    var expectUnion = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    }, "expectUnion");
    exports.expectUnion = expectUnion;
    var strictParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    }, "strictParseDouble");
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    }, "strictParseFloat32");
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = /* @__PURE__ */ __name((value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    }, "parseNumber");
    var limitedParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    }, "limitedParseDouble");
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    }, "limitedParseFloat32");
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    }, "parseFloatString");
    var strictParseLong = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    }, "strictParseLong");
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    }, "strictParseInt32");
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    }, "strictParseShort");
    exports.strictParseShort = strictParseShort;
    var strictParseByte = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    }, "strictParseByte");
    exports.strictParseByte = strictParseByte;
    var stackTraceWarning = /* @__PURE__ */ __name((message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    }, "stackTraceWarning");
    exports.logger = {
      warn: console.warn
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    __name(dateToUtcString, "dateToUtcString");
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    }, "parseRfc3339DateTime");
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    }, "parseRfc7231DateTime");
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    }, "parseEpochTimestamp");
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = /* @__PURE__ */ __name((year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    }, "buildDate");
    var parseTwoDigitYear = /* @__PURE__ */ __name((value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    }, "parseTwoDigitYear");
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = /* @__PURE__ */ __name((input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    }, "adjustRfc850Year");
    var parseMonthByShortName = /* @__PURE__ */ __name((value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    }, "parseMonthByShortName");
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = /* @__PURE__ */ __name((year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    }, "validateDayOfMonth");
    var isLeapYear = /* @__PURE__ */ __name((year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }, "isLeapYear");
    var parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    }, "parseDateValue");
    var parseMilliseconds = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    }, "parseMilliseconds");
    var stripLeadingZeroes = /* @__PURE__ */ __name((value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    }, "stripLeadingZeroes");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    __name(ServiceException, "ServiceException");
    exports.ServiceException = ServiceException;
    var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    }, "decorateServiceException");
    exports.decorateServiceException = decorateServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    }, "throwDefaultError");
    exports.throwDefaultError = throwDefaultError;
    var deserializeMetadata = /* @__PURE__ */ __name((output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    }, "deserializeMetadata");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    }, "loadConfigsForDefaultMode");
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    }, "emitWarningIfUnsupportedVersion");
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    __name(extendedEncodeURIComponent, "extendedEncodeURIComponent");
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = /* @__PURE__ */ __name((obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    }, "getValueFromTextNode");
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = /* @__PURE__ */ __name(function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    }, "StringWrapper");
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    __name(LazyJsonString, "LazyJsonString");
    exports.LazyJsonString = LazyJsonString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertMap = exports.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        let [filter2, value] = instructions[key];
        if (typeof value === "function") {
          let _value;
          const defaultFilterPassed = filter2 === void 0 && (_value = value()) != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(void 0) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed) {
            target[key] = _value;
          } else if (customFilterPassed) {
            target[key] = value();
          }
        } else {
          const defaultFilterPassed = filter2 === void 0 && value != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(value) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed || customFilterPassed) {
            target[key] = value;
          }
        }
      }
      return target;
    }
    __name(map, "map");
    exports.map = map;
    var convertMap = /* @__PURE__ */ __name((target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    }, "convertMap");
    exports.convertMap = convertMap;
    var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    }, "mapWithFilter");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = /* @__PURE__ */ __name((resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    }, "resolvedPath");
    exports.resolvedPath = resolvedPath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = /* @__PURE__ */ __name((value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    }, "serializeFloat");
    exports.serializeFloat = serializeFloat;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    __name(splitEvery, "splitEvery");
    exports.splitEvery = splitEvery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.208.0/node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_default_error_handler(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_object_mapping(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_resolve_path(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js
var require_SSMServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSMServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSMServiceException.prototype);
      }
    };
    __name(SSMServiceException, "SSMServiceException");
    exports.SSMServiceException = SSMServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpsMetadataInvalidArgumentException = exports.OpsMetadataAlreadyExistsException = exports.OpsItemAlreadyExistsException = exports.OpsItemDataType = exports.ResourceLimitExceededException = exports.IdempotentParameterMismatch = exports.MaxDocumentSizeExceeded = exports.InvalidDocumentSchemaVersion = exports.InvalidDocumentContent = exports.DocumentLimitExceeded = exports.DocumentAlreadyExists = exports.DocumentStatus = exports.ReviewStatus = exports.PlatformType = exports.DocumentParameterType = exports.DocumentHashType = exports.DocumentType = exports.DocumentFormat = exports.AttachmentsSourceKey = exports.Fault = exports.UnsupportedPlatformType = exports.InvalidTargetMaps = exports.InvalidTarget = exports.InvalidTag = exports.InvalidSchedule = exports.InvalidOutputLocation = exports.InvalidDocumentVersion = exports.InvalidDocument = exports.AssociationStatusName = exports.AssociationSyncCompliance = exports.AssociationComplianceSeverity = exports.AssociationLimitExceeded = exports.AssociationAlreadyExists = exports.InvalidParameters = exports.DoesNotExistException = exports.InvalidInstanceId = exports.InvalidCommandId = exports.DuplicateInstanceId = exports.OpsItemRelatedItemAlreadyExistsException = exports.OpsItemNotFoundException = exports.OpsItemLimitExceededException = exports.OpsItemInvalidParameterException = exports.AlreadyExistsException = exports.ExternalAlarmState = exports.TooManyUpdates = exports.TooManyTagsError = exports.InvalidResourceType = exports.InvalidResourceId = exports.InternalServerError = exports.ResourceTypeForTagging = void 0;
    exports.SourceType = exports.ResourceType = exports.PingStatus = exports.InstanceInformationFilterKey = exports.UnsupportedOperatingSystem = exports.PatchDeploymentStatus = exports.InvalidPermissionType = exports.DocumentPermissionType = exports.StepExecutionFilterKey = exports.AutomationExecutionNotFoundException = exports.InvalidFilterValue = exports.InvalidFilterKey = exports.ExecutionMode = exports.AutomationType = exports.AutomationSubtype = exports.AutomationExecutionStatus = exports.AutomationExecutionFilterKey = exports.AssociationExecutionTargetsFilterKey = exports.AssociationExecutionDoesNotExist = exports.AssociationFilterOperatorType = exports.AssociationExecutionFilterKey = exports.InvalidAssociationVersion = exports.InvalidNextToken = exports.InvalidFilter = exports.DescribeActivationsFilterKeys = exports.TargetInUseException = exports.ResourceDataSyncNotFoundException = exports.ResourceInUseException = exports.ParameterNotFound = exports.OpsMetadataNotFoundException = exports.InvalidTypeNameException = exports.InvalidOptionException = exports.InvalidInventoryRequestException = exports.InvalidDeleteInventoryParametersException = exports.InventorySchemaDeleteOption = exports.InvalidDocumentOperation = exports.AssociatedInstances = exports.AssociationDoesNotExist = exports.InvalidActivationId = exports.InvalidActivation = exports.ResourceDataSyncInvalidConfigurationException = exports.ResourceDataSyncCountExceededException = exports.ResourceDataSyncAlreadyExistsException = exports.ResourceDataSyncS3Format = exports.PatchAction = exports.OperatingSystem = exports.PatchFilterKey = exports.PatchComplianceLevel = exports.OpsMetadataTooManyUpdatesException = exports.OpsMetadataLimitExceededException = void 0;
    exports.ReviewInformationFilterSensitiveLog = exports.DocumentParameterFilterSensitiveLog = exports.AttachmentInformationFilterSensitiveLog = exports.CreateDocumentRequestFilterSensitiveLog = exports.DocumentRequiresFilterSensitiveLog = exports.AttachmentsSourceFilterSensitiveLog = exports.CreateAssociationBatchResultFilterSensitiveLog = exports.FailedCreateAssociationFilterSensitiveLog = exports.CreateAssociationBatchRequestFilterSensitiveLog = exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = exports.CreateAssociationResultFilterSensitiveLog = exports.AssociationDescriptionFilterSensitiveLog = exports.AssociationStatusFilterSensitiveLog = exports.AssociationOverviewFilterSensitiveLog = exports.CreateAssociationRequestFilterSensitiveLog = exports.TargetFilterSensitiveLog = exports.TargetLocationFilterSensitiveLog = exports.InstanceAssociationOutputLocationFilterSensitiveLog = exports.S3OutputLocationFilterSensitiveLog = exports.CreateActivationResultFilterSensitiveLog = exports.CreateActivationRequestFilterSensitiveLog = exports.RegistrationMetadataItemFilterSensitiveLog = exports.CancelMaintenanceWindowExecutionResultFilterSensitiveLog = exports.CancelMaintenanceWindowExecutionRequestFilterSensitiveLog = exports.CancelCommandResultFilterSensitiveLog = exports.CancelCommandRequestFilterSensitiveLog = exports.AssociateOpsItemRelatedItemResponseFilterSensitiveLog = exports.AssociateOpsItemRelatedItemRequestFilterSensitiveLog = exports.AlarmStateInformationFilterSensitiveLog = exports.AlarmConfigurationFilterSensitiveLog = exports.AlarmFilterSensitiveLog = exports.AddTagsToResourceResultFilterSensitiveLog = exports.AddTagsToResourceRequestFilterSensitiveLog = exports.ActivationFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.AccountSharingInfoFilterSensitiveLog = exports.OpsItemStatus = exports.OpsItemFilterOperator = exports.OpsItemFilterKey = exports.MaintenanceWindowTaskCutoffBehavior = exports.MaintenanceWindowResourceType = exports.MaintenanceWindowTaskType = exports.MaintenanceWindowExecutionStatus = exports.InvalidDeletionIdException = exports.InventoryDeletionStatus = exports.InstancePatchStateOperatorType = exports.RebootOption = exports.PatchOperationType = exports.PatchComplianceDataState = exports.InvalidInstanceInformationFilterValue = void 0;
    exports.DeregisterManagedInstanceResultFilterSensitiveLog = exports.DeregisterManagedInstanceRequestFilterSensitiveLog = exports.DeleteResourceDataSyncResultFilterSensitiveLog = exports.DeleteResourceDataSyncRequestFilterSensitiveLog = exports.DeletePatchBaselineResultFilterSensitiveLog = exports.DeletePatchBaselineRequestFilterSensitiveLog = exports.DeleteParametersResultFilterSensitiveLog = exports.DeleteParametersRequestFilterSensitiveLog = exports.DeleteParameterResultFilterSensitiveLog = exports.DeleteParameterRequestFilterSensitiveLog = exports.DeleteOpsMetadataResultFilterSensitiveLog = exports.DeleteOpsMetadataRequestFilterSensitiveLog = exports.DeleteMaintenanceWindowResultFilterSensitiveLog = exports.DeleteMaintenanceWindowRequestFilterSensitiveLog = exports.DeleteInventoryResultFilterSensitiveLog = exports.InventoryDeletionSummaryFilterSensitiveLog = exports.InventoryDeletionSummaryItemFilterSensitiveLog = exports.DeleteInventoryRequestFilterSensitiveLog = exports.DeleteDocumentResultFilterSensitiveLog = exports.DeleteDocumentRequestFilterSensitiveLog = exports.DeleteAssociationResultFilterSensitiveLog = exports.DeleteAssociationRequestFilterSensitiveLog = exports.DeleteActivationResultFilterSensitiveLog = exports.DeleteActivationRequestFilterSensitiveLog = exports.CreateResourceDataSyncResultFilterSensitiveLog = exports.CreateResourceDataSyncRequestFilterSensitiveLog = exports.ResourceDataSyncSourceFilterSensitiveLog = exports.ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog = exports.ResourceDataSyncOrganizationalUnitFilterSensitiveLog = exports.ResourceDataSyncS3DestinationFilterSensitiveLog = exports.ResourceDataSyncDestinationDataSharingFilterSensitiveLog = exports.CreatePatchBaselineResultFilterSensitiveLog = exports.CreatePatchBaselineRequestFilterSensitiveLog = exports.PatchSourceFilterSensitiveLog = exports.PatchRuleGroupFilterSensitiveLog = exports.PatchRuleFilterSensitiveLog = exports.PatchFilterGroupFilterSensitiveLog = exports.PatchFilterFilterSensitiveLog = exports.CreateOpsMetadataResultFilterSensitiveLog = exports.CreateOpsMetadataRequestFilterSensitiveLog = exports.MetadataValueFilterSensitiveLog = exports.CreateOpsItemResponseFilterSensitiveLog = exports.CreateOpsItemRequestFilterSensitiveLog = exports.RelatedOpsItemFilterSensitiveLog = exports.OpsItemDataValueFilterSensitiveLog = exports.OpsItemNotificationFilterSensitiveLog = exports.CreateMaintenanceWindowResultFilterSensitiveLog = exports.CreateMaintenanceWindowRequestFilterSensitiveLog = exports.CreateDocumentResultFilterSensitiveLog = exports.DocumentDescriptionFilterSensitiveLog = void 0;
    exports.InstanceAssociationStatusInfoFilterSensitiveLog = exports.InstanceAssociationOutputUrlFilterSensitiveLog = exports.S3OutputUrlFilterSensitiveLog = exports.DescribeInstanceAssociationsStatusRequestFilterSensitiveLog = exports.DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog = exports.EffectivePatchFilterSensitiveLog = exports.PatchStatusFilterSensitiveLog = exports.DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog = exports.DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog = exports.InstanceAssociationFilterSensitiveLog = exports.DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog = exports.DescribeDocumentPermissionResponseFilterSensitiveLog = exports.DescribeDocumentPermissionRequestFilterSensitiveLog = exports.DescribeDocumentResultFilterSensitiveLog = exports.DescribeDocumentRequestFilterSensitiveLog = exports.DescribeAvailablePatchesResultFilterSensitiveLog = exports.PatchFilterSensitiveLog = exports.DescribeAvailablePatchesRequestFilterSensitiveLog = exports.PatchOrchestratorFilterFilterSensitiveLog = exports.DescribeAutomationStepExecutionsResultFilterSensitiveLog = exports.StepExecutionFilterSensitiveLog = exports.FailureDetailsFilterSensitiveLog = exports.DescribeAutomationStepExecutionsRequestFilterSensitiveLog = exports.StepExecutionFilterFilterSensitiveLog = exports.DescribeAutomationExecutionsResultFilterSensitiveLog = exports.AutomationExecutionMetadataFilterSensitiveLog = exports.RunbookFilterSensitiveLog = exports.ResolvedTargetsFilterSensitiveLog = exports.DescribeAutomationExecutionsRequestFilterSensitiveLog = exports.AutomationExecutionFilterFilterSensitiveLog = exports.DescribeAssociationExecutionTargetsResultFilterSensitiveLog = exports.AssociationExecutionTargetFilterSensitiveLog = exports.OutputSourceFilterSensitiveLog = exports.DescribeAssociationExecutionTargetsRequestFilterSensitiveLog = exports.AssociationExecutionTargetsFilterFilterSensitiveLog = exports.DescribeAssociationExecutionsResultFilterSensitiveLog = exports.AssociationExecutionFilterSensitiveLog = exports.DescribeAssociationExecutionsRequestFilterSensitiveLog = exports.AssociationExecutionFilterFilterSensitiveLog = exports.DescribeAssociationResultFilterSensitiveLog = exports.DescribeAssociationRequestFilterSensitiveLog = exports.DescribeActivationsResultFilterSensitiveLog = exports.DescribeActivationsRequestFilterSensitiveLog = exports.DescribeActivationsFilterFilterSensitiveLog = exports.DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog = exports.DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog = exports.DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog = exports.DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog = exports.DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog = exports.DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = void 0;
    exports.DescribeOpsItemsResponseFilterSensitiveLog = exports.OpsItemSummaryFilterSensitiveLog = exports.DescribeOpsItemsRequestFilterSensitiveLog = exports.OpsItemFilterFilterSensitiveLog = exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = exports.MaintenanceWindowTaskFilterSensitiveLog = exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = exports.LoggingInfoFilterSensitiveLog = exports.DescribeMaintenanceWindowTasksRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = exports.MaintenanceWindowTargetFilterSensitiveLog = exports.DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog = exports.MaintenanceWindowIdentityForTargetFilterSensitiveLog = exports.DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowScheduleResultFilterSensitiveLog = exports.ScheduledWindowExecutionFilterSensitiveLog = exports.DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = exports.MaintenanceWindowIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowsRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog = exports.MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog = exports.MaintenanceWindowExecutionFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog = exports.MaintenanceWindowFilterFilterSensitiveLog = exports.DescribeInventoryDeletionsResultFilterSensitiveLog = exports.InventoryDeletionStatusItemFilterSensitiveLog = exports.DescribeInventoryDeletionsRequestFilterSensitiveLog = exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = exports.DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog = exports.InstancePatchStateFilterFilterSensitiveLog = exports.DescribeInstancePatchStatesResultFilterSensitiveLog = exports.InstancePatchStateFilterSensitiveLog = exports.DescribeInstancePatchStatesRequestFilterSensitiveLog = exports.DescribeInstancePatchesResultFilterSensitiveLog = exports.PatchComplianceDataFilterSensitiveLog = exports.DescribeInstancePatchesRequestFilterSensitiveLog = exports.DescribeInstanceInformationResultFilterSensitiveLog = exports.InstanceInformationFilterSensitiveLog = exports.InstanceAggregatedAssociationOverviewFilterSensitiveLog = exports.DescribeInstanceInformationRequestFilterSensitiveLog = exports.InstanceInformationFilterFilterSensitiveLog = exports.InstanceInformationStringFilterFilterSensitiveLog = exports.DescribeInstanceAssociationsStatusResultFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSMServiceException_1 = require_SSMServiceException();
    var ResourceTypeForTagging;
    (function(ResourceTypeForTagging2) {
      ResourceTypeForTagging2["ASSOCIATION"] = "Association";
      ResourceTypeForTagging2["AUTOMATION"] = "Automation";
      ResourceTypeForTagging2["DOCUMENT"] = "Document";
      ResourceTypeForTagging2["MAINTENANCE_WINDOW"] = "MaintenanceWindow";
      ResourceTypeForTagging2["MANAGED_INSTANCE"] = "ManagedInstance";
      ResourceTypeForTagging2["OPSMETADATA"] = "OpsMetadata";
      ResourceTypeForTagging2["OPS_ITEM"] = "OpsItem";
      ResourceTypeForTagging2["PARAMETER"] = "Parameter";
      ResourceTypeForTagging2["PATCH_BASELINE"] = "PatchBaseline";
    })(ResourceTypeForTagging = exports.ResourceTypeForTagging || (exports.ResourceTypeForTagging = {}));
    var InternalServerError = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InternalServerError, "InternalServerError");
    exports.InternalServerError = InternalServerError;
    var InvalidResourceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceId.prototype);
      }
    };
    __name(InvalidResourceId, "InvalidResourceId");
    exports.InvalidResourceId = InvalidResourceId;
    var InvalidResourceType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceType.prototype);
      }
    };
    __name(InvalidResourceType, "InvalidResourceType");
    exports.InvalidResourceType = InvalidResourceType;
    var TooManyTagsError = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyTagsError",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyTagsError";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsError.prototype);
      }
    };
    __name(TooManyTagsError, "TooManyTagsError");
    exports.TooManyTagsError = TooManyTagsError;
    var TooManyUpdates = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyUpdates",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyUpdates";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyUpdates.prototype);
        this.Message = opts.Message;
      }
    };
    __name(TooManyUpdates, "TooManyUpdates");
    exports.TooManyUpdates = TooManyUpdates;
    var ExternalAlarmState;
    (function(ExternalAlarmState2) {
      ExternalAlarmState2["ALARM"] = "ALARM";
      ExternalAlarmState2["UNKNOWN"] = "UNKNOWN";
    })(ExternalAlarmState = exports.ExternalAlarmState || (exports.ExternalAlarmState = {}));
    var AlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AlreadyExistsException, "AlreadyExistsException");
    exports.AlreadyExistsException = AlreadyExistsException;
    var OpsItemInvalidParameterException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    __name(OpsItemInvalidParameterException, "OpsItemInvalidParameterException");
    exports.OpsItemInvalidParameterException = OpsItemInvalidParameterException;
    var OpsItemLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemLimitExceededException.prototype);
        this.ResourceTypes = opts.ResourceTypes;
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    __name(OpsItemLimitExceededException, "OpsItemLimitExceededException");
    exports.OpsItemLimitExceededException = OpsItemLimitExceededException;
    var OpsItemNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(OpsItemNotFoundException, "OpsItemNotFoundException");
    exports.OpsItemNotFoundException = OpsItemNotFoundException;
    var OpsItemRelatedItemAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceUri = opts.ResourceUri;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    __name(OpsItemRelatedItemAlreadyExistsException, "OpsItemRelatedItemAlreadyExistsException");
    exports.OpsItemRelatedItemAlreadyExistsException = OpsItemRelatedItemAlreadyExistsException;
    var DuplicateInstanceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateInstanceId.prototype);
      }
    };
    __name(DuplicateInstanceId, "DuplicateInstanceId");
    exports.DuplicateInstanceId = DuplicateInstanceId;
    var InvalidCommandId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidCommandId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCommandId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCommandId.prototype);
      }
    };
    __name(InvalidCommandId, "InvalidCommandId");
    exports.InvalidCommandId = InvalidCommandId;
    var InvalidInstanceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceId.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidInstanceId, "InvalidInstanceId");
    exports.InvalidInstanceId = InvalidInstanceId;
    var DoesNotExistException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DoesNotExistException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(DoesNotExistException, "DoesNotExistException");
    exports.DoesNotExistException = DoesNotExistException;
    var InvalidParameters = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameters",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameters";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameters.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidParameters, "InvalidParameters");
    exports.InvalidParameters = InvalidParameters;
    var AssociationAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationAlreadyExists.prototype);
      }
    };
    __name(AssociationAlreadyExists, "AssociationAlreadyExists");
    exports.AssociationAlreadyExists = AssociationAlreadyExists;
    var AssociationLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationLimitExceeded.prototype);
      }
    };
    __name(AssociationLimitExceeded, "AssociationLimitExceeded");
    exports.AssociationLimitExceeded = AssociationLimitExceeded;
    var AssociationComplianceSeverity;
    (function(AssociationComplianceSeverity2) {
      AssociationComplianceSeverity2["Critical"] = "CRITICAL";
      AssociationComplianceSeverity2["High"] = "HIGH";
      AssociationComplianceSeverity2["Low"] = "LOW";
      AssociationComplianceSeverity2["Medium"] = "MEDIUM";
      AssociationComplianceSeverity2["Unspecified"] = "UNSPECIFIED";
    })(AssociationComplianceSeverity = exports.AssociationComplianceSeverity || (exports.AssociationComplianceSeverity = {}));
    var AssociationSyncCompliance;
    (function(AssociationSyncCompliance2) {
      AssociationSyncCompliance2["Auto"] = "AUTO";
      AssociationSyncCompliance2["Manual"] = "MANUAL";
    })(AssociationSyncCompliance = exports.AssociationSyncCompliance || (exports.AssociationSyncCompliance = {}));
    var AssociationStatusName;
    (function(AssociationStatusName2) {
      AssociationStatusName2["Failed"] = "Failed";
      AssociationStatusName2["Pending"] = "Pending";
      AssociationStatusName2["Success"] = "Success";
    })(AssociationStatusName = exports.AssociationStatusName || (exports.AssociationStatusName = {}));
    var InvalidDocument = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocument",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocument";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocument.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDocument, "InvalidDocument");
    exports.InvalidDocument = InvalidDocument;
    var InvalidDocumentVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentVersion.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDocumentVersion, "InvalidDocumentVersion");
    exports.InvalidDocumentVersion = InvalidDocumentVersion;
    var InvalidOutputLocation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputLocation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputLocation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputLocation.prototype);
      }
    };
    __name(InvalidOutputLocation, "InvalidOutputLocation");
    exports.InvalidOutputLocation = InvalidOutputLocation;
    var InvalidSchedule = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidSchedule",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSchedule";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSchedule.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidSchedule, "InvalidSchedule");
    exports.InvalidSchedule = InvalidSchedule;
    var InvalidTag = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTag",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTag";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTag.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidTag, "InvalidTag");
    exports.InvalidTag = InvalidTag;
    var InvalidTarget = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTarget",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTarget";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTarget.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidTarget, "InvalidTarget");
    exports.InvalidTarget = InvalidTarget;
    var InvalidTargetMaps = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTargetMaps",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetMaps";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetMaps.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidTargetMaps, "InvalidTargetMaps");
    exports.InvalidTargetMaps = InvalidTargetMaps;
    var UnsupportedPlatformType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedPlatformType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedPlatformType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlatformType.prototype);
        this.Message = opts.Message;
      }
    };
    __name(UnsupportedPlatformType, "UnsupportedPlatformType");
    exports.UnsupportedPlatformType = UnsupportedPlatformType;
    var Fault;
    (function(Fault2) {
      Fault2["Client"] = "Client";
      Fault2["Server"] = "Server";
      Fault2["Unknown"] = "Unknown";
    })(Fault = exports.Fault || (exports.Fault = {}));
    var AttachmentsSourceKey;
    (function(AttachmentsSourceKey2) {
      AttachmentsSourceKey2["AttachmentReference"] = "AttachmentReference";
      AttachmentsSourceKey2["S3FileUrl"] = "S3FileUrl";
      AttachmentsSourceKey2["SourceUrl"] = "SourceUrl";
    })(AttachmentsSourceKey = exports.AttachmentsSourceKey || (exports.AttachmentsSourceKey = {}));
    var DocumentFormat;
    (function(DocumentFormat2) {
      DocumentFormat2["JSON"] = "JSON";
      DocumentFormat2["TEXT"] = "TEXT";
      DocumentFormat2["YAML"] = "YAML";
    })(DocumentFormat = exports.DocumentFormat || (exports.DocumentFormat = {}));
    var DocumentType;
    (function(DocumentType2) {
      DocumentType2["ApplicationConfiguration"] = "ApplicationConfiguration";
      DocumentType2["ApplicationConfigurationSchema"] = "ApplicationConfigurationSchema";
      DocumentType2["Automation"] = "Automation";
      DocumentType2["ChangeCalendar"] = "ChangeCalendar";
      DocumentType2["ChangeTemplate"] = "Automation.ChangeTemplate";
      DocumentType2["CloudFormation"] = "CloudFormation";
      DocumentType2["Command"] = "Command";
      DocumentType2["ConformancePackTemplate"] = "ConformancePackTemplate";
      DocumentType2["DeploymentStrategy"] = "DeploymentStrategy";
      DocumentType2["Package"] = "Package";
      DocumentType2["Policy"] = "Policy";
      DocumentType2["ProblemAnalysis"] = "ProblemAnalysis";
      DocumentType2["ProblemAnalysisTemplate"] = "ProblemAnalysisTemplate";
      DocumentType2["Session"] = "Session";
    })(DocumentType = exports.DocumentType || (exports.DocumentType = {}));
    var DocumentHashType;
    (function(DocumentHashType2) {
      DocumentHashType2["SHA1"] = "Sha1";
      DocumentHashType2["SHA256"] = "Sha256";
    })(DocumentHashType = exports.DocumentHashType || (exports.DocumentHashType = {}));
    var DocumentParameterType;
    (function(DocumentParameterType2) {
      DocumentParameterType2["String"] = "String";
      DocumentParameterType2["StringList"] = "StringList";
    })(DocumentParameterType = exports.DocumentParameterType || (exports.DocumentParameterType = {}));
    var PlatformType;
    (function(PlatformType2) {
      PlatformType2["LINUX"] = "Linux";
      PlatformType2["MACOS"] = "MacOS";
      PlatformType2["WINDOWS"] = "Windows";
    })(PlatformType = exports.PlatformType || (exports.PlatformType = {}));
    var ReviewStatus;
    (function(ReviewStatus2) {
      ReviewStatus2["APPROVED"] = "APPROVED";
      ReviewStatus2["NOT_REVIEWED"] = "NOT_REVIEWED";
      ReviewStatus2["PENDING"] = "PENDING";
      ReviewStatus2["REJECTED"] = "REJECTED";
    })(ReviewStatus = exports.ReviewStatus || (exports.ReviewStatus = {}));
    var DocumentStatus;
    (function(DocumentStatus2) {
      DocumentStatus2["Active"] = "Active";
      DocumentStatus2["Creating"] = "Creating";
      DocumentStatus2["Deleting"] = "Deleting";
      DocumentStatus2["Failed"] = "Failed";
      DocumentStatus2["Updating"] = "Updating";
    })(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
    var DocumentAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentAlreadyExists.prototype);
        this.Message = opts.Message;
      }
    };
    __name(DocumentAlreadyExists, "DocumentAlreadyExists");
    exports.DocumentAlreadyExists = DocumentAlreadyExists;
    var DocumentLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    __name(DocumentLimitExceeded, "DocumentLimitExceeded");
    exports.DocumentLimitExceeded = DocumentLimitExceeded;
    var InvalidDocumentContent = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDocumentContent, "InvalidDocumentContent");
    exports.InvalidDocumentContent = InvalidDocumentContent;
    var InvalidDocumentSchemaVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentSchemaVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentSchemaVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentSchemaVersion.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDocumentSchemaVersion, "InvalidDocumentSchemaVersion");
    exports.InvalidDocumentSchemaVersion = InvalidDocumentSchemaVersion;
    var MaxDocumentSizeExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "MaxDocumentSizeExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "MaxDocumentSizeExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxDocumentSizeExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    __name(MaxDocumentSizeExceeded, "MaxDocumentSizeExceeded");
    exports.MaxDocumentSizeExceeded = MaxDocumentSizeExceeded;
    var IdempotentParameterMismatch = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatch",
          $fault: "client",
          ...opts
        });
        this.name = "IdempotentParameterMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatch.prototype);
        this.Message = opts.Message;
      }
    };
    __name(IdempotentParameterMismatch, "IdempotentParameterMismatch");
    exports.IdempotentParameterMismatch = IdempotentParameterMismatch;
    var ResourceLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(ResourceLimitExceededException, "ResourceLimitExceededException");
    exports.ResourceLimitExceededException = ResourceLimitExceededException;
    var OpsItemDataType;
    (function(OpsItemDataType2) {
      OpsItemDataType2["SEARCHABLE_STRING"] = "SearchableString";
      OpsItemDataType2["STRING"] = "String";
    })(OpsItemDataType = exports.OpsItemDataType || (exports.OpsItemDataType = {}));
    var OpsItemAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    __name(OpsItemAlreadyExistsException, "OpsItemAlreadyExistsException");
    exports.OpsItemAlreadyExistsException = OpsItemAlreadyExistsException;
    var OpsMetadataAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataAlreadyExistsException.prototype);
      }
    };
    __name(OpsMetadataAlreadyExistsException, "OpsMetadataAlreadyExistsException");
    exports.OpsMetadataAlreadyExistsException = OpsMetadataAlreadyExistsException;
    var OpsMetadataInvalidArgumentException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataInvalidArgumentException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataInvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataInvalidArgumentException.prototype);
      }
    };
    __name(OpsMetadataInvalidArgumentException, "OpsMetadataInvalidArgumentException");
    exports.OpsMetadataInvalidArgumentException = OpsMetadataInvalidArgumentException;
    var OpsMetadataLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataLimitExceededException.prototype);
      }
    };
    __name(OpsMetadataLimitExceededException, "OpsMetadataLimitExceededException");
    exports.OpsMetadataLimitExceededException = OpsMetadataLimitExceededException;
    var OpsMetadataTooManyUpdatesException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataTooManyUpdatesException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataTooManyUpdatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataTooManyUpdatesException.prototype);
      }
    };
    __name(OpsMetadataTooManyUpdatesException, "OpsMetadataTooManyUpdatesException");
    exports.OpsMetadataTooManyUpdatesException = OpsMetadataTooManyUpdatesException;
    var PatchComplianceLevel;
    (function(PatchComplianceLevel2) {
      PatchComplianceLevel2["Critical"] = "CRITICAL";
      PatchComplianceLevel2["High"] = "HIGH";
      PatchComplianceLevel2["Informational"] = "INFORMATIONAL";
      PatchComplianceLevel2["Low"] = "LOW";
      PatchComplianceLevel2["Medium"] = "MEDIUM";
      PatchComplianceLevel2["Unspecified"] = "UNSPECIFIED";
    })(PatchComplianceLevel = exports.PatchComplianceLevel || (exports.PatchComplianceLevel = {}));
    var PatchFilterKey;
    (function(PatchFilterKey2) {
      PatchFilterKey2["AdvisoryId"] = "ADVISORY_ID";
      PatchFilterKey2["Arch"] = "ARCH";
      PatchFilterKey2["BugzillaId"] = "BUGZILLA_ID";
      PatchFilterKey2["CVEId"] = "CVE_ID";
      PatchFilterKey2["Classification"] = "CLASSIFICATION";
      PatchFilterKey2["Epoch"] = "EPOCH";
      PatchFilterKey2["MsrcSeverity"] = "MSRC_SEVERITY";
      PatchFilterKey2["Name"] = "NAME";
      PatchFilterKey2["PatchId"] = "PATCH_ID";
      PatchFilterKey2["PatchSet"] = "PATCH_SET";
      PatchFilterKey2["Priority"] = "PRIORITY";
      PatchFilterKey2["Product"] = "PRODUCT";
      PatchFilterKey2["ProductFamily"] = "PRODUCT_FAMILY";
      PatchFilterKey2["Release"] = "RELEASE";
      PatchFilterKey2["Repository"] = "REPOSITORY";
      PatchFilterKey2["Section"] = "SECTION";
      PatchFilterKey2["Security"] = "SECURITY";
      PatchFilterKey2["Severity"] = "SEVERITY";
      PatchFilterKey2["Version"] = "VERSION";
    })(PatchFilterKey = exports.PatchFilterKey || (exports.PatchFilterKey = {}));
    var OperatingSystem;
    (function(OperatingSystem2) {
      OperatingSystem2["AmazonLinux"] = "AMAZON_LINUX";
      OperatingSystem2["AmazonLinux2"] = "AMAZON_LINUX_2";
      OperatingSystem2["AmazonLinux2022"] = "AMAZON_LINUX_2022";
      OperatingSystem2["CentOS"] = "CENTOS";
      OperatingSystem2["Debian"] = "DEBIAN";
      OperatingSystem2["MacOS"] = "MACOS";
      OperatingSystem2["OracleLinux"] = "ORACLE_LINUX";
      OperatingSystem2["Raspbian"] = "RASPBIAN";
      OperatingSystem2["RedhatEnterpriseLinux"] = "REDHAT_ENTERPRISE_LINUX";
      OperatingSystem2["Rocky_Linux"] = "ROCKY_LINUX";
      OperatingSystem2["Suse"] = "SUSE";
      OperatingSystem2["Ubuntu"] = "UBUNTU";
      OperatingSystem2["Windows"] = "WINDOWS";
    })(OperatingSystem = exports.OperatingSystem || (exports.OperatingSystem = {}));
    var PatchAction;
    (function(PatchAction2) {
      PatchAction2["AllowAsDependency"] = "ALLOW_AS_DEPENDENCY";
      PatchAction2["Block"] = "BLOCK";
    })(PatchAction = exports.PatchAction || (exports.PatchAction = {}));
    var ResourceDataSyncS3Format;
    (function(ResourceDataSyncS3Format2) {
      ResourceDataSyncS3Format2["JSON_SERDE"] = "JsonSerDe";
    })(ResourceDataSyncS3Format = exports.ResourceDataSyncS3Format || (exports.ResourceDataSyncS3Format = {}));
    var ResourceDataSyncAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncAlreadyExistsException.prototype);
        this.SyncName = opts.SyncName;
      }
    };
    __name(ResourceDataSyncAlreadyExistsException, "ResourceDataSyncAlreadyExistsException");
    exports.ResourceDataSyncAlreadyExistsException = ResourceDataSyncAlreadyExistsException;
    var ResourceDataSyncCountExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncCountExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncCountExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncCountExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(ResourceDataSyncCountExceededException, "ResourceDataSyncCountExceededException");
    exports.ResourceDataSyncCountExceededException = ResourceDataSyncCountExceededException;
    var ResourceDataSyncInvalidConfigurationException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncInvalidConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncInvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncInvalidConfigurationException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(ResourceDataSyncInvalidConfigurationException, "ResourceDataSyncInvalidConfigurationException");
    exports.ResourceDataSyncInvalidConfigurationException = ResourceDataSyncInvalidConfigurationException;
    var InvalidActivation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivation.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidActivation, "InvalidActivation");
    exports.InvalidActivation = InvalidActivation;
    var InvalidActivationId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivationId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivationId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivationId.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidActivationId, "InvalidActivationId");
    exports.InvalidActivationId = InvalidActivationId;
    var AssociationDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AssociationDoesNotExist, "AssociationDoesNotExist");
    exports.AssociationDoesNotExist = AssociationDoesNotExist;
    var AssociatedInstances = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociatedInstances",
          $fault: "client",
          ...opts
        });
        this.name = "AssociatedInstances";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociatedInstances.prototype);
      }
    };
    __name(AssociatedInstances, "AssociatedInstances");
    exports.AssociatedInstances = AssociatedInstances;
    var InvalidDocumentOperation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentOperation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentOperation.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDocumentOperation, "InvalidDocumentOperation");
    exports.InvalidDocumentOperation = InvalidDocumentOperation;
    var InventorySchemaDeleteOption;
    (function(InventorySchemaDeleteOption2) {
      InventorySchemaDeleteOption2["DELETE_SCHEMA"] = "DeleteSchema";
      InventorySchemaDeleteOption2["DISABLE_SCHEMA"] = "DisableSchema";
    })(InventorySchemaDeleteOption = exports.InventorySchemaDeleteOption || (exports.InventorySchemaDeleteOption = {}));
    var InvalidDeleteInventoryParametersException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeleteInventoryParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeleteInventoryParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeleteInventoryParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDeleteInventoryParametersException, "InvalidDeleteInventoryParametersException");
    exports.InvalidDeleteInventoryParametersException = InvalidDeleteInventoryParametersException;
    var InvalidInventoryRequestException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryRequestException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidInventoryRequestException, "InvalidInventoryRequestException");
    exports.InvalidInventoryRequestException = InvalidInventoryRequestException;
    var InvalidOptionException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOptionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOptionException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidOptionException, "InvalidOptionException");
    exports.InvalidOptionException = InvalidOptionException;
    var InvalidTypeNameException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTypeNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTypeNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTypeNameException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidTypeNameException, "InvalidTypeNameException");
    exports.InvalidTypeNameException = InvalidTypeNameException;
    var OpsMetadataNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataNotFoundException.prototype);
      }
    };
    __name(OpsMetadataNotFoundException, "OpsMetadataNotFoundException");
    exports.OpsMetadataNotFoundException = OpsMetadataNotFoundException;
    var ParameterNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterNotFound.prototype);
      }
    };
    __name(ParameterNotFound, "ParameterNotFound");
    exports.ParameterNotFound = ParameterNotFound;
    var ResourceInUseException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(ResourceInUseException, "ResourceInUseException");
    exports.ResourceInUseException = ResourceInUseException;
    var ResourceDataSyncNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncNotFoundException.prototype);
        this.SyncName = opts.SyncName;
        this.SyncType = opts.SyncType;
        this.Message = opts.Message;
      }
    };
    __name(ResourceDataSyncNotFoundException, "ResourceDataSyncNotFoundException");
    exports.ResourceDataSyncNotFoundException = ResourceDataSyncNotFoundException;
    var TargetInUseException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "TargetInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(TargetInUseException, "TargetInUseException");
    exports.TargetInUseException = TargetInUseException;
    var DescribeActivationsFilterKeys;
    (function(DescribeActivationsFilterKeys2) {
      DescribeActivationsFilterKeys2["ACTIVATION_IDS"] = "ActivationIds";
      DescribeActivationsFilterKeys2["DEFAULT_INSTANCE_NAME"] = "DefaultInstanceName";
      DescribeActivationsFilterKeys2["IAM_ROLE"] = "IamRole";
    })(DescribeActivationsFilterKeys = exports.DescribeActivationsFilterKeys || (exports.DescribeActivationsFilterKeys = {}));
    var InvalidFilter = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilter",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilter";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilter.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidFilter, "InvalidFilter");
    exports.InvalidFilter = InvalidFilter;
    var InvalidNextToken = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNextToken",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidNextToken, "InvalidNextToken");
    exports.InvalidNextToken = InvalidNextToken;
    var InvalidAssociationVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociationVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociationVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociationVersion.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidAssociationVersion, "InvalidAssociationVersion");
    exports.InvalidAssociationVersion = InvalidAssociationVersion;
    var AssociationExecutionFilterKey;
    (function(AssociationExecutionFilterKey2) {
      AssociationExecutionFilterKey2["CreatedTime"] = "CreatedTime";
      AssociationExecutionFilterKey2["ExecutionId"] = "ExecutionId";
      AssociationExecutionFilterKey2["Status"] = "Status";
    })(AssociationExecutionFilterKey = exports.AssociationExecutionFilterKey || (exports.AssociationExecutionFilterKey = {}));
    var AssociationFilterOperatorType;
    (function(AssociationFilterOperatorType2) {
      AssociationFilterOperatorType2["Equal"] = "EQUAL";
      AssociationFilterOperatorType2["GreaterThan"] = "GREATER_THAN";
      AssociationFilterOperatorType2["LessThan"] = "LESS_THAN";
    })(AssociationFilterOperatorType = exports.AssociationFilterOperatorType || (exports.AssociationFilterOperatorType = {}));
    var AssociationExecutionDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationExecutionDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationExecutionDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationExecutionDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AssociationExecutionDoesNotExist, "AssociationExecutionDoesNotExist");
    exports.AssociationExecutionDoesNotExist = AssociationExecutionDoesNotExist;
    var AssociationExecutionTargetsFilterKey;
    (function(AssociationExecutionTargetsFilterKey2) {
      AssociationExecutionTargetsFilterKey2["ResourceId"] = "ResourceId";
      AssociationExecutionTargetsFilterKey2["ResourceType"] = "ResourceType";
      AssociationExecutionTargetsFilterKey2["Status"] = "Status";
    })(AssociationExecutionTargetsFilterKey = exports.AssociationExecutionTargetsFilterKey || (exports.AssociationExecutionTargetsFilterKey = {}));
    var AutomationExecutionFilterKey;
    (function(AutomationExecutionFilterKey2) {
      AutomationExecutionFilterKey2["AUTOMATION_SUBTYPE"] = "AutomationSubtype";
      AutomationExecutionFilterKey2["AUTOMATION_TYPE"] = "AutomationType";
      AutomationExecutionFilterKey2["CURRENT_ACTION"] = "CurrentAction";
      AutomationExecutionFilterKey2["DOCUMENT_NAME_PREFIX"] = "DocumentNamePrefix";
      AutomationExecutionFilterKey2["EXECUTION_ID"] = "ExecutionId";
      AutomationExecutionFilterKey2["EXECUTION_STATUS"] = "ExecutionStatus";
      AutomationExecutionFilterKey2["OPS_ITEM_ID"] = "OpsItemId";
      AutomationExecutionFilterKey2["PARENT_EXECUTION_ID"] = "ParentExecutionId";
      AutomationExecutionFilterKey2["START_TIME_AFTER"] = "StartTimeAfter";
      AutomationExecutionFilterKey2["START_TIME_BEFORE"] = "StartTimeBefore";
      AutomationExecutionFilterKey2["TAG_KEY"] = "TagKey";
      AutomationExecutionFilterKey2["TARGET_RESOURCE_GROUP"] = "TargetResourceGroup";
    })(AutomationExecutionFilterKey = exports.AutomationExecutionFilterKey || (exports.AutomationExecutionFilterKey = {}));
    var AutomationExecutionStatus;
    (function(AutomationExecutionStatus2) {
      AutomationExecutionStatus2["APPROVED"] = "Approved";
      AutomationExecutionStatus2["CANCELLED"] = "Cancelled";
      AutomationExecutionStatus2["CANCELLING"] = "Cancelling";
      AutomationExecutionStatus2["CHANGE_CALENDAR_OVERRIDE_APPROVED"] = "ChangeCalendarOverrideApproved";
      AutomationExecutionStatus2["CHANGE_CALENDAR_OVERRIDE_REJECTED"] = "ChangeCalendarOverrideRejected";
      AutomationExecutionStatus2["COMPLETED_WITH_FAILURE"] = "CompletedWithFailure";
      AutomationExecutionStatus2["COMPLETED_WITH_SUCCESS"] = "CompletedWithSuccess";
      AutomationExecutionStatus2["FAILED"] = "Failed";
      AutomationExecutionStatus2["INPROGRESS"] = "InProgress";
      AutomationExecutionStatus2["PENDING"] = "Pending";
      AutomationExecutionStatus2["PENDING_APPROVAL"] = "PendingApproval";
      AutomationExecutionStatus2["PENDING_CHANGE_CALENDAR_OVERRIDE"] = "PendingChangeCalendarOverride";
      AutomationExecutionStatus2["REJECTED"] = "Rejected";
      AutomationExecutionStatus2["RUNBOOK_INPROGRESS"] = "RunbookInProgress";
      AutomationExecutionStatus2["SCHEDULED"] = "Scheduled";
      AutomationExecutionStatus2["SUCCESS"] = "Success";
      AutomationExecutionStatus2["TIMEDOUT"] = "TimedOut";
      AutomationExecutionStatus2["WAITING"] = "Waiting";
    })(AutomationExecutionStatus = exports.AutomationExecutionStatus || (exports.AutomationExecutionStatus = {}));
    var AutomationSubtype;
    (function(AutomationSubtype2) {
      AutomationSubtype2["ChangeRequest"] = "ChangeRequest";
    })(AutomationSubtype = exports.AutomationSubtype || (exports.AutomationSubtype = {}));
    var AutomationType;
    (function(AutomationType2) {
      AutomationType2["CrossAccount"] = "CrossAccount";
      AutomationType2["Local"] = "Local";
    })(AutomationType = exports.AutomationType || (exports.AutomationType = {}));
    var ExecutionMode;
    (function(ExecutionMode2) {
      ExecutionMode2["Auto"] = "Auto";
      ExecutionMode2["Interactive"] = "Interactive";
    })(ExecutionMode = exports.ExecutionMode || (exports.ExecutionMode = {}));
    var InvalidFilterKey = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterKey",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterKey.prototype);
      }
    };
    __name(InvalidFilterKey, "InvalidFilterKey");
    exports.InvalidFilterKey = InvalidFilterKey;
    var InvalidFilterValue = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterValue.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidFilterValue, "InvalidFilterValue");
    exports.InvalidFilterValue = InvalidFilterValue;
    var AutomationExecutionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AutomationExecutionNotFoundException, "AutomationExecutionNotFoundException");
    exports.AutomationExecutionNotFoundException = AutomationExecutionNotFoundException;
    var StepExecutionFilterKey;
    (function(StepExecutionFilterKey2) {
      StepExecutionFilterKey2["ACTION"] = "Action";
      StepExecutionFilterKey2["START_TIME_AFTER"] = "StartTimeAfter";
      StepExecutionFilterKey2["START_TIME_BEFORE"] = "StartTimeBefore";
      StepExecutionFilterKey2["STEP_EXECUTION_ID"] = "StepExecutionId";
      StepExecutionFilterKey2["STEP_EXECUTION_STATUS"] = "StepExecutionStatus";
      StepExecutionFilterKey2["STEP_NAME"] = "StepName";
    })(StepExecutionFilterKey = exports.StepExecutionFilterKey || (exports.StepExecutionFilterKey = {}));
    var DocumentPermissionType;
    (function(DocumentPermissionType2) {
      DocumentPermissionType2["SHARE"] = "Share";
    })(DocumentPermissionType = exports.DocumentPermissionType || (exports.DocumentPermissionType = {}));
    var InvalidPermissionType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPermissionType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPermissionType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPermissionType.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidPermissionType, "InvalidPermissionType");
    exports.InvalidPermissionType = InvalidPermissionType;
    var PatchDeploymentStatus;
    (function(PatchDeploymentStatus2) {
      PatchDeploymentStatus2["Approved"] = "APPROVED";
      PatchDeploymentStatus2["ExplicitApproved"] = "EXPLICIT_APPROVED";
      PatchDeploymentStatus2["ExplicitRejected"] = "EXPLICIT_REJECTED";
      PatchDeploymentStatus2["PendingApproval"] = "PENDING_APPROVAL";
    })(PatchDeploymentStatus = exports.PatchDeploymentStatus || (exports.PatchDeploymentStatus = {}));
    var UnsupportedOperatingSystem = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedOperatingSystem",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedOperatingSystem";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperatingSystem.prototype);
        this.Message = opts.Message;
      }
    };
    __name(UnsupportedOperatingSystem, "UnsupportedOperatingSystem");
    exports.UnsupportedOperatingSystem = UnsupportedOperatingSystem;
    var InstanceInformationFilterKey;
    (function(InstanceInformationFilterKey2) {
      InstanceInformationFilterKey2["ACTIVATION_IDS"] = "ActivationIds";
      InstanceInformationFilterKey2["AGENT_VERSION"] = "AgentVersion";
      InstanceInformationFilterKey2["ASSOCIATION_STATUS"] = "AssociationStatus";
      InstanceInformationFilterKey2["IAM_ROLE"] = "IamRole";
      InstanceInformationFilterKey2["INSTANCE_IDS"] = "InstanceIds";
      InstanceInformationFilterKey2["PING_STATUS"] = "PingStatus";
      InstanceInformationFilterKey2["PLATFORM_TYPES"] = "PlatformTypes";
      InstanceInformationFilterKey2["RESOURCE_TYPE"] = "ResourceType";
    })(InstanceInformationFilterKey = exports.InstanceInformationFilterKey || (exports.InstanceInformationFilterKey = {}));
    var PingStatus;
    (function(PingStatus2) {
      PingStatus2["CONNECTION_LOST"] = "ConnectionLost";
      PingStatus2["INACTIVE"] = "Inactive";
      PingStatus2["ONLINE"] = "Online";
    })(PingStatus = exports.PingStatus || (exports.PingStatus = {}));
    var ResourceType;
    (function(ResourceType2) {
      ResourceType2["DOCUMENT"] = "Document";
      ResourceType2["EC2_INSTANCE"] = "EC2Instance";
      ResourceType2["MANAGED_INSTANCE"] = "ManagedInstance";
    })(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
    var SourceType;
    (function(SourceType2) {
      SourceType2["AWS_EC2_INSTANCE"] = "AWS::EC2::Instance";
      SourceType2["AWS_IOT_THING"] = "AWS::IoT::Thing";
      SourceType2["AWS_SSM_MANAGEDINSTANCE"] = "AWS::SSM::ManagedInstance";
    })(SourceType = exports.SourceType || (exports.SourceType = {}));
    var InvalidInstanceInformationFilterValue = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceInformationFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceInformationFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceInformationFilterValue.prototype);
      }
    };
    __name(InvalidInstanceInformationFilterValue, "InvalidInstanceInformationFilterValue");
    exports.InvalidInstanceInformationFilterValue = InvalidInstanceInformationFilterValue;
    var PatchComplianceDataState;
    (function(PatchComplianceDataState2) {
      PatchComplianceDataState2["Failed"] = "FAILED";
      PatchComplianceDataState2["Installed"] = "INSTALLED";
      PatchComplianceDataState2["InstalledOther"] = "INSTALLED_OTHER";
      PatchComplianceDataState2["InstalledPendingReboot"] = "INSTALLED_PENDING_REBOOT";
      PatchComplianceDataState2["InstalledRejected"] = "INSTALLED_REJECTED";
      PatchComplianceDataState2["Missing"] = "MISSING";
      PatchComplianceDataState2["NotApplicable"] = "NOT_APPLICABLE";
    })(PatchComplianceDataState = exports.PatchComplianceDataState || (exports.PatchComplianceDataState = {}));
    var PatchOperationType;
    (function(PatchOperationType2) {
      PatchOperationType2["INSTALL"] = "Install";
      PatchOperationType2["SCAN"] = "Scan";
    })(PatchOperationType = exports.PatchOperationType || (exports.PatchOperationType = {}));
    var RebootOption;
    (function(RebootOption2) {
      RebootOption2["NO_REBOOT"] = "NoReboot";
      RebootOption2["REBOOT_IF_NEEDED"] = "RebootIfNeeded";
    })(RebootOption = exports.RebootOption || (exports.RebootOption = {}));
    var InstancePatchStateOperatorType;
    (function(InstancePatchStateOperatorType2) {
      InstancePatchStateOperatorType2["EQUAL"] = "Equal";
      InstancePatchStateOperatorType2["GREATER_THAN"] = "GreaterThan";
      InstancePatchStateOperatorType2["LESS_THAN"] = "LessThan";
      InstancePatchStateOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(InstancePatchStateOperatorType = exports.InstancePatchStateOperatorType || (exports.InstancePatchStateOperatorType = {}));
    var InventoryDeletionStatus;
    (function(InventoryDeletionStatus2) {
      InventoryDeletionStatus2["COMPLETE"] = "Complete";
      InventoryDeletionStatus2["IN_PROGRESS"] = "InProgress";
    })(InventoryDeletionStatus = exports.InventoryDeletionStatus || (exports.InventoryDeletionStatus = {}));
    var InvalidDeletionIdException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeletionIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeletionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeletionIdException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDeletionIdException, "InvalidDeletionIdException");
    exports.InvalidDeletionIdException = InvalidDeletionIdException;
    var MaintenanceWindowExecutionStatus;
    (function(MaintenanceWindowExecutionStatus2) {
      MaintenanceWindowExecutionStatus2["Cancelled"] = "CANCELLED";
      MaintenanceWindowExecutionStatus2["Cancelling"] = "CANCELLING";
      MaintenanceWindowExecutionStatus2["Failed"] = "FAILED";
      MaintenanceWindowExecutionStatus2["InProgress"] = "IN_PROGRESS";
      MaintenanceWindowExecutionStatus2["Pending"] = "PENDING";
      MaintenanceWindowExecutionStatus2["SkippedOverlapping"] = "SKIPPED_OVERLAPPING";
      MaintenanceWindowExecutionStatus2["Success"] = "SUCCESS";
      MaintenanceWindowExecutionStatus2["TimedOut"] = "TIMED_OUT";
    })(MaintenanceWindowExecutionStatus = exports.MaintenanceWindowExecutionStatus || (exports.MaintenanceWindowExecutionStatus = {}));
    var MaintenanceWindowTaskType;
    (function(MaintenanceWindowTaskType2) {
      MaintenanceWindowTaskType2["Automation"] = "AUTOMATION";
      MaintenanceWindowTaskType2["Lambda"] = "LAMBDA";
      MaintenanceWindowTaskType2["RunCommand"] = "RUN_COMMAND";
      MaintenanceWindowTaskType2["StepFunctions"] = "STEP_FUNCTIONS";
    })(MaintenanceWindowTaskType = exports.MaintenanceWindowTaskType || (exports.MaintenanceWindowTaskType = {}));
    var MaintenanceWindowResourceType;
    (function(MaintenanceWindowResourceType2) {
      MaintenanceWindowResourceType2["Instance"] = "INSTANCE";
      MaintenanceWindowResourceType2["ResourceGroup"] = "RESOURCE_GROUP";
    })(MaintenanceWindowResourceType = exports.MaintenanceWindowResourceType || (exports.MaintenanceWindowResourceType = {}));
    var MaintenanceWindowTaskCutoffBehavior;
    (function(MaintenanceWindowTaskCutoffBehavior2) {
      MaintenanceWindowTaskCutoffBehavior2["CancelTask"] = "CANCEL_TASK";
      MaintenanceWindowTaskCutoffBehavior2["ContinueTask"] = "CONTINUE_TASK";
    })(MaintenanceWindowTaskCutoffBehavior = exports.MaintenanceWindowTaskCutoffBehavior || (exports.MaintenanceWindowTaskCutoffBehavior = {}));
    var OpsItemFilterKey;
    (function(OpsItemFilterKey2) {
      OpsItemFilterKey2["ACTUAL_END_TIME"] = "ActualEndTime";
      OpsItemFilterKey2["ACTUAL_START_TIME"] = "ActualStartTime";
      OpsItemFilterKey2["AUTOMATION_ID"] = "AutomationId";
      OpsItemFilterKey2["CATEGORY"] = "Category";
      OpsItemFilterKey2["CHANGE_REQUEST_APPROVER_ARN"] = "ChangeRequestByApproverArn";
      OpsItemFilterKey2["CHANGE_REQUEST_APPROVER_NAME"] = "ChangeRequestByApproverName";
      OpsItemFilterKey2["CHANGE_REQUEST_REQUESTER_ARN"] = "ChangeRequestByRequesterArn";
      OpsItemFilterKey2["CHANGE_REQUEST_REQUESTER_NAME"] = "ChangeRequestByRequesterName";
      OpsItemFilterKey2["CHANGE_REQUEST_TARGETS_RESOURCE_GROUP"] = "ChangeRequestByTargetsResourceGroup";
      OpsItemFilterKey2["CHANGE_REQUEST_TEMPLATE"] = "ChangeRequestByTemplate";
      OpsItemFilterKey2["CREATED_BY"] = "CreatedBy";
      OpsItemFilterKey2["CREATED_TIME"] = "CreatedTime";
      OpsItemFilterKey2["INSIGHT_TYPE"] = "InsightByType";
      OpsItemFilterKey2["LAST_MODIFIED_TIME"] = "LastModifiedTime";
      OpsItemFilterKey2["OPERATIONAL_DATA"] = "OperationalData";
      OpsItemFilterKey2["OPERATIONAL_DATA_KEY"] = "OperationalDataKey";
      OpsItemFilterKey2["OPERATIONAL_DATA_VALUE"] = "OperationalDataValue";
      OpsItemFilterKey2["OPSITEM_ID"] = "OpsItemId";
      OpsItemFilterKey2["OPSITEM_TYPE"] = "OpsItemType";
      OpsItemFilterKey2["PLANNED_END_TIME"] = "PlannedEndTime";
      OpsItemFilterKey2["PLANNED_START_TIME"] = "PlannedStartTime";
      OpsItemFilterKey2["PRIORITY"] = "Priority";
      OpsItemFilterKey2["RESOURCE_ID"] = "ResourceId";
      OpsItemFilterKey2["SEVERITY"] = "Severity";
      OpsItemFilterKey2["SOURCE"] = "Source";
      OpsItemFilterKey2["STATUS"] = "Status";
      OpsItemFilterKey2["TITLE"] = "Title";
    })(OpsItemFilterKey = exports.OpsItemFilterKey || (exports.OpsItemFilterKey = {}));
    var OpsItemFilterOperator;
    (function(OpsItemFilterOperator2) {
      OpsItemFilterOperator2["CONTAINS"] = "Contains";
      OpsItemFilterOperator2["EQUAL"] = "Equal";
      OpsItemFilterOperator2["GREATER_THAN"] = "GreaterThan";
      OpsItemFilterOperator2["LESS_THAN"] = "LessThan";
    })(OpsItemFilterOperator = exports.OpsItemFilterOperator || (exports.OpsItemFilterOperator = {}));
    var OpsItemStatus;
    (function(OpsItemStatus2) {
      OpsItemStatus2["APPROVED"] = "Approved";
      OpsItemStatus2["CANCELLED"] = "Cancelled";
      OpsItemStatus2["CANCELLING"] = "Cancelling";
      OpsItemStatus2["CHANGE_CALENDAR_OVERRIDE_APPROVED"] = "ChangeCalendarOverrideApproved";
      OpsItemStatus2["CHANGE_CALENDAR_OVERRIDE_REJECTED"] = "ChangeCalendarOverrideRejected";
      OpsItemStatus2["CLOSED"] = "Closed";
      OpsItemStatus2["COMPLETED_WITH_FAILURE"] = "CompletedWithFailure";
      OpsItemStatus2["COMPLETED_WITH_SUCCESS"] = "CompletedWithSuccess";
      OpsItemStatus2["FAILED"] = "Failed";
      OpsItemStatus2["IN_PROGRESS"] = "InProgress";
      OpsItemStatus2["OPEN"] = "Open";
      OpsItemStatus2["PENDING"] = "Pending";
      OpsItemStatus2["PENDING_APPROVAL"] = "PendingApproval";
      OpsItemStatus2["PENDING_CHANGE_CALENDAR_OVERRIDE"] = "PendingChangeCalendarOverride";
      OpsItemStatus2["REJECTED"] = "Rejected";
      OpsItemStatus2["RESOLVED"] = "Resolved";
      OpsItemStatus2["RUNBOOK_IN_PROGRESS"] = "RunbookInProgress";
      OpsItemStatus2["SCHEDULED"] = "Scheduled";
      OpsItemStatus2["TIMED_OUT"] = "TimedOut";
    })(OpsItemStatus = exports.OpsItemStatus || (exports.OpsItemStatus = {}));
    var AccountSharingInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AccountSharingInfoFilterSensitiveLog");
    exports.AccountSharingInfoFilterSensitiveLog = AccountSharingInfoFilterSensitiveLog;
    var TagFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "TagFilterSensitiveLog");
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var ActivationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ActivationFilterSensitiveLog");
    exports.ActivationFilterSensitiveLog = ActivationFilterSensitiveLog;
    var AddTagsToResourceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AddTagsToResourceRequestFilterSensitiveLog");
    exports.AddTagsToResourceRequestFilterSensitiveLog = AddTagsToResourceRequestFilterSensitiveLog;
    var AddTagsToResourceResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AddTagsToResourceResultFilterSensitiveLog");
    exports.AddTagsToResourceResultFilterSensitiveLog = AddTagsToResourceResultFilterSensitiveLog;
    var AlarmFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AlarmFilterSensitiveLog");
    exports.AlarmFilterSensitiveLog = AlarmFilterSensitiveLog;
    var AlarmConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AlarmConfigurationFilterSensitiveLog");
    exports.AlarmConfigurationFilterSensitiveLog = AlarmConfigurationFilterSensitiveLog;
    var AlarmStateInformationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AlarmStateInformationFilterSensitiveLog");
    exports.AlarmStateInformationFilterSensitiveLog = AlarmStateInformationFilterSensitiveLog;
    var AssociateOpsItemRelatedItemRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociateOpsItemRelatedItemRequestFilterSensitiveLog");
    exports.AssociateOpsItemRelatedItemRequestFilterSensitiveLog = AssociateOpsItemRelatedItemRequestFilterSensitiveLog;
    var AssociateOpsItemRelatedItemResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociateOpsItemRelatedItemResponseFilterSensitiveLog");
    exports.AssociateOpsItemRelatedItemResponseFilterSensitiveLog = AssociateOpsItemRelatedItemResponseFilterSensitiveLog;
    var CancelCommandRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CancelCommandRequestFilterSensitiveLog");
    exports.CancelCommandRequestFilterSensitiveLog = CancelCommandRequestFilterSensitiveLog;
    var CancelCommandResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CancelCommandResultFilterSensitiveLog");
    exports.CancelCommandResultFilterSensitiveLog = CancelCommandResultFilterSensitiveLog;
    var CancelMaintenanceWindowExecutionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CancelMaintenanceWindowExecutionRequestFilterSensitiveLog");
    exports.CancelMaintenanceWindowExecutionRequestFilterSensitiveLog = CancelMaintenanceWindowExecutionRequestFilterSensitiveLog;
    var CancelMaintenanceWindowExecutionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CancelMaintenanceWindowExecutionResultFilterSensitiveLog");
    exports.CancelMaintenanceWindowExecutionResultFilterSensitiveLog = CancelMaintenanceWindowExecutionResultFilterSensitiveLog;
    var RegistrationMetadataItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RegistrationMetadataItemFilterSensitiveLog");
    exports.RegistrationMetadataItemFilterSensitiveLog = RegistrationMetadataItemFilterSensitiveLog;
    var CreateActivationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateActivationRequestFilterSensitiveLog");
    exports.CreateActivationRequestFilterSensitiveLog = CreateActivationRequestFilterSensitiveLog;
    var CreateActivationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateActivationResultFilterSensitiveLog");
    exports.CreateActivationResultFilterSensitiveLog = CreateActivationResultFilterSensitiveLog;
    var S3OutputLocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "S3OutputLocationFilterSensitiveLog");
    exports.S3OutputLocationFilterSensitiveLog = S3OutputLocationFilterSensitiveLog;
    var InstanceAssociationOutputLocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceAssociationOutputLocationFilterSensitiveLog");
    exports.InstanceAssociationOutputLocationFilterSensitiveLog = InstanceAssociationOutputLocationFilterSensitiveLog;
    var TargetLocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "TargetLocationFilterSensitiveLog");
    exports.TargetLocationFilterSensitiveLog = TargetLocationFilterSensitiveLog;
    var TargetFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "TargetFilterSensitiveLog");
    exports.TargetFilterSensitiveLog = TargetFilterSensitiveLog;
    var CreateAssociationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "CreateAssociationRequestFilterSensitiveLog");
    exports.CreateAssociationRequestFilterSensitiveLog = CreateAssociationRequestFilterSensitiveLog;
    var AssociationOverviewFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationOverviewFilterSensitiveLog");
    exports.AssociationOverviewFilterSensitiveLog = AssociationOverviewFilterSensitiveLog;
    var AssociationStatusFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationStatusFilterSensitiveLog");
    exports.AssociationStatusFilterSensitiveLog = AssociationStatusFilterSensitiveLog;
    var AssociationDescriptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "AssociationDescriptionFilterSensitiveLog");
    exports.AssociationDescriptionFilterSensitiveLog = AssociationDescriptionFilterSensitiveLog;
    var CreateAssociationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    }), "CreateAssociationResultFilterSensitiveLog");
    exports.CreateAssociationResultFilterSensitiveLog = CreateAssociationResultFilterSensitiveLog;
    var CreateAssociationBatchRequestEntryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "CreateAssociationBatchRequestEntryFilterSensitiveLog");
    exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = CreateAssociationBatchRequestEntryFilterSensitiveLog;
    var CreateAssociationBatchRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Entries && {
        Entries: obj.Entries.map((item) => (0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(item))
      }
    }), "CreateAssociationBatchRequestFilterSensitiveLog");
    exports.CreateAssociationBatchRequestFilterSensitiveLog = CreateAssociationBatchRequestFilterSensitiveLog;
    var FailedCreateAssociationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Entry && { Entry: (0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(obj.Entry) }
    }), "FailedCreateAssociationFilterSensitiveLog");
    exports.FailedCreateAssociationFilterSensitiveLog = FailedCreateAssociationFilterSensitiveLog;
    var CreateAssociationBatchResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Successful && { Successful: obj.Successful.map((item) => (0, exports.AssociationDescriptionFilterSensitiveLog)(item)) },
      ...obj.Failed && { Failed: obj.Failed.map((item) => (0, exports.FailedCreateAssociationFilterSensitiveLog)(item)) }
    }), "CreateAssociationBatchResultFilterSensitiveLog");
    exports.CreateAssociationBatchResultFilterSensitiveLog = CreateAssociationBatchResultFilterSensitiveLog;
    var AttachmentsSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AttachmentsSourceFilterSensitiveLog");
    exports.AttachmentsSourceFilterSensitiveLog = AttachmentsSourceFilterSensitiveLog;
    var DocumentRequiresFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentRequiresFilterSensitiveLog");
    exports.DocumentRequiresFilterSensitiveLog = DocumentRequiresFilterSensitiveLog;
    var CreateDocumentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateDocumentRequestFilterSensitiveLog");
    exports.CreateDocumentRequestFilterSensitiveLog = CreateDocumentRequestFilterSensitiveLog;
    var AttachmentInformationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AttachmentInformationFilterSensitiveLog");
    exports.AttachmentInformationFilterSensitiveLog = AttachmentInformationFilterSensitiveLog;
    var DocumentParameterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentParameterFilterSensitiveLog");
    exports.DocumentParameterFilterSensitiveLog = DocumentParameterFilterSensitiveLog;
    var ReviewInformationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ReviewInformationFilterSensitiveLog");
    exports.ReviewInformationFilterSensitiveLog = ReviewInformationFilterSensitiveLog;
    var DocumentDescriptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentDescriptionFilterSensitiveLog");
    exports.DocumentDescriptionFilterSensitiveLog = DocumentDescriptionFilterSensitiveLog;
    var CreateDocumentResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateDocumentResultFilterSensitiveLog");
    exports.CreateDocumentResultFilterSensitiveLog = CreateDocumentResultFilterSensitiveLog;
    var CreateMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "CreateMaintenanceWindowRequestFilterSensitiveLog");
    exports.CreateMaintenanceWindowRequestFilterSensitiveLog = CreateMaintenanceWindowRequestFilterSensitiveLog;
    var CreateMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateMaintenanceWindowResultFilterSensitiveLog");
    exports.CreateMaintenanceWindowResultFilterSensitiveLog = CreateMaintenanceWindowResultFilterSensitiveLog;
    var OpsItemNotificationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemNotificationFilterSensitiveLog");
    exports.OpsItemNotificationFilterSensitiveLog = OpsItemNotificationFilterSensitiveLog;
    var OpsItemDataValueFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemDataValueFilterSensitiveLog");
    exports.OpsItemDataValueFilterSensitiveLog = OpsItemDataValueFilterSensitiveLog;
    var RelatedOpsItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RelatedOpsItemFilterSensitiveLog");
    exports.RelatedOpsItemFilterSensitiveLog = RelatedOpsItemFilterSensitiveLog;
    var CreateOpsItemRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateOpsItemRequestFilterSensitiveLog");
    exports.CreateOpsItemRequestFilterSensitiveLog = CreateOpsItemRequestFilterSensitiveLog;
    var CreateOpsItemResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateOpsItemResponseFilterSensitiveLog");
    exports.CreateOpsItemResponseFilterSensitiveLog = CreateOpsItemResponseFilterSensitiveLog;
    var MetadataValueFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "MetadataValueFilterSensitiveLog");
    exports.MetadataValueFilterSensitiveLog = MetadataValueFilterSensitiveLog;
    var CreateOpsMetadataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateOpsMetadataRequestFilterSensitiveLog");
    exports.CreateOpsMetadataRequestFilterSensitiveLog = CreateOpsMetadataRequestFilterSensitiveLog;
    var CreateOpsMetadataResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateOpsMetadataResultFilterSensitiveLog");
    exports.CreateOpsMetadataResultFilterSensitiveLog = CreateOpsMetadataResultFilterSensitiveLog;
    var PatchFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchFilterFilterSensitiveLog");
    exports.PatchFilterFilterSensitiveLog = PatchFilterFilterSensitiveLog;
    var PatchFilterGroupFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchFilterGroupFilterSensitiveLog");
    exports.PatchFilterGroupFilterSensitiveLog = PatchFilterGroupFilterSensitiveLog;
    var PatchRuleFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchRuleFilterSensitiveLog");
    exports.PatchRuleFilterSensitiveLog = PatchRuleFilterSensitiveLog;
    var PatchRuleGroupFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchRuleGroupFilterSensitiveLog");
    exports.PatchRuleGroupFilterSensitiveLog = PatchRuleGroupFilterSensitiveLog;
    var PatchSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Configuration && { Configuration: smithy_client_1.SENSITIVE_STRING }
    }), "PatchSourceFilterSensitiveLog");
    exports.PatchSourceFilterSensitiveLog = PatchSourceFilterSensitiveLog;
    var CreatePatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, exports.PatchSourceFilterSensitiveLog)(item)) }
    }), "CreatePatchBaselineRequestFilterSensitiveLog");
    exports.CreatePatchBaselineRequestFilterSensitiveLog = CreatePatchBaselineRequestFilterSensitiveLog;
    var CreatePatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreatePatchBaselineResultFilterSensitiveLog");
    exports.CreatePatchBaselineResultFilterSensitiveLog = CreatePatchBaselineResultFilterSensitiveLog;
    var ResourceDataSyncDestinationDataSharingFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceDataSyncDestinationDataSharingFilterSensitiveLog");
    exports.ResourceDataSyncDestinationDataSharingFilterSensitiveLog = ResourceDataSyncDestinationDataSharingFilterSensitiveLog;
    var ResourceDataSyncS3DestinationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceDataSyncS3DestinationFilterSensitiveLog");
    exports.ResourceDataSyncS3DestinationFilterSensitiveLog = ResourceDataSyncS3DestinationFilterSensitiveLog;
    var ResourceDataSyncOrganizationalUnitFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceDataSyncOrganizationalUnitFilterSensitiveLog");
    exports.ResourceDataSyncOrganizationalUnitFilterSensitiveLog = ResourceDataSyncOrganizationalUnitFilterSensitiveLog;
    var ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog");
    exports.ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog = ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog;
    var ResourceDataSyncSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceDataSyncSourceFilterSensitiveLog");
    exports.ResourceDataSyncSourceFilterSensitiveLog = ResourceDataSyncSourceFilterSensitiveLog;
    var CreateResourceDataSyncRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateResourceDataSyncRequestFilterSensitiveLog");
    exports.CreateResourceDataSyncRequestFilterSensitiveLog = CreateResourceDataSyncRequestFilterSensitiveLog;
    var CreateResourceDataSyncResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CreateResourceDataSyncResultFilterSensitiveLog");
    exports.CreateResourceDataSyncResultFilterSensitiveLog = CreateResourceDataSyncResultFilterSensitiveLog;
    var DeleteActivationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteActivationRequestFilterSensitiveLog");
    exports.DeleteActivationRequestFilterSensitiveLog = DeleteActivationRequestFilterSensitiveLog;
    var DeleteActivationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteActivationResultFilterSensitiveLog");
    exports.DeleteActivationResultFilterSensitiveLog = DeleteActivationResultFilterSensitiveLog;
    var DeleteAssociationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteAssociationRequestFilterSensitiveLog");
    exports.DeleteAssociationRequestFilterSensitiveLog = DeleteAssociationRequestFilterSensitiveLog;
    var DeleteAssociationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteAssociationResultFilterSensitiveLog");
    exports.DeleteAssociationResultFilterSensitiveLog = DeleteAssociationResultFilterSensitiveLog;
    var DeleteDocumentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteDocumentRequestFilterSensitiveLog");
    exports.DeleteDocumentRequestFilterSensitiveLog = DeleteDocumentRequestFilterSensitiveLog;
    var DeleteDocumentResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteDocumentResultFilterSensitiveLog");
    exports.DeleteDocumentResultFilterSensitiveLog = DeleteDocumentResultFilterSensitiveLog;
    var DeleteInventoryRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteInventoryRequestFilterSensitiveLog");
    exports.DeleteInventoryRequestFilterSensitiveLog = DeleteInventoryRequestFilterSensitiveLog;
    var InventoryDeletionSummaryItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryDeletionSummaryItemFilterSensitiveLog");
    exports.InventoryDeletionSummaryItemFilterSensitiveLog = InventoryDeletionSummaryItemFilterSensitiveLog;
    var InventoryDeletionSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryDeletionSummaryFilterSensitiveLog");
    exports.InventoryDeletionSummaryFilterSensitiveLog = InventoryDeletionSummaryFilterSensitiveLog;
    var DeleteInventoryResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteInventoryResultFilterSensitiveLog");
    exports.DeleteInventoryResultFilterSensitiveLog = DeleteInventoryResultFilterSensitiveLog;
    var DeleteMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteMaintenanceWindowRequestFilterSensitiveLog");
    exports.DeleteMaintenanceWindowRequestFilterSensitiveLog = DeleteMaintenanceWindowRequestFilterSensitiveLog;
    var DeleteMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteMaintenanceWindowResultFilterSensitiveLog");
    exports.DeleteMaintenanceWindowResultFilterSensitiveLog = DeleteMaintenanceWindowResultFilterSensitiveLog;
    var DeleteOpsMetadataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteOpsMetadataRequestFilterSensitiveLog");
    exports.DeleteOpsMetadataRequestFilterSensitiveLog = DeleteOpsMetadataRequestFilterSensitiveLog;
    var DeleteOpsMetadataResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteOpsMetadataResultFilterSensitiveLog");
    exports.DeleteOpsMetadataResultFilterSensitiveLog = DeleteOpsMetadataResultFilterSensitiveLog;
    var DeleteParameterRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteParameterRequestFilterSensitiveLog");
    exports.DeleteParameterRequestFilterSensitiveLog = DeleteParameterRequestFilterSensitiveLog;
    var DeleteParameterResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteParameterResultFilterSensitiveLog");
    exports.DeleteParameterResultFilterSensitiveLog = DeleteParameterResultFilterSensitiveLog;
    var DeleteParametersRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteParametersRequestFilterSensitiveLog");
    exports.DeleteParametersRequestFilterSensitiveLog = DeleteParametersRequestFilterSensitiveLog;
    var DeleteParametersResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteParametersResultFilterSensitiveLog");
    exports.DeleteParametersResultFilterSensitiveLog = DeleteParametersResultFilterSensitiveLog;
    var DeletePatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeletePatchBaselineRequestFilterSensitiveLog");
    exports.DeletePatchBaselineRequestFilterSensitiveLog = DeletePatchBaselineRequestFilterSensitiveLog;
    var DeletePatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeletePatchBaselineResultFilterSensitiveLog");
    exports.DeletePatchBaselineResultFilterSensitiveLog = DeletePatchBaselineResultFilterSensitiveLog;
    var DeleteResourceDataSyncRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteResourceDataSyncRequestFilterSensitiveLog");
    exports.DeleteResourceDataSyncRequestFilterSensitiveLog = DeleteResourceDataSyncRequestFilterSensitiveLog;
    var DeleteResourceDataSyncResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeleteResourceDataSyncResultFilterSensitiveLog");
    exports.DeleteResourceDataSyncResultFilterSensitiveLog = DeleteResourceDataSyncResultFilterSensitiveLog;
    var DeregisterManagedInstanceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterManagedInstanceRequestFilterSensitiveLog");
    exports.DeregisterManagedInstanceRequestFilterSensitiveLog = DeregisterManagedInstanceRequestFilterSensitiveLog;
    var DeregisterManagedInstanceResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterManagedInstanceResultFilterSensitiveLog");
    exports.DeregisterManagedInstanceResultFilterSensitiveLog = DeregisterManagedInstanceResultFilterSensitiveLog;
    var DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog");
    exports.DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog;
    var DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog");
    exports.DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog = DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog;
    var DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog");
    exports.DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog = DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog;
    var DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog");
    exports.DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog = DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog;
    var DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog");
    exports.DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog = DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog;
    var DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog");
    exports.DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog = DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog;
    var DescribeActivationsFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeActivationsFilterFilterSensitiveLog");
    exports.DescribeActivationsFilterFilterSensitiveLog = DescribeActivationsFilterFilterSensitiveLog;
    var DescribeActivationsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeActivationsRequestFilterSensitiveLog");
    exports.DescribeActivationsRequestFilterSensitiveLog = DescribeActivationsRequestFilterSensitiveLog;
    var DescribeActivationsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeActivationsResultFilterSensitiveLog");
    exports.DescribeActivationsResultFilterSensitiveLog = DescribeActivationsResultFilterSensitiveLog;
    var DescribeAssociationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAssociationRequestFilterSensitiveLog");
    exports.DescribeAssociationRequestFilterSensitiveLog = DescribeAssociationRequestFilterSensitiveLog;
    var DescribeAssociationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    }), "DescribeAssociationResultFilterSensitiveLog");
    exports.DescribeAssociationResultFilterSensitiveLog = DescribeAssociationResultFilterSensitiveLog;
    var AssociationExecutionFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationExecutionFilterFilterSensitiveLog");
    exports.AssociationExecutionFilterFilterSensitiveLog = AssociationExecutionFilterFilterSensitiveLog;
    var DescribeAssociationExecutionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAssociationExecutionsRequestFilterSensitiveLog");
    exports.DescribeAssociationExecutionsRequestFilterSensitiveLog = DescribeAssociationExecutionsRequestFilterSensitiveLog;
    var AssociationExecutionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationExecutionFilterSensitiveLog");
    exports.AssociationExecutionFilterSensitiveLog = AssociationExecutionFilterSensitiveLog;
    var DescribeAssociationExecutionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAssociationExecutionsResultFilterSensitiveLog");
    exports.DescribeAssociationExecutionsResultFilterSensitiveLog = DescribeAssociationExecutionsResultFilterSensitiveLog;
    var AssociationExecutionTargetsFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationExecutionTargetsFilterFilterSensitiveLog");
    exports.AssociationExecutionTargetsFilterFilterSensitiveLog = AssociationExecutionTargetsFilterFilterSensitiveLog;
    var DescribeAssociationExecutionTargetsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAssociationExecutionTargetsRequestFilterSensitiveLog");
    exports.DescribeAssociationExecutionTargetsRequestFilterSensitiveLog = DescribeAssociationExecutionTargetsRequestFilterSensitiveLog;
    var OutputSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OutputSourceFilterSensitiveLog");
    exports.OutputSourceFilterSensitiveLog = OutputSourceFilterSensitiveLog;
    var AssociationExecutionTargetFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationExecutionTargetFilterSensitiveLog");
    exports.AssociationExecutionTargetFilterSensitiveLog = AssociationExecutionTargetFilterSensitiveLog;
    var DescribeAssociationExecutionTargetsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAssociationExecutionTargetsResultFilterSensitiveLog");
    exports.DescribeAssociationExecutionTargetsResultFilterSensitiveLog = DescribeAssociationExecutionTargetsResultFilterSensitiveLog;
    var AutomationExecutionFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AutomationExecutionFilterFilterSensitiveLog");
    exports.AutomationExecutionFilterFilterSensitiveLog = AutomationExecutionFilterFilterSensitiveLog;
    var DescribeAutomationExecutionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAutomationExecutionsRequestFilterSensitiveLog");
    exports.DescribeAutomationExecutionsRequestFilterSensitiveLog = DescribeAutomationExecutionsRequestFilterSensitiveLog;
    var ResolvedTargetsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResolvedTargetsFilterSensitiveLog");
    exports.ResolvedTargetsFilterSensitiveLog = ResolvedTargetsFilterSensitiveLog;
    var RunbookFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RunbookFilterSensitiveLog");
    exports.RunbookFilterSensitiveLog = RunbookFilterSensitiveLog;
    var AutomationExecutionMetadataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AutomationExecutionMetadataFilterSensitiveLog");
    exports.AutomationExecutionMetadataFilterSensitiveLog = AutomationExecutionMetadataFilterSensitiveLog;
    var DescribeAutomationExecutionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAutomationExecutionsResultFilterSensitiveLog");
    exports.DescribeAutomationExecutionsResultFilterSensitiveLog = DescribeAutomationExecutionsResultFilterSensitiveLog;
    var StepExecutionFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StepExecutionFilterFilterSensitiveLog");
    exports.StepExecutionFilterFilterSensitiveLog = StepExecutionFilterFilterSensitiveLog;
    var DescribeAutomationStepExecutionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAutomationStepExecutionsRequestFilterSensitiveLog");
    exports.DescribeAutomationStepExecutionsRequestFilterSensitiveLog = DescribeAutomationStepExecutionsRequestFilterSensitiveLog;
    var FailureDetailsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "FailureDetailsFilterSensitiveLog");
    exports.FailureDetailsFilterSensitiveLog = FailureDetailsFilterSensitiveLog;
    var StepExecutionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StepExecutionFilterSensitiveLog");
    exports.StepExecutionFilterSensitiveLog = StepExecutionFilterSensitiveLog;
    var DescribeAutomationStepExecutionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAutomationStepExecutionsResultFilterSensitiveLog");
    exports.DescribeAutomationStepExecutionsResultFilterSensitiveLog = DescribeAutomationStepExecutionsResultFilterSensitiveLog;
    var PatchOrchestratorFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchOrchestratorFilterFilterSensitiveLog");
    exports.PatchOrchestratorFilterFilterSensitiveLog = PatchOrchestratorFilterFilterSensitiveLog;
    var DescribeAvailablePatchesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAvailablePatchesRequestFilterSensitiveLog");
    exports.DescribeAvailablePatchesRequestFilterSensitiveLog = DescribeAvailablePatchesRequestFilterSensitiveLog;
    var PatchFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchFilterSensitiveLog");
    exports.PatchFilterSensitiveLog = PatchFilterSensitiveLog;
    var DescribeAvailablePatchesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeAvailablePatchesResultFilterSensitiveLog");
    exports.DescribeAvailablePatchesResultFilterSensitiveLog = DescribeAvailablePatchesResultFilterSensitiveLog;
    var DescribeDocumentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeDocumentRequestFilterSensitiveLog");
    exports.DescribeDocumentRequestFilterSensitiveLog = DescribeDocumentRequestFilterSensitiveLog;
    var DescribeDocumentResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeDocumentResultFilterSensitiveLog");
    exports.DescribeDocumentResultFilterSensitiveLog = DescribeDocumentResultFilterSensitiveLog;
    var DescribeDocumentPermissionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeDocumentPermissionRequestFilterSensitiveLog");
    exports.DescribeDocumentPermissionRequestFilterSensitiveLog = DescribeDocumentPermissionRequestFilterSensitiveLog;
    var DescribeDocumentPermissionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeDocumentPermissionResponseFilterSensitiveLog");
    exports.DescribeDocumentPermissionResponseFilterSensitiveLog = DescribeDocumentPermissionResponseFilterSensitiveLog;
    var DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog");
    exports.DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog = DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog;
    var InstanceAssociationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceAssociationFilterSensitiveLog");
    exports.InstanceAssociationFilterSensitiveLog = InstanceAssociationFilterSensitiveLog;
    var DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog");
    exports.DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog = DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog;
    var DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog");
    exports.DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog = DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog;
    var PatchStatusFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchStatusFilterSensitiveLog");
    exports.PatchStatusFilterSensitiveLog = PatchStatusFilterSensitiveLog;
    var EffectivePatchFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "EffectivePatchFilterSensitiveLog");
    exports.EffectivePatchFilterSensitiveLog = EffectivePatchFilterSensitiveLog;
    var DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog");
    exports.DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog = DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog;
    var DescribeInstanceAssociationsStatusRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstanceAssociationsStatusRequestFilterSensitiveLog");
    exports.DescribeInstanceAssociationsStatusRequestFilterSensitiveLog = DescribeInstanceAssociationsStatusRequestFilterSensitiveLog;
    var S3OutputUrlFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "S3OutputUrlFilterSensitiveLog");
    exports.S3OutputUrlFilterSensitiveLog = S3OutputUrlFilterSensitiveLog;
    var InstanceAssociationOutputUrlFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceAssociationOutputUrlFilterSensitiveLog");
    exports.InstanceAssociationOutputUrlFilterSensitiveLog = InstanceAssociationOutputUrlFilterSensitiveLog;
    var InstanceAssociationStatusInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceAssociationStatusInfoFilterSensitiveLog");
    exports.InstanceAssociationStatusInfoFilterSensitiveLog = InstanceAssociationStatusInfoFilterSensitiveLog;
    var DescribeInstanceAssociationsStatusResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstanceAssociationsStatusResultFilterSensitiveLog");
    exports.DescribeInstanceAssociationsStatusResultFilterSensitiveLog = DescribeInstanceAssociationsStatusResultFilterSensitiveLog;
    var InstanceInformationStringFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceInformationStringFilterFilterSensitiveLog");
    exports.InstanceInformationStringFilterFilterSensitiveLog = InstanceInformationStringFilterFilterSensitiveLog;
    var InstanceInformationFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceInformationFilterFilterSensitiveLog");
    exports.InstanceInformationFilterFilterSensitiveLog = InstanceInformationFilterFilterSensitiveLog;
    var DescribeInstanceInformationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstanceInformationRequestFilterSensitiveLog");
    exports.DescribeInstanceInformationRequestFilterSensitiveLog = DescribeInstanceInformationRequestFilterSensitiveLog;
    var InstanceAggregatedAssociationOverviewFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceAggregatedAssociationOverviewFilterSensitiveLog");
    exports.InstanceAggregatedAssociationOverviewFilterSensitiveLog = InstanceAggregatedAssociationOverviewFilterSensitiveLog;
    var InstanceInformationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstanceInformationFilterSensitiveLog");
    exports.InstanceInformationFilterSensitiveLog = InstanceInformationFilterSensitiveLog;
    var DescribeInstanceInformationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstanceInformationResultFilterSensitiveLog");
    exports.DescribeInstanceInformationResultFilterSensitiveLog = DescribeInstanceInformationResultFilterSensitiveLog;
    var DescribeInstancePatchesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstancePatchesRequestFilterSensitiveLog");
    exports.DescribeInstancePatchesRequestFilterSensitiveLog = DescribeInstancePatchesRequestFilterSensitiveLog;
    var PatchComplianceDataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchComplianceDataFilterSensitiveLog");
    exports.PatchComplianceDataFilterSensitiveLog = PatchComplianceDataFilterSensitiveLog;
    var DescribeInstancePatchesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstancePatchesResultFilterSensitiveLog");
    exports.DescribeInstancePatchesResultFilterSensitiveLog = DescribeInstancePatchesResultFilterSensitiveLog;
    var DescribeInstancePatchStatesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstancePatchStatesRequestFilterSensitiveLog");
    exports.DescribeInstancePatchStatesRequestFilterSensitiveLog = DescribeInstancePatchStatesRequestFilterSensitiveLog;
    var InstancePatchStateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    }), "InstancePatchStateFilterSensitiveLog");
    exports.InstancePatchStateFilterSensitiveLog = InstancePatchStateFilterSensitiveLog;
    var DescribeInstancePatchStatesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => (0, exports.InstancePatchStateFilterSensitiveLog)(item))
      }
    }), "DescribeInstancePatchStatesResultFilterSensitiveLog");
    exports.DescribeInstancePatchStatesResultFilterSensitiveLog = DescribeInstancePatchStatesResultFilterSensitiveLog;
    var InstancePatchStateFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InstancePatchStateFilterFilterSensitiveLog");
    exports.InstancePatchStateFilterFilterSensitiveLog = InstancePatchStateFilterFilterSensitiveLog;
    var DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog");
    exports.DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog = DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog;
    var DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => (0, exports.InstancePatchStateFilterSensitiveLog)(item))
      }
    }), "DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog");
    exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog;
    var DescribeInventoryDeletionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInventoryDeletionsRequestFilterSensitiveLog");
    exports.DescribeInventoryDeletionsRequestFilterSensitiveLog = DescribeInventoryDeletionsRequestFilterSensitiveLog;
    var InventoryDeletionStatusItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryDeletionStatusItemFilterSensitiveLog");
    exports.InventoryDeletionStatusItemFilterSensitiveLog = InventoryDeletionStatusItemFilterSensitiveLog;
    var DescribeInventoryDeletionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeInventoryDeletionsResultFilterSensitiveLog");
    exports.DescribeInventoryDeletionsResultFilterSensitiveLog = DescribeInventoryDeletionsResultFilterSensitiveLog;
    var MaintenanceWindowFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "MaintenanceWindowFilterFilterSensitiveLog");
    exports.MaintenanceWindowFilterFilterSensitiveLog = MaintenanceWindowFilterFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog = DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog;
    var MaintenanceWindowExecutionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "MaintenanceWindowExecutionFilterSensitiveLog");
    exports.MaintenanceWindowExecutionFilterSensitiveLog = MaintenanceWindowExecutionFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog = DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog;
    var MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog");
    exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WindowExecutionTaskInvocationIdentities && {
        WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map((item) => (0, exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog)(item))
      }
    }), "DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog = DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog;
    var MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog");
    exports.MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog = MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog;
    var DescribeMaintenanceWindowsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowsRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowsRequestFilterSensitiveLog = DescribeMaintenanceWindowsRequestFilterSensitiveLog;
    var MaintenanceWindowIdentityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowIdentityFilterSensitiveLog");
    exports.MaintenanceWindowIdentityFilterSensitiveLog = MaintenanceWindowIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WindowIdentities && {
        WindowIdentities: obj.WindowIdentities.map((item) => (0, exports.MaintenanceWindowIdentityFilterSensitiveLog)(item))
      }
    }), "DescribeMaintenanceWindowsResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = DescribeMaintenanceWindowsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog = DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog;
    var ScheduledWindowExecutionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ScheduledWindowExecutionFilterSensitiveLog");
    exports.ScheduledWindowExecutionFilterSensitiveLog = ScheduledWindowExecutionFilterSensitiveLog;
    var DescribeMaintenanceWindowScheduleResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowScheduleResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowScheduleResultFilterSensitiveLog = DescribeMaintenanceWindowScheduleResultFilterSensitiveLog;
    var DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog = DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog;
    var MaintenanceWindowIdentityForTargetFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "MaintenanceWindowIdentityForTargetFilterSensitiveLog");
    exports.MaintenanceWindowIdentityForTargetFilterSensitiveLog = MaintenanceWindowIdentityForTargetFilterSensitiveLog;
    var DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog = DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog;
    var DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog = DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog;
    var MaintenanceWindowTargetFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowTargetFilterSensitiveLog");
    exports.MaintenanceWindowTargetFilterSensitiveLog = MaintenanceWindowTargetFilterSensitiveLog;
    var DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Targets && { Targets: obj.Targets.map((item) => (0, exports.MaintenanceWindowTargetFilterSensitiveLog)(item)) }
    }), "DescribeMaintenanceWindowTargetsResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = DescribeMaintenanceWindowTargetsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowTasksRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeMaintenanceWindowTasksRequestFilterSensitiveLog");
    exports.DescribeMaintenanceWindowTasksRequestFilterSensitiveLog = DescribeMaintenanceWindowTasksRequestFilterSensitiveLog;
    var LoggingInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "LoggingInfoFilterSensitiveLog");
    exports.LoggingInfoFilterSensitiveLog = LoggingInfoFilterSensitiveLog;
    var MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Values && { Values: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog");
    exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog;
    var MaintenanceWindowTaskFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowTaskFilterSensitiveLog");
    exports.MaintenanceWindowTaskFilterSensitiveLog = MaintenanceWindowTaskFilterSensitiveLog;
    var DescribeMaintenanceWindowTasksResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Tasks && { Tasks: obj.Tasks.map((item) => (0, exports.MaintenanceWindowTaskFilterSensitiveLog)(item)) }
    }), "DescribeMaintenanceWindowTasksResultFilterSensitiveLog");
    exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = DescribeMaintenanceWindowTasksResultFilterSensitiveLog;
    var OpsItemFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemFilterFilterSensitiveLog");
    exports.OpsItemFilterFilterSensitiveLog = OpsItemFilterFilterSensitiveLog;
    var DescribeOpsItemsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeOpsItemsRequestFilterSensitiveLog");
    exports.DescribeOpsItemsRequestFilterSensitiveLog = DescribeOpsItemsRequestFilterSensitiveLog;
    var OpsItemSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemSummaryFilterSensitiveLog");
    exports.OpsItemSummaryFilterSensitiveLog = OpsItemSummaryFilterSensitiveLog;
    var DescribeOpsItemsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeOpsItemsResponseFilterSensitiveLog");
    exports.DescribeOpsItemsResponseFilterSensitiveLog = DescribeOpsItemsResponseFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    __name(HttpRequest, "HttpRequest");
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
    __name(cloneQuery, "cloneQuery");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    __name(HttpResponse, "HttpResponse");
    exports.HttpResponse = HttpResponse;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    __name(isValidHostname, "isValidHostname");
    exports.isValidHostname = isValidHostname;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.208.0/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js
import crypto from "crypto";
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var rnds8Pool, poolPtr;
var init_rng = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js"() {
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
    __name(rng, "rng");
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    __name(validate, "validate");
    validate_default = validate;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    __name(stringify, "stringify");
    stringify_default = stringify;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    __name(v1, "v1");
    v1_default = v1;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    __name(parse, "parse");
    parse_default = parse;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  __name(generateUUID, "generateUUID");
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    __name(stringToBytes, "stringToBytes");
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    __name(v35_default, "default");
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/md5.js
import crypto2 from "crypto";
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto2.createHash("md5").update(bytes).digest();
}
var md5_default;
var init_md5 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/md5.js"() {
    __name(md5, "md5");
    md5_default = md5;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    __name(v4, "v4");
    v4_default = v4;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/sha1.js
import crypto3 from "crypto";
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto3.createHash("sha1").update(bytes).digest();
}
var sha1_default;
var init_sha1 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/sha1.js"() {
    __name(sha1, "sha1");
    sha1_default = sha1;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    __name(version, "version");
    version_default = version;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js
var require_models_1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ItemSizeLimitExceededException = exports.InvalidItemContentException = exports.ComplianceTypeCountLimitExceededException = exports.DocumentPermissionLimit = exports.LastResourceDataSyncStatus = exports.OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterKey = exports.OpsItemEventFilterOperator = exports.OpsItemEventFilterKey = exports.DocumentFilterKey = exports.DocumentReviewCommentType = exports.DocumentMetadataEnum = exports.ComplianceStatus = exports.ComplianceSeverity = exports.ComplianceQueryOperatorType = exports.CommandStatus = exports.CommandPluginStatus = exports.CommandFilterKey = exports.AssociationFilterKey = exports.ParameterVersionLabelLimitExceeded = exports.ServiceSettingNotFound = exports.ParameterVersionNotFound = exports.InvalidKeyId = exports.OpsFilterOperatorType = exports.NotificationType = exports.NotificationEvent = exports.InventoryAttributeDataType = exports.InvalidResultAttributeException = exports.InvalidInventoryGroupException = exports.InvalidAggregatorException = exports.InventoryQueryOperatorType = exports.AttachmentHashType = exports.UnsupportedFeatureRequiredException = exports.ConnectionStatus = exports.InvocationDoesNotExist = exports.InvalidPluginName = exports.CommandInvocationStatus = exports.UnsupportedCalendarException = exports.InvalidDocumentType = exports.CalendarState = exports.OpsItemRelatedItemAssociationNotFoundException = exports.SessionStatus = exports.SessionState = exports.SessionFilterKey = exports.PatchProperty = exports.PatchSet = exports.InvalidFilterOption = exports.ParameterType = exports.ParameterTier = exports.ParametersFilterKey = void 0;
    exports.PatchBaselineIdentityFilterSensitiveLog = exports.DescribePatchBaselinesRequestFilterSensitiveLog = exports.DescribeParametersResultFilterSensitiveLog = exports.ParameterMetadataFilterSensitiveLog = exports.ParameterInlinePolicyFilterSensitiveLog = exports.DescribeParametersRequestFilterSensitiveLog = exports.ParameterStringFilterFilterSensitiveLog = exports.ParametersFilterFilterSensitiveLog = exports.DuplicateDocumentVersionName = exports.DuplicateDocumentContent = exports.DocumentVersionLimitExceeded = exports.StatusUnchanged = exports.InvalidUpdate = exports.AssociationVersionLimitExceeded = exports.StopType = exports.InvalidAutomationStatusUpdateException = exports.TargetNotConnected = exports.AutomationDefinitionNotApprovedException = exports.InvalidAutomationExecutionParametersException = exports.AutomationExecutionLimitExceededException = exports.AutomationDefinitionVersionNotFoundException = exports.AutomationDefinitionNotFoundException = exports.InvalidAssociation = exports.InvalidRole = exports.InvalidOutputFolder = exports.InvalidNotificationConfig = exports.SignalType = exports.InvalidAutomationSignalException = exports.AutomationStepNotFoundException = exports.FeatureNotAvailableException = exports.UnsupportedParameterType = exports.PoliciesLimitExceededException = exports.ParameterPatternMismatchException = exports.ParameterMaxVersionLimitExceeded = exports.ParameterLimitExceeded = exports.ParameterAlreadyExists = exports.InvalidPolicyTypeException = exports.InvalidPolicyAttributeException = exports.InvalidAllowedPatternException = exports.IncompatiblePolicyException = exports.HierarchyTypeMismatchException = exports.HierarchyLevelLimitExceededException = exports.UnsupportedInventorySchemaVersionException = exports.UnsupportedInventoryItemContextException = exports.SubTypeCountLimitExceededException = exports.ItemContentMismatchException = exports.InvalidInventoryItemContextException = exports.CustomSchemaCountLimitExceededException = exports.TotalSizeLimitExceededException = exports.ComplianceUploadType = void 0;
    exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog = exports.GetMaintenanceWindowExecutionResultFilterSensitiveLog = exports.GetMaintenanceWindowExecutionRequestFilterSensitiveLog = exports.GetMaintenanceWindowResultFilterSensitiveLog = exports.GetMaintenanceWindowRequestFilterSensitiveLog = exports.GetInventorySchemaResultFilterSensitiveLog = exports.InventoryItemSchemaFilterSensitiveLog = exports.InventoryItemAttributeFilterSensitiveLog = exports.GetInventorySchemaRequestFilterSensitiveLog = exports.GetInventoryResultFilterSensitiveLog = exports.InventoryResultEntityFilterSensitiveLog = exports.InventoryResultItemFilterSensitiveLog = exports.ResultAttributeFilterSensitiveLog = exports.InventoryGroupFilterSensitiveLog = exports.InventoryFilterFilterSensitiveLog = exports.GetDocumentResultFilterSensitiveLog = exports.AttachmentContentFilterSensitiveLog = exports.GetDocumentRequestFilterSensitiveLog = exports.GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog = exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = exports.BaselineOverrideFilterSensitiveLog = exports.GetDefaultPatchBaselineResultFilterSensitiveLog = exports.GetDefaultPatchBaselineRequestFilterSensitiveLog = exports.GetConnectionStatusResponseFilterSensitiveLog = exports.GetConnectionStatusRequestFilterSensitiveLog = exports.GetCommandInvocationResultFilterSensitiveLog = exports.CloudWatchOutputConfigFilterSensitiveLog = exports.GetCommandInvocationRequestFilterSensitiveLog = exports.GetCalendarStateResponseFilterSensitiveLog = exports.GetCalendarStateRequestFilterSensitiveLog = exports.GetAutomationExecutionResultFilterSensitiveLog = exports.AutomationExecutionFilterSensitiveLog = exports.ProgressCountersFilterSensitiveLog = exports.GetAutomationExecutionRequestFilterSensitiveLog = exports.DisassociateOpsItemRelatedItemResponseFilterSensitiveLog = exports.DisassociateOpsItemRelatedItemRequestFilterSensitiveLog = exports.DescribeSessionsResponseFilterSensitiveLog = exports.SessionFilterSensitiveLog = exports.SessionManagerOutputUrlFilterSensitiveLog = exports.DescribeSessionsRequestFilterSensitiveLog = exports.SessionFilterFilterSensitiveLog = exports.DescribePatchPropertiesResultFilterSensitiveLog = exports.DescribePatchPropertiesRequestFilterSensitiveLog = exports.DescribePatchGroupStateResultFilterSensitiveLog = exports.DescribePatchGroupStateRequestFilterSensitiveLog = exports.DescribePatchGroupsResultFilterSensitiveLog = exports.PatchGroupPatchBaselineMappingFilterSensitiveLog = exports.DescribePatchGroupsRequestFilterSensitiveLog = exports.DescribePatchBaselinesResultFilterSensitiveLog = void 0;
    exports.CommandInvocationFilterSensitiveLog = exports.CommandPluginFilterSensitiveLog = exports.ListCommandInvocationsRequestFilterSensitiveLog = exports.CommandFilterFilterSensitiveLog = exports.ListAssociationVersionsResultFilterSensitiveLog = exports.AssociationVersionInfoFilterSensitiveLog = exports.ListAssociationVersionsRequestFilterSensitiveLog = exports.ListAssociationsResultFilterSensitiveLog = exports.AssociationFilterSensitiveLog = exports.ListAssociationsRequestFilterSensitiveLog = exports.AssociationFilterFilterSensitiveLog = exports.LabelParameterVersionResultFilterSensitiveLog = exports.LabelParameterVersionRequestFilterSensitiveLog = exports.GetServiceSettingResultFilterSensitiveLog = exports.ServiceSettingFilterSensitiveLog = exports.GetServiceSettingRequestFilterSensitiveLog = exports.GetPatchBaselineForPatchGroupResultFilterSensitiveLog = exports.GetPatchBaselineForPatchGroupRequestFilterSensitiveLog = exports.GetPatchBaselineResultFilterSensitiveLog = exports.GetPatchBaselineRequestFilterSensitiveLog = exports.GetParametersByPathResultFilterSensitiveLog = exports.GetParametersByPathRequestFilterSensitiveLog = exports.GetParametersResultFilterSensitiveLog = exports.GetParametersRequestFilterSensitiveLog = exports.GetParameterHistoryResultFilterSensitiveLog = exports.ParameterHistoryFilterSensitiveLog = exports.GetParameterHistoryRequestFilterSensitiveLog = exports.GetParameterResultFilterSensitiveLog = exports.ParameterFilterSensitiveLog = exports.GetParameterRequestFilterSensitiveLog = exports.GetOpsSummaryResultFilterSensitiveLog = exports.OpsEntityFilterSensitiveLog = exports.OpsEntityItemFilterSensitiveLog = exports.OpsResultAttributeFilterSensitiveLog = exports.OpsFilterFilterSensitiveLog = exports.GetOpsMetadataResultFilterSensitiveLog = exports.GetOpsMetadataRequestFilterSensitiveLog = exports.GetOpsItemResponseFilterSensitiveLog = exports.OpsItemFilterSensitiveLog = exports.GetOpsItemRequestFilterSensitiveLog = exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = exports.NotificationConfigFilterSensitiveLog = exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = exports.MaintenanceWindowAutomationParametersFilterSensitiveLog = exports.GetMaintenanceWindowTaskRequestFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog = void 0;
    exports.ListResourceDataSyncResultFilterSensitiveLog = exports.ResourceDataSyncItemFilterSensitiveLog = exports.ResourceDataSyncSourceWithStateFilterSensitiveLog = exports.ListResourceDataSyncRequestFilterSensitiveLog = exports.ListResourceComplianceSummariesResultFilterSensitiveLog = exports.ResourceComplianceSummaryItemFilterSensitiveLog = exports.ListResourceComplianceSummariesRequestFilterSensitiveLog = exports.ListOpsMetadataResultFilterSensitiveLog = exports.OpsMetadataFilterSensitiveLog = exports.ListOpsMetadataRequestFilterSensitiveLog = exports.OpsMetadataFilterFilterSensitiveLog = exports.ListOpsItemRelatedItemsResponseFilterSensitiveLog = exports.OpsItemRelatedItemSummaryFilterSensitiveLog = exports.ListOpsItemRelatedItemsRequestFilterSensitiveLog = exports.OpsItemRelatedItemsFilterFilterSensitiveLog = exports.ListOpsItemEventsResponseFilterSensitiveLog = exports.OpsItemEventSummaryFilterSensitiveLog = exports.OpsItemIdentityFilterSensitiveLog = exports.ListOpsItemEventsRequestFilterSensitiveLog = exports.OpsItemEventFilterFilterSensitiveLog = exports.ListInventoryEntriesResultFilterSensitiveLog = exports.ListInventoryEntriesRequestFilterSensitiveLog = exports.ListDocumentVersionsResultFilterSensitiveLog = exports.DocumentVersionInfoFilterSensitiveLog = exports.ListDocumentVersionsRequestFilterSensitiveLog = exports.ListDocumentsResultFilterSensitiveLog = exports.DocumentIdentifierFilterSensitiveLog = exports.ListDocumentsRequestFilterSensitiveLog = exports.DocumentKeyValuesFilterFilterSensitiveLog = exports.DocumentFilterFilterSensitiveLog = exports.ListDocumentMetadataHistoryResponseFilterSensitiveLog = exports.DocumentMetadataResponseInfoFilterSensitiveLog = exports.DocumentReviewerResponseSourceFilterSensitiveLog = exports.DocumentReviewCommentSourceFilterSensitiveLog = exports.ListDocumentMetadataHistoryRequestFilterSensitiveLog = exports.ListComplianceSummariesResultFilterSensitiveLog = exports.ComplianceSummaryItemFilterSensitiveLog = exports.NonCompliantSummaryFilterSensitiveLog = exports.CompliantSummaryFilterSensitiveLog = exports.SeveritySummaryFilterSensitiveLog = exports.ListComplianceSummariesRequestFilterSensitiveLog = exports.ListComplianceItemsResultFilterSensitiveLog = exports.ComplianceItemFilterSensitiveLog = exports.ComplianceExecutionSummaryFilterSensitiveLog = exports.ListComplianceItemsRequestFilterSensitiveLog = exports.ComplianceStringFilterFilterSensitiveLog = exports.ListCommandsResultFilterSensitiveLog = exports.CommandFilterSensitiveLog = exports.ListCommandsRequestFilterSensitiveLog = exports.ListCommandInvocationsResultFilterSensitiveLog = void 0;
    exports.UpdateDocumentResultFilterSensitiveLog = exports.UpdateDocumentRequestFilterSensitiveLog = exports.UpdateAssociationStatusResultFilterSensitiveLog = exports.UpdateAssociationStatusRequestFilterSensitiveLog = exports.UpdateAssociationResultFilterSensitiveLog = exports.UpdateAssociationRequestFilterSensitiveLog = exports.UnlabelParameterVersionResultFilterSensitiveLog = exports.UnlabelParameterVersionRequestFilterSensitiveLog = exports.TerminateSessionResponseFilterSensitiveLog = exports.TerminateSessionRequestFilterSensitiveLog = exports.StopAutomationExecutionResultFilterSensitiveLog = exports.StopAutomationExecutionRequestFilterSensitiveLog = exports.StartSessionResponseFilterSensitiveLog = exports.StartSessionRequestFilterSensitiveLog = exports.StartChangeRequestExecutionResultFilterSensitiveLog = exports.StartChangeRequestExecutionRequestFilterSensitiveLog = exports.StartAutomationExecutionResultFilterSensitiveLog = exports.StartAutomationExecutionRequestFilterSensitiveLog = exports.StartAssociationsOnceResultFilterSensitiveLog = exports.StartAssociationsOnceRequestFilterSensitiveLog = exports.SendCommandResultFilterSensitiveLog = exports.SendCommandRequestFilterSensitiveLog = exports.SendAutomationSignalResultFilterSensitiveLog = exports.SendAutomationSignalRequestFilterSensitiveLog = exports.ResumeSessionResponseFilterSensitiveLog = exports.ResumeSessionRequestFilterSensitiveLog = exports.ResetServiceSettingResultFilterSensitiveLog = exports.ResetServiceSettingRequestFilterSensitiveLog = exports.RemoveTagsFromResourceResultFilterSensitiveLog = exports.RemoveTagsFromResourceRequestFilterSensitiveLog = exports.RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog = exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = exports.RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog = exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = exports.RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog = exports.RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = exports.RegisterDefaultPatchBaselineResultFilterSensitiveLog = exports.RegisterDefaultPatchBaselineRequestFilterSensitiveLog = exports.PutParameterResultFilterSensitiveLog = exports.PutParameterRequestFilterSensitiveLog = exports.PutInventoryResultFilterSensitiveLog = exports.PutInventoryRequestFilterSensitiveLog = exports.InventoryItemFilterSensitiveLog = exports.PutComplianceItemsResultFilterSensitiveLog = exports.PutComplianceItemsRequestFilterSensitiveLog = exports.ComplianceItemEntryFilterSensitiveLog = exports.ModifyDocumentPermissionResponseFilterSensitiveLog = exports.ModifyDocumentPermissionRequestFilterSensitiveLog = exports.ListTagsForResourceResultFilterSensitiveLog = exports.ListTagsForResourceRequestFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var SSMServiceException_1 = require_SSMServiceException();
    var ParametersFilterKey;
    (function(ParametersFilterKey2) {
      ParametersFilterKey2["KEY_ID"] = "KeyId";
      ParametersFilterKey2["NAME"] = "Name";
      ParametersFilterKey2["TYPE"] = "Type";
    })(ParametersFilterKey = exports.ParametersFilterKey || (exports.ParametersFilterKey = {}));
    var ParameterTier;
    (function(ParameterTier2) {
      ParameterTier2["ADVANCED"] = "Advanced";
      ParameterTier2["INTELLIGENT_TIERING"] = "Intelligent-Tiering";
      ParameterTier2["STANDARD"] = "Standard";
    })(ParameterTier = exports.ParameterTier || (exports.ParameterTier = {}));
    var ParameterType;
    (function(ParameterType2) {
      ParameterType2["SECURE_STRING"] = "SecureString";
      ParameterType2["STRING"] = "String";
      ParameterType2["STRING_LIST"] = "StringList";
    })(ParameterType = exports.ParameterType || (exports.ParameterType = {}));
    var InvalidFilterOption = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterOption",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterOption";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterOption.prototype);
      }
    };
    __name(InvalidFilterOption, "InvalidFilterOption");
    exports.InvalidFilterOption = InvalidFilterOption;
    var PatchSet;
    (function(PatchSet2) {
      PatchSet2["Application"] = "APPLICATION";
      PatchSet2["Os"] = "OS";
    })(PatchSet = exports.PatchSet || (exports.PatchSet = {}));
    var PatchProperty;
    (function(PatchProperty2) {
      PatchProperty2["PatchClassification"] = "CLASSIFICATION";
      PatchProperty2["PatchMsrcSeverity"] = "MSRC_SEVERITY";
      PatchProperty2["PatchPriority"] = "PRIORITY";
      PatchProperty2["PatchProductFamily"] = "PRODUCT_FAMILY";
      PatchProperty2["PatchSeverity"] = "SEVERITY";
      PatchProperty2["Product"] = "PRODUCT";
    })(PatchProperty = exports.PatchProperty || (exports.PatchProperty = {}));
    var SessionFilterKey;
    (function(SessionFilterKey2) {
      SessionFilterKey2["INVOKED_AFTER"] = "InvokedAfter";
      SessionFilterKey2["INVOKED_BEFORE"] = "InvokedBefore";
      SessionFilterKey2["OWNER"] = "Owner";
      SessionFilterKey2["SESSION_ID"] = "SessionId";
      SessionFilterKey2["STATUS"] = "Status";
      SessionFilterKey2["TARGET_ID"] = "Target";
    })(SessionFilterKey = exports.SessionFilterKey || (exports.SessionFilterKey = {}));
    var SessionState;
    (function(SessionState2) {
      SessionState2["ACTIVE"] = "Active";
      SessionState2["HISTORY"] = "History";
    })(SessionState = exports.SessionState || (exports.SessionState = {}));
    var SessionStatus;
    (function(SessionStatus2) {
      SessionStatus2["CONNECTED"] = "Connected";
      SessionStatus2["CONNECTING"] = "Connecting";
      SessionStatus2["DISCONNECTED"] = "Disconnected";
      SessionStatus2["FAILED"] = "Failed";
      SessionStatus2["TERMINATED"] = "Terminated";
      SessionStatus2["TERMINATING"] = "Terminating";
    })(SessionStatus = exports.SessionStatus || (exports.SessionStatus = {}));
    var OpsItemRelatedItemAssociationNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAssociationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAssociationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAssociationNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(OpsItemRelatedItemAssociationNotFoundException, "OpsItemRelatedItemAssociationNotFoundException");
    exports.OpsItemRelatedItemAssociationNotFoundException = OpsItemRelatedItemAssociationNotFoundException;
    var CalendarState;
    (function(CalendarState2) {
      CalendarState2["CLOSED"] = "CLOSED";
      CalendarState2["OPEN"] = "OPEN";
    })(CalendarState = exports.CalendarState || (exports.CalendarState = {}));
    var InvalidDocumentType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentType.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidDocumentType, "InvalidDocumentType");
    exports.InvalidDocumentType = InvalidDocumentType;
    var UnsupportedCalendarException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedCalendarException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedCalendarException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedCalendarException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(UnsupportedCalendarException, "UnsupportedCalendarException");
    exports.UnsupportedCalendarException = UnsupportedCalendarException;
    var CommandInvocationStatus;
    (function(CommandInvocationStatus2) {
      CommandInvocationStatus2["CANCELLED"] = "Cancelled";
      CommandInvocationStatus2["CANCELLING"] = "Cancelling";
      CommandInvocationStatus2["DELAYED"] = "Delayed";
      CommandInvocationStatus2["FAILED"] = "Failed";
      CommandInvocationStatus2["IN_PROGRESS"] = "InProgress";
      CommandInvocationStatus2["PENDING"] = "Pending";
      CommandInvocationStatus2["SUCCESS"] = "Success";
      CommandInvocationStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandInvocationStatus = exports.CommandInvocationStatus || (exports.CommandInvocationStatus = {}));
    var InvalidPluginName = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPluginName",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPluginName";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPluginName.prototype);
      }
    };
    __name(InvalidPluginName, "InvalidPluginName");
    exports.InvalidPluginName = InvalidPluginName;
    var InvocationDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvocationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "InvocationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvocationDoesNotExist.prototype);
      }
    };
    __name(InvocationDoesNotExist, "InvocationDoesNotExist");
    exports.InvocationDoesNotExist = InvocationDoesNotExist;
    var ConnectionStatus;
    (function(ConnectionStatus2) {
      ConnectionStatus2["CONNECTED"] = "Connected";
      ConnectionStatus2["NOT_CONNECTED"] = "NotConnected";
    })(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));
    var UnsupportedFeatureRequiredException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedFeatureRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedFeatureRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedFeatureRequiredException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(UnsupportedFeatureRequiredException, "UnsupportedFeatureRequiredException");
    exports.UnsupportedFeatureRequiredException = UnsupportedFeatureRequiredException;
    var AttachmentHashType;
    (function(AttachmentHashType2) {
      AttachmentHashType2["SHA256"] = "Sha256";
    })(AttachmentHashType = exports.AttachmentHashType || (exports.AttachmentHashType = {}));
    var InventoryQueryOperatorType;
    (function(InventoryQueryOperatorType2) {
      InventoryQueryOperatorType2["BEGIN_WITH"] = "BeginWith";
      InventoryQueryOperatorType2["EQUAL"] = "Equal";
      InventoryQueryOperatorType2["EXISTS"] = "Exists";
      InventoryQueryOperatorType2["GREATER_THAN"] = "GreaterThan";
      InventoryQueryOperatorType2["LESS_THAN"] = "LessThan";
      InventoryQueryOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(InventoryQueryOperatorType = exports.InventoryQueryOperatorType || (exports.InventoryQueryOperatorType = {}));
    var InvalidAggregatorException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAggregatorException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAggregatorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAggregatorException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidAggregatorException, "InvalidAggregatorException");
    exports.InvalidAggregatorException = InvalidAggregatorException;
    var InvalidInventoryGroupException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryGroupException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryGroupException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidInventoryGroupException, "InvalidInventoryGroupException");
    exports.InvalidInventoryGroupException = InvalidInventoryGroupException;
    var InvalidResultAttributeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResultAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResultAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResultAttributeException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidResultAttributeException, "InvalidResultAttributeException");
    exports.InvalidResultAttributeException = InvalidResultAttributeException;
    var InventoryAttributeDataType;
    (function(InventoryAttributeDataType2) {
      InventoryAttributeDataType2["NUMBER"] = "number";
      InventoryAttributeDataType2["STRING"] = "string";
    })(InventoryAttributeDataType = exports.InventoryAttributeDataType || (exports.InventoryAttributeDataType = {}));
    var NotificationEvent;
    (function(NotificationEvent2) {
      NotificationEvent2["ALL"] = "All";
      NotificationEvent2["CANCELLED"] = "Cancelled";
      NotificationEvent2["FAILED"] = "Failed";
      NotificationEvent2["IN_PROGRESS"] = "InProgress";
      NotificationEvent2["SUCCESS"] = "Success";
      NotificationEvent2["TIMED_OUT"] = "TimedOut";
    })(NotificationEvent = exports.NotificationEvent || (exports.NotificationEvent = {}));
    var NotificationType;
    (function(NotificationType2) {
      NotificationType2["Command"] = "Command";
      NotificationType2["Invocation"] = "Invocation";
    })(NotificationType = exports.NotificationType || (exports.NotificationType = {}));
    var OpsFilterOperatorType;
    (function(OpsFilterOperatorType2) {
      OpsFilterOperatorType2["BEGIN_WITH"] = "BeginWith";
      OpsFilterOperatorType2["EQUAL"] = "Equal";
      OpsFilterOperatorType2["EXISTS"] = "Exists";
      OpsFilterOperatorType2["GREATER_THAN"] = "GreaterThan";
      OpsFilterOperatorType2["LESS_THAN"] = "LessThan";
      OpsFilterOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(OpsFilterOperatorType = exports.OpsFilterOperatorType || (exports.OpsFilterOperatorType = {}));
    var InvalidKeyId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidKeyId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKeyId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeyId.prototype);
      }
    };
    __name(InvalidKeyId, "InvalidKeyId");
    exports.InvalidKeyId = InvalidKeyId;
    var ParameterVersionNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionNotFound.prototype);
      }
    };
    __name(ParameterVersionNotFound, "ParameterVersionNotFound");
    exports.ParameterVersionNotFound = ParameterVersionNotFound;
    var ServiceSettingNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ServiceSettingNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceSettingNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceSettingNotFound.prototype);
        this.Message = opts.Message;
      }
    };
    __name(ServiceSettingNotFound, "ServiceSettingNotFound");
    exports.ServiceSettingNotFound = ServiceSettingNotFound;
    var ParameterVersionLabelLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionLabelLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionLabelLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionLabelLimitExceeded.prototype);
      }
    };
    __name(ParameterVersionLabelLimitExceeded, "ParameterVersionLabelLimitExceeded");
    exports.ParameterVersionLabelLimitExceeded = ParameterVersionLabelLimitExceeded;
    var AssociationFilterKey;
    (function(AssociationFilterKey2) {
      AssociationFilterKey2["AssociationId"] = "AssociationId";
      AssociationFilterKey2["AssociationName"] = "AssociationName";
      AssociationFilterKey2["InstanceId"] = "InstanceId";
      AssociationFilterKey2["LastExecutedAfter"] = "LastExecutedAfter";
      AssociationFilterKey2["LastExecutedBefore"] = "LastExecutedBefore";
      AssociationFilterKey2["Name"] = "Name";
      AssociationFilterKey2["ResourceGroupName"] = "ResourceGroupName";
      AssociationFilterKey2["Status"] = "AssociationStatusName";
    })(AssociationFilterKey = exports.AssociationFilterKey || (exports.AssociationFilterKey = {}));
    var CommandFilterKey;
    (function(CommandFilterKey2) {
      CommandFilterKey2["DOCUMENT_NAME"] = "DocumentName";
      CommandFilterKey2["EXECUTION_STAGE"] = "ExecutionStage";
      CommandFilterKey2["INVOKED_AFTER"] = "InvokedAfter";
      CommandFilterKey2["INVOKED_BEFORE"] = "InvokedBefore";
      CommandFilterKey2["STATUS"] = "Status";
    })(CommandFilterKey = exports.CommandFilterKey || (exports.CommandFilterKey = {}));
    var CommandPluginStatus;
    (function(CommandPluginStatus2) {
      CommandPluginStatus2["CANCELLED"] = "Cancelled";
      CommandPluginStatus2["FAILED"] = "Failed";
      CommandPluginStatus2["IN_PROGRESS"] = "InProgress";
      CommandPluginStatus2["PENDING"] = "Pending";
      CommandPluginStatus2["SUCCESS"] = "Success";
      CommandPluginStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandPluginStatus = exports.CommandPluginStatus || (exports.CommandPluginStatus = {}));
    var CommandStatus;
    (function(CommandStatus2) {
      CommandStatus2["CANCELLED"] = "Cancelled";
      CommandStatus2["CANCELLING"] = "Cancelling";
      CommandStatus2["FAILED"] = "Failed";
      CommandStatus2["IN_PROGRESS"] = "InProgress";
      CommandStatus2["PENDING"] = "Pending";
      CommandStatus2["SUCCESS"] = "Success";
      CommandStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandStatus = exports.CommandStatus || (exports.CommandStatus = {}));
    var ComplianceQueryOperatorType;
    (function(ComplianceQueryOperatorType2) {
      ComplianceQueryOperatorType2["BeginWith"] = "BEGIN_WITH";
      ComplianceQueryOperatorType2["Equal"] = "EQUAL";
      ComplianceQueryOperatorType2["GreaterThan"] = "GREATER_THAN";
      ComplianceQueryOperatorType2["LessThan"] = "LESS_THAN";
      ComplianceQueryOperatorType2["NotEqual"] = "NOT_EQUAL";
    })(ComplianceQueryOperatorType = exports.ComplianceQueryOperatorType || (exports.ComplianceQueryOperatorType = {}));
    var ComplianceSeverity;
    (function(ComplianceSeverity2) {
      ComplianceSeverity2["Critical"] = "CRITICAL";
      ComplianceSeverity2["High"] = "HIGH";
      ComplianceSeverity2["Informational"] = "INFORMATIONAL";
      ComplianceSeverity2["Low"] = "LOW";
      ComplianceSeverity2["Medium"] = "MEDIUM";
      ComplianceSeverity2["Unspecified"] = "UNSPECIFIED";
    })(ComplianceSeverity = exports.ComplianceSeverity || (exports.ComplianceSeverity = {}));
    var ComplianceStatus;
    (function(ComplianceStatus2) {
      ComplianceStatus2["Compliant"] = "COMPLIANT";
      ComplianceStatus2["NonCompliant"] = "NON_COMPLIANT";
    })(ComplianceStatus = exports.ComplianceStatus || (exports.ComplianceStatus = {}));
    var DocumentMetadataEnum;
    (function(DocumentMetadataEnum2) {
      DocumentMetadataEnum2["DocumentReviews"] = "DocumentReviews";
    })(DocumentMetadataEnum = exports.DocumentMetadataEnum || (exports.DocumentMetadataEnum = {}));
    var DocumentReviewCommentType;
    (function(DocumentReviewCommentType2) {
      DocumentReviewCommentType2["Comment"] = "Comment";
    })(DocumentReviewCommentType = exports.DocumentReviewCommentType || (exports.DocumentReviewCommentType = {}));
    var DocumentFilterKey;
    (function(DocumentFilterKey2) {
      DocumentFilterKey2["DocumentType"] = "DocumentType";
      DocumentFilterKey2["Name"] = "Name";
      DocumentFilterKey2["Owner"] = "Owner";
      DocumentFilterKey2["PlatformTypes"] = "PlatformTypes";
    })(DocumentFilterKey = exports.DocumentFilterKey || (exports.DocumentFilterKey = {}));
    var OpsItemEventFilterKey;
    (function(OpsItemEventFilterKey2) {
      OpsItemEventFilterKey2["OPSITEM_ID"] = "OpsItemId";
    })(OpsItemEventFilterKey = exports.OpsItemEventFilterKey || (exports.OpsItemEventFilterKey = {}));
    var OpsItemEventFilterOperator;
    (function(OpsItemEventFilterOperator2) {
      OpsItemEventFilterOperator2["EQUAL"] = "Equal";
    })(OpsItemEventFilterOperator = exports.OpsItemEventFilterOperator || (exports.OpsItemEventFilterOperator = {}));
    var OpsItemRelatedItemsFilterKey;
    (function(OpsItemRelatedItemsFilterKey2) {
      OpsItemRelatedItemsFilterKey2["ASSOCIATION_ID"] = "AssociationId";
      OpsItemRelatedItemsFilterKey2["RESOURCE_TYPE"] = "ResourceType";
      OpsItemRelatedItemsFilterKey2["RESOURCE_URI"] = "ResourceUri";
    })(OpsItemRelatedItemsFilterKey = exports.OpsItemRelatedItemsFilterKey || (exports.OpsItemRelatedItemsFilterKey = {}));
    var OpsItemRelatedItemsFilterOperator;
    (function(OpsItemRelatedItemsFilterOperator2) {
      OpsItemRelatedItemsFilterOperator2["EQUAL"] = "Equal";
    })(OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterOperator || (exports.OpsItemRelatedItemsFilterOperator = {}));
    var LastResourceDataSyncStatus;
    (function(LastResourceDataSyncStatus2) {
      LastResourceDataSyncStatus2["FAILED"] = "Failed";
      LastResourceDataSyncStatus2["INPROGRESS"] = "InProgress";
      LastResourceDataSyncStatus2["SUCCESSFUL"] = "Successful";
    })(LastResourceDataSyncStatus = exports.LastResourceDataSyncStatus || (exports.LastResourceDataSyncStatus = {}));
    var DocumentPermissionLimit = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentPermissionLimit",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentPermissionLimit";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentPermissionLimit.prototype);
        this.Message = opts.Message;
      }
    };
    __name(DocumentPermissionLimit, "DocumentPermissionLimit");
    exports.DocumentPermissionLimit = DocumentPermissionLimit;
    var ComplianceTypeCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ComplianceTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ComplianceTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ComplianceTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(ComplianceTypeCountLimitExceededException, "ComplianceTypeCountLimitExceededException");
    exports.ComplianceTypeCountLimitExceededException = ComplianceTypeCountLimitExceededException;
    var InvalidItemContentException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidItemContentException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidItemContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidItemContentException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(InvalidItemContentException, "InvalidItemContentException");
    exports.InvalidItemContentException = InvalidItemContentException;
    var ItemSizeLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemSizeLimitExceededException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(ItemSizeLimitExceededException, "ItemSizeLimitExceededException");
    exports.ItemSizeLimitExceededException = ItemSizeLimitExceededException;
    var ComplianceUploadType;
    (function(ComplianceUploadType2) {
      ComplianceUploadType2["Complete"] = "COMPLETE";
      ComplianceUploadType2["Partial"] = "PARTIAL";
    })(ComplianceUploadType = exports.ComplianceUploadType || (exports.ComplianceUploadType = {}));
    var TotalSizeLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TotalSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TotalSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TotalSizeLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(TotalSizeLimitExceededException, "TotalSizeLimitExceededException");
    exports.TotalSizeLimitExceededException = TotalSizeLimitExceededException;
    var CustomSchemaCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "CustomSchemaCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomSchemaCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomSchemaCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(CustomSchemaCountLimitExceededException, "CustomSchemaCountLimitExceededException");
    exports.CustomSchemaCountLimitExceededException = CustomSchemaCountLimitExceededException;
    var InvalidInventoryItemContextException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryItemContextException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidInventoryItemContextException, "InvalidInventoryItemContextException");
    exports.InvalidInventoryItemContextException = InvalidInventoryItemContextException;
    var ItemContentMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemContentMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemContentMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemContentMismatchException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(ItemContentMismatchException, "ItemContentMismatchException");
    exports.ItemContentMismatchException = ItemContentMismatchException;
    var SubTypeCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "SubTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "SubTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(SubTypeCountLimitExceededException, "SubTypeCountLimitExceededException");
    exports.SubTypeCountLimitExceededException = SubTypeCountLimitExceededException;
    var UnsupportedInventoryItemContextException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventoryItemContextException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    __name(UnsupportedInventoryItemContextException, "UnsupportedInventoryItemContextException");
    exports.UnsupportedInventoryItemContextException = UnsupportedInventoryItemContextException;
    var UnsupportedInventorySchemaVersionException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventorySchemaVersionException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventorySchemaVersionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventorySchemaVersionException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(UnsupportedInventorySchemaVersionException, "UnsupportedInventorySchemaVersionException");
    exports.UnsupportedInventorySchemaVersionException = UnsupportedInventorySchemaVersionException;
    var HierarchyLevelLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyLevelLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyLevelLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyLevelLimitExceededException.prototype);
      }
    };
    __name(HierarchyLevelLimitExceededException, "HierarchyLevelLimitExceededException");
    exports.HierarchyLevelLimitExceededException = HierarchyLevelLimitExceededException;
    var HierarchyTypeMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyTypeMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyTypeMismatchException.prototype);
      }
    };
    __name(HierarchyTypeMismatchException, "HierarchyTypeMismatchException");
    exports.HierarchyTypeMismatchException = HierarchyTypeMismatchException;
    var IncompatiblePolicyException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IncompatiblePolicyException",
          $fault: "client",
          ...opts
        });
        this.name = "IncompatiblePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatiblePolicyException.prototype);
      }
    };
    __name(IncompatiblePolicyException, "IncompatiblePolicyException");
    exports.IncompatiblePolicyException = IncompatiblePolicyException;
    var InvalidAllowedPatternException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAllowedPatternException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAllowedPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAllowedPatternException.prototype);
      }
    };
    __name(InvalidAllowedPatternException, "InvalidAllowedPatternException");
    exports.InvalidAllowedPatternException = InvalidAllowedPatternException;
    var InvalidPolicyAttributeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyAttributeException.prototype);
      }
    };
    __name(InvalidPolicyAttributeException, "InvalidPolicyAttributeException");
    exports.InvalidPolicyAttributeException = InvalidPolicyAttributeException;
    var InvalidPolicyTypeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyTypeException.prototype);
      }
    };
    __name(InvalidPolicyTypeException, "InvalidPolicyTypeException");
    exports.InvalidPolicyTypeException = InvalidPolicyTypeException;
    var ParameterAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterAlreadyExists.prototype);
      }
    };
    __name(ParameterAlreadyExists, "ParameterAlreadyExists");
    exports.ParameterAlreadyExists = ParameterAlreadyExists;
    var ParameterLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterLimitExceeded.prototype);
      }
    };
    __name(ParameterLimitExceeded, "ParameterLimitExceeded");
    exports.ParameterLimitExceeded = ParameterLimitExceeded;
    var ParameterMaxVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterMaxVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterMaxVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterMaxVersionLimitExceeded.prototype);
      }
    };
    __name(ParameterMaxVersionLimitExceeded, "ParameterMaxVersionLimitExceeded");
    exports.ParameterMaxVersionLimitExceeded = ParameterMaxVersionLimitExceeded;
    var ParameterPatternMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterPatternMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterPatternMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterPatternMismatchException.prototype);
      }
    };
    __name(ParameterPatternMismatchException, "ParameterPatternMismatchException");
    exports.ParameterPatternMismatchException = ParameterPatternMismatchException;
    var PoliciesLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "PoliciesLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "PoliciesLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PoliciesLimitExceededException.prototype);
      }
    };
    __name(PoliciesLimitExceededException, "PoliciesLimitExceededException");
    exports.PoliciesLimitExceededException = PoliciesLimitExceededException;
    var UnsupportedParameterType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedParameterType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedParameterType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedParameterType.prototype);
      }
    };
    __name(UnsupportedParameterType, "UnsupportedParameterType");
    exports.UnsupportedParameterType = UnsupportedParameterType;
    var FeatureNotAvailableException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "FeatureNotAvailableException",
          $fault: "client",
          ...opts
        });
        this.name = "FeatureNotAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FeatureNotAvailableException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(FeatureNotAvailableException, "FeatureNotAvailableException");
    exports.FeatureNotAvailableException = FeatureNotAvailableException;
    var AutomationStepNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationStepNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationStepNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationStepNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AutomationStepNotFoundException, "AutomationStepNotFoundException");
    exports.AutomationStepNotFoundException = AutomationStepNotFoundException;
    var InvalidAutomationSignalException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationSignalException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationSignalException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationSignalException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidAutomationSignalException, "InvalidAutomationSignalException");
    exports.InvalidAutomationSignalException = InvalidAutomationSignalException;
    var SignalType;
    (function(SignalType2) {
      SignalType2["APPROVE"] = "Approve";
      SignalType2["REJECT"] = "Reject";
      SignalType2["RESUME"] = "Resume";
      SignalType2["START_STEP"] = "StartStep";
      SignalType2["STOP_STEP"] = "StopStep";
    })(SignalType = exports.SignalType || (exports.SignalType = {}));
    var InvalidNotificationConfig = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNotificationConfig",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNotificationConfig";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNotificationConfig.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidNotificationConfig, "InvalidNotificationConfig");
    exports.InvalidNotificationConfig = InvalidNotificationConfig;
    var InvalidOutputFolder = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputFolder",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputFolder";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputFolder.prototype);
      }
    };
    __name(InvalidOutputFolder, "InvalidOutputFolder");
    exports.InvalidOutputFolder = InvalidOutputFolder;
    var InvalidRole = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidRole",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRole";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRole.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidRole, "InvalidRole");
    exports.InvalidRole = InvalidRole;
    var InvalidAssociation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociation.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidAssociation, "InvalidAssociation");
    exports.InvalidAssociation = InvalidAssociation;
    var AutomationDefinitionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AutomationDefinitionNotFoundException, "AutomationDefinitionNotFoundException");
    exports.AutomationDefinitionNotFoundException = AutomationDefinitionNotFoundException;
    var AutomationDefinitionVersionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionVersionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionVersionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionVersionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AutomationDefinitionVersionNotFoundException, "AutomationDefinitionVersionNotFoundException");
    exports.AutomationDefinitionVersionNotFoundException = AutomationDefinitionVersionNotFoundException;
    var AutomationExecutionLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AutomationExecutionLimitExceededException, "AutomationExecutionLimitExceededException");
    exports.AutomationExecutionLimitExceededException = AutomationExecutionLimitExceededException;
    var InvalidAutomationExecutionParametersException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationExecutionParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationExecutionParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationExecutionParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidAutomationExecutionParametersException, "InvalidAutomationExecutionParametersException");
    exports.InvalidAutomationExecutionParametersException = InvalidAutomationExecutionParametersException;
    var AutomationDefinitionNotApprovedException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotApprovedException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotApprovedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotApprovedException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AutomationDefinitionNotApprovedException, "AutomationDefinitionNotApprovedException");
    exports.AutomationDefinitionNotApprovedException = AutomationDefinitionNotApprovedException;
    var TargetNotConnected = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetNotConnected",
          $fault: "client",
          ...opts
        });
        this.name = "TargetNotConnected";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetNotConnected.prototype);
        this.Message = opts.Message;
      }
    };
    __name(TargetNotConnected, "TargetNotConnected");
    exports.TargetNotConnected = TargetNotConnected;
    var InvalidAutomationStatusUpdateException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationStatusUpdateException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationStatusUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationStatusUpdateException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidAutomationStatusUpdateException, "InvalidAutomationStatusUpdateException");
    exports.InvalidAutomationStatusUpdateException = InvalidAutomationStatusUpdateException;
    var StopType;
    (function(StopType2) {
      StopType2["CANCEL"] = "Cancel";
      StopType2["COMPLETE"] = "Complete";
    })(StopType = exports.StopType || (exports.StopType = {}));
    var AssociationVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    __name(AssociationVersionLimitExceeded, "AssociationVersionLimitExceeded");
    exports.AssociationVersionLimitExceeded = AssociationVersionLimitExceeded;
    var InvalidUpdate = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidUpdate",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUpdate";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUpdate.prototype);
        this.Message = opts.Message;
      }
    };
    __name(InvalidUpdate, "InvalidUpdate");
    exports.InvalidUpdate = InvalidUpdate;
    var StatusUnchanged = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "StatusUnchanged",
          $fault: "client",
          ...opts
        });
        this.name = "StatusUnchanged";
        this.$fault = "client";
        Object.setPrototypeOf(this, StatusUnchanged.prototype);
      }
    };
    __name(StatusUnchanged, "StatusUnchanged");
    exports.StatusUnchanged = StatusUnchanged;
    var DocumentVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    __name(DocumentVersionLimitExceeded, "DocumentVersionLimitExceeded");
    exports.DocumentVersionLimitExceeded = DocumentVersionLimitExceeded;
    var DuplicateDocumentContent = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    __name(DuplicateDocumentContent, "DuplicateDocumentContent");
    exports.DuplicateDocumentContent = DuplicateDocumentContent;
    var DuplicateDocumentVersionName = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentVersionName",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentVersionName";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentVersionName.prototype);
        this.Message = opts.Message;
      }
    };
    __name(DuplicateDocumentVersionName, "DuplicateDocumentVersionName");
    exports.DuplicateDocumentVersionName = DuplicateDocumentVersionName;
    var ParametersFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ParametersFilterFilterSensitiveLog");
    exports.ParametersFilterFilterSensitiveLog = ParametersFilterFilterSensitiveLog;
    var ParameterStringFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ParameterStringFilterFilterSensitiveLog");
    exports.ParameterStringFilterFilterSensitiveLog = ParameterStringFilterFilterSensitiveLog;
    var DescribeParametersRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeParametersRequestFilterSensitiveLog");
    exports.DescribeParametersRequestFilterSensitiveLog = DescribeParametersRequestFilterSensitiveLog;
    var ParameterInlinePolicyFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ParameterInlinePolicyFilterSensitiveLog");
    exports.ParameterInlinePolicyFilterSensitiveLog = ParameterInlinePolicyFilterSensitiveLog;
    var ParameterMetadataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ParameterMetadataFilterSensitiveLog");
    exports.ParameterMetadataFilterSensitiveLog = ParameterMetadataFilterSensitiveLog;
    var DescribeParametersResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeParametersResultFilterSensitiveLog");
    exports.DescribeParametersResultFilterSensitiveLog = DescribeParametersResultFilterSensitiveLog;
    var DescribePatchBaselinesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchBaselinesRequestFilterSensitiveLog");
    exports.DescribePatchBaselinesRequestFilterSensitiveLog = DescribePatchBaselinesRequestFilterSensitiveLog;
    var PatchBaselineIdentityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchBaselineIdentityFilterSensitiveLog");
    exports.PatchBaselineIdentityFilterSensitiveLog = PatchBaselineIdentityFilterSensitiveLog;
    var DescribePatchBaselinesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchBaselinesResultFilterSensitiveLog");
    exports.DescribePatchBaselinesResultFilterSensitiveLog = DescribePatchBaselinesResultFilterSensitiveLog;
    var DescribePatchGroupsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchGroupsRequestFilterSensitiveLog");
    exports.DescribePatchGroupsRequestFilterSensitiveLog = DescribePatchGroupsRequestFilterSensitiveLog;
    var PatchGroupPatchBaselineMappingFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PatchGroupPatchBaselineMappingFilterSensitiveLog");
    exports.PatchGroupPatchBaselineMappingFilterSensitiveLog = PatchGroupPatchBaselineMappingFilterSensitiveLog;
    var DescribePatchGroupsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchGroupsResultFilterSensitiveLog");
    exports.DescribePatchGroupsResultFilterSensitiveLog = DescribePatchGroupsResultFilterSensitiveLog;
    var DescribePatchGroupStateRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchGroupStateRequestFilterSensitiveLog");
    exports.DescribePatchGroupStateRequestFilterSensitiveLog = DescribePatchGroupStateRequestFilterSensitiveLog;
    var DescribePatchGroupStateResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchGroupStateResultFilterSensitiveLog");
    exports.DescribePatchGroupStateResultFilterSensitiveLog = DescribePatchGroupStateResultFilterSensitiveLog;
    var DescribePatchPropertiesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchPropertiesRequestFilterSensitiveLog");
    exports.DescribePatchPropertiesRequestFilterSensitiveLog = DescribePatchPropertiesRequestFilterSensitiveLog;
    var DescribePatchPropertiesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribePatchPropertiesResultFilterSensitiveLog");
    exports.DescribePatchPropertiesResultFilterSensitiveLog = DescribePatchPropertiesResultFilterSensitiveLog;
    var SessionFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "SessionFilterFilterSensitiveLog");
    exports.SessionFilterFilterSensitiveLog = SessionFilterFilterSensitiveLog;
    var DescribeSessionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeSessionsRequestFilterSensitiveLog");
    exports.DescribeSessionsRequestFilterSensitiveLog = DescribeSessionsRequestFilterSensitiveLog;
    var SessionManagerOutputUrlFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "SessionManagerOutputUrlFilterSensitiveLog");
    exports.SessionManagerOutputUrlFilterSensitiveLog = SessionManagerOutputUrlFilterSensitiveLog;
    var SessionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "SessionFilterSensitiveLog");
    exports.SessionFilterSensitiveLog = SessionFilterSensitiveLog;
    var DescribeSessionsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DescribeSessionsResponseFilterSensitiveLog");
    exports.DescribeSessionsResponseFilterSensitiveLog = DescribeSessionsResponseFilterSensitiveLog;
    var DisassociateOpsItemRelatedItemRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DisassociateOpsItemRelatedItemRequestFilterSensitiveLog");
    exports.DisassociateOpsItemRelatedItemRequestFilterSensitiveLog = DisassociateOpsItemRelatedItemRequestFilterSensitiveLog;
    var DisassociateOpsItemRelatedItemResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DisassociateOpsItemRelatedItemResponseFilterSensitiveLog");
    exports.DisassociateOpsItemRelatedItemResponseFilterSensitiveLog = DisassociateOpsItemRelatedItemResponseFilterSensitiveLog;
    var GetAutomationExecutionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetAutomationExecutionRequestFilterSensitiveLog");
    exports.GetAutomationExecutionRequestFilterSensitiveLog = GetAutomationExecutionRequestFilterSensitiveLog;
    var ProgressCountersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ProgressCountersFilterSensitiveLog");
    exports.ProgressCountersFilterSensitiveLog = ProgressCountersFilterSensitiveLog;
    var AutomationExecutionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AutomationExecutionFilterSensitiveLog");
    exports.AutomationExecutionFilterSensitiveLog = AutomationExecutionFilterSensitiveLog;
    var GetAutomationExecutionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetAutomationExecutionResultFilterSensitiveLog");
    exports.GetAutomationExecutionResultFilterSensitiveLog = GetAutomationExecutionResultFilterSensitiveLog;
    var GetCalendarStateRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetCalendarStateRequestFilterSensitiveLog");
    exports.GetCalendarStateRequestFilterSensitiveLog = GetCalendarStateRequestFilterSensitiveLog;
    var GetCalendarStateResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetCalendarStateResponseFilterSensitiveLog");
    exports.GetCalendarStateResponseFilterSensitiveLog = GetCalendarStateResponseFilterSensitiveLog;
    var GetCommandInvocationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetCommandInvocationRequestFilterSensitiveLog");
    exports.GetCommandInvocationRequestFilterSensitiveLog = GetCommandInvocationRequestFilterSensitiveLog;
    var CloudWatchOutputConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CloudWatchOutputConfigFilterSensitiveLog");
    exports.CloudWatchOutputConfigFilterSensitiveLog = CloudWatchOutputConfigFilterSensitiveLog;
    var GetCommandInvocationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetCommandInvocationResultFilterSensitiveLog");
    exports.GetCommandInvocationResultFilterSensitiveLog = GetCommandInvocationResultFilterSensitiveLog;
    var GetConnectionStatusRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetConnectionStatusRequestFilterSensitiveLog");
    exports.GetConnectionStatusRequestFilterSensitiveLog = GetConnectionStatusRequestFilterSensitiveLog;
    var GetConnectionStatusResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetConnectionStatusResponseFilterSensitiveLog");
    exports.GetConnectionStatusResponseFilterSensitiveLog = GetConnectionStatusResponseFilterSensitiveLog;
    var GetDefaultPatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetDefaultPatchBaselineRequestFilterSensitiveLog");
    exports.GetDefaultPatchBaselineRequestFilterSensitiveLog = GetDefaultPatchBaselineRequestFilterSensitiveLog;
    var GetDefaultPatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetDefaultPatchBaselineResultFilterSensitiveLog");
    exports.GetDefaultPatchBaselineResultFilterSensitiveLog = GetDefaultPatchBaselineResultFilterSensitiveLog;
    var BaselineOverrideFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    }), "BaselineOverrideFilterSensitiveLog");
    exports.BaselineOverrideFilterSensitiveLog = BaselineOverrideFilterSensitiveLog;
    var GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog");
    exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog;
    var GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog");
    exports.GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog = GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog;
    var GetDocumentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetDocumentRequestFilterSensitiveLog");
    exports.GetDocumentRequestFilterSensitiveLog = GetDocumentRequestFilterSensitiveLog;
    var AttachmentContentFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AttachmentContentFilterSensitiveLog");
    exports.AttachmentContentFilterSensitiveLog = AttachmentContentFilterSensitiveLog;
    var GetDocumentResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetDocumentResultFilterSensitiveLog");
    exports.GetDocumentResultFilterSensitiveLog = GetDocumentResultFilterSensitiveLog;
    var InventoryFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryFilterFilterSensitiveLog");
    exports.InventoryFilterFilterSensitiveLog = InventoryFilterFilterSensitiveLog;
    var InventoryGroupFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryGroupFilterSensitiveLog");
    exports.InventoryGroupFilterSensitiveLog = InventoryGroupFilterSensitiveLog;
    var ResultAttributeFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResultAttributeFilterSensitiveLog");
    exports.ResultAttributeFilterSensitiveLog = ResultAttributeFilterSensitiveLog;
    var InventoryResultItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryResultItemFilterSensitiveLog");
    exports.InventoryResultItemFilterSensitiveLog = InventoryResultItemFilterSensitiveLog;
    var InventoryResultEntityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryResultEntityFilterSensitiveLog");
    exports.InventoryResultEntityFilterSensitiveLog = InventoryResultEntityFilterSensitiveLog;
    var GetInventoryResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetInventoryResultFilterSensitiveLog");
    exports.GetInventoryResultFilterSensitiveLog = GetInventoryResultFilterSensitiveLog;
    var GetInventorySchemaRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetInventorySchemaRequestFilterSensitiveLog");
    exports.GetInventorySchemaRequestFilterSensitiveLog = GetInventorySchemaRequestFilterSensitiveLog;
    var InventoryItemAttributeFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryItemAttributeFilterSensitiveLog");
    exports.InventoryItemAttributeFilterSensitiveLog = InventoryItemAttributeFilterSensitiveLog;
    var InventoryItemSchemaFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryItemSchemaFilterSensitiveLog");
    exports.InventoryItemSchemaFilterSensitiveLog = InventoryItemSchemaFilterSensitiveLog;
    var GetInventorySchemaResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetInventorySchemaResultFilterSensitiveLog");
    exports.GetInventorySchemaResultFilterSensitiveLog = GetInventorySchemaResultFilterSensitiveLog;
    var GetMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetMaintenanceWindowRequestFilterSensitiveLog");
    exports.GetMaintenanceWindowRequestFilterSensitiveLog = GetMaintenanceWindowRequestFilterSensitiveLog;
    var GetMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "GetMaintenanceWindowResultFilterSensitiveLog");
    exports.GetMaintenanceWindowResultFilterSensitiveLog = GetMaintenanceWindowResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetMaintenanceWindowExecutionRequestFilterSensitiveLog");
    exports.GetMaintenanceWindowExecutionRequestFilterSensitiveLog = GetMaintenanceWindowExecutionRequestFilterSensitiveLog;
    var GetMaintenanceWindowExecutionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetMaintenanceWindowExecutionResultFilterSensitiveLog");
    exports.GetMaintenanceWindowExecutionResultFilterSensitiveLog = GetMaintenanceWindowExecutionResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog");
    exports.GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog = GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING }
    }), "GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog");
    exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog");
    exports.GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog = GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    }), "GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog");
    exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog;
    var GetMaintenanceWindowTaskRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetMaintenanceWindowTaskRequestFilterSensitiveLog");
    exports.GetMaintenanceWindowTaskRequestFilterSensitiveLog = GetMaintenanceWindowTaskRequestFilterSensitiveLog;
    var MaintenanceWindowAutomationParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "MaintenanceWindowAutomationParametersFilterSensitiveLog");
    exports.MaintenanceWindowAutomationParametersFilterSensitiveLog = MaintenanceWindowAutomationParametersFilterSensitiveLog;
    var MaintenanceWindowLambdaParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowLambdaParametersFilterSensitiveLog");
    exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = MaintenanceWindowLambdaParametersFilterSensitiveLog;
    var NotificationConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "NotificationConfigFilterSensitiveLog");
    exports.NotificationConfigFilterSensitiveLog = NotificationConfigFilterSensitiveLog;
    var MaintenanceWindowRunCommandParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowRunCommandParametersFilterSensitiveLog");
    exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = MaintenanceWindowRunCommandParametersFilterSensitiveLog;
    var MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Input && { Input: smithy_client_1.SENSITIVE_STRING }
    }), "MaintenanceWindowStepFunctionsParametersFilterSensitiveLog");
    exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = MaintenanceWindowStepFunctionsParametersFilterSensitiveLog;
    var MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.RunCommand && { RunCommand: (0, exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog)(obj.RunCommand) },
      ...obj.StepFunctions && {
        StepFunctions: (0, exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog)(obj.StepFunctions)
      },
      ...obj.Lambda && { Lambda: (0, exports.MaintenanceWindowLambdaParametersFilterSensitiveLog)(obj.Lambda) }
    }), "MaintenanceWindowTaskInvocationParametersFilterSensitiveLog");
    exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = MaintenanceWindowTaskInvocationParametersFilterSensitiveLog;
    var GetMaintenanceWindowTaskResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "GetMaintenanceWindowTaskResultFilterSensitiveLog");
    exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = GetMaintenanceWindowTaskResultFilterSensitiveLog;
    var GetOpsItemRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetOpsItemRequestFilterSensitiveLog");
    exports.GetOpsItemRequestFilterSensitiveLog = GetOpsItemRequestFilterSensitiveLog;
    var OpsItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemFilterSensitiveLog");
    exports.OpsItemFilterSensitiveLog = OpsItemFilterSensitiveLog;
    var GetOpsItemResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetOpsItemResponseFilterSensitiveLog");
    exports.GetOpsItemResponseFilterSensitiveLog = GetOpsItemResponseFilterSensitiveLog;
    var GetOpsMetadataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetOpsMetadataRequestFilterSensitiveLog");
    exports.GetOpsMetadataRequestFilterSensitiveLog = GetOpsMetadataRequestFilterSensitiveLog;
    var GetOpsMetadataResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetOpsMetadataResultFilterSensitiveLog");
    exports.GetOpsMetadataResultFilterSensitiveLog = GetOpsMetadataResultFilterSensitiveLog;
    var OpsFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsFilterFilterSensitiveLog");
    exports.OpsFilterFilterSensitiveLog = OpsFilterFilterSensitiveLog;
    var OpsResultAttributeFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsResultAttributeFilterSensitiveLog");
    exports.OpsResultAttributeFilterSensitiveLog = OpsResultAttributeFilterSensitiveLog;
    var OpsEntityItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsEntityItemFilterSensitiveLog");
    exports.OpsEntityItemFilterSensitiveLog = OpsEntityItemFilterSensitiveLog;
    var OpsEntityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsEntityFilterSensitiveLog");
    exports.OpsEntityFilterSensitiveLog = OpsEntityFilterSensitiveLog;
    var GetOpsSummaryResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetOpsSummaryResultFilterSensitiveLog");
    exports.GetOpsSummaryResultFilterSensitiveLog = GetOpsSummaryResultFilterSensitiveLog;
    var GetParameterRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetParameterRequestFilterSensitiveLog");
    exports.GetParameterRequestFilterSensitiveLog = GetParameterRequestFilterSensitiveLog;
    var ParameterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    }), "ParameterFilterSensitiveLog");
    exports.ParameterFilterSensitiveLog = ParameterFilterSensitiveLog;
    var GetParameterResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameter && { Parameter: (0, exports.ParameterFilterSensitiveLog)(obj.Parameter) }
    }), "GetParameterResultFilterSensitiveLog");
    exports.GetParameterResultFilterSensitiveLog = GetParameterResultFilterSensitiveLog;
    var GetParameterHistoryRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetParameterHistoryRequestFilterSensitiveLog");
    exports.GetParameterHistoryRequestFilterSensitiveLog = GetParameterHistoryRequestFilterSensitiveLog;
    var ParameterHistoryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    }), "ParameterHistoryFilterSensitiveLog");
    exports.ParameterHistoryFilterSensitiveLog = ParameterHistoryFilterSensitiveLog;
    var GetParameterHistoryResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterHistoryFilterSensitiveLog)(item)) }
    }), "GetParameterHistoryResultFilterSensitiveLog");
    exports.GetParameterHistoryResultFilterSensitiveLog = GetParameterHistoryResultFilterSensitiveLog;
    var GetParametersRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetParametersRequestFilterSensitiveLog");
    exports.GetParametersRequestFilterSensitiveLog = GetParametersRequestFilterSensitiveLog;
    var GetParametersResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterFilterSensitiveLog)(item)) }
    }), "GetParametersResultFilterSensitiveLog");
    exports.GetParametersResultFilterSensitiveLog = GetParametersResultFilterSensitiveLog;
    var GetParametersByPathRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetParametersByPathRequestFilterSensitiveLog");
    exports.GetParametersByPathRequestFilterSensitiveLog = GetParametersByPathRequestFilterSensitiveLog;
    var GetParametersByPathResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterFilterSensitiveLog)(item)) }
    }), "GetParametersByPathResultFilterSensitiveLog");
    exports.GetParametersByPathResultFilterSensitiveLog = GetParametersByPathResultFilterSensitiveLog;
    var GetPatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetPatchBaselineRequestFilterSensitiveLog");
    exports.GetPatchBaselineRequestFilterSensitiveLog = GetPatchBaselineRequestFilterSensitiveLog;
    var GetPatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    }), "GetPatchBaselineResultFilterSensitiveLog");
    exports.GetPatchBaselineResultFilterSensitiveLog = GetPatchBaselineResultFilterSensitiveLog;
    var GetPatchBaselineForPatchGroupRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetPatchBaselineForPatchGroupRequestFilterSensitiveLog");
    exports.GetPatchBaselineForPatchGroupRequestFilterSensitiveLog = GetPatchBaselineForPatchGroupRequestFilterSensitiveLog;
    var GetPatchBaselineForPatchGroupResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetPatchBaselineForPatchGroupResultFilterSensitiveLog");
    exports.GetPatchBaselineForPatchGroupResultFilterSensitiveLog = GetPatchBaselineForPatchGroupResultFilterSensitiveLog;
    var GetServiceSettingRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetServiceSettingRequestFilterSensitiveLog");
    exports.GetServiceSettingRequestFilterSensitiveLog = GetServiceSettingRequestFilterSensitiveLog;
    var ServiceSettingFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ServiceSettingFilterSensitiveLog");
    exports.ServiceSettingFilterSensitiveLog = ServiceSettingFilterSensitiveLog;
    var GetServiceSettingResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetServiceSettingResultFilterSensitiveLog");
    exports.GetServiceSettingResultFilterSensitiveLog = GetServiceSettingResultFilterSensitiveLog;
    var LabelParameterVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "LabelParameterVersionRequestFilterSensitiveLog");
    exports.LabelParameterVersionRequestFilterSensitiveLog = LabelParameterVersionRequestFilterSensitiveLog;
    var LabelParameterVersionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "LabelParameterVersionResultFilterSensitiveLog");
    exports.LabelParameterVersionResultFilterSensitiveLog = LabelParameterVersionResultFilterSensitiveLog;
    var AssociationFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationFilterFilterSensitiveLog");
    exports.AssociationFilterFilterSensitiveLog = AssociationFilterFilterSensitiveLog;
    var ListAssociationsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListAssociationsRequestFilterSensitiveLog");
    exports.ListAssociationsRequestFilterSensitiveLog = ListAssociationsRequestFilterSensitiveLog;
    var AssociationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssociationFilterSensitiveLog");
    exports.AssociationFilterSensitiveLog = AssociationFilterSensitiveLog;
    var ListAssociationsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListAssociationsResultFilterSensitiveLog");
    exports.ListAssociationsResultFilterSensitiveLog = ListAssociationsResultFilterSensitiveLog;
    var ListAssociationVersionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListAssociationVersionsRequestFilterSensitiveLog");
    exports.ListAssociationVersionsRequestFilterSensitiveLog = ListAssociationVersionsRequestFilterSensitiveLog;
    var AssociationVersionInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "AssociationVersionInfoFilterSensitiveLog");
    exports.AssociationVersionInfoFilterSensitiveLog = AssociationVersionInfoFilterSensitiveLog;
    var ListAssociationVersionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationVersions && {
        AssociationVersions: obj.AssociationVersions.map((item) => (0, exports.AssociationVersionInfoFilterSensitiveLog)(item))
      }
    }), "ListAssociationVersionsResultFilterSensitiveLog");
    exports.ListAssociationVersionsResultFilterSensitiveLog = ListAssociationVersionsResultFilterSensitiveLog;
    var CommandFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CommandFilterFilterSensitiveLog");
    exports.CommandFilterFilterSensitiveLog = CommandFilterFilterSensitiveLog;
    var ListCommandInvocationsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListCommandInvocationsRequestFilterSensitiveLog");
    exports.ListCommandInvocationsRequestFilterSensitiveLog = ListCommandInvocationsRequestFilterSensitiveLog;
    var CommandPluginFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CommandPluginFilterSensitiveLog");
    exports.CommandPluginFilterSensitiveLog = CommandPluginFilterSensitiveLog;
    var CommandInvocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CommandInvocationFilterSensitiveLog");
    exports.CommandInvocationFilterSensitiveLog = CommandInvocationFilterSensitiveLog;
    var ListCommandInvocationsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListCommandInvocationsResultFilterSensitiveLog");
    exports.ListCommandInvocationsResultFilterSensitiveLog = ListCommandInvocationsResultFilterSensitiveLog;
    var ListCommandsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListCommandsRequestFilterSensitiveLog");
    exports.ListCommandsRequestFilterSensitiveLog = ListCommandsRequestFilterSensitiveLog;
    var CommandFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "CommandFilterSensitiveLog");
    exports.CommandFilterSensitiveLog = CommandFilterSensitiveLog;
    var ListCommandsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Commands && { Commands: obj.Commands.map((item) => (0, exports.CommandFilterSensitiveLog)(item)) }
    }), "ListCommandsResultFilterSensitiveLog");
    exports.ListCommandsResultFilterSensitiveLog = ListCommandsResultFilterSensitiveLog;
    var ComplianceStringFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ComplianceStringFilterFilterSensitiveLog");
    exports.ComplianceStringFilterFilterSensitiveLog = ComplianceStringFilterFilterSensitiveLog;
    var ListComplianceItemsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListComplianceItemsRequestFilterSensitiveLog");
    exports.ListComplianceItemsRequestFilterSensitiveLog = ListComplianceItemsRequestFilterSensitiveLog;
    var ComplianceExecutionSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ComplianceExecutionSummaryFilterSensitiveLog");
    exports.ComplianceExecutionSummaryFilterSensitiveLog = ComplianceExecutionSummaryFilterSensitiveLog;
    var ComplianceItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ComplianceItemFilterSensitiveLog");
    exports.ComplianceItemFilterSensitiveLog = ComplianceItemFilterSensitiveLog;
    var ListComplianceItemsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListComplianceItemsResultFilterSensitiveLog");
    exports.ListComplianceItemsResultFilterSensitiveLog = ListComplianceItemsResultFilterSensitiveLog;
    var ListComplianceSummariesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListComplianceSummariesRequestFilterSensitiveLog");
    exports.ListComplianceSummariesRequestFilterSensitiveLog = ListComplianceSummariesRequestFilterSensitiveLog;
    var SeveritySummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "SeveritySummaryFilterSensitiveLog");
    exports.SeveritySummaryFilterSensitiveLog = SeveritySummaryFilterSensitiveLog;
    var CompliantSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CompliantSummaryFilterSensitiveLog");
    exports.CompliantSummaryFilterSensitiveLog = CompliantSummaryFilterSensitiveLog;
    var NonCompliantSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "NonCompliantSummaryFilterSensitiveLog");
    exports.NonCompliantSummaryFilterSensitiveLog = NonCompliantSummaryFilterSensitiveLog;
    var ComplianceSummaryItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ComplianceSummaryItemFilterSensitiveLog");
    exports.ComplianceSummaryItemFilterSensitiveLog = ComplianceSummaryItemFilterSensitiveLog;
    var ListComplianceSummariesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListComplianceSummariesResultFilterSensitiveLog");
    exports.ListComplianceSummariesResultFilterSensitiveLog = ListComplianceSummariesResultFilterSensitiveLog;
    var ListDocumentMetadataHistoryRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListDocumentMetadataHistoryRequestFilterSensitiveLog");
    exports.ListDocumentMetadataHistoryRequestFilterSensitiveLog = ListDocumentMetadataHistoryRequestFilterSensitiveLog;
    var DocumentReviewCommentSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentReviewCommentSourceFilterSensitiveLog");
    exports.DocumentReviewCommentSourceFilterSensitiveLog = DocumentReviewCommentSourceFilterSensitiveLog;
    var DocumentReviewerResponseSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentReviewerResponseSourceFilterSensitiveLog");
    exports.DocumentReviewerResponseSourceFilterSensitiveLog = DocumentReviewerResponseSourceFilterSensitiveLog;
    var DocumentMetadataResponseInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentMetadataResponseInfoFilterSensitiveLog");
    exports.DocumentMetadataResponseInfoFilterSensitiveLog = DocumentMetadataResponseInfoFilterSensitiveLog;
    var ListDocumentMetadataHistoryResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListDocumentMetadataHistoryResponseFilterSensitiveLog");
    exports.ListDocumentMetadataHistoryResponseFilterSensitiveLog = ListDocumentMetadataHistoryResponseFilterSensitiveLog;
    var DocumentFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentFilterFilterSensitiveLog");
    exports.DocumentFilterFilterSensitiveLog = DocumentFilterFilterSensitiveLog;
    var DocumentKeyValuesFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentKeyValuesFilterFilterSensitiveLog");
    exports.DocumentKeyValuesFilterFilterSensitiveLog = DocumentKeyValuesFilterFilterSensitiveLog;
    var ListDocumentsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListDocumentsRequestFilterSensitiveLog");
    exports.ListDocumentsRequestFilterSensitiveLog = ListDocumentsRequestFilterSensitiveLog;
    var DocumentIdentifierFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentIdentifierFilterSensitiveLog");
    exports.DocumentIdentifierFilterSensitiveLog = DocumentIdentifierFilterSensitiveLog;
    var ListDocumentsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListDocumentsResultFilterSensitiveLog");
    exports.ListDocumentsResultFilterSensitiveLog = ListDocumentsResultFilterSensitiveLog;
    var ListDocumentVersionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListDocumentVersionsRequestFilterSensitiveLog");
    exports.ListDocumentVersionsRequestFilterSensitiveLog = ListDocumentVersionsRequestFilterSensitiveLog;
    var DocumentVersionInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentVersionInfoFilterSensitiveLog");
    exports.DocumentVersionInfoFilterSensitiveLog = DocumentVersionInfoFilterSensitiveLog;
    var ListDocumentVersionsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListDocumentVersionsResultFilterSensitiveLog");
    exports.ListDocumentVersionsResultFilterSensitiveLog = ListDocumentVersionsResultFilterSensitiveLog;
    var ListInventoryEntriesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListInventoryEntriesRequestFilterSensitiveLog");
    exports.ListInventoryEntriesRequestFilterSensitiveLog = ListInventoryEntriesRequestFilterSensitiveLog;
    var ListInventoryEntriesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListInventoryEntriesResultFilterSensitiveLog");
    exports.ListInventoryEntriesResultFilterSensitiveLog = ListInventoryEntriesResultFilterSensitiveLog;
    var OpsItemEventFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemEventFilterFilterSensitiveLog");
    exports.OpsItemEventFilterFilterSensitiveLog = OpsItemEventFilterFilterSensitiveLog;
    var ListOpsItemEventsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListOpsItemEventsRequestFilterSensitiveLog");
    exports.ListOpsItemEventsRequestFilterSensitiveLog = ListOpsItemEventsRequestFilterSensitiveLog;
    var OpsItemIdentityFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemIdentityFilterSensitiveLog");
    exports.OpsItemIdentityFilterSensitiveLog = OpsItemIdentityFilterSensitiveLog;
    var OpsItemEventSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemEventSummaryFilterSensitiveLog");
    exports.OpsItemEventSummaryFilterSensitiveLog = OpsItemEventSummaryFilterSensitiveLog;
    var ListOpsItemEventsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListOpsItemEventsResponseFilterSensitiveLog");
    exports.ListOpsItemEventsResponseFilterSensitiveLog = ListOpsItemEventsResponseFilterSensitiveLog;
    var OpsItemRelatedItemsFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemRelatedItemsFilterFilterSensitiveLog");
    exports.OpsItemRelatedItemsFilterFilterSensitiveLog = OpsItemRelatedItemsFilterFilterSensitiveLog;
    var ListOpsItemRelatedItemsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListOpsItemRelatedItemsRequestFilterSensitiveLog");
    exports.ListOpsItemRelatedItemsRequestFilterSensitiveLog = ListOpsItemRelatedItemsRequestFilterSensitiveLog;
    var OpsItemRelatedItemSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsItemRelatedItemSummaryFilterSensitiveLog");
    exports.OpsItemRelatedItemSummaryFilterSensitiveLog = OpsItemRelatedItemSummaryFilterSensitiveLog;
    var ListOpsItemRelatedItemsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListOpsItemRelatedItemsResponseFilterSensitiveLog");
    exports.ListOpsItemRelatedItemsResponseFilterSensitiveLog = ListOpsItemRelatedItemsResponseFilterSensitiveLog;
    var OpsMetadataFilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsMetadataFilterFilterSensitiveLog");
    exports.OpsMetadataFilterFilterSensitiveLog = OpsMetadataFilterFilterSensitiveLog;
    var ListOpsMetadataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListOpsMetadataRequestFilterSensitiveLog");
    exports.ListOpsMetadataRequestFilterSensitiveLog = ListOpsMetadataRequestFilterSensitiveLog;
    var OpsMetadataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsMetadataFilterSensitiveLog");
    exports.OpsMetadataFilterSensitiveLog = OpsMetadataFilterSensitiveLog;
    var ListOpsMetadataResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListOpsMetadataResultFilterSensitiveLog");
    exports.ListOpsMetadataResultFilterSensitiveLog = ListOpsMetadataResultFilterSensitiveLog;
    var ListResourceComplianceSummariesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListResourceComplianceSummariesRequestFilterSensitiveLog");
    exports.ListResourceComplianceSummariesRequestFilterSensitiveLog = ListResourceComplianceSummariesRequestFilterSensitiveLog;
    var ResourceComplianceSummaryItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceComplianceSummaryItemFilterSensitiveLog");
    exports.ResourceComplianceSummaryItemFilterSensitiveLog = ResourceComplianceSummaryItemFilterSensitiveLog;
    var ListResourceComplianceSummariesResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListResourceComplianceSummariesResultFilterSensitiveLog");
    exports.ListResourceComplianceSummariesResultFilterSensitiveLog = ListResourceComplianceSummariesResultFilterSensitiveLog;
    var ListResourceDataSyncRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListResourceDataSyncRequestFilterSensitiveLog");
    exports.ListResourceDataSyncRequestFilterSensitiveLog = ListResourceDataSyncRequestFilterSensitiveLog;
    var ResourceDataSyncSourceWithStateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceDataSyncSourceWithStateFilterSensitiveLog");
    exports.ResourceDataSyncSourceWithStateFilterSensitiveLog = ResourceDataSyncSourceWithStateFilterSensitiveLog;
    var ResourceDataSyncItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResourceDataSyncItemFilterSensitiveLog");
    exports.ResourceDataSyncItemFilterSensitiveLog = ResourceDataSyncItemFilterSensitiveLog;
    var ListResourceDataSyncResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListResourceDataSyncResultFilterSensitiveLog");
    exports.ListResourceDataSyncResultFilterSensitiveLog = ListResourceDataSyncResultFilterSensitiveLog;
    var ListTagsForResourceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListTagsForResourceRequestFilterSensitiveLog");
    exports.ListTagsForResourceRequestFilterSensitiveLog = ListTagsForResourceRequestFilterSensitiveLog;
    var ListTagsForResourceResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListTagsForResourceResultFilterSensitiveLog");
    exports.ListTagsForResourceResultFilterSensitiveLog = ListTagsForResourceResultFilterSensitiveLog;
    var ModifyDocumentPermissionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ModifyDocumentPermissionRequestFilterSensitiveLog");
    exports.ModifyDocumentPermissionRequestFilterSensitiveLog = ModifyDocumentPermissionRequestFilterSensitiveLog;
    var ModifyDocumentPermissionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ModifyDocumentPermissionResponseFilterSensitiveLog");
    exports.ModifyDocumentPermissionResponseFilterSensitiveLog = ModifyDocumentPermissionResponseFilterSensitiveLog;
    var ComplianceItemEntryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ComplianceItemEntryFilterSensitiveLog");
    exports.ComplianceItemEntryFilterSensitiveLog = ComplianceItemEntryFilterSensitiveLog;
    var PutComplianceItemsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PutComplianceItemsRequestFilterSensitiveLog");
    exports.PutComplianceItemsRequestFilterSensitiveLog = PutComplianceItemsRequestFilterSensitiveLog;
    var PutComplianceItemsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PutComplianceItemsResultFilterSensitiveLog");
    exports.PutComplianceItemsResultFilterSensitiveLog = PutComplianceItemsResultFilterSensitiveLog;
    var InventoryItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryItemFilterSensitiveLog");
    exports.InventoryItemFilterSensitiveLog = InventoryItemFilterSensitiveLog;
    var PutInventoryRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PutInventoryRequestFilterSensitiveLog");
    exports.PutInventoryRequestFilterSensitiveLog = PutInventoryRequestFilterSensitiveLog;
    var PutInventoryResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PutInventoryResultFilterSensitiveLog");
    exports.PutInventoryResultFilterSensitiveLog = PutInventoryResultFilterSensitiveLog;
    var PutParameterRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    }), "PutParameterRequestFilterSensitiveLog");
    exports.PutParameterRequestFilterSensitiveLog = PutParameterRequestFilterSensitiveLog;
    var PutParameterResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PutParameterResultFilterSensitiveLog");
    exports.PutParameterResultFilterSensitiveLog = PutParameterResultFilterSensitiveLog;
    var RegisterDefaultPatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RegisterDefaultPatchBaselineRequestFilterSensitiveLog");
    exports.RegisterDefaultPatchBaselineRequestFilterSensitiveLog = RegisterDefaultPatchBaselineRequestFilterSensitiveLog;
    var RegisterDefaultPatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RegisterDefaultPatchBaselineResultFilterSensitiveLog");
    exports.RegisterDefaultPatchBaselineResultFilterSensitiveLog = RegisterDefaultPatchBaselineResultFilterSensitiveLog;
    var RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog");
    exports.RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog;
    var RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog");
    exports.RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog = RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog;
    var RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog");
    exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog;
    var RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog");
    exports.RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog = RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog;
    var RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog");
    exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog;
    var RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog");
    exports.RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog = RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog;
    var RemoveTagsFromResourceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RemoveTagsFromResourceRequestFilterSensitiveLog");
    exports.RemoveTagsFromResourceRequestFilterSensitiveLog = RemoveTagsFromResourceRequestFilterSensitiveLog;
    var RemoveTagsFromResourceResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RemoveTagsFromResourceResultFilterSensitiveLog");
    exports.RemoveTagsFromResourceResultFilterSensitiveLog = RemoveTagsFromResourceResultFilterSensitiveLog;
    var ResetServiceSettingRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResetServiceSettingRequestFilterSensitiveLog");
    exports.ResetServiceSettingRequestFilterSensitiveLog = ResetServiceSettingRequestFilterSensitiveLog;
    var ResetServiceSettingResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResetServiceSettingResultFilterSensitiveLog");
    exports.ResetServiceSettingResultFilterSensitiveLog = ResetServiceSettingResultFilterSensitiveLog;
    var ResumeSessionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResumeSessionRequestFilterSensitiveLog");
    exports.ResumeSessionRequestFilterSensitiveLog = ResumeSessionRequestFilterSensitiveLog;
    var ResumeSessionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ResumeSessionResponseFilterSensitiveLog");
    exports.ResumeSessionResponseFilterSensitiveLog = ResumeSessionResponseFilterSensitiveLog;
    var SendAutomationSignalRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "SendAutomationSignalRequestFilterSensitiveLog");
    exports.SendAutomationSignalRequestFilterSensitiveLog = SendAutomationSignalRequestFilterSensitiveLog;
    var SendAutomationSignalResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "SendAutomationSignalResultFilterSensitiveLog");
    exports.SendAutomationSignalResultFilterSensitiveLog = SendAutomationSignalResultFilterSensitiveLog;
    var SendCommandRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "SendCommandRequestFilterSensitiveLog");
    exports.SendCommandRequestFilterSensitiveLog = SendCommandRequestFilterSensitiveLog;
    var SendCommandResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Command && { Command: (0, exports.CommandFilterSensitiveLog)(obj.Command) }
    }), "SendCommandResultFilterSensitiveLog");
    exports.SendCommandResultFilterSensitiveLog = SendCommandResultFilterSensitiveLog;
    var StartAssociationsOnceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartAssociationsOnceRequestFilterSensitiveLog");
    exports.StartAssociationsOnceRequestFilterSensitiveLog = StartAssociationsOnceRequestFilterSensitiveLog;
    var StartAssociationsOnceResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartAssociationsOnceResultFilterSensitiveLog");
    exports.StartAssociationsOnceResultFilterSensitiveLog = StartAssociationsOnceResultFilterSensitiveLog;
    var StartAutomationExecutionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartAutomationExecutionRequestFilterSensitiveLog");
    exports.StartAutomationExecutionRequestFilterSensitiveLog = StartAutomationExecutionRequestFilterSensitiveLog;
    var StartAutomationExecutionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartAutomationExecutionResultFilterSensitiveLog");
    exports.StartAutomationExecutionResultFilterSensitiveLog = StartAutomationExecutionResultFilterSensitiveLog;
    var StartChangeRequestExecutionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartChangeRequestExecutionRequestFilterSensitiveLog");
    exports.StartChangeRequestExecutionRequestFilterSensitiveLog = StartChangeRequestExecutionRequestFilterSensitiveLog;
    var StartChangeRequestExecutionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartChangeRequestExecutionResultFilterSensitiveLog");
    exports.StartChangeRequestExecutionResultFilterSensitiveLog = StartChangeRequestExecutionResultFilterSensitiveLog;
    var StartSessionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartSessionRequestFilterSensitiveLog");
    exports.StartSessionRequestFilterSensitiveLog = StartSessionRequestFilterSensitiveLog;
    var StartSessionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StartSessionResponseFilterSensitiveLog");
    exports.StartSessionResponseFilterSensitiveLog = StartSessionResponseFilterSensitiveLog;
    var StopAutomationExecutionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StopAutomationExecutionRequestFilterSensitiveLog");
    exports.StopAutomationExecutionRequestFilterSensitiveLog = StopAutomationExecutionRequestFilterSensitiveLog;
    var StopAutomationExecutionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "StopAutomationExecutionResultFilterSensitiveLog");
    exports.StopAutomationExecutionResultFilterSensitiveLog = StopAutomationExecutionResultFilterSensitiveLog;
    var TerminateSessionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "TerminateSessionRequestFilterSensitiveLog");
    exports.TerminateSessionRequestFilterSensitiveLog = TerminateSessionRequestFilterSensitiveLog;
    var TerminateSessionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "TerminateSessionResponseFilterSensitiveLog");
    exports.TerminateSessionResponseFilterSensitiveLog = TerminateSessionResponseFilterSensitiveLog;
    var UnlabelParameterVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UnlabelParameterVersionRequestFilterSensitiveLog");
    exports.UnlabelParameterVersionRequestFilterSensitiveLog = UnlabelParameterVersionRequestFilterSensitiveLog;
    var UnlabelParameterVersionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UnlabelParameterVersionResultFilterSensitiveLog");
    exports.UnlabelParameterVersionResultFilterSensitiveLog = UnlabelParameterVersionResultFilterSensitiveLog;
    var UpdateAssociationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    }), "UpdateAssociationRequestFilterSensitiveLog");
    exports.UpdateAssociationRequestFilterSensitiveLog = UpdateAssociationRequestFilterSensitiveLog;
    var UpdateAssociationResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    }), "UpdateAssociationResultFilterSensitiveLog");
    exports.UpdateAssociationResultFilterSensitiveLog = UpdateAssociationResultFilterSensitiveLog;
    var UpdateAssociationStatusRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateAssociationStatusRequestFilterSensitiveLog");
    exports.UpdateAssociationStatusRequestFilterSensitiveLog = UpdateAssociationStatusRequestFilterSensitiveLog;
    var UpdateAssociationStatusResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    }), "UpdateAssociationStatusResultFilterSensitiveLog");
    exports.UpdateAssociationStatusResultFilterSensitiveLog = UpdateAssociationStatusResultFilterSensitiveLog;
    var UpdateDocumentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateDocumentRequestFilterSensitiveLog");
    exports.UpdateDocumentRequestFilterSensitiveLog = UpdateDocumentRequestFilterSensitiveLog;
    var UpdateDocumentResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateDocumentResultFilterSensitiveLog");
    exports.UpdateDocumentResultFilterSensitiveLog = UpdateDocumentResultFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js
var require_models_2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsSummaryRequestFilterSensitiveLog = exports.GetInventoryRequestFilterSensitiveLog = exports.OpsAggregatorFilterSensitiveLog = exports.InventoryAggregatorFilterSensitiveLog = exports.UpdateServiceSettingResultFilterSensitiveLog = exports.UpdateServiceSettingRequestFilterSensitiveLog = exports.UpdateResourceDataSyncResultFilterSensitiveLog = exports.UpdateResourceDataSyncRequestFilterSensitiveLog = exports.UpdatePatchBaselineResultFilterSensitiveLog = exports.UpdatePatchBaselineRequestFilterSensitiveLog = exports.UpdateOpsMetadataResultFilterSensitiveLog = exports.UpdateOpsMetadataRequestFilterSensitiveLog = exports.UpdateOpsItemResponseFilterSensitiveLog = exports.UpdateOpsItemRequestFilterSensitiveLog = exports.UpdateManagedInstanceRoleResultFilterSensitiveLog = exports.UpdateManagedInstanceRoleRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowResultFilterSensitiveLog = exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = exports.UpdateDocumentMetadataResponseFilterSensitiveLog = exports.UpdateDocumentMetadataRequestFilterSensitiveLog = exports.DocumentReviewsFilterSensitiveLog = exports.UpdateDocumentDefaultVersionResultFilterSensitiveLog = exports.DocumentDefaultVersionDescriptionFilterSensitiveLog = exports.UpdateDocumentDefaultVersionRequestFilterSensitiveLog = exports.ResourceDataSyncConflictException = exports.OpsMetadataKeyLimitExceededException = exports.DocumentReviewAction = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var SSMServiceException_1 = require_SSMServiceException();
    var DocumentReviewAction;
    (function(DocumentReviewAction2) {
      DocumentReviewAction2["Approve"] = "Approve";
      DocumentReviewAction2["Reject"] = "Reject";
      DocumentReviewAction2["SendForReview"] = "SendForReview";
      DocumentReviewAction2["UpdateReview"] = "UpdateReview";
    })(DocumentReviewAction = exports.DocumentReviewAction || (exports.DocumentReviewAction = {}));
    var OpsMetadataKeyLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataKeyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataKeyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataKeyLimitExceededException.prototype);
      }
    };
    __name(OpsMetadataKeyLimitExceededException, "OpsMetadataKeyLimitExceededException");
    exports.OpsMetadataKeyLimitExceededException = OpsMetadataKeyLimitExceededException;
    var ResourceDataSyncConflictException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncConflictException.prototype);
        this.Message = opts.Message;
      }
    };
    __name(ResourceDataSyncConflictException, "ResourceDataSyncConflictException");
    exports.ResourceDataSyncConflictException = ResourceDataSyncConflictException;
    var UpdateDocumentDefaultVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateDocumentDefaultVersionRequestFilterSensitiveLog");
    exports.UpdateDocumentDefaultVersionRequestFilterSensitiveLog = UpdateDocumentDefaultVersionRequestFilterSensitiveLog;
    var DocumentDefaultVersionDescriptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentDefaultVersionDescriptionFilterSensitiveLog");
    exports.DocumentDefaultVersionDescriptionFilterSensitiveLog = DocumentDefaultVersionDescriptionFilterSensitiveLog;
    var UpdateDocumentDefaultVersionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateDocumentDefaultVersionResultFilterSensitiveLog");
    exports.UpdateDocumentDefaultVersionResultFilterSensitiveLog = UpdateDocumentDefaultVersionResultFilterSensitiveLog;
    var DocumentReviewsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DocumentReviewsFilterSensitiveLog");
    exports.DocumentReviewsFilterSensitiveLog = DocumentReviewsFilterSensitiveLog;
    var UpdateDocumentMetadataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateDocumentMetadataRequestFilterSensitiveLog");
    exports.UpdateDocumentMetadataRequestFilterSensitiveLog = UpdateDocumentMetadataRequestFilterSensitiveLog;
    var UpdateDocumentMetadataResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateDocumentMetadataResponseFilterSensitiveLog");
    exports.UpdateDocumentMetadataResponseFilterSensitiveLog = UpdateDocumentMetadataResponseFilterSensitiveLog;
    var UpdateMaintenanceWindowRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowRequestFilterSensitiveLog");
    exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = UpdateMaintenanceWindowRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowResultFilterSensitiveLog");
    exports.UpdateMaintenanceWindowResultFilterSensitiveLog = UpdateMaintenanceWindowResultFilterSensitiveLog;
    var UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTargetRequestFilterSensitiveLog");
    exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = UpdateMaintenanceWindowTargetRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowTargetResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTargetResultFilterSensitiveLog");
    exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = UpdateMaintenanceWindowTargetResultFilterSensitiveLog;
    var UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTaskRequestFilterSensitiveLog");
    exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = UpdateMaintenanceWindowTaskRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowTaskResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    }), "UpdateMaintenanceWindowTaskResultFilterSensitiveLog");
    exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = UpdateMaintenanceWindowTaskResultFilterSensitiveLog;
    var UpdateManagedInstanceRoleRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateManagedInstanceRoleRequestFilterSensitiveLog");
    exports.UpdateManagedInstanceRoleRequestFilterSensitiveLog = UpdateManagedInstanceRoleRequestFilterSensitiveLog;
    var UpdateManagedInstanceRoleResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateManagedInstanceRoleResultFilterSensitiveLog");
    exports.UpdateManagedInstanceRoleResultFilterSensitiveLog = UpdateManagedInstanceRoleResultFilterSensitiveLog;
    var UpdateOpsItemRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateOpsItemRequestFilterSensitiveLog");
    exports.UpdateOpsItemRequestFilterSensitiveLog = UpdateOpsItemRequestFilterSensitiveLog;
    var UpdateOpsItemResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateOpsItemResponseFilterSensitiveLog");
    exports.UpdateOpsItemResponseFilterSensitiveLog = UpdateOpsItemResponseFilterSensitiveLog;
    var UpdateOpsMetadataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateOpsMetadataRequestFilterSensitiveLog");
    exports.UpdateOpsMetadataRequestFilterSensitiveLog = UpdateOpsMetadataRequestFilterSensitiveLog;
    var UpdateOpsMetadataResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateOpsMetadataResultFilterSensitiveLog");
    exports.UpdateOpsMetadataResultFilterSensitiveLog = UpdateOpsMetadataResultFilterSensitiveLog;
    var UpdatePatchBaselineRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    }), "UpdatePatchBaselineRequestFilterSensitiveLog");
    exports.UpdatePatchBaselineRequestFilterSensitiveLog = UpdatePatchBaselineRequestFilterSensitiveLog;
    var UpdatePatchBaselineResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    }), "UpdatePatchBaselineResultFilterSensitiveLog");
    exports.UpdatePatchBaselineResultFilterSensitiveLog = UpdatePatchBaselineResultFilterSensitiveLog;
    var UpdateResourceDataSyncRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateResourceDataSyncRequestFilterSensitiveLog");
    exports.UpdateResourceDataSyncRequestFilterSensitiveLog = UpdateResourceDataSyncRequestFilterSensitiveLog;
    var UpdateResourceDataSyncResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateResourceDataSyncResultFilterSensitiveLog");
    exports.UpdateResourceDataSyncResultFilterSensitiveLog = UpdateResourceDataSyncResultFilterSensitiveLog;
    var UpdateServiceSettingRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateServiceSettingRequestFilterSensitiveLog");
    exports.UpdateServiceSettingRequestFilterSensitiveLog = UpdateServiceSettingRequestFilterSensitiveLog;
    var UpdateServiceSettingResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "UpdateServiceSettingResultFilterSensitiveLog");
    exports.UpdateServiceSettingResultFilterSensitiveLog = UpdateServiceSettingResultFilterSensitiveLog;
    var InventoryAggregatorFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "InventoryAggregatorFilterSensitiveLog");
    exports.InventoryAggregatorFilterSensitiveLog = InventoryAggregatorFilterSensitiveLog;
    var OpsAggregatorFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "OpsAggregatorFilterSensitiveLog");
    exports.OpsAggregatorFilterSensitiveLog = OpsAggregatorFilterSensitiveLog;
    var GetInventoryRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetInventoryRequestFilterSensitiveLog");
    exports.GetInventoryRequestFilterSensitiveLog = GetInventoryRequestFilterSensitiveLog;
    var GetOpsSummaryRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetOpsSummaryRequestFilterSensitiveLog");
    exports.GetOpsSummaryRequestFilterSensitiveLog = GetOpsSummaryRequestFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js
var require_Aws_json1_1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = exports.serializeAws_json1_1DescribeInventoryDeletionsCommand = exports.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = exports.serializeAws_json1_1DescribeInstancePatchStatesCommand = exports.serializeAws_json1_1DescribeInstancePatchesCommand = exports.serializeAws_json1_1DescribeInstanceInformationCommand = exports.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = exports.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = exports.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = exports.serializeAws_json1_1DescribeDocumentPermissionCommand = exports.serializeAws_json1_1DescribeDocumentCommand = exports.serializeAws_json1_1DescribeAvailablePatchesCommand = exports.serializeAws_json1_1DescribeAutomationStepExecutionsCommand = exports.serializeAws_json1_1DescribeAutomationExecutionsCommand = exports.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = exports.serializeAws_json1_1DescribeAssociationExecutionsCommand = exports.serializeAws_json1_1DescribeAssociationCommand = exports.serializeAws_json1_1DescribeActivationsCommand = exports.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = exports.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = exports.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1DeregisterManagedInstanceCommand = exports.serializeAws_json1_1DeleteResourceDataSyncCommand = exports.serializeAws_json1_1DeletePatchBaselineCommand = exports.serializeAws_json1_1DeleteParametersCommand = exports.serializeAws_json1_1DeleteParameterCommand = exports.serializeAws_json1_1DeleteOpsMetadataCommand = exports.serializeAws_json1_1DeleteMaintenanceWindowCommand = exports.serializeAws_json1_1DeleteInventoryCommand = exports.serializeAws_json1_1DeleteDocumentCommand = exports.serializeAws_json1_1DeleteAssociationCommand = exports.serializeAws_json1_1DeleteActivationCommand = exports.serializeAws_json1_1CreateResourceDataSyncCommand = exports.serializeAws_json1_1CreatePatchBaselineCommand = exports.serializeAws_json1_1CreateOpsMetadataCommand = exports.serializeAws_json1_1CreateOpsItemCommand = exports.serializeAws_json1_1CreateMaintenanceWindowCommand = exports.serializeAws_json1_1CreateDocumentCommand = exports.serializeAws_json1_1CreateAssociationBatchCommand = exports.serializeAws_json1_1CreateAssociationCommand = exports.serializeAws_json1_1CreateActivationCommand = exports.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = exports.serializeAws_json1_1CancelCommandCommand = exports.serializeAws_json1_1AssociateOpsItemRelatedItemCommand = exports.serializeAws_json1_1AddTagsToResourceCommand = void 0;
    exports.serializeAws_json1_1ListResourceDataSyncCommand = exports.serializeAws_json1_1ListResourceComplianceSummariesCommand = exports.serializeAws_json1_1ListOpsMetadataCommand = exports.serializeAws_json1_1ListOpsItemRelatedItemsCommand = exports.serializeAws_json1_1ListOpsItemEventsCommand = exports.serializeAws_json1_1ListInventoryEntriesCommand = exports.serializeAws_json1_1ListDocumentVersionsCommand = exports.serializeAws_json1_1ListDocumentsCommand = exports.serializeAws_json1_1ListDocumentMetadataHistoryCommand = exports.serializeAws_json1_1ListComplianceSummariesCommand = exports.serializeAws_json1_1ListComplianceItemsCommand = exports.serializeAws_json1_1ListCommandsCommand = exports.serializeAws_json1_1ListCommandInvocationsCommand = exports.serializeAws_json1_1ListAssociationVersionsCommand = exports.serializeAws_json1_1ListAssociationsCommand = exports.serializeAws_json1_1LabelParameterVersionCommand = exports.serializeAws_json1_1GetServiceSettingCommand = exports.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1GetPatchBaselineCommand = exports.serializeAws_json1_1GetParametersByPathCommand = exports.serializeAws_json1_1GetParametersCommand = exports.serializeAws_json1_1GetParameterHistoryCommand = exports.serializeAws_json1_1GetParameterCommand = exports.serializeAws_json1_1GetOpsSummaryCommand = exports.serializeAws_json1_1GetOpsMetadataCommand = exports.serializeAws_json1_1GetOpsItemCommand = exports.serializeAws_json1_1GetMaintenanceWindowTaskCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionCommand = exports.serializeAws_json1_1GetMaintenanceWindowCommand = exports.serializeAws_json1_1GetInventorySchemaCommand = exports.serializeAws_json1_1GetInventoryCommand = exports.serializeAws_json1_1GetDocumentCommand = exports.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = exports.serializeAws_json1_1GetDefaultPatchBaselineCommand = exports.serializeAws_json1_1GetConnectionStatusCommand = exports.serializeAws_json1_1GetCommandInvocationCommand = exports.serializeAws_json1_1GetCalendarStateCommand = exports.serializeAws_json1_1GetAutomationExecutionCommand = exports.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = exports.serializeAws_json1_1DescribeSessionsCommand = exports.serializeAws_json1_1DescribePatchPropertiesCommand = exports.serializeAws_json1_1DescribePatchGroupStateCommand = exports.serializeAws_json1_1DescribePatchGroupsCommand = exports.serializeAws_json1_1DescribePatchBaselinesCommand = exports.serializeAws_json1_1DescribeParametersCommand = exports.serializeAws_json1_1DescribeOpsItemsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = void 0;
    exports.deserializeAws_json1_1DeleteAssociationCommand = exports.deserializeAws_json1_1DeleteActivationCommand = exports.deserializeAws_json1_1CreateResourceDataSyncCommand = exports.deserializeAws_json1_1CreatePatchBaselineCommand = exports.deserializeAws_json1_1CreateOpsMetadataCommand = exports.deserializeAws_json1_1CreateOpsItemCommand = exports.deserializeAws_json1_1CreateMaintenanceWindowCommand = exports.deserializeAws_json1_1CreateDocumentCommand = exports.deserializeAws_json1_1CreateAssociationBatchCommand = exports.deserializeAws_json1_1CreateAssociationCommand = exports.deserializeAws_json1_1CreateActivationCommand = exports.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = exports.deserializeAws_json1_1CancelCommandCommand = exports.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = exports.deserializeAws_json1_1AddTagsToResourceCommand = exports.serializeAws_json1_1UpdateServiceSettingCommand = exports.serializeAws_json1_1UpdateResourceDataSyncCommand = exports.serializeAws_json1_1UpdatePatchBaselineCommand = exports.serializeAws_json1_1UpdateOpsMetadataCommand = exports.serializeAws_json1_1UpdateOpsItemCommand = exports.serializeAws_json1_1UpdateManagedInstanceRoleCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowCommand = exports.serializeAws_json1_1UpdateDocumentMetadataCommand = exports.serializeAws_json1_1UpdateDocumentDefaultVersionCommand = exports.serializeAws_json1_1UpdateDocumentCommand = exports.serializeAws_json1_1UpdateAssociationStatusCommand = exports.serializeAws_json1_1UpdateAssociationCommand = exports.serializeAws_json1_1UnlabelParameterVersionCommand = exports.serializeAws_json1_1TerminateSessionCommand = exports.serializeAws_json1_1StopAutomationExecutionCommand = exports.serializeAws_json1_1StartSessionCommand = exports.serializeAws_json1_1StartChangeRequestExecutionCommand = exports.serializeAws_json1_1StartAutomationExecutionCommand = exports.serializeAws_json1_1StartAssociationsOnceCommand = exports.serializeAws_json1_1SendCommandCommand = exports.serializeAws_json1_1SendAutomationSignalCommand = exports.serializeAws_json1_1ResumeSessionCommand = exports.serializeAws_json1_1ResetServiceSettingCommand = exports.serializeAws_json1_1RemoveTagsFromResourceCommand = exports.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = exports.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = exports.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1RegisterDefaultPatchBaselineCommand = exports.serializeAws_json1_1PutParameterCommand = exports.serializeAws_json1_1PutInventoryCommand = exports.serializeAws_json1_1PutComplianceItemsCommand = exports.serializeAws_json1_1ModifyDocumentPermissionCommand = exports.serializeAws_json1_1ListTagsForResourceCommand = void 0;
    exports.deserializeAws_json1_1GetDefaultPatchBaselineCommand = exports.deserializeAws_json1_1GetConnectionStatusCommand = exports.deserializeAws_json1_1GetCommandInvocationCommand = exports.deserializeAws_json1_1GetCalendarStateCommand = exports.deserializeAws_json1_1GetAutomationExecutionCommand = exports.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = exports.deserializeAws_json1_1DescribeSessionsCommand = exports.deserializeAws_json1_1DescribePatchPropertiesCommand = exports.deserializeAws_json1_1DescribePatchGroupStateCommand = exports.deserializeAws_json1_1DescribePatchGroupsCommand = exports.deserializeAws_json1_1DescribePatchBaselinesCommand = exports.deserializeAws_json1_1DescribeParametersCommand = exports.deserializeAws_json1_1DescribeOpsItemsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = exports.deserializeAws_json1_1DescribeInventoryDeletionsCommand = exports.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = exports.deserializeAws_json1_1DescribeInstancePatchStatesCommand = exports.deserializeAws_json1_1DescribeInstancePatchesCommand = exports.deserializeAws_json1_1DescribeInstanceInformationCommand = exports.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = exports.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = exports.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = exports.deserializeAws_json1_1DescribeDocumentPermissionCommand = exports.deserializeAws_json1_1DescribeDocumentCommand = exports.deserializeAws_json1_1DescribeAvailablePatchesCommand = exports.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = exports.deserializeAws_json1_1DescribeAutomationExecutionsCommand = exports.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = exports.deserializeAws_json1_1DescribeAssociationExecutionsCommand = exports.deserializeAws_json1_1DescribeAssociationCommand = exports.deserializeAws_json1_1DescribeActivationsCommand = exports.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = exports.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = exports.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1DeregisterManagedInstanceCommand = exports.deserializeAws_json1_1DeleteResourceDataSyncCommand = exports.deserializeAws_json1_1DeletePatchBaselineCommand = exports.deserializeAws_json1_1DeleteParametersCommand = exports.deserializeAws_json1_1DeleteParameterCommand = exports.deserializeAws_json1_1DeleteOpsMetadataCommand = exports.deserializeAws_json1_1DeleteMaintenanceWindowCommand = exports.deserializeAws_json1_1DeleteInventoryCommand = exports.deserializeAws_json1_1DeleteDocumentCommand = void 0;
    exports.deserializeAws_json1_1StartAssociationsOnceCommand = exports.deserializeAws_json1_1SendCommandCommand = exports.deserializeAws_json1_1SendAutomationSignalCommand = exports.deserializeAws_json1_1ResumeSessionCommand = exports.deserializeAws_json1_1ResetServiceSettingCommand = exports.deserializeAws_json1_1RemoveTagsFromResourceCommand = exports.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = exports.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = exports.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = exports.deserializeAws_json1_1PutParameterCommand = exports.deserializeAws_json1_1PutInventoryCommand = exports.deserializeAws_json1_1PutComplianceItemsCommand = exports.deserializeAws_json1_1ModifyDocumentPermissionCommand = exports.deserializeAws_json1_1ListTagsForResourceCommand = exports.deserializeAws_json1_1ListResourceDataSyncCommand = exports.deserializeAws_json1_1ListResourceComplianceSummariesCommand = exports.deserializeAws_json1_1ListOpsMetadataCommand = exports.deserializeAws_json1_1ListOpsItemRelatedItemsCommand = exports.deserializeAws_json1_1ListOpsItemEventsCommand = exports.deserializeAws_json1_1ListInventoryEntriesCommand = exports.deserializeAws_json1_1ListDocumentVersionsCommand = exports.deserializeAws_json1_1ListDocumentsCommand = exports.deserializeAws_json1_1ListDocumentMetadataHistoryCommand = exports.deserializeAws_json1_1ListComplianceSummariesCommand = exports.deserializeAws_json1_1ListComplianceItemsCommand = exports.deserializeAws_json1_1ListCommandsCommand = exports.deserializeAws_json1_1ListCommandInvocationsCommand = exports.deserializeAws_json1_1ListAssociationVersionsCommand = exports.deserializeAws_json1_1ListAssociationsCommand = exports.deserializeAws_json1_1LabelParameterVersionCommand = exports.deserializeAws_json1_1GetServiceSettingCommand = exports.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1GetPatchBaselineCommand = exports.deserializeAws_json1_1GetParametersByPathCommand = exports.deserializeAws_json1_1GetParametersCommand = exports.deserializeAws_json1_1GetParameterHistoryCommand = exports.deserializeAws_json1_1GetParameterCommand = exports.deserializeAws_json1_1GetOpsSummaryCommand = exports.deserializeAws_json1_1GetOpsMetadataCommand = exports.deserializeAws_json1_1GetOpsItemCommand = exports.deserializeAws_json1_1GetMaintenanceWindowTaskCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = exports.deserializeAws_json1_1GetMaintenanceWindowCommand = exports.deserializeAws_json1_1GetInventorySchemaCommand = exports.deserializeAws_json1_1GetInventoryCommand = exports.deserializeAws_json1_1GetDocumentCommand = exports.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = void 0;
    exports.deserializeAws_json1_1UpdateServiceSettingCommand = exports.deserializeAws_json1_1UpdateResourceDataSyncCommand = exports.deserializeAws_json1_1UpdatePatchBaselineCommand = exports.deserializeAws_json1_1UpdateOpsMetadataCommand = exports.deserializeAws_json1_1UpdateOpsItemCommand = exports.deserializeAws_json1_1UpdateManagedInstanceRoleCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowCommand = exports.deserializeAws_json1_1UpdateDocumentMetadataCommand = exports.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = exports.deserializeAws_json1_1UpdateDocumentCommand = exports.deserializeAws_json1_1UpdateAssociationStatusCommand = exports.deserializeAws_json1_1UpdateAssociationCommand = exports.deserializeAws_json1_1UnlabelParameterVersionCommand = exports.deserializeAws_json1_1TerminateSessionCommand = exports.deserializeAws_json1_1StopAutomationExecutionCommand = exports.deserializeAws_json1_1StartSessionCommand = exports.deserializeAws_json1_1StartChangeRequestExecutionCommand = exports.deserializeAws_json1_1StartAutomationExecutionCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var SSMServiceException_1 = require_SSMServiceException();
    var serializeAws_json1_1AddTagsToResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.AddTagsToResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1AddTagsToResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1AddTagsToResourceCommand");
    exports.serializeAws_json1_1AddTagsToResourceCommand = serializeAws_json1_1AddTagsToResourceCommand;
    var serializeAws_json1_1AssociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.AssociateOpsItemRelatedItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1AssociateOpsItemRelatedItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1AssociateOpsItemRelatedItemCommand");
    exports.serializeAws_json1_1AssociateOpsItemRelatedItemCommand = serializeAws_json1_1AssociateOpsItemRelatedItemCommand;
    var serializeAws_json1_1CancelCommandCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CancelCommand"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelCommandRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CancelCommandCommand");
    exports.serializeAws_json1_1CancelCommandCommand = serializeAws_json1_1CancelCommandCommand;
    var serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CancelMaintenanceWindowExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelMaintenanceWindowExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CancelMaintenanceWindowExecutionCommand");
    exports.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = serializeAws_json1_1CancelMaintenanceWindowExecutionCommand;
    var serializeAws_json1_1CreateActivationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateActivation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateActivationCommand");
    exports.serializeAws_json1_1CreateActivationCommand = serializeAws_json1_1CreateActivationCommand;
    var serializeAws_json1_1CreateAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateAssociationCommand");
    exports.serializeAws_json1_1CreateAssociationCommand = serializeAws_json1_1CreateAssociationCommand;
    var serializeAws_json1_1CreateAssociationBatchCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateAssociationBatch"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateAssociationBatchRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateAssociationBatchCommand");
    exports.serializeAws_json1_1CreateAssociationBatchCommand = serializeAws_json1_1CreateAssociationBatchCommand;
    var serializeAws_json1_1CreateDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateDocumentCommand");
    exports.serializeAws_json1_1CreateDocumentCommand = serializeAws_json1_1CreateDocumentCommand;
    var serializeAws_json1_1CreateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateMaintenanceWindowCommand");
    exports.serializeAws_json1_1CreateMaintenanceWindowCommand = serializeAws_json1_1CreateMaintenanceWindowCommand;
    var serializeAws_json1_1CreateOpsItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateOpsItemCommand");
    exports.serializeAws_json1_1CreateOpsItemCommand = serializeAws_json1_1CreateOpsItemCommand;
    var serializeAws_json1_1CreateOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateOpsMetadataCommand");
    exports.serializeAws_json1_1CreateOpsMetadataCommand = serializeAws_json1_1CreateOpsMetadataCommand;
    var serializeAws_json1_1CreatePatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreatePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreatePatchBaselineCommand");
    exports.serializeAws_json1_1CreatePatchBaselineCommand = serializeAws_json1_1CreatePatchBaselineCommand;
    var serializeAws_json1_1CreateResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1CreateResourceDataSyncCommand");
    exports.serializeAws_json1_1CreateResourceDataSyncCommand = serializeAws_json1_1CreateResourceDataSyncCommand;
    var serializeAws_json1_1DeleteActivationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteActivation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteActivationCommand");
    exports.serializeAws_json1_1DeleteActivationCommand = serializeAws_json1_1DeleteActivationCommand;
    var serializeAws_json1_1DeleteAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteAssociationCommand");
    exports.serializeAws_json1_1DeleteAssociationCommand = serializeAws_json1_1DeleteAssociationCommand;
    var serializeAws_json1_1DeleteDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteDocumentCommand");
    exports.serializeAws_json1_1DeleteDocumentCommand = serializeAws_json1_1DeleteDocumentCommand;
    var serializeAws_json1_1DeleteInventoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteInventoryCommand");
    exports.serializeAws_json1_1DeleteInventoryCommand = serializeAws_json1_1DeleteInventoryCommand;
    var serializeAws_json1_1DeleteMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteMaintenanceWindowCommand");
    exports.serializeAws_json1_1DeleteMaintenanceWindowCommand = serializeAws_json1_1DeleteMaintenanceWindowCommand;
    var serializeAws_json1_1DeleteOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteOpsMetadataCommand");
    exports.serializeAws_json1_1DeleteOpsMetadataCommand = serializeAws_json1_1DeleteOpsMetadataCommand;
    var serializeAws_json1_1DeleteParameterCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteParameterCommand");
    exports.serializeAws_json1_1DeleteParameterCommand = serializeAws_json1_1DeleteParameterCommand;
    var serializeAws_json1_1DeleteParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteParametersCommand");
    exports.serializeAws_json1_1DeleteParametersCommand = serializeAws_json1_1DeleteParametersCommand;
    var serializeAws_json1_1DeletePatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeletePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeletePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeletePatchBaselineCommand");
    exports.serializeAws_json1_1DeletePatchBaselineCommand = serializeAws_json1_1DeletePatchBaselineCommand;
    var serializeAws_json1_1DeleteResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeleteResourceDataSyncCommand");
    exports.serializeAws_json1_1DeleteResourceDataSyncCommand = serializeAws_json1_1DeleteResourceDataSyncCommand;
    var serializeAws_json1_1DeregisterManagedInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterManagedInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterManagedInstanceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeregisterManagedInstanceCommand");
    exports.serializeAws_json1_1DeregisterManagedInstanceCommand = serializeAws_json1_1DeregisterManagedInstanceCommand;
    var serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand");
    exports.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterTargetFromMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterTargetFromMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand");
    exports.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand;
    var serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterTaskFromMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterTaskFromMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand");
    exports.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand;
    var serializeAws_json1_1DescribeActivationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeActivations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeActivationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeActivationsCommand");
    exports.serializeAws_json1_1DescribeActivationsCommand = serializeAws_json1_1DescribeActivationsCommand;
    var serializeAws_json1_1DescribeAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeAssociationCommand");
    exports.serializeAws_json1_1DescribeAssociationCommand = serializeAws_json1_1DescribeAssociationCommand;
    var serializeAws_json1_1DescribeAssociationExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociationExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeAssociationExecutionsCommand");
    exports.serializeAws_json1_1DescribeAssociationExecutionsCommand = serializeAws_json1_1DescribeAssociationExecutionsCommand;
    var serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociationExecutionTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationExecutionTargetsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeAssociationExecutionTargetsCommand");
    exports.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = serializeAws_json1_1DescribeAssociationExecutionTargetsCommand;
    var serializeAws_json1_1DescribeAutomationExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAutomationExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAutomationExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeAutomationExecutionsCommand");
    exports.serializeAws_json1_1DescribeAutomationExecutionsCommand = serializeAws_json1_1DescribeAutomationExecutionsCommand;
    var serializeAws_json1_1DescribeAutomationStepExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAutomationStepExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAutomationStepExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeAutomationStepExecutionsCommand");
    exports.serializeAws_json1_1DescribeAutomationStepExecutionsCommand = serializeAws_json1_1DescribeAutomationStepExecutionsCommand;
    var serializeAws_json1_1DescribeAvailablePatchesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAvailablePatches"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAvailablePatchesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeAvailablePatchesCommand");
    exports.serializeAws_json1_1DescribeAvailablePatchesCommand = serializeAws_json1_1DescribeAvailablePatchesCommand;
    var serializeAws_json1_1DescribeDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeDocumentCommand");
    exports.serializeAws_json1_1DescribeDocumentCommand = serializeAws_json1_1DescribeDocumentCommand;
    var serializeAws_json1_1DescribeDocumentPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeDocumentPermission"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeDocumentPermissionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeDocumentPermissionCommand");
    exports.serializeAws_json1_1DescribeDocumentPermissionCommand = serializeAws_json1_1DescribeDocumentPermissionCommand;
    var serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeEffectiveInstanceAssociations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeEffectiveInstanceAssociationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand");
    exports.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand;
    var serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeEffectivePatchesForPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand");
    exports.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand;
    var serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstanceAssociationsStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstanceAssociationsStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeInstanceAssociationsStatusCommand");
    exports.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = serializeAws_json1_1DescribeInstanceAssociationsStatusCommand;
    var serializeAws_json1_1DescribeInstanceInformationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstanceInformation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstanceInformationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeInstanceInformationCommand");
    exports.serializeAws_json1_1DescribeInstanceInformationCommand = serializeAws_json1_1DescribeInstanceInformationCommand;
    var serializeAws_json1_1DescribeInstancePatchesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatches"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeInstancePatchesCommand");
    exports.serializeAws_json1_1DescribeInstancePatchesCommand = serializeAws_json1_1DescribeInstancePatchesCommand;
    var serializeAws_json1_1DescribeInstancePatchStatesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatchStates"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchStatesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeInstancePatchStatesCommand");
    exports.serializeAws_json1_1DescribeInstancePatchStatesCommand = serializeAws_json1_1DescribeInstancePatchStatesCommand;
    var serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatchStatesForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand");
    exports.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand;
    var serializeAws_json1_1DescribeInventoryDeletionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInventoryDeletions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInventoryDeletionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeInventoryDeletionsCommand");
    exports.serializeAws_json1_1DescribeInventoryDeletionsCommand = serializeAws_json1_1DescribeInventoryDeletionsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutionTasks"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindows"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowsCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowsCommand = serializeAws_json1_1DescribeMaintenanceWindowsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowSchedule"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowScheduleRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowsForTarget"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowsForTargetRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowTargetsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowTasks"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowTasksRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeMaintenanceWindowTasksCommand");
    exports.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = serializeAws_json1_1DescribeMaintenanceWindowTasksCommand;
    var serializeAws_json1_1DescribeOpsItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeOpsItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeOpsItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeOpsItemsCommand");
    exports.serializeAws_json1_1DescribeOpsItemsCommand = serializeAws_json1_1DescribeOpsItemsCommand;
    var serializeAws_json1_1DescribeParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeParametersCommand");
    exports.serializeAws_json1_1DescribeParametersCommand = serializeAws_json1_1DescribeParametersCommand;
    var serializeAws_json1_1DescribePatchBaselinesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchBaselines"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchBaselinesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribePatchBaselinesCommand");
    exports.serializeAws_json1_1DescribePatchBaselinesCommand = serializeAws_json1_1DescribePatchBaselinesCommand;
    var serializeAws_json1_1DescribePatchGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchGroups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchGroupsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribePatchGroupsCommand");
    exports.serializeAws_json1_1DescribePatchGroupsCommand = serializeAws_json1_1DescribePatchGroupsCommand;
    var serializeAws_json1_1DescribePatchGroupStateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchGroupState"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchGroupStateRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribePatchGroupStateCommand");
    exports.serializeAws_json1_1DescribePatchGroupStateCommand = serializeAws_json1_1DescribePatchGroupStateCommand;
    var serializeAws_json1_1DescribePatchPropertiesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchProperties"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchPropertiesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribePatchPropertiesCommand");
    exports.serializeAws_json1_1DescribePatchPropertiesCommand = serializeAws_json1_1DescribePatchPropertiesCommand;
    var serializeAws_json1_1DescribeSessionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeSessions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeSessionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DescribeSessionsCommand");
    exports.serializeAws_json1_1DescribeSessionsCommand = serializeAws_json1_1DescribeSessionsCommand;
    var serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DisassociateOpsItemRelatedItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DisassociateOpsItemRelatedItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1DisassociateOpsItemRelatedItemCommand");
    exports.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = serializeAws_json1_1DisassociateOpsItemRelatedItemCommand;
    var serializeAws_json1_1GetAutomationExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetAutomationExecutionCommand");
    exports.serializeAws_json1_1GetAutomationExecutionCommand = serializeAws_json1_1GetAutomationExecutionCommand;
    var serializeAws_json1_1GetCalendarStateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetCalendarState"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetCalendarStateRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetCalendarStateCommand");
    exports.serializeAws_json1_1GetCalendarStateCommand = serializeAws_json1_1GetCalendarStateCommand;
    var serializeAws_json1_1GetCommandInvocationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetCommandInvocation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetCommandInvocationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetCommandInvocationCommand");
    exports.serializeAws_json1_1GetCommandInvocationCommand = serializeAws_json1_1GetCommandInvocationCommand;
    var serializeAws_json1_1GetConnectionStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetConnectionStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetConnectionStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetConnectionStatusCommand");
    exports.serializeAws_json1_1GetConnectionStatusCommand = serializeAws_json1_1GetConnectionStatusCommand;
    var serializeAws_json1_1GetDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDefaultPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDefaultPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetDefaultPatchBaselineCommand");
    exports.serializeAws_json1_1GetDefaultPatchBaselineCommand = serializeAws_json1_1GetDefaultPatchBaselineCommand;
    var serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDeployablePatchSnapshotForInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeployablePatchSnapshotForInstanceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand");
    exports.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand;
    var serializeAws_json1_1GetDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetDocumentCommand");
    exports.serializeAws_json1_1GetDocumentCommand = serializeAws_json1_1GetDocumentCommand;
    var serializeAws_json1_1GetInventoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetInventoryCommand");
    exports.serializeAws_json1_1GetInventoryCommand = serializeAws_json1_1GetInventoryCommand;
    var serializeAws_json1_1GetInventorySchemaCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetInventorySchema"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetInventorySchemaRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetInventorySchemaCommand");
    exports.serializeAws_json1_1GetInventorySchemaCommand = serializeAws_json1_1GetInventorySchemaCommand;
    var serializeAws_json1_1GetMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetMaintenanceWindowCommand");
    exports.serializeAws_json1_1GetMaintenanceWindowCommand = serializeAws_json1_1GetMaintenanceWindowCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetMaintenanceWindowExecutionCommand");
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionCommand = serializeAws_json1_1GetMaintenanceWindowExecutionCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecutionTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand");
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand");
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand;
    var serializeAws_json1_1GetMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetMaintenanceWindowTaskCommand");
    exports.serializeAws_json1_1GetMaintenanceWindowTaskCommand = serializeAws_json1_1GetMaintenanceWindowTaskCommand;
    var serializeAws_json1_1GetOpsItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetOpsItemCommand");
    exports.serializeAws_json1_1GetOpsItemCommand = serializeAws_json1_1GetOpsItemCommand;
    var serializeAws_json1_1GetOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetOpsMetadataCommand");
    exports.serializeAws_json1_1GetOpsMetadataCommand = serializeAws_json1_1GetOpsMetadataCommand;
    var serializeAws_json1_1GetOpsSummaryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsSummary"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsSummaryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetOpsSummaryCommand");
    exports.serializeAws_json1_1GetOpsSummaryCommand = serializeAws_json1_1GetOpsSummaryCommand;
    var serializeAws_json1_1GetParameterCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetParameterCommand");
    exports.serializeAws_json1_1GetParameterCommand = serializeAws_json1_1GetParameterCommand;
    var serializeAws_json1_1GetParameterHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameterHistory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParameterHistoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetParameterHistoryCommand");
    exports.serializeAws_json1_1GetParameterHistoryCommand = serializeAws_json1_1GetParameterHistoryCommand;
    var serializeAws_json1_1GetParametersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetParametersCommand");
    exports.serializeAws_json1_1GetParametersCommand = serializeAws_json1_1GetParametersCommand;
    var serializeAws_json1_1GetParametersByPathCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParametersByPath"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParametersByPathRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetParametersByPathCommand");
    exports.serializeAws_json1_1GetParametersByPathCommand = serializeAws_json1_1GetParametersByPathCommand;
    var serializeAws_json1_1GetPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetPatchBaselineCommand");
    exports.serializeAws_json1_1GetPatchBaselineCommand = serializeAws_json1_1GetPatchBaselineCommand;
    var serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetPatchBaselineForPatchGroupCommand");
    exports.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = serializeAws_json1_1GetPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1GetServiceSettingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1GetServiceSettingCommand");
    exports.serializeAws_json1_1GetServiceSettingCommand = serializeAws_json1_1GetServiceSettingCommand;
    var serializeAws_json1_1LabelParameterVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.LabelParameterVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1LabelParameterVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1LabelParameterVersionCommand");
    exports.serializeAws_json1_1LabelParameterVersionCommand = serializeAws_json1_1LabelParameterVersionCommand;
    var serializeAws_json1_1ListAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListAssociations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListAssociationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListAssociationsCommand");
    exports.serializeAws_json1_1ListAssociationsCommand = serializeAws_json1_1ListAssociationsCommand;
    var serializeAws_json1_1ListAssociationVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListAssociationVersions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListAssociationVersionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListAssociationVersionsCommand");
    exports.serializeAws_json1_1ListAssociationVersionsCommand = serializeAws_json1_1ListAssociationVersionsCommand;
    var serializeAws_json1_1ListCommandInvocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListCommandInvocations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListCommandInvocationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListCommandInvocationsCommand");
    exports.serializeAws_json1_1ListCommandInvocationsCommand = serializeAws_json1_1ListCommandInvocationsCommand;
    var serializeAws_json1_1ListCommandsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListCommands"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListCommandsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListCommandsCommand");
    exports.serializeAws_json1_1ListCommandsCommand = serializeAws_json1_1ListCommandsCommand;
    var serializeAws_json1_1ListComplianceItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListComplianceItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListComplianceItemsCommand");
    exports.serializeAws_json1_1ListComplianceItemsCommand = serializeAws_json1_1ListComplianceItemsCommand;
    var serializeAws_json1_1ListComplianceSummariesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListComplianceSummaries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListComplianceSummariesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListComplianceSummariesCommand");
    exports.serializeAws_json1_1ListComplianceSummariesCommand = serializeAws_json1_1ListComplianceSummariesCommand;
    var serializeAws_json1_1ListDocumentMetadataHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocumentMetadataHistory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentMetadataHistoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListDocumentMetadataHistoryCommand");
    exports.serializeAws_json1_1ListDocumentMetadataHistoryCommand = serializeAws_json1_1ListDocumentMetadataHistoryCommand;
    var serializeAws_json1_1ListDocumentsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocuments"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListDocumentsCommand");
    exports.serializeAws_json1_1ListDocumentsCommand = serializeAws_json1_1ListDocumentsCommand;
    var serializeAws_json1_1ListDocumentVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocumentVersions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentVersionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListDocumentVersionsCommand");
    exports.serializeAws_json1_1ListDocumentVersionsCommand = serializeAws_json1_1ListDocumentVersionsCommand;
    var serializeAws_json1_1ListInventoryEntriesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListInventoryEntries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListInventoryEntriesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListInventoryEntriesCommand");
    exports.serializeAws_json1_1ListInventoryEntriesCommand = serializeAws_json1_1ListInventoryEntriesCommand;
    var serializeAws_json1_1ListOpsItemEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsItemEvents"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsItemEventsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListOpsItemEventsCommand");
    exports.serializeAws_json1_1ListOpsItemEventsCommand = serializeAws_json1_1ListOpsItemEventsCommand;
    var serializeAws_json1_1ListOpsItemRelatedItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsItemRelatedItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsItemRelatedItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListOpsItemRelatedItemsCommand");
    exports.serializeAws_json1_1ListOpsItemRelatedItemsCommand = serializeAws_json1_1ListOpsItemRelatedItemsCommand;
    var serializeAws_json1_1ListOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListOpsMetadataCommand");
    exports.serializeAws_json1_1ListOpsMetadataCommand = serializeAws_json1_1ListOpsMetadataCommand;
    var serializeAws_json1_1ListResourceComplianceSummariesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListResourceComplianceSummaries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListResourceComplianceSummariesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListResourceComplianceSummariesCommand");
    exports.serializeAws_json1_1ListResourceComplianceSummariesCommand = serializeAws_json1_1ListResourceComplianceSummariesCommand;
    var serializeAws_json1_1ListResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListResourceDataSyncCommand");
    exports.serializeAws_json1_1ListResourceDataSyncCommand = serializeAws_json1_1ListResourceDataSyncCommand;
    var serializeAws_json1_1ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListTagsForResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ListTagsForResourceCommand");
    exports.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
    var serializeAws_json1_1ModifyDocumentPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ModifyDocumentPermission"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ModifyDocumentPermissionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ModifyDocumentPermissionCommand");
    exports.serializeAws_json1_1ModifyDocumentPermissionCommand = serializeAws_json1_1ModifyDocumentPermissionCommand;
    var serializeAws_json1_1PutComplianceItemsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutComplianceItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1PutComplianceItemsCommand");
    exports.serializeAws_json1_1PutComplianceItemsCommand = serializeAws_json1_1PutComplianceItemsCommand;
    var serializeAws_json1_1PutInventoryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1PutInventoryCommand");
    exports.serializeAws_json1_1PutInventoryCommand = serializeAws_json1_1PutInventoryCommand;
    var serializeAws_json1_1PutParameterCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1PutParameterCommand");
    exports.serializeAws_json1_1PutParameterCommand = serializeAws_json1_1PutParameterCommand;
    var serializeAws_json1_1RegisterDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterDefaultPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterDefaultPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1RegisterDefaultPatchBaselineCommand");
    exports.serializeAws_json1_1RegisterDefaultPatchBaselineCommand = serializeAws_json1_1RegisterDefaultPatchBaselineCommand;
    var serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand");
    exports.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterTargetWithMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterTargetWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand");
    exports.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand;
    var serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterTaskWithMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterTaskWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand");
    exports.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand;
    var serializeAws_json1_1RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RemoveTagsFromResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RemoveTagsFromResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1RemoveTagsFromResourceCommand");
    exports.serializeAws_json1_1RemoveTagsFromResourceCommand = serializeAws_json1_1RemoveTagsFromResourceCommand;
    var serializeAws_json1_1ResetServiceSettingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ResetServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ResetServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ResetServiceSettingCommand");
    exports.serializeAws_json1_1ResetServiceSettingCommand = serializeAws_json1_1ResetServiceSettingCommand;
    var serializeAws_json1_1ResumeSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ResumeSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ResumeSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1ResumeSessionCommand");
    exports.serializeAws_json1_1ResumeSessionCommand = serializeAws_json1_1ResumeSessionCommand;
    var serializeAws_json1_1SendAutomationSignalCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.SendAutomationSignal"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SendAutomationSignalRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1SendAutomationSignalCommand");
    exports.serializeAws_json1_1SendAutomationSignalCommand = serializeAws_json1_1SendAutomationSignalCommand;
    var serializeAws_json1_1SendCommandCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.SendCommand"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SendCommandRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1SendCommandCommand");
    exports.serializeAws_json1_1SendCommandCommand = serializeAws_json1_1SendCommandCommand;
    var serializeAws_json1_1StartAssociationsOnceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartAssociationsOnce"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartAssociationsOnceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1StartAssociationsOnceCommand");
    exports.serializeAws_json1_1StartAssociationsOnceCommand = serializeAws_json1_1StartAssociationsOnceCommand;
    var serializeAws_json1_1StartAutomationExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1StartAutomationExecutionCommand");
    exports.serializeAws_json1_1StartAutomationExecutionCommand = serializeAws_json1_1StartAutomationExecutionCommand;
    var serializeAws_json1_1StartChangeRequestExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartChangeRequestExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartChangeRequestExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1StartChangeRequestExecutionCommand");
    exports.serializeAws_json1_1StartChangeRequestExecutionCommand = serializeAws_json1_1StartChangeRequestExecutionCommand;
    var serializeAws_json1_1StartSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1StartSessionCommand");
    exports.serializeAws_json1_1StartSessionCommand = serializeAws_json1_1StartSessionCommand;
    var serializeAws_json1_1StopAutomationExecutionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StopAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StopAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1StopAutomationExecutionCommand");
    exports.serializeAws_json1_1StopAutomationExecutionCommand = serializeAws_json1_1StopAutomationExecutionCommand;
    var serializeAws_json1_1TerminateSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.TerminateSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1TerminateSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1TerminateSessionCommand");
    exports.serializeAws_json1_1TerminateSessionCommand = serializeAws_json1_1TerminateSessionCommand;
    var serializeAws_json1_1UnlabelParameterVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UnlabelParameterVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UnlabelParameterVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UnlabelParameterVersionCommand");
    exports.serializeAws_json1_1UnlabelParameterVersionCommand = serializeAws_json1_1UnlabelParameterVersionCommand;
    var serializeAws_json1_1UpdateAssociationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateAssociationCommand");
    exports.serializeAws_json1_1UpdateAssociationCommand = serializeAws_json1_1UpdateAssociationCommand;
    var serializeAws_json1_1UpdateAssociationStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateAssociationStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateAssociationStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateAssociationStatusCommand");
    exports.serializeAws_json1_1UpdateAssociationStatusCommand = serializeAws_json1_1UpdateAssociationStatusCommand;
    var serializeAws_json1_1UpdateDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateDocumentCommand");
    exports.serializeAws_json1_1UpdateDocumentCommand = serializeAws_json1_1UpdateDocumentCommand;
    var serializeAws_json1_1UpdateDocumentDefaultVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocumentDefaultVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentDefaultVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateDocumentDefaultVersionCommand");
    exports.serializeAws_json1_1UpdateDocumentDefaultVersionCommand = serializeAws_json1_1UpdateDocumentDefaultVersionCommand;
    var serializeAws_json1_1UpdateDocumentMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocumentMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateDocumentMetadataCommand");
    exports.serializeAws_json1_1UpdateDocumentMetadataCommand = serializeAws_json1_1UpdateDocumentMetadataCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateMaintenanceWindowCommand");
    exports.serializeAws_json1_1UpdateMaintenanceWindowCommand = serializeAws_json1_1UpdateMaintenanceWindowCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindowTarget"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowTargetRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateMaintenanceWindowTargetCommand");
    exports.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = serializeAws_json1_1UpdateMaintenanceWindowTargetCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindowTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateMaintenanceWindowTaskCommand");
    exports.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = serializeAws_json1_1UpdateMaintenanceWindowTaskCommand;
    var serializeAws_json1_1UpdateManagedInstanceRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateManagedInstanceRole"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateManagedInstanceRoleRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateManagedInstanceRoleCommand");
    exports.serializeAws_json1_1UpdateManagedInstanceRoleCommand = serializeAws_json1_1UpdateManagedInstanceRoleCommand;
    var serializeAws_json1_1UpdateOpsItemCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateOpsItemCommand");
    exports.serializeAws_json1_1UpdateOpsItemCommand = serializeAws_json1_1UpdateOpsItemCommand;
    var serializeAws_json1_1UpdateOpsMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateOpsMetadataCommand");
    exports.serializeAws_json1_1UpdateOpsMetadataCommand = serializeAws_json1_1UpdateOpsMetadataCommand;
    var serializeAws_json1_1UpdatePatchBaselineCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdatePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdatePatchBaselineCommand");
    exports.serializeAws_json1_1UpdatePatchBaselineCommand = serializeAws_json1_1UpdatePatchBaselineCommand;
    var serializeAws_json1_1UpdateResourceDataSyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateResourceDataSyncCommand");
    exports.serializeAws_json1_1UpdateResourceDataSyncCommand = serializeAws_json1_1UpdateResourceDataSyncCommand;
    var serializeAws_json1_1UpdateServiceSettingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_json1_1UpdateServiceSettingCommand");
    exports.serializeAws_json1_1UpdateServiceSettingCommand = serializeAws_json1_1UpdateServiceSettingCommand;
    var deserializeAws_json1_1AddTagsToResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1AddTagsToResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1AddTagsToResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1AddTagsToResourceCommand");
    exports.deserializeAws_json1_1AddTagsToResourceCommand = deserializeAws_json1_1AddTagsToResourceCommand;
    var deserializeAws_json1_1AddTagsToResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "TooManyTagsError":
        case "com.amazonaws.ssm#TooManyTagsError":
          throw await deserializeAws_json1_1TooManyTagsErrorResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1AddTagsToResourceCommandError");
    var deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1AssociateOpsItemRelatedItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1AssociateOpsItemRelatedItemCommand");
    exports.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = deserializeAws_json1_1AssociateOpsItemRelatedItemCommand;
    var deserializeAws_json1_1AssociateOpsItemRelatedItemCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        case "OpsItemRelatedItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1AssociateOpsItemRelatedItemCommandError");
    var deserializeAws_json1_1CancelCommandCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelCommandResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CancelCommandCommand");
    exports.deserializeAws_json1_1CancelCommandCommand = deserializeAws_json1_1CancelCommandCommand;
    var deserializeAws_json1_1CancelCommandCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CancelCommandCommandError");
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelMaintenanceWindowExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand");
    exports.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand;
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CancelMaintenanceWindowExecutionCommandError");
    var deserializeAws_json1_1CreateActivationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateActivationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateActivationCommand");
    exports.deserializeAws_json1_1CreateActivationCommand = deserializeAws_json1_1CreateActivationCommand;
    var deserializeAws_json1_1CreateActivationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateActivationCommandError");
    var deserializeAws_json1_1CreateAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateAssociationCommand");
    exports.deserializeAws_json1_1CreateAssociationCommand = deserializeAws_json1_1CreateAssociationCommand;
    var deserializeAws_json1_1CreateAssociationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationAlreadyExists":
        case "com.amazonaws.ssm#AssociationAlreadyExists":
          throw await deserializeAws_json1_1AssociationAlreadyExistsResponse(parsedOutput, context);
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await deserializeAws_json1_1AssociationLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTag":
        case "com.amazonaws.ssm#InvalidTag":
          throw await deserializeAws_json1_1InvalidTagResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateAssociationCommandError");
    var deserializeAws_json1_1CreateAssociationBatchCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAssociationBatchCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateAssociationBatchResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateAssociationBatchCommand");
    exports.deserializeAws_json1_1CreateAssociationBatchCommand = deserializeAws_json1_1CreateAssociationBatchCommand;
    var deserializeAws_json1_1CreateAssociationBatchCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await deserializeAws_json1_1AssociationLimitExceededResponse(parsedOutput, context);
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateAssociationBatchCommandError");
    var deserializeAws_json1_1CreateDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateDocumentCommand");
    exports.deserializeAws_json1_1CreateDocumentCommand = deserializeAws_json1_1CreateDocumentCommand;
    var deserializeAws_json1_1CreateDocumentCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentAlreadyExists":
        case "com.amazonaws.ssm#DocumentAlreadyExists":
          throw await deserializeAws_json1_1DocumentAlreadyExistsResponse(parsedOutput, context);
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await deserializeAws_json1_1DocumentLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await deserializeAws_json1_1InvalidDocumentContentResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateDocumentCommandError");
    var deserializeAws_json1_1CreateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateMaintenanceWindowCommand");
    exports.deserializeAws_json1_1CreateMaintenanceWindowCommand = deserializeAws_json1_1CreateMaintenanceWindowCommand;
    var deserializeAws_json1_1CreateMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateMaintenanceWindowCommandError");
    var deserializeAws_json1_1CreateOpsItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateOpsItemCommand");
    exports.deserializeAws_json1_1CreateOpsItemCommand = deserializeAws_json1_1CreateOpsItemCommand;
    var deserializeAws_json1_1CreateOpsItemCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateOpsItemCommandError");
    var deserializeAws_json1_1CreateOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateOpsMetadataCommand");
    exports.deserializeAws_json1_1CreateOpsMetadataCommand = deserializeAws_json1_1CreateOpsMetadataCommand;
    var deserializeAws_json1_1CreateOpsMetadataCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataAlreadyExistsException":
        case "com.amazonaws.ssm#OpsMetadataAlreadyExistsException":
          throw await deserializeAws_json1_1OpsMetadataAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataLimitExceededException":
          throw await deserializeAws_json1_1OpsMetadataLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateOpsMetadataCommandError");
    var deserializeAws_json1_1CreatePatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreatePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreatePatchBaselineCommand");
    exports.deserializeAws_json1_1CreatePatchBaselineCommand = deserializeAws_json1_1CreatePatchBaselineCommand;
    var deserializeAws_json1_1CreatePatchBaselineCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreatePatchBaselineCommandError");
    var deserializeAws_json1_1CreateResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1CreateResourceDataSyncCommand");
    exports.deserializeAws_json1_1CreateResourceDataSyncCommand = deserializeAws_json1_1CreateResourceDataSyncCommand;
    var deserializeAws_json1_1CreateResourceDataSyncCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncAlreadyExistsException":
        case "com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException":
          throw await deserializeAws_json1_1ResourceDataSyncAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncCountExceededException":
        case "com.amazonaws.ssm#ResourceDataSyncCountExceededException":
          throw await deserializeAws_json1_1ResourceDataSyncCountExceededExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1CreateResourceDataSyncCommandError");
    var deserializeAws_json1_1DeleteActivationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteActivationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteActivationCommand");
    exports.deserializeAws_json1_1DeleteActivationCommand = deserializeAws_json1_1DeleteActivationCommand;
    var deserializeAws_json1_1DeleteActivationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidActivation":
        case "com.amazonaws.ssm#InvalidActivation":
          throw await deserializeAws_json1_1InvalidActivationResponse(parsedOutput, context);
        case "InvalidActivationId":
        case "com.amazonaws.ssm#InvalidActivationId":
          throw await deserializeAws_json1_1InvalidActivationIdResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteActivationCommandError");
    var deserializeAws_json1_1DeleteAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteAssociationCommand");
    exports.deserializeAws_json1_1DeleteAssociationCommand = deserializeAws_json1_1DeleteAssociationCommand;
    var deserializeAws_json1_1DeleteAssociationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteAssociationCommandError");
    var deserializeAws_json1_1DeleteDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteDocumentCommand");
    exports.deserializeAws_json1_1DeleteDocumentCommand = deserializeAws_json1_1DeleteDocumentCommand;
    var deserializeAws_json1_1DeleteDocumentCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociatedInstances":
        case "com.amazonaws.ssm#AssociatedInstances":
          throw await deserializeAws_json1_1AssociatedInstancesResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteDocumentCommandError");
    var deserializeAws_json1_1DeleteInventoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteInventoryCommand");
    exports.deserializeAws_json1_1DeleteInventoryCommand = deserializeAws_json1_1DeleteInventoryCommand;
    var deserializeAws_json1_1DeleteInventoryCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDeleteInventoryParametersException":
        case "com.amazonaws.ssm#InvalidDeleteInventoryParametersException":
          throw await deserializeAws_json1_1InvalidDeleteInventoryParametersExceptionResponse(parsedOutput, context);
        case "InvalidInventoryRequestException":
        case "com.amazonaws.ssm#InvalidInventoryRequestException":
          throw await deserializeAws_json1_1InvalidInventoryRequestExceptionResponse(parsedOutput, context);
        case "InvalidOptionException":
        case "com.amazonaws.ssm#InvalidOptionException":
          throw await deserializeAws_json1_1InvalidOptionExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteInventoryCommandError");
    var deserializeAws_json1_1DeleteMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteMaintenanceWindowCommand");
    exports.deserializeAws_json1_1DeleteMaintenanceWindowCommand = deserializeAws_json1_1DeleteMaintenanceWindowCommand;
    var deserializeAws_json1_1DeleteMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteMaintenanceWindowCommandError");
    var deserializeAws_json1_1DeleteOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteOpsMetadataCommand");
    exports.deserializeAws_json1_1DeleteOpsMetadataCommand = deserializeAws_json1_1DeleteOpsMetadataCommand;
    var deserializeAws_json1_1DeleteOpsMetadataCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteOpsMetadataCommandError");
    var deserializeAws_json1_1DeleteParameterCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteParameterCommand");
    exports.deserializeAws_json1_1DeleteParameterCommand = deserializeAws_json1_1DeleteParameterCommand;
    var deserializeAws_json1_1DeleteParameterCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteParameterCommandError");
    var deserializeAws_json1_1DeleteParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteParametersCommand");
    exports.deserializeAws_json1_1DeleteParametersCommand = deserializeAws_json1_1DeleteParametersCommand;
    var deserializeAws_json1_1DeleteParametersCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteParametersCommandError");
    var deserializeAws_json1_1DeletePatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeletePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeletePatchBaselineCommand");
    exports.deserializeAws_json1_1DeletePatchBaselineCommand = deserializeAws_json1_1DeletePatchBaselineCommand;
    var deserializeAws_json1_1DeletePatchBaselineCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.ssm#ResourceInUseException":
          throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeletePatchBaselineCommandError");
    var deserializeAws_json1_1DeleteResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeleteResourceDataSyncCommand");
    exports.deserializeAws_json1_1DeleteResourceDataSyncCommand = deserializeAws_json1_1DeleteResourceDataSyncCommand;
    var deserializeAws_json1_1DeleteResourceDataSyncCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeleteResourceDataSyncCommandError");
    var deserializeAws_json1_1DeregisterManagedInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterManagedInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterManagedInstanceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeregisterManagedInstanceCommand");
    exports.deserializeAws_json1_1DeregisterManagedInstanceCommand = deserializeAws_json1_1DeregisterManagedInstanceCommand;
    var deserializeAws_json1_1DeregisterManagedInstanceCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeregisterManagedInstanceCommandError");
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand");
    exports.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommandError");
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand");
    exports.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand;
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "TargetInUseException":
        case "com.amazonaws.ssm#TargetInUseException":
          throw await deserializeAws_json1_1TargetInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommandError");
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand");
    exports.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand;
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommandError");
    var deserializeAws_json1_1DescribeActivationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeActivationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeActivationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeActivationsCommand");
    exports.deserializeAws_json1_1DescribeActivationsCommand = deserializeAws_json1_1DescribeActivationsCommand;
    var deserializeAws_json1_1DescribeActivationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeActivationsCommandError");
    var deserializeAws_json1_1DescribeAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeAssociationCommand");
    exports.deserializeAws_json1_1DescribeAssociationCommand = deserializeAws_json1_1DescribeAssociationCommand;
    var deserializeAws_json1_1DescribeAssociationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await deserializeAws_json1_1InvalidAssociationVersionResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeAssociationCommandError");
    var deserializeAws_json1_1DescribeAssociationExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeAssociationExecutionsCommand");
    exports.deserializeAws_json1_1DescribeAssociationExecutionsCommand = deserializeAws_json1_1DescribeAssociationExecutionsCommand;
    var deserializeAws_json1_1DescribeAssociationExecutionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeAssociationExecutionsCommandError");
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationExecutionTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationExecutionTargetsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand");
    exports.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand;
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "AssociationExecutionDoesNotExist":
        case "com.amazonaws.ssm#AssociationExecutionDoesNotExist":
          throw await deserializeAws_json1_1AssociationExecutionDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeAssociationExecutionTargetsCommandError");
    var deserializeAws_json1_1DescribeAutomationExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAutomationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAutomationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeAutomationExecutionsCommand");
    exports.deserializeAws_json1_1DescribeAutomationExecutionsCommand = deserializeAws_json1_1DescribeAutomationExecutionsCommand;
    var deserializeAws_json1_1DescribeAutomationExecutionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeAutomationExecutionsCommandError");
    var deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAutomationStepExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAutomationStepExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeAutomationStepExecutionsCommand");
    exports.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = deserializeAws_json1_1DescribeAutomationStepExecutionsCommand;
    var deserializeAws_json1_1DescribeAutomationStepExecutionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeAutomationStepExecutionsCommandError");
    var deserializeAws_json1_1DescribeAvailablePatchesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAvailablePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAvailablePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeAvailablePatchesCommand");
    exports.deserializeAws_json1_1DescribeAvailablePatchesCommand = deserializeAws_json1_1DescribeAvailablePatchesCommand;
    var deserializeAws_json1_1DescribeAvailablePatchesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeAvailablePatchesCommandError");
    var deserializeAws_json1_1DescribeDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeDocumentCommand");
    exports.deserializeAws_json1_1DescribeDocumentCommand = deserializeAws_json1_1DescribeDocumentCommand;
    var deserializeAws_json1_1DescribeDocumentCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeDocumentCommandError");
    var deserializeAws_json1_1DescribeDocumentPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeDocumentPermissionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeDocumentPermissionCommand");
    exports.deserializeAws_json1_1DescribeDocumentPermissionCommand = deserializeAws_json1_1DescribeDocumentPermissionCommand;
    var deserializeAws_json1_1DescribeDocumentPermissionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await deserializeAws_json1_1InvalidPermissionTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeDocumentPermissionCommandError");
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeEffectiveInstanceAssociationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand");
    exports.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand;
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommandError");
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand");
    exports.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand;
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await deserializeAws_json1_1UnsupportedOperatingSystemResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommandError");
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstanceAssociationsStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstanceAssociationsStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand");
    exports.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand;
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeInstanceAssociationsStatusCommandError");
    var deserializeAws_json1_1DescribeInstanceInformationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstanceInformationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstanceInformationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeInstanceInformationCommand");
    exports.deserializeAws_json1_1DescribeInstanceInformationCommand = deserializeAws_json1_1DescribeInstanceInformationCommand;
    var deserializeAws_json1_1DescribeInstanceInformationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidInstanceInformationFilterValue":
        case "com.amazonaws.ssm#InvalidInstanceInformationFilterValue":
          throw await deserializeAws_json1_1InvalidInstanceInformationFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeInstanceInformationCommandError");
    var deserializeAws_json1_1DescribeInstancePatchesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeInstancePatchesCommand");
    exports.deserializeAws_json1_1DescribeInstancePatchesCommand = deserializeAws_json1_1DescribeInstancePatchesCommand;
    var deserializeAws_json1_1DescribeInstancePatchesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeInstancePatchesCommandError");
    var deserializeAws_json1_1DescribeInstancePatchStatesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchStatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchStatesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeInstancePatchStatesCommand");
    exports.deserializeAws_json1_1DescribeInstancePatchStatesCommand = deserializeAws_json1_1DescribeInstancePatchStatesCommand;
    var deserializeAws_json1_1DescribeInstancePatchStatesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeInstancePatchStatesCommandError");
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand");
    exports.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand;
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommandError");
    var deserializeAws_json1_1DescribeInventoryDeletionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInventoryDeletionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInventoryDeletionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeInventoryDeletionsCommand");
    exports.deserializeAws_json1_1DescribeInventoryDeletionsCommand = deserializeAws_json1_1DescribeInventoryDeletionsCommand;
    var deserializeAws_json1_1DescribeInventoryDeletionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDeletionIdException":
        case "com.amazonaws.ssm#InvalidDeletionIdException":
          throw await deserializeAws_json1_1InvalidDeletionIdExceptionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeInventoryDeletionsCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowsCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowsCommand = deserializeAws_json1_1DescribeMaintenanceWindowsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowsCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowScheduleResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowsForTargetResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowTargetsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommandError");
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowTasksResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand");
    exports.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeMaintenanceWindowTasksCommandError");
    var deserializeAws_json1_1DescribeOpsItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeOpsItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeOpsItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeOpsItemsCommand");
    exports.deserializeAws_json1_1DescribeOpsItemsCommand = deserializeAws_json1_1DescribeOpsItemsCommand;
    var deserializeAws_json1_1DescribeOpsItemsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeOpsItemsCommandError");
    var deserializeAws_json1_1DescribeParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeParametersCommand");
    exports.deserializeAws_json1_1DescribeParametersCommand = deserializeAws_json1_1DescribeParametersCommand;
    var deserializeAws_json1_1DescribeParametersCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await deserializeAws_json1_1InvalidFilterOptionResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeParametersCommandError");
    var deserializeAws_json1_1DescribePatchBaselinesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchBaselinesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchBaselinesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribePatchBaselinesCommand");
    exports.deserializeAws_json1_1DescribePatchBaselinesCommand = deserializeAws_json1_1DescribePatchBaselinesCommand;
    var deserializeAws_json1_1DescribePatchBaselinesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribePatchBaselinesCommandError");
    var deserializeAws_json1_1DescribePatchGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchGroupsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribePatchGroupsCommand");
    exports.deserializeAws_json1_1DescribePatchGroupsCommand = deserializeAws_json1_1DescribePatchGroupsCommand;
    var deserializeAws_json1_1DescribePatchGroupsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribePatchGroupsCommandError");
    var deserializeAws_json1_1DescribePatchGroupStateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchGroupStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchGroupStateResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribePatchGroupStateCommand");
    exports.deserializeAws_json1_1DescribePatchGroupStateCommand = deserializeAws_json1_1DescribePatchGroupStateCommand;
    var deserializeAws_json1_1DescribePatchGroupStateCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribePatchGroupStateCommandError");
    var deserializeAws_json1_1DescribePatchPropertiesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchPropertiesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchPropertiesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribePatchPropertiesCommand");
    exports.deserializeAws_json1_1DescribePatchPropertiesCommand = deserializeAws_json1_1DescribePatchPropertiesCommand;
    var deserializeAws_json1_1DescribePatchPropertiesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribePatchPropertiesCommandError");
    var deserializeAws_json1_1DescribeSessionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSessionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeSessionsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DescribeSessionsCommand");
    exports.deserializeAws_json1_1DescribeSessionsCommand = deserializeAws_json1_1DescribeSessionsCommand;
    var deserializeAws_json1_1DescribeSessionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DescribeSessionsCommandError");
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DisassociateOpsItemRelatedItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand");
    exports.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand;
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        case "OpsItemRelatedItemAssociationNotFoundException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException":
          throw await deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1DisassociateOpsItemRelatedItemCommandError");
    var deserializeAws_json1_1GetAutomationExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetAutomationExecutionCommand");
    exports.deserializeAws_json1_1GetAutomationExecutionCommand = deserializeAws_json1_1GetAutomationExecutionCommand;
    var deserializeAws_json1_1GetAutomationExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetAutomationExecutionCommandError");
    var deserializeAws_json1_1GetCalendarStateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCalendarStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetCalendarStateResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetCalendarStateCommand");
    exports.deserializeAws_json1_1GetCalendarStateCommand = deserializeAws_json1_1GetCalendarStateCommand;
    var deserializeAws_json1_1GetCalendarStateCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentType":
        case "com.amazonaws.ssm#InvalidDocumentType":
          throw await deserializeAws_json1_1InvalidDocumentTypeResponse(parsedOutput, context);
        case "UnsupportedCalendarException":
        case "com.amazonaws.ssm#UnsupportedCalendarException":
          throw await deserializeAws_json1_1UnsupportedCalendarExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetCalendarStateCommandError");
    var deserializeAws_json1_1GetCommandInvocationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCommandInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetCommandInvocationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetCommandInvocationCommand");
    exports.deserializeAws_json1_1GetCommandInvocationCommand = deserializeAws_json1_1GetCommandInvocationCommand;
    var deserializeAws_json1_1GetCommandInvocationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidPluginName":
        case "com.amazonaws.ssm#InvalidPluginName":
          throw await deserializeAws_json1_1InvalidPluginNameResponse(parsedOutput, context);
        case "InvocationDoesNotExist":
        case "com.amazonaws.ssm#InvocationDoesNotExist":
          throw await deserializeAws_json1_1InvocationDoesNotExistResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetCommandInvocationCommandError");
    var deserializeAws_json1_1GetConnectionStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetConnectionStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetConnectionStatusResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetConnectionStatusCommand");
    exports.deserializeAws_json1_1GetConnectionStatusCommand = deserializeAws_json1_1GetConnectionStatusCommand;
    var deserializeAws_json1_1GetConnectionStatusCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetConnectionStatusCommandError");
    var deserializeAws_json1_1GetDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDefaultPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetDefaultPatchBaselineCommand");
    exports.deserializeAws_json1_1GetDefaultPatchBaselineCommand = deserializeAws_json1_1GetDefaultPatchBaselineCommand;
    var deserializeAws_json1_1GetDefaultPatchBaselineCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetDefaultPatchBaselineCommandError");
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand");
    exports.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand;
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "UnsupportedFeatureRequiredException":
        case "com.amazonaws.ssm#UnsupportedFeatureRequiredException":
          throw await deserializeAws_json1_1UnsupportedFeatureRequiredExceptionResponse(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await deserializeAws_json1_1UnsupportedOperatingSystemResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommandError");
    var deserializeAws_json1_1GetDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetDocumentCommand");
    exports.deserializeAws_json1_1GetDocumentCommand = deserializeAws_json1_1GetDocumentCommand;
    var deserializeAws_json1_1GetDocumentCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetDocumentCommandError");
    var deserializeAws_json1_1GetInventoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetInventoryCommand");
    exports.deserializeAws_json1_1GetInventoryCommand = deserializeAws_json1_1GetInventoryCommand;
    var deserializeAws_json1_1GetInventoryCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await deserializeAws_json1_1InvalidAggregatorExceptionResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInventoryGroupException":
        case "com.amazonaws.ssm#InvalidInventoryGroupException":
          throw await deserializeAws_json1_1InvalidInventoryGroupExceptionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidResultAttributeException":
        case "com.amazonaws.ssm#InvalidResultAttributeException":
          throw await deserializeAws_json1_1InvalidResultAttributeExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetInventoryCommandError");
    var deserializeAws_json1_1GetInventorySchemaCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetInventorySchemaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetInventorySchemaResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetInventorySchemaCommand");
    exports.deserializeAws_json1_1GetInventorySchemaCommand = deserializeAws_json1_1GetInventorySchemaCommand;
    var deserializeAws_json1_1GetInventorySchemaCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetInventorySchemaCommandError");
    var deserializeAws_json1_1GetMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetMaintenanceWindowCommand");
    exports.deserializeAws_json1_1GetMaintenanceWindowCommand = deserializeAws_json1_1GetMaintenanceWindowCommand;
    var deserializeAws_json1_1GetMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetMaintenanceWindowCommandError");
    var deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionCommand");
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionCommandError");
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand");
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommandError");
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand");
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommandError");
    var deserializeAws_json1_1GetMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetMaintenanceWindowTaskCommand");
    exports.deserializeAws_json1_1GetMaintenanceWindowTaskCommand = deserializeAws_json1_1GetMaintenanceWindowTaskCommand;
    var deserializeAws_json1_1GetMaintenanceWindowTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetMaintenanceWindowTaskCommandError");
    var deserializeAws_json1_1GetOpsItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetOpsItemCommand");
    exports.deserializeAws_json1_1GetOpsItemCommand = deserializeAws_json1_1GetOpsItemCommand;
    var deserializeAws_json1_1GetOpsItemCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetOpsItemCommandError");
    var deserializeAws_json1_1GetOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetOpsMetadataCommand");
    exports.deserializeAws_json1_1GetOpsMetadataCommand = deserializeAws_json1_1GetOpsMetadataCommand;
    var deserializeAws_json1_1GetOpsMetadataCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetOpsMetadataCommandError");
    var deserializeAws_json1_1GetOpsSummaryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsSummaryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsSummaryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetOpsSummaryCommand");
    exports.deserializeAws_json1_1GetOpsSummaryCommand = deserializeAws_json1_1GetOpsSummaryCommand;
    var deserializeAws_json1_1GetOpsSummaryCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await deserializeAws_json1_1InvalidAggregatorExceptionResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetOpsSummaryCommandError");
    var deserializeAws_json1_1GetParameterCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetParameterCommand");
    exports.deserializeAws_json1_1GetParameterCommand = deserializeAws_json1_1GetParameterCommand;
    var deserializeAws_json1_1GetParameterCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetParameterCommandError");
    var deserializeAws_json1_1GetParameterHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParameterHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParameterHistoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetParameterHistoryCommand");
    exports.deserializeAws_json1_1GetParameterHistoryCommand = deserializeAws_json1_1GetParameterHistoryCommand;
    var deserializeAws_json1_1GetParameterHistoryCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetParameterHistoryCommandError");
    var deserializeAws_json1_1GetParametersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetParametersCommand");
    exports.deserializeAws_json1_1GetParametersCommand = deserializeAws_json1_1GetParametersCommand;
    var deserializeAws_json1_1GetParametersCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetParametersCommandError");
    var deserializeAws_json1_1GetParametersByPathCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParametersByPathCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParametersByPathResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetParametersByPathCommand");
    exports.deserializeAws_json1_1GetParametersByPathCommand = deserializeAws_json1_1GetParametersByPathCommand;
    var deserializeAws_json1_1GetParametersByPathCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await deserializeAws_json1_1InvalidFilterOptionResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetParametersByPathCommandError");
    var deserializeAws_json1_1GetPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetPatchBaselineCommand");
    exports.deserializeAws_json1_1GetPatchBaselineCommand = deserializeAws_json1_1GetPatchBaselineCommand;
    var deserializeAws_json1_1GetPatchBaselineCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetPatchBaselineCommandError");
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand");
    exports.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetPatchBaselineForPatchGroupCommandError");
    var deserializeAws_json1_1GetServiceSettingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1GetServiceSettingCommand");
    exports.deserializeAws_json1_1GetServiceSettingCommand = deserializeAws_json1_1GetServiceSettingCommand;
    var deserializeAws_json1_1GetServiceSettingCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1GetServiceSettingCommandError");
    var deserializeAws_json1_1LabelParameterVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1LabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1LabelParameterVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1LabelParameterVersionCommand");
    exports.deserializeAws_json1_1LabelParameterVersionCommand = deserializeAws_json1_1LabelParameterVersionCommand;
    var deserializeAws_json1_1LabelParameterVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionLabelLimitExceeded":
        case "com.amazonaws.ssm#ParameterVersionLabelLimitExceeded":
          throw await deserializeAws_json1_1ParameterVersionLabelLimitExceededResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1LabelParameterVersionCommandError");
    var deserializeAws_json1_1ListAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListAssociationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListAssociationsCommand");
    exports.deserializeAws_json1_1ListAssociationsCommand = deserializeAws_json1_1ListAssociationsCommand;
    var deserializeAws_json1_1ListAssociationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListAssociationsCommandError");
    var deserializeAws_json1_1ListAssociationVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociationVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListAssociationVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListAssociationVersionsCommand");
    exports.deserializeAws_json1_1ListAssociationVersionsCommand = deserializeAws_json1_1ListAssociationVersionsCommand;
    var deserializeAws_json1_1ListAssociationVersionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListAssociationVersionsCommandError");
    var deserializeAws_json1_1ListCommandInvocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCommandInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListCommandInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListCommandInvocationsCommand");
    exports.deserializeAws_json1_1ListCommandInvocationsCommand = deserializeAws_json1_1ListCommandInvocationsCommand;
    var deserializeAws_json1_1ListCommandInvocationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListCommandInvocationsCommandError");
    var deserializeAws_json1_1ListCommandsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCommandsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListCommandsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListCommandsCommand");
    exports.deserializeAws_json1_1ListCommandsCommand = deserializeAws_json1_1ListCommandsCommand;
    var deserializeAws_json1_1ListCommandsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListCommandsCommandError");
    var deserializeAws_json1_1ListComplianceItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListComplianceItemsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListComplianceItemsCommand");
    exports.deserializeAws_json1_1ListComplianceItemsCommand = deserializeAws_json1_1ListComplianceItemsCommand;
    var deserializeAws_json1_1ListComplianceItemsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListComplianceItemsCommandError");
    var deserializeAws_json1_1ListComplianceSummariesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListComplianceSummariesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListComplianceSummariesCommand");
    exports.deserializeAws_json1_1ListComplianceSummariesCommand = deserializeAws_json1_1ListComplianceSummariesCommand;
    var deserializeAws_json1_1ListComplianceSummariesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListComplianceSummariesCommandError");
    var deserializeAws_json1_1ListDocumentMetadataHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentMetadataHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentMetadataHistoryResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListDocumentMetadataHistoryCommand");
    exports.deserializeAws_json1_1ListDocumentMetadataHistoryCommand = deserializeAws_json1_1ListDocumentMetadataHistoryCommand;
    var deserializeAws_json1_1ListDocumentMetadataHistoryCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListDocumentMetadataHistoryCommandError");
    var deserializeAws_json1_1ListDocumentsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListDocumentsCommand");
    exports.deserializeAws_json1_1ListDocumentsCommand = deserializeAws_json1_1ListDocumentsCommand;
    var deserializeAws_json1_1ListDocumentsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListDocumentsCommandError");
    var deserializeAws_json1_1ListDocumentVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListDocumentVersionsCommand");
    exports.deserializeAws_json1_1ListDocumentVersionsCommand = deserializeAws_json1_1ListDocumentVersionsCommand;
    var deserializeAws_json1_1ListDocumentVersionsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListDocumentVersionsCommandError");
    var deserializeAws_json1_1ListInventoryEntriesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListInventoryEntriesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListInventoryEntriesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListInventoryEntriesCommand");
    exports.deserializeAws_json1_1ListInventoryEntriesCommand = deserializeAws_json1_1ListInventoryEntriesCommand;
    var deserializeAws_json1_1ListInventoryEntriesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListInventoryEntriesCommandError");
    var deserializeAws_json1_1ListOpsItemEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsItemEventsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsItemEventsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListOpsItemEventsCommand");
    exports.deserializeAws_json1_1ListOpsItemEventsCommand = deserializeAws_json1_1ListOpsItemEventsCommand;
    var deserializeAws_json1_1ListOpsItemEventsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListOpsItemEventsCommandError");
    var deserializeAws_json1_1ListOpsItemRelatedItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsItemRelatedItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsItemRelatedItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListOpsItemRelatedItemsCommand");
    exports.deserializeAws_json1_1ListOpsItemRelatedItemsCommand = deserializeAws_json1_1ListOpsItemRelatedItemsCommand;
    var deserializeAws_json1_1ListOpsItemRelatedItemsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListOpsItemRelatedItemsCommandError");
    var deserializeAws_json1_1ListOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListOpsMetadataCommand");
    exports.deserializeAws_json1_1ListOpsMetadataCommand = deserializeAws_json1_1ListOpsMetadataCommand;
    var deserializeAws_json1_1ListOpsMetadataCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListOpsMetadataCommandError");
    var deserializeAws_json1_1ListResourceComplianceSummariesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListResourceComplianceSummariesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListResourceComplianceSummariesCommand");
    exports.deserializeAws_json1_1ListResourceComplianceSummariesCommand = deserializeAws_json1_1ListResourceComplianceSummariesCommand;
    var deserializeAws_json1_1ListResourceComplianceSummariesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListResourceComplianceSummariesCommandError");
    var deserializeAws_json1_1ListResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListResourceDataSyncCommand");
    exports.deserializeAws_json1_1ListResourceDataSyncCommand = deserializeAws_json1_1ListResourceDataSyncCommand;
    var deserializeAws_json1_1ListResourceDataSyncCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListResourceDataSyncCommandError");
    var deserializeAws_json1_1ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListTagsForResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ListTagsForResourceCommand");
    exports.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
    var deserializeAws_json1_1ListTagsForResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ListTagsForResourceCommandError");
    var deserializeAws_json1_1ModifyDocumentPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ModifyDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ModifyDocumentPermissionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ModifyDocumentPermissionCommand");
    exports.deserializeAws_json1_1ModifyDocumentPermissionCommand = deserializeAws_json1_1ModifyDocumentPermissionCommand;
    var deserializeAws_json1_1ModifyDocumentPermissionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await deserializeAws_json1_1DocumentLimitExceededResponse(parsedOutput, context);
        case "DocumentPermissionLimit":
        case "com.amazonaws.ssm#DocumentPermissionLimit":
          throw await deserializeAws_json1_1DocumentPermissionLimitResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await deserializeAws_json1_1InvalidPermissionTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ModifyDocumentPermissionCommandError");
    var deserializeAws_json1_1PutComplianceItemsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutComplianceItemsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1PutComplianceItemsCommand");
    exports.deserializeAws_json1_1PutComplianceItemsCommand = deserializeAws_json1_1PutComplianceItemsCommand;
    var deserializeAws_json1_1PutComplianceItemsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ComplianceTypeCountLimitExceededException":
        case "com.amazonaws.ssm#ComplianceTypeCountLimitExceededException":
          throw await deserializeAws_json1_1ComplianceTypeCountLimitExceededExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await deserializeAws_json1_1InvalidItemContentExceptionResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1PutComplianceItemsCommandError");
    var deserializeAws_json1_1PutInventoryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1PutInventoryCommand");
    exports.deserializeAws_json1_1PutInventoryCommand = deserializeAws_json1_1PutInventoryCommand;
    var deserializeAws_json1_1PutInventoryCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomSchemaCountLimitExceededException":
        case "com.amazonaws.ssm#CustomSchemaCountLimitExceededException":
          throw await deserializeAws_json1_1CustomSchemaCountLimitExceededExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidInventoryItemContextException":
        case "com.amazonaws.ssm#InvalidInventoryItemContextException":
          throw await deserializeAws_json1_1InvalidInventoryItemContextExceptionResponse(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await deserializeAws_json1_1InvalidItemContentExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        case "ItemContentMismatchException":
        case "com.amazonaws.ssm#ItemContentMismatchException":
          throw await deserializeAws_json1_1ItemContentMismatchExceptionResponse(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "SubTypeCountLimitExceededException":
        case "com.amazonaws.ssm#SubTypeCountLimitExceededException":
          throw await deserializeAws_json1_1SubTypeCountLimitExceededExceptionResponse(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "UnsupportedInventoryItemContextException":
        case "com.amazonaws.ssm#UnsupportedInventoryItemContextException":
          throw await deserializeAws_json1_1UnsupportedInventoryItemContextExceptionResponse(parsedOutput, context);
        case "UnsupportedInventorySchemaVersionException":
        case "com.amazonaws.ssm#UnsupportedInventorySchemaVersionException":
          throw await deserializeAws_json1_1UnsupportedInventorySchemaVersionExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1PutInventoryCommandError");
    var deserializeAws_json1_1PutParameterCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1PutParameterCommand");
    exports.deserializeAws_json1_1PutParameterCommand = deserializeAws_json1_1PutParameterCommand;
    var deserializeAws_json1_1PutParameterCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "HierarchyLevelLimitExceededException":
        case "com.amazonaws.ssm#HierarchyLevelLimitExceededException":
          throw await deserializeAws_json1_1HierarchyLevelLimitExceededExceptionResponse(parsedOutput, context);
        case "HierarchyTypeMismatchException":
        case "com.amazonaws.ssm#HierarchyTypeMismatchException":
          throw await deserializeAws_json1_1HierarchyTypeMismatchExceptionResponse(parsedOutput, context);
        case "IncompatiblePolicyException":
        case "com.amazonaws.ssm#IncompatiblePolicyException":
          throw await deserializeAws_json1_1IncompatiblePolicyExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAllowedPatternException":
        case "com.amazonaws.ssm#InvalidAllowedPatternException":
          throw await deserializeAws_json1_1InvalidAllowedPatternExceptionResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidPolicyAttributeException":
        case "com.amazonaws.ssm#InvalidPolicyAttributeException":
          throw await deserializeAws_json1_1InvalidPolicyAttributeExceptionResponse(parsedOutput, context);
        case "InvalidPolicyTypeException":
        case "com.amazonaws.ssm#InvalidPolicyTypeException":
          throw await deserializeAws_json1_1InvalidPolicyTypeExceptionResponse(parsedOutput, context);
        case "ParameterAlreadyExists":
        case "com.amazonaws.ssm#ParameterAlreadyExists":
          throw await deserializeAws_json1_1ParameterAlreadyExistsResponse(parsedOutput, context);
        case "ParameterLimitExceeded":
        case "com.amazonaws.ssm#ParameterLimitExceeded":
          throw await deserializeAws_json1_1ParameterLimitExceededResponse(parsedOutput, context);
        case "ParameterMaxVersionLimitExceeded":
        case "com.amazonaws.ssm#ParameterMaxVersionLimitExceeded":
          throw await deserializeAws_json1_1ParameterMaxVersionLimitExceededResponse(parsedOutput, context);
        case "ParameterPatternMismatchException":
        case "com.amazonaws.ssm#ParameterPatternMismatchException":
          throw await deserializeAws_json1_1ParameterPatternMismatchExceptionResponse(parsedOutput, context);
        case "PoliciesLimitExceededException":
        case "com.amazonaws.ssm#PoliciesLimitExceededException":
          throw await deserializeAws_json1_1PoliciesLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        case "UnsupportedParameterType":
        case "com.amazonaws.ssm#UnsupportedParameterType":
          throw await deserializeAws_json1_1UnsupportedParameterTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1PutParameterCommandError");
    var deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterDefaultPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1RegisterDefaultPatchBaselineCommand");
    exports.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = deserializeAws_json1_1RegisterDefaultPatchBaselineCommand;
    var deserializeAws_json1_1RegisterDefaultPatchBaselineCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1RegisterDefaultPatchBaselineCommandError");
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand");
    exports.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ssm#AlreadyExistsException":
          throw await deserializeAws_json1_1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommandError");
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterTargetWithMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand");
    exports.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand;
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommandError");
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterTaskWithMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand");
    exports.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand;
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "FeatureNotAvailableException":
        case "com.amazonaws.ssm#FeatureNotAvailableException":
          throw await deserializeAws_json1_1FeatureNotAvailableExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommandError");
    var deserializeAws_json1_1RemoveTagsFromResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RemoveTagsFromResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RemoveTagsFromResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1RemoveTagsFromResourceCommand");
    exports.deserializeAws_json1_1RemoveTagsFromResourceCommand = deserializeAws_json1_1RemoveTagsFromResourceCommand;
    var deserializeAws_json1_1RemoveTagsFromResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1RemoveTagsFromResourceCommandError");
    var deserializeAws_json1_1ResetServiceSettingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ResetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ResetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ResetServiceSettingCommand");
    exports.deserializeAws_json1_1ResetServiceSettingCommand = deserializeAws_json1_1ResetServiceSettingCommand;
    var deserializeAws_json1_1ResetServiceSettingCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ResetServiceSettingCommandError");
    var deserializeAws_json1_1ResumeSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ResumeSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ResumeSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1ResumeSessionCommand");
    exports.deserializeAws_json1_1ResumeSessionCommand = deserializeAws_json1_1ResumeSessionCommand;
    var deserializeAws_json1_1ResumeSessionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1ResumeSessionCommandError");
    var deserializeAws_json1_1SendAutomationSignalCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SendAutomationSignalCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1SendAutomationSignalResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1SendAutomationSignalCommand");
    exports.deserializeAws_json1_1SendAutomationSignalCommand = deserializeAws_json1_1SendAutomationSignalCommand;
    var deserializeAws_json1_1SendAutomationSignalCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationStepNotFoundException":
        case "com.amazonaws.ssm#AutomationStepNotFoundException":
          throw await deserializeAws_json1_1AutomationStepNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationSignalException":
        case "com.amazonaws.ssm#InvalidAutomationSignalException":
          throw await deserializeAws_json1_1InvalidAutomationSignalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1SendAutomationSignalCommandError");
    var deserializeAws_json1_1SendCommandCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SendCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1SendCommandResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1SendCommandCommand");
    exports.deserializeAws_json1_1SendCommandCommand = deserializeAws_json1_1SendCommandCommand;
    var deserializeAws_json1_1SendCommandCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNotificationConfig":
        case "com.amazonaws.ssm#InvalidNotificationConfig":
          throw await deserializeAws_json1_1InvalidNotificationConfigResponse(parsedOutput, context);
        case "InvalidOutputFolder":
        case "com.amazonaws.ssm#InvalidOutputFolder":
          throw await deserializeAws_json1_1InvalidOutputFolderResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidRole":
        case "com.amazonaws.ssm#InvalidRole":
          throw await deserializeAws_json1_1InvalidRoleResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1SendCommandCommandError");
    var deserializeAws_json1_1StartAssociationsOnceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartAssociationsOnceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartAssociationsOnceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1StartAssociationsOnceCommand");
    exports.deserializeAws_json1_1StartAssociationsOnceCommand = deserializeAws_json1_1StartAssociationsOnceCommand;
    var deserializeAws_json1_1StartAssociationsOnceCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InvalidAssociation":
        case "com.amazonaws.ssm#InvalidAssociation":
          throw await deserializeAws_json1_1InvalidAssociationResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1StartAssociationsOnceCommandError");
    var deserializeAws_json1_1StartAutomationExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1StartAutomationExecutionCommand");
    exports.deserializeAws_json1_1StartAutomationExecutionCommand = deserializeAws_json1_1StartAutomationExecutionCommand;
    var deserializeAws_json1_1StartAutomationExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1StartAutomationExecutionCommandError");
    var deserializeAws_json1_1StartChangeRequestExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartChangeRequestExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartChangeRequestExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1StartChangeRequestExecutionCommand");
    exports.deserializeAws_json1_1StartChangeRequestExecutionCommand = deserializeAws_json1_1StartChangeRequestExecutionCommand;
    var deserializeAws_json1_1StartChangeRequestExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotApprovedException":
        case "com.amazonaws.ssm#AutomationDefinitionNotApprovedException":
          throw await deserializeAws_json1_1AutomationDefinitionNotApprovedExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1StartChangeRequestExecutionCommandError");
    var deserializeAws_json1_1StartSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1StartSessionCommand");
    exports.deserializeAws_json1_1StartSessionCommand = deserializeAws_json1_1StartSessionCommand;
    var deserializeAws_json1_1StartSessionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "TargetNotConnected":
        case "com.amazonaws.ssm#TargetNotConnected":
          throw await deserializeAws_json1_1TargetNotConnectedResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1StartSessionCommandError");
    var deserializeAws_json1_1StopAutomationExecutionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StopAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1StopAutomationExecutionCommand");
    exports.deserializeAws_json1_1StopAutomationExecutionCommand = deserializeAws_json1_1StopAutomationExecutionCommand;
    var deserializeAws_json1_1StopAutomationExecutionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationStatusUpdateException":
        case "com.amazonaws.ssm#InvalidAutomationStatusUpdateException":
          throw await deserializeAws_json1_1InvalidAutomationStatusUpdateExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1StopAutomationExecutionCommandError");
    var deserializeAws_json1_1TerminateSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1TerminateSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1TerminateSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1TerminateSessionCommand");
    exports.deserializeAws_json1_1TerminateSessionCommand = deserializeAws_json1_1TerminateSessionCommand;
    var deserializeAws_json1_1TerminateSessionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1TerminateSessionCommandError");
    var deserializeAws_json1_1UnlabelParameterVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UnlabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UnlabelParameterVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UnlabelParameterVersionCommand");
    exports.deserializeAws_json1_1UnlabelParameterVersionCommand = deserializeAws_json1_1UnlabelParameterVersionCommand;
    var deserializeAws_json1_1UnlabelParameterVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UnlabelParameterVersionCommandError");
    var deserializeAws_json1_1UpdateAssociationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateAssociationCommand");
    exports.deserializeAws_json1_1UpdateAssociationCommand = deserializeAws_json1_1UpdateAssociationCommand;
    var deserializeAws_json1_1UpdateAssociationCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "AssociationVersionLimitExceeded":
        case "com.amazonaws.ssm#AssociationVersionLimitExceeded":
          throw await deserializeAws_json1_1AssociationVersionLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await deserializeAws_json1_1InvalidAssociationVersionResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "InvalidUpdate":
        case "com.amazonaws.ssm#InvalidUpdate":
          throw await deserializeAws_json1_1InvalidUpdateResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateAssociationCommandError");
    var deserializeAws_json1_1UpdateAssociationStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAssociationStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateAssociationStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateAssociationStatusCommand");
    exports.deserializeAws_json1_1UpdateAssociationStatusCommand = deserializeAws_json1_1UpdateAssociationStatusCommand;
    var deserializeAws_json1_1UpdateAssociationStatusCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "StatusUnchanged":
        case "com.amazonaws.ssm#StatusUnchanged":
          throw await deserializeAws_json1_1StatusUnchangedResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateAssociationStatusCommandError");
    var deserializeAws_json1_1UpdateDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateDocumentCommand");
    exports.deserializeAws_json1_1UpdateDocumentCommand = deserializeAws_json1_1UpdateDocumentCommand;
    var deserializeAws_json1_1UpdateDocumentCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentVersionLimitExceeded":
        case "com.amazonaws.ssm#DocumentVersionLimitExceeded":
          throw await deserializeAws_json1_1DocumentVersionLimitExceededResponse(parsedOutput, context);
        case "DuplicateDocumentContent":
        case "com.amazonaws.ssm#DuplicateDocumentContent":
          throw await deserializeAws_json1_1DuplicateDocumentContentResponse(parsedOutput, context);
        case "DuplicateDocumentVersionName":
        case "com.amazonaws.ssm#DuplicateDocumentVersionName":
          throw await deserializeAws_json1_1DuplicateDocumentVersionNameResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await deserializeAws_json1_1InvalidDocumentContentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateDocumentCommandError");
    var deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentDefaultVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentDefaultVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateDocumentDefaultVersionCommand");
    exports.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = deserializeAws_json1_1UpdateDocumentDefaultVersionCommand;
    var deserializeAws_json1_1UpdateDocumentDefaultVersionCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateDocumentDefaultVersionCommandError");
    var deserializeAws_json1_1UpdateDocumentMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentMetadataResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateDocumentMetadataCommand");
    exports.deserializeAws_json1_1UpdateDocumentMetadataCommand = deserializeAws_json1_1UpdateDocumentMetadataCommand;
    var deserializeAws_json1_1UpdateDocumentMetadataCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateDocumentMetadataCommandError");
    var deserializeAws_json1_1UpdateMaintenanceWindowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateMaintenanceWindowCommand");
    exports.deserializeAws_json1_1UpdateMaintenanceWindowCommand = deserializeAws_json1_1UpdateMaintenanceWindowCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateMaintenanceWindowCommandError");
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowTargetResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand");
    exports.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateMaintenanceWindowTargetCommandError");
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand");
    exports.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateMaintenanceWindowTaskCommandError");
    var deserializeAws_json1_1UpdateManagedInstanceRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateManagedInstanceRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateManagedInstanceRoleResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateManagedInstanceRoleCommand");
    exports.deserializeAws_json1_1UpdateManagedInstanceRoleCommand = deserializeAws_json1_1UpdateManagedInstanceRoleCommand;
    var deserializeAws_json1_1UpdateManagedInstanceRoleCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateManagedInstanceRoleCommandError");
    var deserializeAws_json1_1UpdateOpsItemCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateOpsItemCommand");
    exports.deserializeAws_json1_1UpdateOpsItemCommand = deserializeAws_json1_1UpdateOpsItemCommand;
    var deserializeAws_json1_1UpdateOpsItemCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateOpsItemCommandError");
    var deserializeAws_json1_1UpdateOpsMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateOpsMetadataCommand");
    exports.deserializeAws_json1_1UpdateOpsMetadataCommand = deserializeAws_json1_1UpdateOpsMetadataCommand;
    var deserializeAws_json1_1UpdateOpsMetadataCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataKeyLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataKeyLimitExceededException":
          throw await deserializeAws_json1_1OpsMetadataKeyLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateOpsMetadataCommandError");
    var deserializeAws_json1_1UpdatePatchBaselineCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdatePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdatePatchBaselineCommand");
    exports.deserializeAws_json1_1UpdatePatchBaselineCommand = deserializeAws_json1_1UpdatePatchBaselineCommand;
    var deserializeAws_json1_1UpdatePatchBaselineCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdatePatchBaselineCommandError");
    var deserializeAws_json1_1UpdateResourceDataSyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateResourceDataSyncCommand");
    exports.deserializeAws_json1_1UpdateResourceDataSyncCommand = deserializeAws_json1_1UpdateResourceDataSyncCommand;
    var deserializeAws_json1_1UpdateResourceDataSyncCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncConflictException":
        case "com.amazonaws.ssm#ResourceDataSyncConflictException":
          throw await deserializeAws_json1_1ResourceDataSyncConflictExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateResourceDataSyncCommandError");
    var deserializeAws_json1_1UpdateServiceSettingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_json1_1UpdateServiceSettingCommand");
    exports.deserializeAws_json1_1UpdateServiceSettingCommand = deserializeAws_json1_1UpdateServiceSettingCommand;
    var deserializeAws_json1_1UpdateServiceSettingCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    }, "deserializeAws_json1_1UpdateServiceSettingCommandError");
    var deserializeAws_json1_1AlreadyExistsExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AlreadyExistsException(body, context);
      const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AlreadyExistsExceptionResponse");
    var deserializeAws_json1_1AssociatedInstancesResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociatedInstances(body, context);
      const exception = new models_0_1.AssociatedInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AssociatedInstancesResponse");
    var deserializeAws_json1_1AssociationAlreadyExistsResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationAlreadyExists(body, context);
      const exception = new models_0_1.AssociationAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AssociationAlreadyExistsResponse");
    var deserializeAws_json1_1AssociationDoesNotExistResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationDoesNotExist(body, context);
      const exception = new models_0_1.AssociationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AssociationDoesNotExistResponse");
    var deserializeAws_json1_1AssociationExecutionDoesNotExistResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationExecutionDoesNotExist(body, context);
      const exception = new models_0_1.AssociationExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AssociationExecutionDoesNotExistResponse");
    var deserializeAws_json1_1AssociationLimitExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationLimitExceeded(body, context);
      const exception = new models_0_1.AssociationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AssociationLimitExceededResponse");
    var deserializeAws_json1_1AssociationVersionLimitExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationVersionLimitExceeded(body, context);
      const exception = new models_1_1.AssociationVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AssociationVersionLimitExceededResponse");
    var deserializeAws_json1_1AutomationDefinitionNotApprovedExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionNotApprovedException(body, context);
      const exception = new models_1_1.AutomationDefinitionNotApprovedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AutomationDefinitionNotApprovedExceptionResponse");
    var deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionNotFoundException(body, context);
      const exception = new models_1_1.AutomationDefinitionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse");
    var deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionVersionNotFoundException(body, context);
      const exception = new models_1_1.AutomationDefinitionVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse");
    var deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationExecutionLimitExceededException(body, context);
      const exception = new models_1_1.AutomationExecutionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse");
    var deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationExecutionNotFoundException(body, context);
      const exception = new models_0_1.AutomationExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse");
    var deserializeAws_json1_1AutomationStepNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationStepNotFoundException(body, context);
      const exception = new models_1_1.AutomationStepNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1AutomationStepNotFoundExceptionResponse");
    var deserializeAws_json1_1ComplianceTypeCountLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ComplianceTypeCountLimitExceededException(body, context);
      const exception = new models_1_1.ComplianceTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ComplianceTypeCountLimitExceededExceptionResponse");
    var deserializeAws_json1_1CustomSchemaCountLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CustomSchemaCountLimitExceededException(body, context);
      const exception = new models_1_1.CustomSchemaCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1CustomSchemaCountLimitExceededExceptionResponse");
    var deserializeAws_json1_1DocumentAlreadyExistsResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentAlreadyExists(body, context);
      const exception = new models_0_1.DocumentAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DocumentAlreadyExistsResponse");
    var deserializeAws_json1_1DocumentLimitExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentLimitExceeded(body, context);
      const exception = new models_0_1.DocumentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DocumentLimitExceededResponse");
    var deserializeAws_json1_1DocumentPermissionLimitResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentPermissionLimit(body, context);
      const exception = new models_1_1.DocumentPermissionLimit({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DocumentPermissionLimitResponse");
    var deserializeAws_json1_1DocumentVersionLimitExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentVersionLimitExceeded(body, context);
      const exception = new models_1_1.DocumentVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DocumentVersionLimitExceededResponse");
    var deserializeAws_json1_1DoesNotExistExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DoesNotExistException(body, context);
      const exception = new models_0_1.DoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DoesNotExistExceptionResponse");
    var deserializeAws_json1_1DuplicateDocumentContentResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateDocumentContent(body, context);
      const exception = new models_1_1.DuplicateDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DuplicateDocumentContentResponse");
    var deserializeAws_json1_1DuplicateDocumentVersionNameResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateDocumentVersionName(body, context);
      const exception = new models_1_1.DuplicateDocumentVersionName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DuplicateDocumentVersionNameResponse");
    var deserializeAws_json1_1DuplicateInstanceIdResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateInstanceId(body, context);
      const exception = new models_0_1.DuplicateInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1DuplicateInstanceIdResponse");
    var deserializeAws_json1_1FeatureNotAvailableExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1FeatureNotAvailableException(body, context);
      const exception = new models_1_1.FeatureNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1FeatureNotAvailableExceptionResponse");
    var deserializeAws_json1_1HierarchyLevelLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1HierarchyLevelLimitExceededException(body, context);
      const exception = new models_1_1.HierarchyLevelLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1HierarchyLevelLimitExceededExceptionResponse");
    var deserializeAws_json1_1HierarchyTypeMismatchExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1HierarchyTypeMismatchException(body, context);
      const exception = new models_1_1.HierarchyTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1HierarchyTypeMismatchExceptionResponse");
    var deserializeAws_json1_1IdempotentParameterMismatchResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IdempotentParameterMismatch(body, context);
      const exception = new models_0_1.IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1IdempotentParameterMismatchResponse");
    var deserializeAws_json1_1IncompatiblePolicyExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IncompatiblePolicyException(body, context);
      const exception = new models_1_1.IncompatiblePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1IncompatiblePolicyExceptionResponse");
    var deserializeAws_json1_1InternalServerErrorResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InternalServerError(body, context);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InternalServerErrorResponse");
    var deserializeAws_json1_1InvalidActivationResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidActivation(body, context);
      const exception = new models_0_1.InvalidActivation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidActivationResponse");
    var deserializeAws_json1_1InvalidActivationIdResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidActivationId(body, context);
      const exception = new models_0_1.InvalidActivationId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidActivationIdResponse");
    var deserializeAws_json1_1InvalidAggregatorExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAggregatorException(body, context);
      const exception = new models_1_1.InvalidAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidAggregatorExceptionResponse");
    var deserializeAws_json1_1InvalidAllowedPatternExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAllowedPatternException(body, context);
      const exception = new models_1_1.InvalidAllowedPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidAllowedPatternExceptionResponse");
    var deserializeAws_json1_1InvalidAssociationResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAssociation(body, context);
      const exception = new models_1_1.InvalidAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidAssociationResponse");
    var deserializeAws_json1_1InvalidAssociationVersionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAssociationVersion(body, context);
      const exception = new models_0_1.InvalidAssociationVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidAssociationVersionResponse");
    var deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationExecutionParametersException(body, context);
      const exception = new models_1_1.InvalidAutomationExecutionParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse");
    var deserializeAws_json1_1InvalidAutomationSignalExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationSignalException(body, context);
      const exception = new models_1_1.InvalidAutomationSignalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidAutomationSignalExceptionResponse");
    var deserializeAws_json1_1InvalidAutomationStatusUpdateExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationStatusUpdateException(body, context);
      const exception = new models_1_1.InvalidAutomationStatusUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidAutomationStatusUpdateExceptionResponse");
    var deserializeAws_json1_1InvalidCommandIdResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidCommandId(body, context);
      const exception = new models_0_1.InvalidCommandId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidCommandIdResponse");
    var deserializeAws_json1_1InvalidDeleteInventoryParametersExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeleteInventoryParametersException(body, context);
      const exception = new models_0_1.InvalidDeleteInventoryParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDeleteInventoryParametersExceptionResponse");
    var deserializeAws_json1_1InvalidDeletionIdExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeletionIdException(body, context);
      const exception = new models_0_1.InvalidDeletionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDeletionIdExceptionResponse");
    var deserializeAws_json1_1InvalidDocumentResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocument(body, context);
      const exception = new models_0_1.InvalidDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDocumentResponse");
    var deserializeAws_json1_1InvalidDocumentContentResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentContent(body, context);
      const exception = new models_0_1.InvalidDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDocumentContentResponse");
    var deserializeAws_json1_1InvalidDocumentOperationResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentOperation(body, context);
      const exception = new models_0_1.InvalidDocumentOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDocumentOperationResponse");
    var deserializeAws_json1_1InvalidDocumentSchemaVersionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentSchemaVersion(body, context);
      const exception = new models_0_1.InvalidDocumentSchemaVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDocumentSchemaVersionResponse");
    var deserializeAws_json1_1InvalidDocumentTypeResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentType(body, context);
      const exception = new models_1_1.InvalidDocumentType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDocumentTypeResponse");
    var deserializeAws_json1_1InvalidDocumentVersionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentVersion(body, context);
      const exception = new models_0_1.InvalidDocumentVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidDocumentVersionResponse");
    var deserializeAws_json1_1InvalidFilterResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilter(body, context);
      const exception = new models_0_1.InvalidFilter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidFilterResponse");
    var deserializeAws_json1_1InvalidFilterKeyResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterKey(body, context);
      const exception = new models_0_1.InvalidFilterKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidFilterKeyResponse");
    var deserializeAws_json1_1InvalidFilterOptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterOption(body, context);
      const exception = new models_1_1.InvalidFilterOption({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidFilterOptionResponse");
    var deserializeAws_json1_1InvalidFilterValueResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterValue(body, context);
      const exception = new models_0_1.InvalidFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidFilterValueResponse");
    var deserializeAws_json1_1InvalidInstanceIdResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceId(body, context);
      const exception = new models_0_1.InvalidInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidInstanceIdResponse");
    var deserializeAws_json1_1InvalidInstanceInformationFilterValueResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceInformationFilterValue(body, context);
      const exception = new models_0_1.InvalidInstanceInformationFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidInstanceInformationFilterValueResponse");
    var deserializeAws_json1_1InvalidInventoryGroupExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryGroupException(body, context);
      const exception = new models_1_1.InvalidInventoryGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidInventoryGroupExceptionResponse");
    var deserializeAws_json1_1InvalidInventoryItemContextExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryItemContextException(body, context);
      const exception = new models_1_1.InvalidInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidInventoryItemContextExceptionResponse");
    var deserializeAws_json1_1InvalidInventoryRequestExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryRequestException(body, context);
      const exception = new models_0_1.InvalidInventoryRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidInventoryRequestExceptionResponse");
    var deserializeAws_json1_1InvalidItemContentExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidItemContentException(body, context);
      const exception = new models_1_1.InvalidItemContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidItemContentExceptionResponse");
    var deserializeAws_json1_1InvalidKeyIdResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidKeyId(body, context);
      const exception = new models_1_1.InvalidKeyId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidKeyIdResponse");
    var deserializeAws_json1_1InvalidNextTokenResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNextToken(body, context);
      const exception = new models_0_1.InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidNextTokenResponse");
    var deserializeAws_json1_1InvalidNotificationConfigResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNotificationConfig(body, context);
      const exception = new models_1_1.InvalidNotificationConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidNotificationConfigResponse");
    var deserializeAws_json1_1InvalidOptionExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOptionException(body, context);
      const exception = new models_0_1.InvalidOptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidOptionExceptionResponse");
    var deserializeAws_json1_1InvalidOutputFolderResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOutputFolder(body, context);
      const exception = new models_1_1.InvalidOutputFolder({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidOutputFolderResponse");
    var deserializeAws_json1_1InvalidOutputLocationResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOutputLocation(body, context);
      const exception = new models_0_1.InvalidOutputLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidOutputLocationResponse");
    var deserializeAws_json1_1InvalidParametersResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidParameters(body, context);
      const exception = new models_0_1.InvalidParameters({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidParametersResponse");
    var deserializeAws_json1_1InvalidPermissionTypeResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPermissionType(body, context);
      const exception = new models_0_1.InvalidPermissionType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidPermissionTypeResponse");
    var deserializeAws_json1_1InvalidPluginNameResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPluginName(body, context);
      const exception = new models_1_1.InvalidPluginName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidPluginNameResponse");
    var deserializeAws_json1_1InvalidPolicyAttributeExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPolicyAttributeException(body, context);
      const exception = new models_1_1.InvalidPolicyAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidPolicyAttributeExceptionResponse");
    var deserializeAws_json1_1InvalidPolicyTypeExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPolicyTypeException(body, context);
      const exception = new models_1_1.InvalidPolicyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidPolicyTypeExceptionResponse");
    var deserializeAws_json1_1InvalidResourceIdResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResourceId(body, context);
      const exception = new models_0_1.InvalidResourceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidResourceIdResponse");
    var deserializeAws_json1_1InvalidResourceTypeResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResourceType(body, context);
      const exception = new models_0_1.InvalidResourceType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidResourceTypeResponse");
    var deserializeAws_json1_1InvalidResultAttributeExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResultAttributeException(body, context);
      const exception = new models_1_1.InvalidResultAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidResultAttributeExceptionResponse");
    var deserializeAws_json1_1InvalidRoleResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidRole(body, context);
      const exception = new models_1_1.InvalidRole({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidRoleResponse");
    var deserializeAws_json1_1InvalidScheduleResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidSchedule(body, context);
      const exception = new models_0_1.InvalidSchedule({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidScheduleResponse");
    var deserializeAws_json1_1InvalidTagResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTag(body, context);
      const exception = new models_0_1.InvalidTag({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidTagResponse");
    var deserializeAws_json1_1InvalidTargetResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTarget(body, context);
      const exception = new models_0_1.InvalidTarget({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidTargetResponse");
    var deserializeAws_json1_1InvalidTargetMapsResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTargetMaps(body, context);
      const exception = new models_0_1.InvalidTargetMaps({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidTargetMapsResponse");
    var deserializeAws_json1_1InvalidTypeNameExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTypeNameException(body, context);
      const exception = new models_0_1.InvalidTypeNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidTypeNameExceptionResponse");
    var deserializeAws_json1_1InvalidUpdateResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidUpdate(body, context);
      const exception = new models_1_1.InvalidUpdate({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvalidUpdateResponse");
    var deserializeAws_json1_1InvocationDoesNotExistResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvocationDoesNotExist(body, context);
      const exception = new models_1_1.InvocationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1InvocationDoesNotExistResponse");
    var deserializeAws_json1_1ItemContentMismatchExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ItemContentMismatchException(body, context);
      const exception = new models_1_1.ItemContentMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ItemContentMismatchExceptionResponse");
    var deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ItemSizeLimitExceededException(body, context);
      const exception = new models_1_1.ItemSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse");
    var deserializeAws_json1_1MaxDocumentSizeExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1MaxDocumentSizeExceeded(body, context);
      const exception = new models_0_1.MaxDocumentSizeExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1MaxDocumentSizeExceededResponse");
    var deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse");
    var deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemInvalidParameterException(body, context);
      const exception = new models_0_1.OpsItemInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse");
    var deserializeAws_json1_1OpsItemLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemLimitExceededException(body, context);
      const exception = new models_0_1.OpsItemLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsItemLimitExceededExceptionResponse");
    var deserializeAws_json1_1OpsItemNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemNotFoundException(body, context);
      const exception = new models_0_1.OpsItemNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsItemNotFoundExceptionResponse");
    var deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsItemRelatedItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsExceptionResponse");
    var deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundException(body, context);
      const exception = new models_1_1.OpsItemRelatedItemAssociationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundExceptionResponse");
    var deserializeAws_json1_1OpsMetadataAlreadyExistsExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsMetadataAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsMetadataAlreadyExistsExceptionResponse");
    var deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataInvalidArgumentException(body, context);
      const exception = new models_0_1.OpsMetadataInvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse");
    var deserializeAws_json1_1OpsMetadataKeyLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataKeyLimitExceededException(body, context);
      const exception = new models_2_1.OpsMetadataKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsMetadataKeyLimitExceededExceptionResponse");
    var deserializeAws_json1_1OpsMetadataLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataLimitExceededException(body, context);
      const exception = new models_0_1.OpsMetadataLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsMetadataLimitExceededExceptionResponse");
    var deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataNotFoundException(body, context);
      const exception = new models_0_1.OpsMetadataNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse");
    var deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataTooManyUpdatesException(body, context);
      const exception = new models_0_1.OpsMetadataTooManyUpdatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse");
    var deserializeAws_json1_1ParameterAlreadyExistsResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterAlreadyExists(body, context);
      const exception = new models_1_1.ParameterAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ParameterAlreadyExistsResponse");
    var deserializeAws_json1_1ParameterLimitExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterLimitExceeded(body, context);
      const exception = new models_1_1.ParameterLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ParameterLimitExceededResponse");
    var deserializeAws_json1_1ParameterMaxVersionLimitExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterMaxVersionLimitExceeded(body, context);
      const exception = new models_1_1.ParameterMaxVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ParameterMaxVersionLimitExceededResponse");
    var deserializeAws_json1_1ParameterNotFoundResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterNotFound(body, context);
      const exception = new models_0_1.ParameterNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ParameterNotFoundResponse");
    var deserializeAws_json1_1ParameterPatternMismatchExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterPatternMismatchException(body, context);
      const exception = new models_1_1.ParameterPatternMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ParameterPatternMismatchExceptionResponse");
    var deserializeAws_json1_1ParameterVersionLabelLimitExceededResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterVersionLabelLimitExceeded(body, context);
      const exception = new models_1_1.ParameterVersionLabelLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ParameterVersionLabelLimitExceededResponse");
    var deserializeAws_json1_1ParameterVersionNotFoundResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterVersionNotFound(body, context);
      const exception = new models_1_1.ParameterVersionNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ParameterVersionNotFoundResponse");
    var deserializeAws_json1_1PoliciesLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1PoliciesLimitExceededException(body, context);
      const exception = new models_1_1.PoliciesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1PoliciesLimitExceededExceptionResponse");
    var deserializeAws_json1_1ResourceDataSyncAlreadyExistsExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncAlreadyExistsException(body, context);
      const exception = new models_0_1.ResourceDataSyncAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ResourceDataSyncAlreadyExistsExceptionResponse");
    var deserializeAws_json1_1ResourceDataSyncConflictExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncConflictException(body, context);
      const exception = new models_2_1.ResourceDataSyncConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ResourceDataSyncConflictExceptionResponse");
    var deserializeAws_json1_1ResourceDataSyncCountExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncCountExceededException(body, context);
      const exception = new models_0_1.ResourceDataSyncCountExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ResourceDataSyncCountExceededExceptionResponse");
    var deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncInvalidConfigurationException(body, context);
      const exception = new models_0_1.ResourceDataSyncInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse");
    var deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncNotFoundException(body, context);
      const exception = new models_0_1.ResourceDataSyncNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse");
    var deserializeAws_json1_1ResourceInUseExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ResourceInUseExceptionResponse");
    var deserializeAws_json1_1ResourceLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceLimitExceededException(body, context);
      const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ResourceLimitExceededExceptionResponse");
    var deserializeAws_json1_1ServiceSettingNotFoundResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ServiceSettingNotFound(body, context);
      const exception = new models_1_1.ServiceSettingNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1ServiceSettingNotFoundResponse");
    var deserializeAws_json1_1StatusUnchangedResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1StatusUnchanged(body, context);
      const exception = new models_1_1.StatusUnchanged({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1StatusUnchangedResponse");
    var deserializeAws_json1_1SubTypeCountLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1SubTypeCountLimitExceededException(body, context);
      const exception = new models_1_1.SubTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1SubTypeCountLimitExceededExceptionResponse");
    var deserializeAws_json1_1TargetInUseExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TargetInUseException(body, context);
      const exception = new models_0_1.TargetInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1TargetInUseExceptionResponse");
    var deserializeAws_json1_1TargetNotConnectedResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TargetNotConnected(body, context);
      const exception = new models_1_1.TargetNotConnected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1TargetNotConnectedResponse");
    var deserializeAws_json1_1TooManyTagsErrorResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TooManyTagsError(body, context);
      const exception = new models_0_1.TooManyTagsError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1TooManyTagsErrorResponse");
    var deserializeAws_json1_1TooManyUpdatesResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TooManyUpdates(body, context);
      const exception = new models_0_1.TooManyUpdates({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1TooManyUpdatesResponse");
    var deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TotalSizeLimitExceededException(body, context);
      const exception = new models_1_1.TotalSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse");
    var deserializeAws_json1_1UnsupportedCalendarExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedCalendarException(body, context);
      const exception = new models_1_1.UnsupportedCalendarException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1UnsupportedCalendarExceptionResponse");
    var deserializeAws_json1_1UnsupportedFeatureRequiredExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedFeatureRequiredException(body, context);
      const exception = new models_1_1.UnsupportedFeatureRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1UnsupportedFeatureRequiredExceptionResponse");
    var deserializeAws_json1_1UnsupportedInventoryItemContextExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedInventoryItemContextException(body, context);
      const exception = new models_1_1.UnsupportedInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1UnsupportedInventoryItemContextExceptionResponse");
    var deserializeAws_json1_1UnsupportedInventorySchemaVersionExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedInventorySchemaVersionException(body, context);
      const exception = new models_1_1.UnsupportedInventorySchemaVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1UnsupportedInventorySchemaVersionExceptionResponse");
    var deserializeAws_json1_1UnsupportedOperatingSystemResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedOperatingSystem(body, context);
      const exception = new models_0_1.UnsupportedOperatingSystem({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1UnsupportedOperatingSystemResponse");
    var deserializeAws_json1_1UnsupportedParameterTypeResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedParameterType(body, context);
      const exception = new models_1_1.UnsupportedParameterType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1UnsupportedParameterTypeResponse");
    var deserializeAws_json1_1UnsupportedPlatformTypeResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedPlatformType(body, context);
      const exception = new models_0_1.UnsupportedPlatformType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_json1_1UnsupportedPlatformTypeResponse");
    var serializeAws_json1_1AccountIdList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1AccountIdList");
    var serializeAws_json1_1Accounts = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1Accounts");
    var serializeAws_json1_1AddTagsToResourceRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    }, "serializeAws_json1_1AddTagsToResourceRequest");
    var serializeAws_json1_1Alarm = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1Alarm");
    var serializeAws_json1_1AlarmConfiguration = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Alarms != null && { Alarms: serializeAws_json1_1AlarmList(input.Alarms, context) },
        ...input.IgnorePollAlarmFailure != null && { IgnorePollAlarmFailure: input.IgnorePollAlarmFailure }
      };
    }, "serializeAws_json1_1AlarmConfiguration");
    var serializeAws_json1_1AlarmList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Alarm(entry, context);
      });
    }, "serializeAws_json1_1AlarmList");
    var serializeAws_json1_1AssociateOpsItemRelatedItemRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationType != null && { AssociationType: input.AssociationType },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.ResourceUri != null && { ResourceUri: input.ResourceUri }
      };
    }, "serializeAws_json1_1AssociateOpsItemRelatedItemRequest");
    var serializeAws_json1_1AssociationExecutionFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    }, "serializeAws_json1_1AssociationExecutionFilter");
    var serializeAws_json1_1AssociationExecutionFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AssociationExecutionFilter(entry, context);
      });
    }, "serializeAws_json1_1AssociationExecutionFilterList");
    var serializeAws_json1_1AssociationExecutionTargetsFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    }, "serializeAws_json1_1AssociationExecutionTargetsFilter");
    var serializeAws_json1_1AssociationExecutionTargetsFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AssociationExecutionTargetsFilter(entry, context);
      });
    }, "serializeAws_json1_1AssociationExecutionTargetsFilterList");
    var serializeAws_json1_1AssociationFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    }, "serializeAws_json1_1AssociationFilter");
    var serializeAws_json1_1AssociationFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AssociationFilter(entry, context);
      });
    }, "serializeAws_json1_1AssociationFilterList");
    var serializeAws_json1_1AssociationIdList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1AssociationIdList");
    var serializeAws_json1_1AssociationStatus = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AdditionalInfo != null && { AdditionalInfo: input.AdditionalInfo },
        ...input.Date != null && { Date: Math.round(input.Date.getTime() / 1e3) },
        ...input.Message != null && { Message: input.Message },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1AssociationStatus");
    var serializeAws_json1_1AttachmentsSource = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Name != null && { Name: input.Name },
        ...input.Values != null && { Values: serializeAws_json1_1AttachmentsSourceValues(input.Values, context) }
      };
    }, "serializeAws_json1_1AttachmentsSource");
    var serializeAws_json1_1AttachmentsSourceList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AttachmentsSource(entry, context);
      });
    }, "serializeAws_json1_1AttachmentsSourceList");
    var serializeAws_json1_1AttachmentsSourceValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1AttachmentsSourceValues");
    var serializeAws_json1_1AutomationExecutionFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && {
          Values: serializeAws_json1_1AutomationExecutionFilterValueList(input.Values, context)
        }
      };
    }, "serializeAws_json1_1AutomationExecutionFilter");
    var serializeAws_json1_1AutomationExecutionFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AutomationExecutionFilter(entry, context);
      });
    }, "serializeAws_json1_1AutomationExecutionFilterList");
    var serializeAws_json1_1AutomationExecutionFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1AutomationExecutionFilterValueList");
    var serializeAws_json1_1AutomationParameterMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1AutomationParameterValueList(value, context)
        };
      }, {});
    }, "serializeAws_json1_1AutomationParameterMap");
    var serializeAws_json1_1AutomationParameterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1AutomationParameterValueList");
    var serializeAws_json1_1BaselineOverride = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ApprovalRules != null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches != null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel != null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity != null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ...input.GlobalFilters != null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.RejectedPatches != null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction != null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Sources != null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) }
      };
    }, "serializeAws_json1_1BaselineOverride");
    var serializeAws_json1_1CalendarNameOrARNList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1CalendarNameOrARNList");
    var serializeAws_json1_1CancelCommandRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.InstanceIds != null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) }
      };
    }, "serializeAws_json1_1CancelCommandRequest");
    var serializeAws_json1_1CancelMaintenanceWindowExecutionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    }, "serializeAws_json1_1CancelMaintenanceWindowExecutionRequest");
    var serializeAws_json1_1CloudWatchOutputConfig = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.CloudWatchLogGroupName != null && { CloudWatchLogGroupName: input.CloudWatchLogGroupName },
        ...input.CloudWatchOutputEnabled != null && { CloudWatchOutputEnabled: input.CloudWatchOutputEnabled }
      };
    }, "serializeAws_json1_1CloudWatchOutputConfig");
    var serializeAws_json1_1CommandFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    }, "serializeAws_json1_1CommandFilter");
    var serializeAws_json1_1CommandFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1CommandFilter(entry, context);
      });
    }, "serializeAws_json1_1CommandFilterList");
    var serializeAws_json1_1ComplianceExecutionSummary = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ExecutionId != null && { ExecutionId: input.ExecutionId },
        ...input.ExecutionTime != null && { ExecutionTime: Math.round(input.ExecutionTime.getTime() / 1e3) },
        ...input.ExecutionType != null && { ExecutionType: input.ExecutionType }
      };
    }, "serializeAws_json1_1ComplianceExecutionSummary");
    var serializeAws_json1_1ComplianceItemDetails = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    }, "serializeAws_json1_1ComplianceItemDetails");
    var serializeAws_json1_1ComplianceItemEntry = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Details != null && { Details: serializeAws_json1_1ComplianceItemDetails(input.Details, context) },
        ...input.Id != null && { Id: input.Id },
        ...input.Severity != null && { Severity: input.Severity },
        ...input.Status != null && { Status: input.Status },
        ...input.Title != null && { Title: input.Title }
      };
    }, "serializeAws_json1_1ComplianceItemEntry");
    var serializeAws_json1_1ComplianceItemEntryList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ComplianceItemEntry(entry, context);
      });
    }, "serializeAws_json1_1ComplianceItemEntryList");
    var serializeAws_json1_1ComplianceResourceIdList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ComplianceResourceIdList");
    var serializeAws_json1_1ComplianceResourceTypeList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ComplianceResourceTypeList");
    var serializeAws_json1_1ComplianceStringFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1ComplianceStringFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1ComplianceStringFilter");
    var serializeAws_json1_1ComplianceStringFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ComplianceStringFilter(entry, context);
      });
    }, "serializeAws_json1_1ComplianceStringFilterList");
    var serializeAws_json1_1ComplianceStringFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ComplianceStringFilterValueList");
    var serializeAws_json1_1CreateActivationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DefaultInstanceName != null && { DefaultInstanceName: input.DefaultInstanceName },
        ...input.Description != null && { Description: input.Description },
        ...input.ExpirationDate != null && { ExpirationDate: Math.round(input.ExpirationDate.getTime() / 1e3) },
        ...input.IamRole != null && { IamRole: input.IamRole },
        ...input.RegistrationLimit != null && { RegistrationLimit: input.RegistrationLimit },
        ...input.RegistrationMetadata != null && {
          RegistrationMetadata: serializeAws_json1_1RegistrationMetadataList(input.RegistrationMetadata, context)
        },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    }, "serializeAws_json1_1CreateActivationRequest");
    var serializeAws_json1_1CreateAssociationBatchRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Entries != null && {
          Entries: serializeAws_json1_1CreateAssociationBatchRequestEntries(input.Entries, context)
        }
      };
    }, "serializeAws_json1_1CreateAssociationBatchRequest");
    var serializeAws_json1_1CreateAssociationBatchRequestEntries = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1CreateAssociationBatchRequestEntry(entry, context);
      });
    }, "serializeAws_json1_1CreateAssociationBatchRequestEntries");
    var serializeAws_json1_1CreateAssociationBatchRequestEntry = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ApplyOnlyAtCronInterval != null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationName != null && { AssociationName: input.AssociationName },
        ...input.AutomationTargetParameterName != null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity != null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.OutputLocation != null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance != null && { SyncCompliance: input.SyncCompliance },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    }, "serializeAws_json1_1CreateAssociationBatchRequestEntry");
    var serializeAws_json1_1CreateAssociationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ApplyOnlyAtCronInterval != null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationName != null && { AssociationName: input.AssociationName },
        ...input.AutomationTargetParameterName != null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity != null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.OutputLocation != null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance != null && { SyncCompliance: input.SyncCompliance },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    }, "serializeAws_json1_1CreateAssociationRequest");
    var serializeAws_json1_1CreateDocumentRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Attachments != null && {
          Attachments: serializeAws_json1_1AttachmentsSourceList(input.Attachments, context)
        },
        ...input.Content != null && { Content: input.Content },
        ...input.DisplayName != null && { DisplayName: input.DisplayName },
        ...input.DocumentFormat != null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentType != null && { DocumentType: input.DocumentType },
        ...input.Name != null && { Name: input.Name },
        ...input.Requires != null && { Requires: serializeAws_json1_1DocumentRequiresList(input.Requires, context) },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetType != null && { TargetType: input.TargetType },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    }, "serializeAws_json1_1CreateDocumentRequest");
    var serializeAws_json1_1CreateMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AllowUnassociatedTargets != null && { AllowUnassociatedTargets: input.AllowUnassociatedTargets },
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.Cutoff != null && { Cutoff: input.Cutoff },
        ...input.Description != null && { Description: input.Description },
        ...input.Duration != null && { Duration: input.Duration },
        ...input.EndDate != null && { EndDate: input.EndDate },
        ...input.Name != null && { Name: input.Name },
        ...input.Schedule != null && { Schedule: input.Schedule },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.ScheduleTimezone != null && { ScheduleTimezone: input.ScheduleTimezone },
        ...input.StartDate != null && { StartDate: input.StartDate },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    }, "serializeAws_json1_1CreateMaintenanceWindowRequest");
    var serializeAws_json1_1CreateOpsItemRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ActualEndTime != null && { ActualEndTime: Math.round(input.ActualEndTime.getTime() / 1e3) },
        ...input.ActualStartTime != null && { ActualStartTime: Math.round(input.ActualStartTime.getTime() / 1e3) },
        ...input.Category != null && { Category: input.Category },
        ...input.Description != null && { Description: input.Description },
        ...input.Notifications != null && {
          Notifications: serializeAws_json1_1OpsItemNotifications(input.Notifications, context)
        },
        ...input.OperationalData != null && {
          OperationalData: serializeAws_json1_1OpsItemOperationalData(input.OperationalData, context)
        },
        ...input.OpsItemType != null && { OpsItemType: input.OpsItemType },
        ...input.PlannedEndTime != null && { PlannedEndTime: Math.round(input.PlannedEndTime.getTime() / 1e3) },
        ...input.PlannedStartTime != null && { PlannedStartTime: Math.round(input.PlannedStartTime.getTime() / 1e3) },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.RelatedOpsItems != null && {
          RelatedOpsItems: serializeAws_json1_1RelatedOpsItems(input.RelatedOpsItems, context)
        },
        ...input.Severity != null && { Severity: input.Severity },
        ...input.Source != null && { Source: input.Source },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.Title != null && { Title: input.Title }
      };
    }, "serializeAws_json1_1CreateOpsItemRequest");
    var serializeAws_json1_1CreateOpsMetadataRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Metadata != null && { Metadata: serializeAws_json1_1MetadataMap(input.Metadata, context) },
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    }, "serializeAws_json1_1CreateOpsMetadataRequest");
    var serializeAws_json1_1CreatePatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ApprovalRules != null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches != null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel != null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity != null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.Description != null && { Description: input.Description },
        ...input.GlobalFilters != null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.Name != null && { Name: input.Name },
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.RejectedPatches != null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction != null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Sources != null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    }, "serializeAws_json1_1CreatePatchBaselineRequest");
    var serializeAws_json1_1CreateResourceDataSyncRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.S3Destination != null && {
          S3Destination: serializeAws_json1_1ResourceDataSyncS3Destination(input.S3Destination, context)
        },
        ...input.SyncName != null && { SyncName: input.SyncName },
        ...input.SyncSource != null && {
          SyncSource: serializeAws_json1_1ResourceDataSyncSource(input.SyncSource, context)
        },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    }, "serializeAws_json1_1CreateResourceDataSyncRequest");
    var serializeAws_json1_1DeleteActivationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ActivationId != null && { ActivationId: input.ActivationId }
      };
    }, "serializeAws_json1_1DeleteActivationRequest");
    var serializeAws_json1_1DeleteAssociationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1DeleteAssociationRequest");
    var serializeAws_json1_1DeleteDocumentRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Force != null && { Force: input.Force },
        ...input.Name != null && { Name: input.Name },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    }, "serializeAws_json1_1DeleteDocumentRequest");
    var serializeAws_json1_1DeleteInventoryRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.DryRun != null && { DryRun: input.DryRun },
        ...input.SchemaDeleteOption != null && { SchemaDeleteOption: input.SchemaDeleteOption },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    }, "serializeAws_json1_1DeleteInventoryRequest");
    var serializeAws_json1_1DeleteMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1DeleteMaintenanceWindowRequest");
    var serializeAws_json1_1DeleteOpsMetadataRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OpsMetadataArn != null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    }, "serializeAws_json1_1DeleteOpsMetadataRequest");
    var serializeAws_json1_1DeleteParameterRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1DeleteParameterRequest");
    var serializeAws_json1_1DeleteParametersRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Names != null && { Names: serializeAws_json1_1ParameterNameList(input.Names, context) }
      };
    }, "serializeAws_json1_1DeleteParametersRequest");
    var serializeAws_json1_1DeletePatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId }
      };
    }, "serializeAws_json1_1DeletePatchBaselineRequest");
    var serializeAws_json1_1DeleteResourceDataSyncRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.SyncName != null && { SyncName: input.SyncName },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    }, "serializeAws_json1_1DeleteResourceDataSyncRequest");
    var serializeAws_json1_1DeregisterManagedInstanceRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId }
      };
    }, "serializeAws_json1_1DeregisterManagedInstanceRequest");
    var serializeAws_json1_1DeregisterPatchBaselineForPatchGroupRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    }, "serializeAws_json1_1DeregisterPatchBaselineForPatchGroupRequest");
    var serializeAws_json1_1DeregisterTargetFromMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Safe != null && { Safe: input.Safe },
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTargetId != null && { WindowTargetId: input.WindowTargetId }
      };
    }, "serializeAws_json1_1DeregisterTargetFromMaintenanceWindowRequest");
    var serializeAws_json1_1DeregisterTaskFromMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTaskId != null && { WindowTaskId: input.WindowTaskId }
      };
    }, "serializeAws_json1_1DeregisterTaskFromMaintenanceWindowRequest");
    var serializeAws_json1_1DescribeActivationsFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.FilterKey != null && { FilterKey: input.FilterKey },
        ...input.FilterValues != null && { FilterValues: serializeAws_json1_1StringList(input.FilterValues, context) }
      };
    }, "serializeAws_json1_1DescribeActivationsFilter");
    var serializeAws_json1_1DescribeActivationsFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DescribeActivationsFilter(entry, context);
      });
    }, "serializeAws_json1_1DescribeActivationsFilterList");
    var serializeAws_json1_1DescribeActivationsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && {
          Filters: serializeAws_json1_1DescribeActivationsFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeActivationsRequest");
    var serializeAws_json1_1DescribeAssociationExecutionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.Filters != null && {
          Filters: serializeAws_json1_1AssociationExecutionFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeAssociationExecutionsRequest");
    var serializeAws_json1_1DescribeAssociationExecutionTargetsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.ExecutionId != null && { ExecutionId: input.ExecutionId },
        ...input.Filters != null && {
          Filters: serializeAws_json1_1AssociationExecutionTargetsFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeAssociationExecutionTargetsRequest");
    var serializeAws_json1_1DescribeAssociationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.AssociationVersion != null && { AssociationVersion: input.AssociationVersion },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1DescribeAssociationRequest");
    var serializeAws_json1_1DescribeAutomationExecutionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && {
          Filters: serializeAws_json1_1AutomationExecutionFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeAutomationExecutionsRequest");
    var serializeAws_json1_1DescribeAutomationStepExecutionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Filters != null && { Filters: serializeAws_json1_1StepExecutionFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ReverseOrder != null && { ReverseOrder: input.ReverseOrder }
      };
    }, "serializeAws_json1_1DescribeAutomationStepExecutionsRequest");
    var serializeAws_json1_1DescribeAvailablePatchesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeAvailablePatchesRequest");
    var serializeAws_json1_1DescribeDocumentPermissionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.PermissionType != null && { PermissionType: input.PermissionType }
      };
    }, "serializeAws_json1_1DescribeDocumentPermissionRequest");
    var serializeAws_json1_1DescribeDocumentRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    }, "serializeAws_json1_1DescribeDocumentRequest");
    var serializeAws_json1_1DescribeEffectiveInstanceAssociationsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeEffectiveInstanceAssociationsRequest");
    var serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineRequest");
    var serializeAws_json1_1DescribeInstanceAssociationsStatusRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeInstanceAssociationsStatusRequest");
    var serializeAws_json1_1DescribeInstanceInformationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && {
          Filters: serializeAws_json1_1InstanceInformationStringFilterList(input.Filters, context)
        },
        ...input.InstanceInformationFilterList != null && {
          InstanceInformationFilterList: serializeAws_json1_1InstanceInformationFilterList(input.InstanceInformationFilterList, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeInstanceInformationRequest");
    var serializeAws_json1_1DescribeInstancePatchesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeInstancePatchesRequest");
    var serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1InstancePatchStateFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    }, "serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupRequest");
    var serializeAws_json1_1DescribeInstancePatchStatesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.InstanceIds != null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeInstancePatchStatesRequest");
    var serializeAws_json1_1DescribeInventoryDeletionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DeletionId != null && { DeletionId: input.DeletionId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeInventoryDeletionsRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowExecutionsRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.TaskId != null && { TaskId: input.TaskId },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowScheduleRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowScheduleRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowsForTargetRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowsForTargetRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowsRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowTargetsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowTargetsRequest");
    var serializeAws_json1_1DescribeMaintenanceWindowTasksRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1DescribeMaintenanceWindowTasksRequest");
    var serializeAws_json1_1DescribeOpsItemsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OpsItemFilters != null && {
          OpsItemFilters: serializeAws_json1_1OpsItemFilters(input.OpsItemFilters, context)
        }
      };
    }, "serializeAws_json1_1DescribeOpsItemsRequest");
    var serializeAws_json1_1DescribeParametersRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ParametersFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ParameterFilters != null && {
          ParameterFilters: serializeAws_json1_1ParameterStringFilterList(input.ParameterFilters, context)
        }
      };
    }, "serializeAws_json1_1DescribeParametersRequest");
    var serializeAws_json1_1DescribePatchBaselinesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribePatchBaselinesRequest");
    var serializeAws_json1_1DescribePatchGroupsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1DescribePatchGroupsRequest");
    var serializeAws_json1_1DescribePatchGroupStateRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    }, "serializeAws_json1_1DescribePatchGroupStateRequest");
    var serializeAws_json1_1DescribePatchPropertiesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.PatchSet != null && { PatchSet: input.PatchSet },
        ...input.Property != null && { Property: input.Property }
      };
    }, "serializeAws_json1_1DescribePatchPropertiesRequest");
    var serializeAws_json1_1DescribeSessionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1SessionFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.State != null && { State: input.State }
      };
    }, "serializeAws_json1_1DescribeSessionsRequest");
    var serializeAws_json1_1DisassociateOpsItemRelatedItemRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    }, "serializeAws_json1_1DisassociateOpsItemRelatedItemRequest");
    var serializeAws_json1_1DocumentFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    }, "serializeAws_json1_1DocumentFilter");
    var serializeAws_json1_1DocumentFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentFilter(entry, context);
      });
    }, "serializeAws_json1_1DocumentFilterList");
    var serializeAws_json1_1DocumentKeyValuesFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1DocumentKeyValuesFilterValues(input.Values, context) }
      };
    }, "serializeAws_json1_1DocumentKeyValuesFilter");
    var serializeAws_json1_1DocumentKeyValuesFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentKeyValuesFilter(entry, context);
      });
    }, "serializeAws_json1_1DocumentKeyValuesFilterList");
    var serializeAws_json1_1DocumentKeyValuesFilterValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1DocumentKeyValuesFilterValues");
    var serializeAws_json1_1DocumentRequires = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Name != null && { Name: input.Name },
        ...input.Version != null && { Version: input.Version }
      };
    }, "serializeAws_json1_1DocumentRequires");
    var serializeAws_json1_1DocumentRequiresList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentRequires(entry, context);
      });
    }, "serializeAws_json1_1DocumentRequiresList");
    var serializeAws_json1_1DocumentReviewCommentList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentReviewCommentSource(entry, context);
      });
    }, "serializeAws_json1_1DocumentReviewCommentList");
    var serializeAws_json1_1DocumentReviewCommentSource = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Content != null && { Content: input.Content },
        ...input.Type != null && { Type: input.Type }
      };
    }, "serializeAws_json1_1DocumentReviewCommentSource");
    var serializeAws_json1_1DocumentReviews = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Action != null && { Action: input.Action },
        ...input.Comment != null && { Comment: serializeAws_json1_1DocumentReviewCommentList(input.Comment, context) }
      };
    }, "serializeAws_json1_1DocumentReviews");
    var serializeAws_json1_1GetAutomationExecutionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId }
      };
    }, "serializeAws_json1_1GetAutomationExecutionRequest");
    var serializeAws_json1_1GetCalendarStateRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AtTime != null && { AtTime: input.AtTime },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        }
      };
    }, "serializeAws_json1_1GetCalendarStateRequest");
    var serializeAws_json1_1GetCommandInvocationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.PluginName != null && { PluginName: input.PluginName }
      };
    }, "serializeAws_json1_1GetCommandInvocationRequest");
    var serializeAws_json1_1GetConnectionStatusRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Target != null && { Target: input.Target }
      };
    }, "serializeAws_json1_1GetConnectionStatusRequest");
    var serializeAws_json1_1GetDefaultPatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem }
      };
    }, "serializeAws_json1_1GetDefaultPatchBaselineRequest");
    var serializeAws_json1_1GetDeployablePatchSnapshotForInstanceRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.BaselineOverride != null && {
          BaselineOverride: serializeAws_json1_1BaselineOverride(input.BaselineOverride, context)
        },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.SnapshotId != null && { SnapshotId: input.SnapshotId }
      };
    }, "serializeAws_json1_1GetDeployablePatchSnapshotForInstanceRequest");
    var serializeAws_json1_1GetDocumentRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentFormat != null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    }, "serializeAws_json1_1GetDocumentRequest");
    var serializeAws_json1_1GetInventoryRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1InventoryAggregatorList(input.Aggregators, context)
        },
        ...input.Filters != null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResultAttributes != null && {
          ResultAttributes: serializeAws_json1_1ResultAttributeList(input.ResultAttributes, context)
        }
      };
    }, "serializeAws_json1_1GetInventoryRequest");
    var serializeAws_json1_1GetInventorySchemaRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Aggregator != null && { Aggregator: input.Aggregator },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.SubType != null && { SubType: input.SubType },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    }, "serializeAws_json1_1GetInventorySchemaRequest");
    var serializeAws_json1_1GetMaintenanceWindowExecutionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    }, "serializeAws_json1_1GetMaintenanceWindowExecutionRequest");
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.InvocationId != null && { InvocationId: input.InvocationId },
        ...input.TaskId != null && { TaskId: input.TaskId },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    }, "serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationRequest");
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.TaskId != null && { TaskId: input.TaskId },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    }, "serializeAws_json1_1GetMaintenanceWindowExecutionTaskRequest");
    var serializeAws_json1_1GetMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1GetMaintenanceWindowRequest");
    var serializeAws_json1_1GetMaintenanceWindowTaskRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTaskId != null && { WindowTaskId: input.WindowTaskId }
      };
    }, "serializeAws_json1_1GetMaintenanceWindowTaskRequest");
    var serializeAws_json1_1GetOpsItemRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    }, "serializeAws_json1_1GetOpsItemRequest");
    var serializeAws_json1_1GetOpsMetadataRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OpsMetadataArn != null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    }, "serializeAws_json1_1GetOpsMetadataRequest");
    var serializeAws_json1_1GetOpsSummaryRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1OpsAggregatorList(input.Aggregators, context)
        },
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResultAttributes != null && {
          ResultAttributes: serializeAws_json1_1OpsResultAttributeList(input.ResultAttributes, context)
        },
        ...input.SyncName != null && { SyncName: input.SyncName }
      };
    }, "serializeAws_json1_1GetOpsSummaryRequest");
    var serializeAws_json1_1GetParameterHistoryRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    }, "serializeAws_json1_1GetParameterHistoryRequest");
    var serializeAws_json1_1GetParameterRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Name != null && { Name: input.Name },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    }, "serializeAws_json1_1GetParameterRequest");
    var serializeAws_json1_1GetParametersByPathRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ParameterFilters != null && {
          ParameterFilters: serializeAws_json1_1ParameterStringFilterList(input.ParameterFilters, context)
        },
        ...input.Path != null && { Path: input.Path },
        ...input.Recursive != null && { Recursive: input.Recursive },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    }, "serializeAws_json1_1GetParametersByPathRequest");
    var serializeAws_json1_1GetParametersRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Names != null && { Names: serializeAws_json1_1ParameterNameList(input.Names, context) },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    }, "serializeAws_json1_1GetParametersRequest");
    var serializeAws_json1_1GetPatchBaselineForPatchGroupRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    }, "serializeAws_json1_1GetPatchBaselineForPatchGroupRequest");
    var serializeAws_json1_1GetPatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId }
      };
    }, "serializeAws_json1_1GetPatchBaselineRequest");
    var serializeAws_json1_1GetServiceSettingRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.SettingId != null && { SettingId: input.SettingId }
      };
    }, "serializeAws_json1_1GetServiceSettingRequest");
    var serializeAws_json1_1InstanceAssociationOutputLocation = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.S3Location != null && { S3Location: serializeAws_json1_1S3OutputLocation(input.S3Location, context) }
      };
    }, "serializeAws_json1_1InstanceAssociationOutputLocation");
    var serializeAws_json1_1InstanceIdList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1InstanceIdList");
    var serializeAws_json1_1InstanceInformationFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.valueSet != null && {
          valueSet: serializeAws_json1_1InstanceInformationFilterValueSet(input.valueSet, context)
        }
      };
    }, "serializeAws_json1_1InstanceInformationFilter");
    var serializeAws_json1_1InstanceInformationFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InstanceInformationFilter(entry, context);
      });
    }, "serializeAws_json1_1InstanceInformationFilterList");
    var serializeAws_json1_1InstanceInformationFilterValueSet = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1InstanceInformationFilterValueSet");
    var serializeAws_json1_1InstanceInformationStringFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && {
          Values: serializeAws_json1_1InstanceInformationFilterValueSet(input.Values, context)
        }
      };
    }, "serializeAws_json1_1InstanceInformationStringFilter");
    var serializeAws_json1_1InstanceInformationStringFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InstanceInformationStringFilter(entry, context);
      });
    }, "serializeAws_json1_1InstanceInformationStringFilterList");
    var serializeAws_json1_1InstancePatchStateFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1InstancePatchStateFilterValues(input.Values, context) }
      };
    }, "serializeAws_json1_1InstancePatchStateFilter");
    var serializeAws_json1_1InstancePatchStateFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InstancePatchStateFilter(entry, context);
      });
    }, "serializeAws_json1_1InstancePatchStateFilterList");
    var serializeAws_json1_1InstancePatchStateFilterValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1InstancePatchStateFilterValues");
    var serializeAws_json1_1InventoryAggregator = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1InventoryAggregatorList(input.Aggregators, context)
        },
        ...input.Expression != null && { Expression: input.Expression },
        ...input.Groups != null && { Groups: serializeAws_json1_1InventoryGroupList(input.Groups, context) }
      };
    }, "serializeAws_json1_1InventoryAggregator");
    var serializeAws_json1_1InventoryAggregatorList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryAggregator(entry, context);
      });
    }, "serializeAws_json1_1InventoryAggregatorList");
    var serializeAws_json1_1InventoryFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1InventoryFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1InventoryFilter");
    var serializeAws_json1_1InventoryFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryFilter(entry, context);
      });
    }, "serializeAws_json1_1InventoryFilterList");
    var serializeAws_json1_1InventoryFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1InventoryFilterValueList");
    var serializeAws_json1_1InventoryGroup = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1InventoryGroup");
    var serializeAws_json1_1InventoryGroupList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryGroup(entry, context);
      });
    }, "serializeAws_json1_1InventoryGroupList");
    var serializeAws_json1_1InventoryItem = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.CaptureTime != null && { CaptureTime: input.CaptureTime },
        ...input.Content != null && { Content: serializeAws_json1_1InventoryItemEntryList(input.Content, context) },
        ...input.ContentHash != null && { ContentHash: input.ContentHash },
        ...input.Context != null && { Context: serializeAws_json1_1InventoryItemContentContext(input.Context, context) },
        ...input.SchemaVersion != null && { SchemaVersion: input.SchemaVersion },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    }, "serializeAws_json1_1InventoryItem");
    var serializeAws_json1_1InventoryItemContentContext = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    }, "serializeAws_json1_1InventoryItemContentContext");
    var serializeAws_json1_1InventoryItemEntry = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    }, "serializeAws_json1_1InventoryItemEntry");
    var serializeAws_json1_1InventoryItemEntryList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryItemEntry(entry, context);
      });
    }, "serializeAws_json1_1InventoryItemEntryList");
    var serializeAws_json1_1InventoryItemList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryItem(entry, context);
      });
    }, "serializeAws_json1_1InventoryItemList");
    var serializeAws_json1_1KeyList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1KeyList");
    var serializeAws_json1_1LabelParameterVersionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Labels != null && { Labels: serializeAws_json1_1ParameterLabelList(input.Labels, context) },
        ...input.Name != null && { Name: input.Name },
        ...input.ParameterVersion != null && { ParameterVersion: input.ParameterVersion }
      };
    }, "serializeAws_json1_1LabelParameterVersionRequest");
    var serializeAws_json1_1ListAssociationsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationFilterList != null && {
          AssociationFilterList: serializeAws_json1_1AssociationFilterList(input.AssociationFilterList, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListAssociationsRequest");
    var serializeAws_json1_1ListAssociationVersionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListAssociationVersionsRequest");
    var serializeAws_json1_1ListCommandInvocationsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.Details != null && { Details: input.Details },
        ...input.Filters != null && { Filters: serializeAws_json1_1CommandFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListCommandInvocationsRequest");
    var serializeAws_json1_1ListCommandsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.Filters != null && { Filters: serializeAws_json1_1CommandFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListCommandsRequest");
    var serializeAws_json1_1ListComplianceItemsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceIds != null && {
          ResourceIds: serializeAws_json1_1ComplianceResourceIdList(input.ResourceIds, context)
        },
        ...input.ResourceTypes != null && {
          ResourceTypes: serializeAws_json1_1ComplianceResourceTypeList(input.ResourceTypes, context)
        }
      };
    }, "serializeAws_json1_1ListComplianceItemsRequest");
    var serializeAws_json1_1ListComplianceSummariesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListComplianceSummariesRequest");
    var serializeAws_json1_1ListDocumentMetadataHistoryRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Metadata != null && { Metadata: input.Metadata },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListDocumentMetadataHistoryRequest");
    var serializeAws_json1_1ListDocumentsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentFilterList != null && {
          DocumentFilterList: serializeAws_json1_1DocumentFilterList(input.DocumentFilterList, context)
        },
        ...input.Filters != null && { Filters: serializeAws_json1_1DocumentKeyValuesFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListDocumentsRequest");
    var serializeAws_json1_1ListDocumentVersionsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListDocumentVersionsRequest");
    var serializeAws_json1_1ListInventoryEntriesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    }, "serializeAws_json1_1ListInventoryEntriesRequest");
    var serializeAws_json1_1ListOpsItemEventsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsItemEventFilters(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListOpsItemEventsRequest");
    var serializeAws_json1_1ListOpsItemRelatedItemsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsItemRelatedItemsFilters(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    }, "serializeAws_json1_1ListOpsItemRelatedItemsRequest");
    var serializeAws_json1_1ListOpsMetadataRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsMetadataFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListOpsMetadataRequest");
    var serializeAws_json1_1ListResourceComplianceSummariesRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    }, "serializeAws_json1_1ListResourceComplianceSummariesRequest");
    var serializeAws_json1_1ListResourceDataSyncRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    }, "serializeAws_json1_1ListResourceDataSyncRequest");
    var serializeAws_json1_1ListTagsForResourceRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType }
      };
    }, "serializeAws_json1_1ListTagsForResourceRequest");
    var serializeAws_json1_1LoggingInfo = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.S3BucketName != null && { S3BucketName: input.S3BucketName },
        ...input.S3KeyPrefix != null && { S3KeyPrefix: input.S3KeyPrefix },
        ...input.S3Region != null && { S3Region: input.S3Region }
      };
    }, "serializeAws_json1_1LoggingInfo");
    var serializeAws_json1_1MaintenanceWindowAutomationParameters = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        }
      };
    }, "serializeAws_json1_1MaintenanceWindowAutomationParameters");
    var serializeAws_json1_1MaintenanceWindowFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1MaintenanceWindowFilterValues(input.Values, context) }
      };
    }, "serializeAws_json1_1MaintenanceWindowFilter");
    var serializeAws_json1_1MaintenanceWindowFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1MaintenanceWindowFilter(entry, context);
      });
    }, "serializeAws_json1_1MaintenanceWindowFilterList");
    var serializeAws_json1_1MaintenanceWindowFilterValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1MaintenanceWindowFilterValues");
    var serializeAws_json1_1MaintenanceWindowLambdaParameters = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ClientContext != null && { ClientContext: input.ClientContext },
        ...input.Payload != null && { Payload: context.base64Encoder(input.Payload) },
        ...input.Qualifier != null && { Qualifier: input.Qualifier }
      };
    }, "serializeAws_json1_1MaintenanceWindowLambdaParameters");
    var serializeAws_json1_1MaintenanceWindowRunCommandParameters = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.CloudWatchOutputConfig != null && {
          CloudWatchOutputConfig: serializeAws_json1_1CloudWatchOutputConfig(input.CloudWatchOutputConfig, context)
        },
        ...input.Comment != null && { Comment: input.Comment },
        ...input.DocumentHash != null && { DocumentHash: input.DocumentHash },
        ...input.DocumentHashType != null && { DocumentHashType: input.DocumentHashType },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.NotificationConfig != null && {
          NotificationConfig: serializeAws_json1_1NotificationConfig(input.NotificationConfig, context)
        },
        ...input.OutputS3BucketName != null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix != null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.TimeoutSeconds != null && { TimeoutSeconds: input.TimeoutSeconds }
      };
    }, "serializeAws_json1_1MaintenanceWindowRunCommandParameters");
    var serializeAws_json1_1MaintenanceWindowStepFunctionsParameters = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Input != null && { Input: input.Input },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1MaintenanceWindowStepFunctionsParameters");
    var serializeAws_json1_1MaintenanceWindowTaskInvocationParameters = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Automation != null && {
          Automation: serializeAws_json1_1MaintenanceWindowAutomationParameters(input.Automation, context)
        },
        ...input.Lambda != null && {
          Lambda: serializeAws_json1_1MaintenanceWindowLambdaParameters(input.Lambda, context)
        },
        ...input.RunCommand != null && {
          RunCommand: serializeAws_json1_1MaintenanceWindowRunCommandParameters(input.RunCommand, context)
        },
        ...input.StepFunctions != null && {
          StepFunctions: serializeAws_json1_1MaintenanceWindowStepFunctionsParameters(input.StepFunctions, context)
        }
      };
    }, "serializeAws_json1_1MaintenanceWindowTaskInvocationParameters");
    var serializeAws_json1_1MaintenanceWindowTaskParameters = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1MaintenanceWindowTaskParameterValueExpression(value, context)
        };
      }, {});
    }, "serializeAws_json1_1MaintenanceWindowTaskParameters");
    var serializeAws_json1_1MaintenanceWindowTaskParameterValueExpression = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Values != null && {
          Values: serializeAws_json1_1MaintenanceWindowTaskParameterValueList(input.Values, context)
        }
      };
    }, "serializeAws_json1_1MaintenanceWindowTaskParameterValueExpression");
    var serializeAws_json1_1MaintenanceWindowTaskParameterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1MaintenanceWindowTaskParameterValueList");
    var serializeAws_json1_1MetadataKeysToDeleteList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1MetadataKeysToDeleteList");
    var serializeAws_json1_1MetadataMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1MetadataValue(value, context)
        };
      }, {});
    }, "serializeAws_json1_1MetadataMap");
    var serializeAws_json1_1MetadataValue = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Value != null && { Value: input.Value }
      };
    }, "serializeAws_json1_1MetadataValue");
    var serializeAws_json1_1ModifyDocumentPermissionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AccountIdsToAdd != null && {
          AccountIdsToAdd: serializeAws_json1_1AccountIdList(input.AccountIdsToAdd, context)
        },
        ...input.AccountIdsToRemove != null && {
          AccountIdsToRemove: serializeAws_json1_1AccountIdList(input.AccountIdsToRemove, context)
        },
        ...input.Name != null && { Name: input.Name },
        ...input.PermissionType != null && { PermissionType: input.PermissionType },
        ...input.SharedDocumentVersion != null && { SharedDocumentVersion: input.SharedDocumentVersion }
      };
    }, "serializeAws_json1_1ModifyDocumentPermissionRequest");
    var serializeAws_json1_1NotificationConfig = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.NotificationArn != null && { NotificationArn: input.NotificationArn },
        ...input.NotificationEvents != null && {
          NotificationEvents: serializeAws_json1_1NotificationEventList(input.NotificationEvents, context)
        },
        ...input.NotificationType != null && { NotificationType: input.NotificationType }
      };
    }, "serializeAws_json1_1NotificationConfig");
    var serializeAws_json1_1NotificationEventList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1NotificationEventList");
    var serializeAws_json1_1OpsAggregator = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AggregatorType != null && { AggregatorType: input.AggregatorType },
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1OpsAggregatorList(input.Aggregators, context)
        },
        ...input.AttributeName != null && { AttributeName: input.AttributeName },
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsFilterList(input.Filters, context) },
        ...input.TypeName != null && { TypeName: input.TypeName },
        ...input.Values != null && { Values: serializeAws_json1_1OpsAggregatorValueMap(input.Values, context) }
      };
    }, "serializeAws_json1_1OpsAggregator");
    var serializeAws_json1_1OpsAggregatorList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsAggregator(entry, context);
      });
    }, "serializeAws_json1_1OpsAggregatorList");
    var serializeAws_json1_1OpsAggregatorValueMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    }, "serializeAws_json1_1OpsAggregatorValueMap");
    var serializeAws_json1_1OpsFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1OpsFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1OpsFilter");
    var serializeAws_json1_1OpsFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsFilter(entry, context);
      });
    }, "serializeAws_json1_1OpsFilterList");
    var serializeAws_json1_1OpsFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1OpsFilterValueList");
    var serializeAws_json1_1OpsItemDataValue = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    }, "serializeAws_json1_1OpsItemDataValue");
    var serializeAws_json1_1OpsItemEventFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Operator != null && { Operator: input.Operator },
        ...input.Values != null && { Values: serializeAws_json1_1OpsItemEventFilterValues(input.Values, context) }
      };
    }, "serializeAws_json1_1OpsItemEventFilter");
    var serializeAws_json1_1OpsItemEventFilters = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemEventFilter(entry, context);
      });
    }, "serializeAws_json1_1OpsItemEventFilters");
    var serializeAws_json1_1OpsItemEventFilterValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1OpsItemEventFilterValues");
    var serializeAws_json1_1OpsItemFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Operator != null && { Operator: input.Operator },
        ...input.Values != null && { Values: serializeAws_json1_1OpsItemFilterValues(input.Values, context) }
      };
    }, "serializeAws_json1_1OpsItemFilter");
    var serializeAws_json1_1OpsItemFilters = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemFilter(entry, context);
      });
    }, "serializeAws_json1_1OpsItemFilters");
    var serializeAws_json1_1OpsItemFilterValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1OpsItemFilterValues");
    var serializeAws_json1_1OpsItemNotification = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Arn != null && { Arn: input.Arn }
      };
    }, "serializeAws_json1_1OpsItemNotification");
    var serializeAws_json1_1OpsItemNotifications = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemNotification(entry, context);
      });
    }, "serializeAws_json1_1OpsItemNotifications");
    var serializeAws_json1_1OpsItemOperationalData = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1OpsItemDataValue(value, context)
        };
      }, {});
    }, "serializeAws_json1_1OpsItemOperationalData");
    var serializeAws_json1_1OpsItemOpsDataKeysList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1OpsItemOpsDataKeysList");
    var serializeAws_json1_1OpsItemRelatedItemsFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Operator != null && { Operator: input.Operator },
        ...input.Values != null && { Values: serializeAws_json1_1OpsItemRelatedItemsFilterValues(input.Values, context) }
      };
    }, "serializeAws_json1_1OpsItemRelatedItemsFilter");
    var serializeAws_json1_1OpsItemRelatedItemsFilters = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemRelatedItemsFilter(entry, context);
      });
    }, "serializeAws_json1_1OpsItemRelatedItemsFilters");
    var serializeAws_json1_1OpsItemRelatedItemsFilterValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1OpsItemRelatedItemsFilterValues");
    var serializeAws_json1_1OpsMetadataFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1OpsMetadataFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1OpsMetadataFilter");
    var serializeAws_json1_1OpsMetadataFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsMetadataFilter(entry, context);
      });
    }, "serializeAws_json1_1OpsMetadataFilterList");
    var serializeAws_json1_1OpsMetadataFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1OpsMetadataFilterValueList");
    var serializeAws_json1_1OpsResultAttribute = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    }, "serializeAws_json1_1OpsResultAttribute");
    var serializeAws_json1_1OpsResultAttributeList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsResultAttribute(entry, context);
      });
    }, "serializeAws_json1_1OpsResultAttributeList");
    var serializeAws_json1_1ParameterLabelList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ParameterLabelList");
    var serializeAws_json1_1ParameterNameList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ParameterNameList");
    var serializeAws_json1_1Parameters = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1ParameterValueList(value, context)
        };
      }, {});
    }, "serializeAws_json1_1Parameters");
    var serializeAws_json1_1ParametersFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1ParametersFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1ParametersFilter");
    var serializeAws_json1_1ParametersFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ParametersFilter(entry, context);
      });
    }, "serializeAws_json1_1ParametersFilterList");
    var serializeAws_json1_1ParametersFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ParametersFilterValueList");
    var serializeAws_json1_1ParameterStringFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Option != null && { Option: input.Option },
        ...input.Values != null && { Values: serializeAws_json1_1ParameterStringFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1ParameterStringFilter");
    var serializeAws_json1_1ParameterStringFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ParameterStringFilter(entry, context);
      });
    }, "serializeAws_json1_1ParameterStringFilterList");
    var serializeAws_json1_1ParameterStringFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ParameterStringFilterValueList");
    var serializeAws_json1_1ParameterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ParameterValueList");
    var serializeAws_json1_1PatchFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1PatchFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1PatchFilter");
    var serializeAws_json1_1PatchFilterGroup = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.PatchFilters != null && {
          PatchFilters: serializeAws_json1_1PatchFilterList(input.PatchFilters, context)
        }
      };
    }, "serializeAws_json1_1PatchFilterGroup");
    var serializeAws_json1_1PatchFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchFilter(entry, context);
      });
    }, "serializeAws_json1_1PatchFilterList");
    var serializeAws_json1_1PatchFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1PatchFilterValueList");
    var serializeAws_json1_1PatchIdList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1PatchIdList");
    var serializeAws_json1_1PatchOrchestratorFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1PatchOrchestratorFilterValues(input.Values, context) }
      };
    }, "serializeAws_json1_1PatchOrchestratorFilter");
    var serializeAws_json1_1PatchOrchestratorFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchOrchestratorFilter(entry, context);
      });
    }, "serializeAws_json1_1PatchOrchestratorFilterList");
    var serializeAws_json1_1PatchOrchestratorFilterValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1PatchOrchestratorFilterValues");
    var serializeAws_json1_1PatchRule = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ApproveAfterDays != null && { ApproveAfterDays: input.ApproveAfterDays },
        ...input.ApproveUntilDate != null && { ApproveUntilDate: input.ApproveUntilDate },
        ...input.ComplianceLevel != null && { ComplianceLevel: input.ComplianceLevel },
        ...input.EnableNonSecurity != null && { EnableNonSecurity: input.EnableNonSecurity },
        ...input.PatchFilterGroup != null && {
          PatchFilterGroup: serializeAws_json1_1PatchFilterGroup(input.PatchFilterGroup, context)
        }
      };
    }, "serializeAws_json1_1PatchRule");
    var serializeAws_json1_1PatchRuleGroup = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.PatchRules != null && { PatchRules: serializeAws_json1_1PatchRuleList(input.PatchRules, context) }
      };
    }, "serializeAws_json1_1PatchRuleGroup");
    var serializeAws_json1_1PatchRuleList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchRule(entry, context);
      });
    }, "serializeAws_json1_1PatchRuleList");
    var serializeAws_json1_1PatchSource = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Configuration != null && { Configuration: input.Configuration },
        ...input.Name != null && { Name: input.Name },
        ...input.Products != null && { Products: serializeAws_json1_1PatchSourceProductList(input.Products, context) }
      };
    }, "serializeAws_json1_1PatchSource");
    var serializeAws_json1_1PatchSourceList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchSource(entry, context);
      });
    }, "serializeAws_json1_1PatchSourceList");
    var serializeAws_json1_1PatchSourceProductList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1PatchSourceProductList");
    var serializeAws_json1_1PutComplianceItemsRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ComplianceType != null && { ComplianceType: input.ComplianceType },
        ...input.ExecutionSummary != null && {
          ExecutionSummary: serializeAws_json1_1ComplianceExecutionSummary(input.ExecutionSummary, context)
        },
        ...input.ItemContentHash != null && { ItemContentHash: input.ItemContentHash },
        ...input.Items != null && { Items: serializeAws_json1_1ComplianceItemEntryList(input.Items, context) },
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.UploadType != null && { UploadType: input.UploadType }
      };
    }, "serializeAws_json1_1PutComplianceItemsRequest");
    var serializeAws_json1_1PutInventoryRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Items != null && { Items: serializeAws_json1_1InventoryItemList(input.Items, context) }
      };
    }, "serializeAws_json1_1PutInventoryRequest");
    var serializeAws_json1_1PutParameterRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AllowedPattern != null && { AllowedPattern: input.AllowedPattern },
        ...input.DataType != null && { DataType: input.DataType },
        ...input.Description != null && { Description: input.Description },
        ...input.KeyId != null && { KeyId: input.KeyId },
        ...input.Name != null && { Name: input.Name },
        ...input.Overwrite != null && { Overwrite: input.Overwrite },
        ...input.Policies != null && { Policies: input.Policies },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.Tier != null && { Tier: input.Tier },
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    }, "serializeAws_json1_1PutParameterRequest");
    var serializeAws_json1_1Regions = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1Regions");
    var serializeAws_json1_1RegisterDefaultPatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId }
      };
    }, "serializeAws_json1_1RegisterDefaultPatchBaselineRequest");
    var serializeAws_json1_1RegisterPatchBaselineForPatchGroupRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    }, "serializeAws_json1_1RegisterPatchBaselineForPatchGroupRequest");
    var serializeAws_json1_1RegisterTargetWithMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.Description != null && { Description: input.Description },
        ...input.Name != null && { Name: input.Name },
        ...input.OwnerInformation != null && { OwnerInformation: input.OwnerInformation },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1RegisterTargetWithMaintenanceWindowRequest");
    var serializeAws_json1_1RegisterTaskWithMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.CutoffBehavior != null && { CutoffBehavior: input.CutoffBehavior },
        ...input.Description != null && { Description: input.Description },
        ...input.LoggingInfo != null && { LoggingInfo: serializeAws_json1_1LoggingInfo(input.LoggingInfo, context) },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TaskArn != null && { TaskArn: input.TaskArn },
        ...input.TaskInvocationParameters != null && {
          TaskInvocationParameters: serializeAws_json1_1MaintenanceWindowTaskInvocationParameters(input.TaskInvocationParameters, context)
        },
        ...input.TaskParameters != null && {
          TaskParameters: serializeAws_json1_1MaintenanceWindowTaskParameters(input.TaskParameters, context)
        },
        ...input.TaskType != null && { TaskType: input.TaskType },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1RegisterTaskWithMaintenanceWindowRequest");
    var serializeAws_json1_1RegistrationMetadataItem = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    }, "serializeAws_json1_1RegistrationMetadataItem");
    var serializeAws_json1_1RegistrationMetadataList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1RegistrationMetadataItem(entry, context);
      });
    }, "serializeAws_json1_1RegistrationMetadataList");
    var serializeAws_json1_1RelatedOpsItem = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    }, "serializeAws_json1_1RelatedOpsItem");
    var serializeAws_json1_1RelatedOpsItems = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1RelatedOpsItem(entry, context);
      });
    }, "serializeAws_json1_1RelatedOpsItems");
    var serializeAws_json1_1RemoveTagsFromResourceRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.TagKeys != null && { TagKeys: serializeAws_json1_1KeyList(input.TagKeys, context) }
      };
    }, "serializeAws_json1_1RemoveTagsFromResourceRequest");
    var serializeAws_json1_1ResetServiceSettingRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.SettingId != null && { SettingId: input.SettingId }
      };
    }, "serializeAws_json1_1ResetServiceSettingRequest");
    var serializeAws_json1_1ResourceDataSyncAwsOrganizationsSource = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OrganizationSourceType != null && { OrganizationSourceType: input.OrganizationSourceType },
        ...input.OrganizationalUnits != null && {
          OrganizationalUnits: serializeAws_json1_1ResourceDataSyncOrganizationalUnitList(input.OrganizationalUnits, context)
        }
      };
    }, "serializeAws_json1_1ResourceDataSyncAwsOrganizationsSource");
    var serializeAws_json1_1ResourceDataSyncDestinationDataSharing = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DestinationDataSharingType != null && { DestinationDataSharingType: input.DestinationDataSharingType }
      };
    }, "serializeAws_json1_1ResourceDataSyncDestinationDataSharing");
    var serializeAws_json1_1ResourceDataSyncOrganizationalUnit = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OrganizationalUnitId != null && { OrganizationalUnitId: input.OrganizationalUnitId }
      };
    }, "serializeAws_json1_1ResourceDataSyncOrganizationalUnit");
    var serializeAws_json1_1ResourceDataSyncOrganizationalUnitList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ResourceDataSyncOrganizationalUnit(entry, context);
      });
    }, "serializeAws_json1_1ResourceDataSyncOrganizationalUnitList");
    var serializeAws_json1_1ResourceDataSyncS3Destination = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AWSKMSKeyARN != null && { AWSKMSKeyARN: input.AWSKMSKeyARN },
        ...input.BucketName != null && { BucketName: input.BucketName },
        ...input.DestinationDataSharing != null && {
          DestinationDataSharing: serializeAws_json1_1ResourceDataSyncDestinationDataSharing(input.DestinationDataSharing, context)
        },
        ...input.Prefix != null && { Prefix: input.Prefix },
        ...input.Region != null && { Region: input.Region },
        ...input.SyncFormat != null && { SyncFormat: input.SyncFormat }
      };
    }, "serializeAws_json1_1ResourceDataSyncS3Destination");
    var serializeAws_json1_1ResourceDataSyncSource = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AwsOrganizationsSource != null && {
          AwsOrganizationsSource: serializeAws_json1_1ResourceDataSyncAwsOrganizationsSource(input.AwsOrganizationsSource, context)
        },
        ...input.EnableAllOpsDataSources != null && { EnableAllOpsDataSources: input.EnableAllOpsDataSources },
        ...input.IncludeFutureRegions != null && { IncludeFutureRegions: input.IncludeFutureRegions },
        ...input.SourceRegions != null && {
          SourceRegions: serializeAws_json1_1ResourceDataSyncSourceRegionList(input.SourceRegions, context)
        },
        ...input.SourceType != null && { SourceType: input.SourceType }
      };
    }, "serializeAws_json1_1ResourceDataSyncSource");
    var serializeAws_json1_1ResourceDataSyncSourceRegionList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1ResourceDataSyncSourceRegionList");
    var serializeAws_json1_1ResultAttribute = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    }, "serializeAws_json1_1ResultAttribute");
    var serializeAws_json1_1ResultAttributeList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ResultAttribute(entry, context);
      });
    }, "serializeAws_json1_1ResultAttributeList");
    var serializeAws_json1_1ResumeSessionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.SessionId != null && { SessionId: input.SessionId }
      };
    }, "serializeAws_json1_1ResumeSessionRequest");
    var serializeAws_json1_1Runbook = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.TargetParameterName != null && { TargetParameterName: input.TargetParameterName },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    }, "serializeAws_json1_1Runbook");
    var serializeAws_json1_1Runbooks = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Runbook(entry, context);
      });
    }, "serializeAws_json1_1Runbooks");
    var serializeAws_json1_1S3OutputLocation = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.OutputS3BucketName != null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix != null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.OutputS3Region != null && { OutputS3Region: input.OutputS3Region }
      };
    }, "serializeAws_json1_1S3OutputLocation");
    var serializeAws_json1_1SendAutomationSignalRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Payload != null && { Payload: serializeAws_json1_1AutomationParameterMap(input.Payload, context) },
        ...input.SignalType != null && { SignalType: input.SignalType }
      };
    }, "serializeAws_json1_1SendAutomationSignalRequest");
    var serializeAws_json1_1SendCommandRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.CloudWatchOutputConfig != null && {
          CloudWatchOutputConfig: serializeAws_json1_1CloudWatchOutputConfig(input.CloudWatchOutputConfig, context)
        },
        ...input.Comment != null && { Comment: input.Comment },
        ...input.DocumentHash != null && { DocumentHash: input.DocumentHash },
        ...input.DocumentHashType != null && { DocumentHashType: input.DocumentHashType },
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceIds != null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.NotificationConfig != null && {
          NotificationConfig: serializeAws_json1_1NotificationConfig(input.NotificationConfig, context)
        },
        ...input.OutputS3BucketName != null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix != null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.OutputS3Region != null && { OutputS3Region: input.OutputS3Region },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TimeoutSeconds != null && { TimeoutSeconds: input.TimeoutSeconds }
      };
    }, "serializeAws_json1_1SendCommandRequest");
    var serializeAws_json1_1SessionFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    }, "serializeAws_json1_1SessionFilter");
    var serializeAws_json1_1SessionFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1SessionFilter(entry, context);
      });
    }, "serializeAws_json1_1SessionFilterList");
    var serializeAws_json1_1SessionManagerParameters = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1SessionManagerParameterValueList(value, context)
        };
      }, {});
    }, "serializeAws_json1_1SessionManagerParameters");
    var serializeAws_json1_1SessionManagerParameterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1SessionManagerParameterValueList");
    var serializeAws_json1_1StartAssociationsOnceRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationIds != null && {
          AssociationIds: serializeAws_json1_1AssociationIdList(input.AssociationIds, context)
        }
      };
    }, "serializeAws_json1_1StartAssociationsOnceRequest");
    var serializeAws_json1_1StartAutomationExecutionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ClientToken != null && { ClientToken: input.ClientToken },
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Mode != null && { Mode: input.Mode },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.TargetParameterName != null && { TargetParameterName: input.TargetParameterName },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    }, "serializeAws_json1_1StartAutomationExecutionRequest");
    var serializeAws_json1_1StartChangeRequestExecutionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AutoApprove != null && { AutoApprove: input.AutoApprove },
        ...input.ChangeDetails != null && { ChangeDetails: input.ChangeDetails },
        ...input.ChangeRequestName != null && { ChangeRequestName: input.ChangeRequestName },
        ...input.ClientToken != null && { ClientToken: input.ClientToken },
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.Runbooks != null && { Runbooks: serializeAws_json1_1Runbooks(input.Runbooks, context) },
        ...input.ScheduledEndTime != null && { ScheduledEndTime: Math.round(input.ScheduledEndTime.getTime() / 1e3) },
        ...input.ScheduledTime != null && { ScheduledTime: Math.round(input.ScheduledTime.getTime() / 1e3) },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    }, "serializeAws_json1_1StartChangeRequestExecutionRequest");
    var serializeAws_json1_1StartSessionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1SessionManagerParameters(input.Parameters, context)
        },
        ...input.Reason != null && { Reason: input.Reason },
        ...input.Target != null && { Target: input.Target }
      };
    }, "serializeAws_json1_1StartSessionRequest");
    var serializeAws_json1_1StepExecutionFilter = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1StepExecutionFilterValueList(input.Values, context) }
      };
    }, "serializeAws_json1_1StepExecutionFilter");
    var serializeAws_json1_1StepExecutionFilterList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1StepExecutionFilter(entry, context);
      });
    }, "serializeAws_json1_1StepExecutionFilterList");
    var serializeAws_json1_1StepExecutionFilterValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1StepExecutionFilterValueList");
    var serializeAws_json1_1StopAutomationExecutionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Type != null && { Type: input.Type }
      };
    }, "serializeAws_json1_1StopAutomationExecutionRequest");
    var serializeAws_json1_1StringList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1StringList");
    var serializeAws_json1_1Tag = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    }, "serializeAws_json1_1Tag");
    var serializeAws_json1_1TagList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
      });
    }, "serializeAws_json1_1TagList");
    var serializeAws_json1_1Target = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1TargetValues(input.Values, context) }
      };
    }, "serializeAws_json1_1Target");
    var serializeAws_json1_1TargetLocation = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Accounts != null && { Accounts: serializeAws_json1_1Accounts(input.Accounts, context) },
        ...input.ExecutionRoleName != null && { ExecutionRoleName: input.ExecutionRoleName },
        ...input.Regions != null && { Regions: serializeAws_json1_1Regions(input.Regions, context) },
        ...input.TargetLocationAlarmConfiguration != null && {
          TargetLocationAlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.TargetLocationAlarmConfiguration, context)
        },
        ...input.TargetLocationMaxConcurrency != null && {
          TargetLocationMaxConcurrency: input.TargetLocationMaxConcurrency
        },
        ...input.TargetLocationMaxErrors != null && { TargetLocationMaxErrors: input.TargetLocationMaxErrors }
      };
    }, "serializeAws_json1_1TargetLocation");
    var serializeAws_json1_1TargetLocations = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TargetLocation(entry, context);
      });
    }, "serializeAws_json1_1TargetLocations");
    var serializeAws_json1_1TargetMap = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_1TargetMapValueList(value, context)
        };
      }, {});
    }, "serializeAws_json1_1TargetMap");
    var serializeAws_json1_1TargetMaps = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TargetMap(entry, context);
      });
    }, "serializeAws_json1_1TargetMaps");
    var serializeAws_json1_1TargetMapValueList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1TargetMapValueList");
    var serializeAws_json1_1Targets = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Target(entry, context);
      });
    }, "serializeAws_json1_1Targets");
    var serializeAws_json1_1TargetValues = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    }, "serializeAws_json1_1TargetValues");
    var serializeAws_json1_1TerminateSessionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.SessionId != null && { SessionId: input.SessionId }
      };
    }, "serializeAws_json1_1TerminateSessionRequest");
    var serializeAws_json1_1UnlabelParameterVersionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Labels != null && { Labels: serializeAws_json1_1ParameterLabelList(input.Labels, context) },
        ...input.Name != null && { Name: input.Name },
        ...input.ParameterVersion != null && { ParameterVersion: input.ParameterVersion }
      };
    }, "serializeAws_json1_1UnlabelParameterVersionRequest");
    var serializeAws_json1_1UpdateAssociationRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ApplyOnlyAtCronInterval != null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.AssociationName != null && { AssociationName: input.AssociationName },
        ...input.AssociationVersion != null && { AssociationVersion: input.AssociationVersion },
        ...input.AutomationTargetParameterName != null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity != null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.OutputLocation != null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance != null && { SyncCompliance: input.SyncCompliance },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    }, "serializeAws_json1_1UpdateAssociationRequest");
    var serializeAws_json1_1UpdateAssociationStatusRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AssociationStatus != null && {
          AssociationStatus: serializeAws_json1_1AssociationStatus(input.AssociationStatus, context)
        },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1UpdateAssociationStatusRequest");
    var serializeAws_json1_1UpdateDocumentDefaultVersionRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1UpdateDocumentDefaultVersionRequest");
    var serializeAws_json1_1UpdateDocumentMetadataRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.DocumentReviews != null && {
          DocumentReviews: serializeAws_json1_1DocumentReviews(input.DocumentReviews, context)
        },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name }
      };
    }, "serializeAws_json1_1UpdateDocumentMetadataRequest");
    var serializeAws_json1_1UpdateDocumentRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Attachments != null && {
          Attachments: serializeAws_json1_1AttachmentsSourceList(input.Attachments, context)
        },
        ...input.Content != null && { Content: input.Content },
        ...input.DisplayName != null && { DisplayName: input.DisplayName },
        ...input.DocumentFormat != null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.TargetType != null && { TargetType: input.TargetType },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    }, "serializeAws_json1_1UpdateDocumentRequest");
    var serializeAws_json1_1UpdateMaintenanceWindowRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AllowUnassociatedTargets != null && { AllowUnassociatedTargets: input.AllowUnassociatedTargets },
        ...input.Cutoff != null && { Cutoff: input.Cutoff },
        ...input.Description != null && { Description: input.Description },
        ...input.Duration != null && { Duration: input.Duration },
        ...input.Enabled != null && { Enabled: input.Enabled },
        ...input.EndDate != null && { EndDate: input.EndDate },
        ...input.Name != null && { Name: input.Name },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.Schedule != null && { Schedule: input.Schedule },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.ScheduleTimezone != null && { ScheduleTimezone: input.ScheduleTimezone },
        ...input.StartDate != null && { StartDate: input.StartDate },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    }, "serializeAws_json1_1UpdateMaintenanceWindowRequest");
    var serializeAws_json1_1UpdateMaintenanceWindowTargetRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.Description != null && { Description: input.Description },
        ...input.Name != null && { Name: input.Name },
        ...input.OwnerInformation != null && { OwnerInformation: input.OwnerInformation },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTargetId != null && { WindowTargetId: input.WindowTargetId }
      };
    }, "serializeAws_json1_1UpdateMaintenanceWindowTargetRequest");
    var serializeAws_json1_1UpdateMaintenanceWindowTaskRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.CutoffBehavior != null && { CutoffBehavior: input.CutoffBehavior },
        ...input.Description != null && { Description: input.Description },
        ...input.LoggingInfo != null && { LoggingInfo: serializeAws_json1_1LoggingInfo(input.LoggingInfo, context) },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TaskArn != null && { TaskArn: input.TaskArn },
        ...input.TaskInvocationParameters != null && {
          TaskInvocationParameters: serializeAws_json1_1MaintenanceWindowTaskInvocationParameters(input.TaskInvocationParameters, context)
        },
        ...input.TaskParameters != null && {
          TaskParameters: serializeAws_json1_1MaintenanceWindowTaskParameters(input.TaskParameters, context)
        },
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTaskId != null && { WindowTaskId: input.WindowTaskId }
      };
    }, "serializeAws_json1_1UpdateMaintenanceWindowTaskRequest");
    var serializeAws_json1_1UpdateManagedInstanceRoleRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.IamRole != null && { IamRole: input.IamRole },
        ...input.InstanceId != null && { InstanceId: input.InstanceId }
      };
    }, "serializeAws_json1_1UpdateManagedInstanceRoleRequest");
    var serializeAws_json1_1UpdateOpsItemRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ActualEndTime != null && { ActualEndTime: Math.round(input.ActualEndTime.getTime() / 1e3) },
        ...input.ActualStartTime != null && { ActualStartTime: Math.round(input.ActualStartTime.getTime() / 1e3) },
        ...input.Category != null && { Category: input.Category },
        ...input.Description != null && { Description: input.Description },
        ...input.Notifications != null && {
          Notifications: serializeAws_json1_1OpsItemNotifications(input.Notifications, context)
        },
        ...input.OperationalData != null && {
          OperationalData: serializeAws_json1_1OpsItemOperationalData(input.OperationalData, context)
        },
        ...input.OperationalDataToDelete != null && {
          OperationalDataToDelete: serializeAws_json1_1OpsItemOpsDataKeysList(input.OperationalDataToDelete, context)
        },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId },
        ...input.PlannedEndTime != null && { PlannedEndTime: Math.round(input.PlannedEndTime.getTime() / 1e3) },
        ...input.PlannedStartTime != null && { PlannedStartTime: Math.round(input.PlannedStartTime.getTime() / 1e3) },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.RelatedOpsItems != null && {
          RelatedOpsItems: serializeAws_json1_1RelatedOpsItems(input.RelatedOpsItems, context)
        },
        ...input.Severity != null && { Severity: input.Severity },
        ...input.Status != null && { Status: input.Status },
        ...input.Title != null && { Title: input.Title }
      };
    }, "serializeAws_json1_1UpdateOpsItemRequest");
    var serializeAws_json1_1UpdateOpsMetadataRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.KeysToDelete != null && {
          KeysToDelete: serializeAws_json1_1MetadataKeysToDeleteList(input.KeysToDelete, context)
        },
        ...input.MetadataToUpdate != null && {
          MetadataToUpdate: serializeAws_json1_1MetadataMap(input.MetadataToUpdate, context)
        },
        ...input.OpsMetadataArn != null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    }, "serializeAws_json1_1UpdateOpsMetadataRequest");
    var serializeAws_json1_1UpdatePatchBaselineRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.ApprovalRules != null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches != null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel != null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity != null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.Description != null && { Description: input.Description },
        ...input.GlobalFilters != null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.Name != null && { Name: input.Name },
        ...input.RejectedPatches != null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction != null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.Sources != null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) }
      };
    }, "serializeAws_json1_1UpdatePatchBaselineRequest");
    var serializeAws_json1_1UpdateResourceDataSyncRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.SyncName != null && { SyncName: input.SyncName },
        ...input.SyncSource != null && {
          SyncSource: serializeAws_json1_1ResourceDataSyncSource(input.SyncSource, context)
        },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    }, "serializeAws_json1_1UpdateResourceDataSyncRequest");
    var serializeAws_json1_1UpdateServiceSettingRequest = /* @__PURE__ */ __name((input, context) => {
      return {
        ...input.SettingId != null && { SettingId: input.SettingId },
        ...input.SettingValue != null && { SettingValue: input.SettingValue }
      };
    }, "serializeAws_json1_1UpdateServiceSettingRequest");
    var deserializeAws_json1_1AccountIdList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1AccountIdList");
    var deserializeAws_json1_1Accounts = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1Accounts");
    var deserializeAws_json1_1AccountSharingInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        SharedDocumentVersion: (0, smithy_client_1.expectString)(output.SharedDocumentVersion)
      };
    }, "deserializeAws_json1_1AccountSharingInfo");
    var deserializeAws_json1_1AccountSharingInfoList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AccountSharingInfo(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AccountSharingInfoList");
    var deserializeAws_json1_1Activation = /* @__PURE__ */ __name((output, context) => {
      return {
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DefaultInstanceName: (0, smithy_client_1.expectString)(output.DefaultInstanceName),
        Description: (0, smithy_client_1.expectString)(output.Description),
        ExpirationDate: output.ExpirationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpirationDate))) : void 0,
        Expired: (0, smithy_client_1.expectBoolean)(output.Expired),
        IamRole: (0, smithy_client_1.expectString)(output.IamRole),
        RegistrationLimit: (0, smithy_client_1.expectInt32)(output.RegistrationLimit),
        RegistrationsCount: (0, smithy_client_1.expectInt32)(output.RegistrationsCount),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0
      };
    }, "deserializeAws_json1_1Activation");
    var deserializeAws_json1_1ActivationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Activation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ActivationList");
    var deserializeAws_json1_1AddTagsToResourceResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1AddTagsToResourceResult");
    var deserializeAws_json1_1Alarm = /* @__PURE__ */ __name((output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    }, "deserializeAws_json1_1Alarm");
    var deserializeAws_json1_1AlarmConfiguration = /* @__PURE__ */ __name((output, context) => {
      return {
        Alarms: output.Alarms != null ? deserializeAws_json1_1AlarmList(output.Alarms, context) : void 0,
        IgnorePollAlarmFailure: (0, smithy_client_1.expectBoolean)(output.IgnorePollAlarmFailure)
      };
    }, "deserializeAws_json1_1AlarmConfiguration");
    var deserializeAws_json1_1AlarmList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Alarm(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AlarmList");
    var deserializeAws_json1_1AlarmStateInformation = /* @__PURE__ */ __name((output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    }, "deserializeAws_json1_1AlarmStateInformation");
    var deserializeAws_json1_1AlarmStateInformationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AlarmStateInformation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AlarmStateInformationList");
    var deserializeAws_json1_1AlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AlreadyExistsException");
    var deserializeAws_json1_1AssociatedInstances = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1AssociatedInstances");
    var deserializeAws_json1_1AssociateOpsItemRelatedItemResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId)
      };
    }, "deserializeAws_json1_1AssociateOpsItemRelatedItemResponse");
    var deserializeAws_json1_1Association = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Overview: output.Overview != null ? deserializeAws_json1_1AssociationOverview(output.Overview, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    }, "deserializeAws_json1_1Association");
    var deserializeAws_json1_1AssociationAlreadyExists = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1AssociationAlreadyExists");
    var deserializeAws_json1_1AssociationDescription = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        AutomationTargetParameterName: (0, smithy_client_1.expectString)(output.AutomationTargetParameterName),
        CalendarNames: output.CalendarNames != null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        Date: output.Date != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Date))) : void 0,
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        LastSuccessfulExecutionDate: output.LastSuccessfulExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulExecutionDate))) : void 0,
        LastUpdateAssociationDate: output.LastUpdateAssociationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateAssociationDate))) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation != null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Overview: output.Overview != null ? deserializeAws_json1_1AssociationOverview(output.Overview, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        Status: output.Status != null ? deserializeAws_json1_1AssociationStatus(output.Status, context) : void 0,
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    }, "deserializeAws_json1_1AssociationDescription");
    var deserializeAws_json1_1AssociationDescriptionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationDescription(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AssociationDescriptionList");
    var deserializeAws_json1_1AssociationDoesNotExist = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AssociationDoesNotExist");
    var deserializeAws_json1_1AssociationExecution = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        ResourceCountByStatus: (0, smithy_client_1.expectString)(output.ResourceCountByStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    }, "deserializeAws_json1_1AssociationExecution");
    var deserializeAws_json1_1AssociationExecutionDoesNotExist = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AssociationExecutionDoesNotExist");
    var deserializeAws_json1_1AssociationExecutionsList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationExecution(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AssociationExecutionsList");
    var deserializeAws_json1_1AssociationExecutionTarget = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        OutputSource: output.OutputSource != null ? deserializeAws_json1_1OutputSource(output.OutputSource, context) : void 0,
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    }, "deserializeAws_json1_1AssociationExecutionTarget");
    var deserializeAws_json1_1AssociationExecutionTargetsList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationExecutionTarget(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AssociationExecutionTargetsList");
    var deserializeAws_json1_1AssociationLimitExceeded = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1AssociationLimitExceeded");
    var deserializeAws_json1_1AssociationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Association(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AssociationList");
    var deserializeAws_json1_1AssociationOverview = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationStatusAggregatedCount: output.AssociationStatusAggregatedCount != null ? deserializeAws_json1_1AssociationStatusAggregatedCount(output.AssociationStatusAggregatedCount, context) : void 0,
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    }, "deserializeAws_json1_1AssociationOverview");
    var deserializeAws_json1_1AssociationStatus = /* @__PURE__ */ __name((output, context) => {
      return {
        AdditionalInfo: (0, smithy_client_1.expectString)(output.AdditionalInfo),
        Date: output.Date != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Date))) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    }, "deserializeAws_json1_1AssociationStatus");
    var deserializeAws_json1_1AssociationStatusAggregatedCount = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectInt32)(value)
        };
      }, {});
    }, "deserializeAws_json1_1AssociationStatusAggregatedCount");
    var deserializeAws_json1_1AssociationVersionInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        CalendarNames: output.CalendarNames != null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation != null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    }, "deserializeAws_json1_1AssociationVersionInfo");
    var deserializeAws_json1_1AssociationVersionLimitExceeded = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AssociationVersionLimitExceeded");
    var deserializeAws_json1_1AssociationVersionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationVersionInfo(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AssociationVersionList");
    var deserializeAws_json1_1AttachmentContent = /* @__PURE__ */ __name((output, context) => {
      return {
        Hash: (0, smithy_client_1.expectString)(output.Hash),
        HashType: (0, smithy_client_1.expectString)(output.HashType),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Size: (0, smithy_client_1.expectLong)(output.Size),
        Url: (0, smithy_client_1.expectString)(output.Url)
      };
    }, "deserializeAws_json1_1AttachmentContent");
    var deserializeAws_json1_1AttachmentContentList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AttachmentContent(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AttachmentContentList");
    var deserializeAws_json1_1AttachmentInformation = /* @__PURE__ */ __name((output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    }, "deserializeAws_json1_1AttachmentInformation");
    var deserializeAws_json1_1AttachmentInformationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AttachmentInformation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AttachmentInformationList");
    var deserializeAws_json1_1AutomationDefinitionNotApprovedException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AutomationDefinitionNotApprovedException");
    var deserializeAws_json1_1AutomationDefinitionNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AutomationDefinitionNotFoundException");
    var deserializeAws_json1_1AutomationDefinitionVersionNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AutomationDefinitionVersionNotFoundException");
    var deserializeAws_json1_1AutomationExecution = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId),
        AutomationExecutionStatus: (0, smithy_client_1.expectString)(output.AutomationExecutionStatus),
        AutomationSubtype: (0, smithy_client_1.expectString)(output.AutomationSubtype),
        ChangeRequestName: (0, smithy_client_1.expectString)(output.ChangeRequestName),
        CurrentAction: (0, smithy_client_1.expectString)(output.CurrentAction),
        CurrentStepName: (0, smithy_client_1.expectString)(output.CurrentStepName),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutedBy: (0, smithy_client_1.expectString)(output.ExecutedBy),
        ExecutionEndTime: output.ExecutionEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Mode: (0, smithy_client_1.expectString)(output.Mode),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Outputs: output.Outputs != null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0,
        ParentAutomationExecutionId: (0, smithy_client_1.expectString)(output.ParentAutomationExecutionId),
        ProgressCounters: output.ProgressCounters != null ? deserializeAws_json1_1ProgressCounters(output.ProgressCounters, context) : void 0,
        ResolvedTargets: output.ResolvedTargets != null ? deserializeAws_json1_1ResolvedTargets(output.ResolvedTargets, context) : void 0,
        Runbooks: output.Runbooks != null ? deserializeAws_json1_1Runbooks(output.Runbooks, context) : void 0,
        ScheduledTime: output.ScheduledTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ScheduledTime))) : void 0,
        StepExecutions: output.StepExecutions != null ? deserializeAws_json1_1StepExecutionList(output.StepExecutions, context) : void 0,
        StepExecutionsTruncated: (0, smithy_client_1.expectBoolean)(output.StepExecutionsTruncated),
        Target: (0, smithy_client_1.expectString)(output.Target),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    }, "deserializeAws_json1_1AutomationExecution");
    var deserializeAws_json1_1AutomationExecutionLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AutomationExecutionLimitExceededException");
    var deserializeAws_json1_1AutomationExecutionMetadata = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId),
        AutomationExecutionStatus: (0, smithy_client_1.expectString)(output.AutomationExecutionStatus),
        AutomationSubtype: (0, smithy_client_1.expectString)(output.AutomationSubtype),
        AutomationType: (0, smithy_client_1.expectString)(output.AutomationType),
        ChangeRequestName: (0, smithy_client_1.expectString)(output.ChangeRequestName),
        CurrentAction: (0, smithy_client_1.expectString)(output.CurrentAction),
        CurrentStepName: (0, smithy_client_1.expectString)(output.CurrentStepName),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutedBy: (0, smithy_client_1.expectString)(output.ExecutedBy),
        ExecutionEndTime: output.ExecutionEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        LogFile: (0, smithy_client_1.expectString)(output.LogFile),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Mode: (0, smithy_client_1.expectString)(output.Mode),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Outputs: output.Outputs != null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        ParentAutomationExecutionId: (0, smithy_client_1.expectString)(output.ParentAutomationExecutionId),
        ResolvedTargets: output.ResolvedTargets != null ? deserializeAws_json1_1ResolvedTargets(output.ResolvedTargets, context) : void 0,
        Runbooks: output.Runbooks != null ? deserializeAws_json1_1Runbooks(output.Runbooks, context) : void 0,
        ScheduledTime: output.ScheduledTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ScheduledTime))) : void 0,
        Target: (0, smithy_client_1.expectString)(output.Target),
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    }, "deserializeAws_json1_1AutomationExecutionMetadata");
    var deserializeAws_json1_1AutomationExecutionMetadataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AutomationExecutionMetadata(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1AutomationExecutionMetadataList");
    var deserializeAws_json1_1AutomationExecutionNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AutomationExecutionNotFoundException");
    var deserializeAws_json1_1AutomationParameterMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1AutomationParameterValueList(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1AutomationParameterMap");
    var deserializeAws_json1_1AutomationParameterValueList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1AutomationParameterValueList");
    var deserializeAws_json1_1AutomationStepNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1AutomationStepNotFoundException");
    var deserializeAws_json1_1CalendarNameOrARNList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1CalendarNameOrARNList");
    var deserializeAws_json1_1CancelCommandResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1CancelCommandResult");
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    }, "deserializeAws_json1_1CancelMaintenanceWindowExecutionResult");
    var deserializeAws_json1_1CategoryEnumList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1CategoryEnumList");
    var deserializeAws_json1_1CategoryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1CategoryList");
    var deserializeAws_json1_1CloudWatchOutputConfig = /* @__PURE__ */ __name((output, context) => {
      return {
        CloudWatchLogGroupName: (0, smithy_client_1.expectString)(output.CloudWatchLogGroupName),
        CloudWatchOutputEnabled: (0, smithy_client_1.expectBoolean)(output.CloudWatchOutputEnabled)
      };
    }, "deserializeAws_json1_1CloudWatchOutputConfig");
    var deserializeAws_json1_1Command = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        CompletedCount: (0, smithy_client_1.expectInt32)(output.CompletedCount),
        DeliveryTimedOutCount: (0, smithy_client_1.expectInt32)(output.DeliveryTimedOutCount),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ErrorCount: (0, smithy_client_1.expectInt32)(output.ErrorCount),
        ExpiresAfter: output.ExpiresAfter != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpiresAfter))) : void 0,
        InstanceIds: output.InstanceIds != null ? deserializeAws_json1_1InstanceIdList(output.InstanceIds, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        NotificationConfig: output.NotificationConfig != null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region),
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        RequestedDateTime: output.RequestedDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RequestedDateTime))) : void 0,
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TargetCount: (0, smithy_client_1.expectInt32)(output.TargetCount),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TimeoutSeconds: (0, smithy_client_1.expectInt32)(output.TimeoutSeconds),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    }, "deserializeAws_json1_1Command");
    var deserializeAws_json1_1CommandInvocation = /* @__PURE__ */ __name((output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        CommandPlugins: output.CommandPlugins != null ? deserializeAws_json1_1CommandPluginList(output.CommandPlugins, context) : void 0,
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        InstanceName: (0, smithy_client_1.expectString)(output.InstanceName),
        NotificationConfig: output.NotificationConfig != null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        RequestedDateTime: output.RequestedDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RequestedDateTime))) : void 0,
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TraceOutput: (0, smithy_client_1.expectString)(output.TraceOutput)
      };
    }, "deserializeAws_json1_1CommandInvocation");
    var deserializeAws_json1_1CommandInvocationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1CommandInvocation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1CommandInvocationList");
    var deserializeAws_json1_1CommandList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Command(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1CommandList");
    var deserializeAws_json1_1CommandPlugin = /* @__PURE__ */ __name((output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Output: (0, smithy_client_1.expectString)(output.Output),
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region),
        ResponseCode: (0, smithy_client_1.expectInt32)(output.ResponseCode),
        ResponseFinishDateTime: output.ResponseFinishDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResponseFinishDateTime))) : void 0,
        ResponseStartDateTime: output.ResponseStartDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResponseStartDateTime))) : void 0,
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails)
      };
    }, "deserializeAws_json1_1CommandPlugin");
    var deserializeAws_json1_1CommandPluginList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1CommandPlugin(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1CommandPluginList");
    var deserializeAws_json1_1ComplianceExecutionSummary = /* @__PURE__ */ __name((output, context) => {
      return {
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        ExecutionTime: output.ExecutionTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionTime))) : void 0,
        ExecutionType: (0, smithy_client_1.expectString)(output.ExecutionType)
      };
    }, "deserializeAws_json1_1ComplianceExecutionSummary");
    var deserializeAws_json1_1ComplianceItem = /* @__PURE__ */ __name((output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        Details: output.Details != null ? deserializeAws_json1_1ComplianceItemDetails(output.Details, context) : void 0,
        ExecutionSummary: output.ExecutionSummary != null ? deserializeAws_json1_1ComplianceExecutionSummary(output.ExecutionSummary, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    }, "deserializeAws_json1_1ComplianceItem");
    var deserializeAws_json1_1ComplianceItemDetails = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    }, "deserializeAws_json1_1ComplianceItemDetails");
    var deserializeAws_json1_1ComplianceItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ComplianceItem(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ComplianceItemList");
    var deserializeAws_json1_1ComplianceSummaryItem = /* @__PURE__ */ __name((output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        CompliantSummary: output.CompliantSummary != null ? deserializeAws_json1_1CompliantSummary(output.CompliantSummary, context) : void 0,
        NonCompliantSummary: output.NonCompliantSummary != null ? deserializeAws_json1_1NonCompliantSummary(output.NonCompliantSummary, context) : void 0
      };
    }, "deserializeAws_json1_1ComplianceSummaryItem");
    var deserializeAws_json1_1ComplianceSummaryItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ComplianceSummaryItem(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ComplianceSummaryItemList");
    var deserializeAws_json1_1ComplianceTypeCountLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1ComplianceTypeCountLimitExceededException");
    var deserializeAws_json1_1CompliantSummary = /* @__PURE__ */ __name((output, context) => {
      return {
        CompliantCount: (0, smithy_client_1.expectInt32)(output.CompliantCount),
        SeveritySummary: output.SeveritySummary != null ? deserializeAws_json1_1SeveritySummary(output.SeveritySummary, context) : void 0
      };
    }, "deserializeAws_json1_1CompliantSummary");
    var deserializeAws_json1_1CreateActivationResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ActivationCode: (0, smithy_client_1.expectString)(output.ActivationCode),
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId)
      };
    }, "deserializeAws_json1_1CreateActivationResult");
    var deserializeAws_json1_1CreateAssociationBatchRequestEntry = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AutomationTargetParameterName: (0, smithy_client_1.expectString)(output.AutomationTargetParameterName),
        CalendarNames: output.CalendarNames != null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation != null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    }, "deserializeAws_json1_1CreateAssociationBatchRequestEntry");
    var deserializeAws_json1_1CreateAssociationBatchResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Failed: output.Failed != null ? deserializeAws_json1_1FailedCreateAssociationList(output.Failed, context) : void 0,
        Successful: output.Successful != null ? deserializeAws_json1_1AssociationDescriptionList(output.Successful, context) : void 0
      };
    }, "deserializeAws_json1_1CreateAssociationBatchResult");
    var deserializeAws_json1_1CreateAssociationResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    }, "deserializeAws_json1_1CreateAssociationResult");
    var deserializeAws_json1_1CreateDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return {
        DocumentDescription: output.DocumentDescription != null ? deserializeAws_json1_1DocumentDescription(output.DocumentDescription, context) : void 0
      };
    }, "deserializeAws_json1_1CreateDocumentResult");
    var deserializeAws_json1_1CreateMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1CreateMaintenanceWindowResult");
    var deserializeAws_json1_1CreateOpsItemResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    }, "deserializeAws_json1_1CreateOpsItemResponse");
    var deserializeAws_json1_1CreateOpsMetadataResult = /* @__PURE__ */ __name((output, context) => {
      return {
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn)
      };
    }, "deserializeAws_json1_1CreateOpsMetadataResult");
    var deserializeAws_json1_1CreatePatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    }, "deserializeAws_json1_1CreatePatchBaselineResult");
    var deserializeAws_json1_1CreateResourceDataSyncResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1CreateResourceDataSyncResult");
    var deserializeAws_json1_1CustomSchemaCountLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1CustomSchemaCountLimitExceededException");
    var deserializeAws_json1_1DeleteActivationResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DeleteActivationResult");
    var deserializeAws_json1_1DeleteAssociationResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DeleteAssociationResult");
    var deserializeAws_json1_1DeleteDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DeleteDocumentResult");
    var deserializeAws_json1_1DeleteInventoryResult = /* @__PURE__ */ __name((output, context) => {
      return {
        DeletionId: (0, smithy_client_1.expectString)(output.DeletionId),
        DeletionSummary: output.DeletionSummary != null ? deserializeAws_json1_1InventoryDeletionSummary(output.DeletionSummary, context) : void 0,
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1DeleteInventoryResult");
    var deserializeAws_json1_1DeleteMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1DeleteMaintenanceWindowResult");
    var deserializeAws_json1_1DeleteOpsMetadataResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DeleteOpsMetadataResult");
    var deserializeAws_json1_1DeleteParameterResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DeleteParameterResult");
    var deserializeAws_json1_1DeleteParametersResult = /* @__PURE__ */ __name((output, context) => {
      return {
        DeletedParameters: output.DeletedParameters != null ? deserializeAws_json1_1ParameterNameList(output.DeletedParameters, context) : void 0,
        InvalidParameters: output.InvalidParameters != null ? deserializeAws_json1_1ParameterNameList(output.InvalidParameters, context) : void 0
      };
    }, "deserializeAws_json1_1DeleteParametersResult");
    var deserializeAws_json1_1DeletePatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    }, "deserializeAws_json1_1DeletePatchBaselineResult");
    var deserializeAws_json1_1DeleteResourceDataSyncResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DeleteResourceDataSyncResult");
    var deserializeAws_json1_1DeregisterManagedInstanceResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DeregisterManagedInstanceResult");
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    }, "deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupResult");
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    }, "deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowResult");
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    }, "deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowResult");
    var deserializeAws_json1_1DescribeActivationsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ActivationList: output.ActivationList != null ? deserializeAws_json1_1ActivationList(output.ActivationList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeActivationsResult");
    var deserializeAws_json1_1DescribeAssociationExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationExecutions: output.AssociationExecutions != null ? deserializeAws_json1_1AssociationExecutionsList(output.AssociationExecutions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeAssociationExecutionsResult");
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationExecutionTargets: output.AssociationExecutionTargets != null ? deserializeAws_json1_1AssociationExecutionTargetsList(output.AssociationExecutionTargets, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeAssociationExecutionTargetsResult");
    var deserializeAws_json1_1DescribeAssociationResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeAssociationResult");
    var deserializeAws_json1_1DescribeAutomationExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AutomationExecutionMetadataList: output.AutomationExecutionMetadataList != null ? deserializeAws_json1_1AutomationExecutionMetadataList(output.AutomationExecutionMetadataList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeAutomationExecutionsResult");
    var deserializeAws_json1_1DescribeAutomationStepExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        StepExecutions: output.StepExecutions != null ? deserializeAws_json1_1StepExecutionList(output.StepExecutions, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeAutomationStepExecutionsResult");
    var deserializeAws_json1_1DescribeAvailablePatchesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Patches: output.Patches != null ? deserializeAws_json1_1PatchList(output.Patches, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeAvailablePatchesResult");
    var deserializeAws_json1_1DescribeDocumentPermissionResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        AccountIds: output.AccountIds != null ? deserializeAws_json1_1AccountIdList(output.AccountIds, context) : void 0,
        AccountSharingInfoList: output.AccountSharingInfoList != null ? deserializeAws_json1_1AccountSharingInfoList(output.AccountSharingInfoList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeDocumentPermissionResponse");
    var deserializeAws_json1_1DescribeDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Document: output.Document != null ? deserializeAws_json1_1DocumentDescription(output.Document, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeDocumentResult");
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Associations: output.Associations != null ? deserializeAws_json1_1InstanceAssociationList(output.Associations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeEffectiveInstanceAssociationsResult");
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return {
        EffectivePatches: output.EffectivePatches != null ? deserializeAws_json1_1EffectivePatchList(output.EffectivePatches, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineResult");
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InstanceAssociationStatusInfos: output.InstanceAssociationStatusInfos != null ? deserializeAws_json1_1InstanceAssociationStatusInfos(output.InstanceAssociationStatusInfos, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeInstanceAssociationsStatusResult");
    var deserializeAws_json1_1DescribeInstanceInformationResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InstanceInformationList: output.InstanceInformationList != null ? deserializeAws_json1_1InstanceInformationList(output.InstanceInformationList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeInstanceInformationResult");
    var deserializeAws_json1_1DescribeInstancePatchesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Patches: output.Patches != null ? deserializeAws_json1_1PatchComplianceDataList(output.Patches, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeInstancePatchesResult");
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InstancePatchStates: output.InstancePatchStates != null ? deserializeAws_json1_1InstancePatchStatesList(output.InstancePatchStates, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupResult");
    var deserializeAws_json1_1DescribeInstancePatchStatesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InstancePatchStates: output.InstancePatchStates != null ? deserializeAws_json1_1InstancePatchStateList(output.InstancePatchStates, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeInstancePatchStatesResult");
    var deserializeAws_json1_1DescribeInventoryDeletionsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InventoryDeletions: output.InventoryDeletions != null ? deserializeAws_json1_1InventoryDeletionsList(output.InventoryDeletions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribeInventoryDeletionsResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutions: output.WindowExecutions != null ? deserializeAws_json1_1MaintenanceWindowExecutionList(output.WindowExecutions, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionsResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutionTaskInvocationIdentities: output.WindowExecutionTaskInvocationIdentities != null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentityList(output.WindowExecutionTaskInvocationIdentities, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutionTaskIdentities: output.WindowExecutionTaskIdentities != null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentityList(output.WindowExecutionTaskIdentities, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ScheduledWindowExecutions: output.ScheduledWindowExecutions != null ? deserializeAws_json1_1ScheduledWindowExecutionList(output.ScheduledWindowExecutions, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowScheduleResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowIdentities: output.WindowIdentities != null ? deserializeAws_json1_1MaintenanceWindowsForTargetList(output.WindowIdentities, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowsForTargetResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowIdentities: output.WindowIdentities != null ? deserializeAws_json1_1MaintenanceWindowIdentityList(output.WindowIdentities, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowsResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Targets: output.Targets != null ? deserializeAws_json1_1MaintenanceWindowTargetList(output.Targets, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowTargetsResult");
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tasks: output.Tasks != null ? deserializeAws_json1_1MaintenanceWindowTaskList(output.Tasks, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeMaintenanceWindowTasksResult");
    var deserializeAws_json1_1DescribeOpsItemsResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OpsItemSummaries: output.OpsItemSummaries != null ? deserializeAws_json1_1OpsItemSummaries(output.OpsItemSummaries, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeOpsItemsResponse");
    var deserializeAws_json1_1DescribeParametersResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterMetadataList(output.Parameters, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeParametersResult");
    var deserializeAws_json1_1DescribePatchBaselinesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineIdentities: output.BaselineIdentities != null ? deserializeAws_json1_1PatchBaselineIdentityList(output.BaselineIdentities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribePatchBaselinesResult");
    var deserializeAws_json1_1DescribePatchGroupsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Mappings: output.Mappings != null ? deserializeAws_json1_1PatchGroupPatchBaselineMappingList(output.Mappings, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1DescribePatchGroupsResult");
    var deserializeAws_json1_1DescribePatchGroupStateResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Instances: (0, smithy_client_1.expectInt32)(output.Instances),
        InstancesWithCriticalNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithCriticalNonCompliantPatches),
        InstancesWithFailedPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithFailedPatches),
        InstancesWithInstalledOtherPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledOtherPatches),
        InstancesWithInstalledPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledPatches),
        InstancesWithInstalledPendingRebootPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledPendingRebootPatches),
        InstancesWithInstalledRejectedPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledRejectedPatches),
        InstancesWithMissingPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithMissingPatches),
        InstancesWithNotApplicablePatches: (0, smithy_client_1.expectInt32)(output.InstancesWithNotApplicablePatches),
        InstancesWithOtherNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithOtherNonCompliantPatches),
        InstancesWithSecurityNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithSecurityNonCompliantPatches),
        InstancesWithUnreportedNotApplicablePatches: (0, smithy_client_1.expectInt32)(output.InstancesWithUnreportedNotApplicablePatches)
      };
    }, "deserializeAws_json1_1DescribePatchGroupStateResult");
    var deserializeAws_json1_1DescribePatchPropertiesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Properties: output.Properties != null ? deserializeAws_json1_1PatchPropertiesList(output.Properties, context) : void 0
      };
    }, "deserializeAws_json1_1DescribePatchPropertiesResult");
    var deserializeAws_json1_1DescribeSessionsResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Sessions: output.Sessions != null ? deserializeAws_json1_1SessionList(output.Sessions, context) : void 0
      };
    }, "deserializeAws_json1_1DescribeSessionsResponse");
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemResponse = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DisassociateOpsItemRelatedItemResponse");
    var deserializeAws_json1_1DocumentAlreadyExists = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1DocumentAlreadyExists");
    var deserializeAws_json1_1DocumentDefaultVersionDescription = /* @__PURE__ */ __name((output, context) => {
      return {
        DefaultVersion: (0, smithy_client_1.expectString)(output.DefaultVersion),
        DefaultVersionName: (0, smithy_client_1.expectString)(output.DefaultVersionName),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    }, "deserializeAws_json1_1DocumentDefaultVersionDescription");
    var deserializeAws_json1_1DocumentDescription = /* @__PURE__ */ __name((output, context) => {
      return {
        ApprovedVersion: (0, smithy_client_1.expectString)(output.ApprovedVersion),
        AttachmentsInformation: output.AttachmentsInformation != null ? deserializeAws_json1_1AttachmentInformationList(output.AttachmentsInformation, context) : void 0,
        Author: (0, smithy_client_1.expectString)(output.Author),
        Category: output.Category != null ? deserializeAws_json1_1CategoryList(output.Category, context) : void 0,
        CategoryEnum: output.CategoryEnum != null ? deserializeAws_json1_1CategoryEnumList(output.CategoryEnum, context) : void 0,
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DefaultVersion: (0, smithy_client_1.expectString)(output.DefaultVersion),
        Description: (0, smithy_client_1.expectString)(output.Description),
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Hash: (0, smithy_client_1.expectString)(output.Hash),
        HashType: (0, smithy_client_1.expectString)(output.HashType),
        LatestVersion: (0, smithy_client_1.expectString)(output.LatestVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        Parameters: output.Parameters != null ? deserializeAws_json1_1DocumentParameterList(output.Parameters, context) : void 0,
        PendingReviewVersion: (0, smithy_client_1.expectString)(output.PendingReviewVersion),
        PlatformTypes: output.PlatformTypes != null ? deserializeAws_json1_1PlatformTypeList(output.PlatformTypes, context) : void 0,
        Requires: output.Requires != null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewInformation: output.ReviewInformation != null ? deserializeAws_json1_1ReviewInformationList(output.ReviewInformation, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        Sha1: (0, smithy_client_1.expectString)(output.Sha1),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0,
        TargetType: (0, smithy_client_1.expectString)(output.TargetType),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    }, "deserializeAws_json1_1DocumentDescription");
    var deserializeAws_json1_1DocumentIdentifier = /* @__PURE__ */ __name((output, context) => {
      return {
        Author: (0, smithy_client_1.expectString)(output.Author),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        PlatformTypes: output.PlatformTypes != null ? deserializeAws_json1_1PlatformTypeList(output.PlatformTypes, context) : void 0,
        Requires: output.Requires != null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0,
        TargetType: (0, smithy_client_1.expectString)(output.TargetType),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    }, "deserializeAws_json1_1DocumentIdentifier");
    var deserializeAws_json1_1DocumentIdentifierList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentIdentifier(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1DocumentIdentifierList");
    var deserializeAws_json1_1DocumentLimitExceeded = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1DocumentLimitExceeded");
    var deserializeAws_json1_1DocumentMetadataResponseInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        ReviewerResponse: output.ReviewerResponse != null ? deserializeAws_json1_1DocumentReviewerResponseList(output.ReviewerResponse, context) : void 0
      };
    }, "deserializeAws_json1_1DocumentMetadataResponseInfo");
    var deserializeAws_json1_1DocumentParameter = /* @__PURE__ */ __name((output, context) => {
      return {
        DefaultValue: (0, smithy_client_1.expectString)(output.DefaultValue),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Type: (0, smithy_client_1.expectString)(output.Type)
      };
    }, "deserializeAws_json1_1DocumentParameter");
    var deserializeAws_json1_1DocumentParameterList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentParameter(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1DocumentParameterList");
    var deserializeAws_json1_1DocumentPermissionLimit = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1DocumentPermissionLimit");
    var deserializeAws_json1_1DocumentRequires = /* @__PURE__ */ __name((output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    }, "deserializeAws_json1_1DocumentRequires");
    var deserializeAws_json1_1DocumentRequiresList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentRequires(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1DocumentRequiresList");
    var deserializeAws_json1_1DocumentReviewCommentList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentReviewCommentSource(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1DocumentReviewCommentList");
    var deserializeAws_json1_1DocumentReviewCommentSource = /* @__PURE__ */ __name((output, context) => {
      return {
        Content: (0, smithy_client_1.expectString)(output.Content),
        Type: (0, smithy_client_1.expectString)(output.Type)
      };
    }, "deserializeAws_json1_1DocumentReviewCommentSource");
    var deserializeAws_json1_1DocumentReviewerResponseList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentReviewerResponseSource(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1DocumentReviewerResponseList");
    var deserializeAws_json1_1DocumentReviewerResponseSource = /* @__PURE__ */ __name((output, context) => {
      return {
        Comment: output.Comment != null ? deserializeAws_json1_1DocumentReviewCommentList(output.Comment, context) : void 0,
        CreateTime: output.CreateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreateTime))) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Reviewer: (0, smithy_client_1.expectString)(output.Reviewer),
        UpdatedTime: output.UpdatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.UpdatedTime))) : void 0
      };
    }, "deserializeAws_json1_1DocumentReviewerResponseSource");
    var deserializeAws_json1_1DocumentVersionInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        IsDefaultVersion: (0, smithy_client_1.expectBoolean)(output.IsDefaultVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    }, "deserializeAws_json1_1DocumentVersionInfo");
    var deserializeAws_json1_1DocumentVersionLimitExceeded = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1DocumentVersionLimitExceeded");
    var deserializeAws_json1_1DocumentVersionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentVersionInfo(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1DocumentVersionList");
    var deserializeAws_json1_1DoesNotExistException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1DoesNotExistException");
    var deserializeAws_json1_1DuplicateDocumentContent = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1DuplicateDocumentContent");
    var deserializeAws_json1_1DuplicateDocumentVersionName = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1DuplicateDocumentVersionName");
    var deserializeAws_json1_1DuplicateInstanceId = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1DuplicateInstanceId");
    var deserializeAws_json1_1EffectivePatch = /* @__PURE__ */ __name((output, context) => {
      return {
        Patch: output.Patch != null ? deserializeAws_json1_1Patch(output.Patch, context) : void 0,
        PatchStatus: output.PatchStatus != null ? deserializeAws_json1_1PatchStatus(output.PatchStatus, context) : void 0
      };
    }, "deserializeAws_json1_1EffectivePatch");
    var deserializeAws_json1_1EffectivePatchList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1EffectivePatch(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1EffectivePatchList");
    var deserializeAws_json1_1FailedCreateAssociation = /* @__PURE__ */ __name((output, context) => {
      return {
        Entry: output.Entry != null ? deserializeAws_json1_1CreateAssociationBatchRequestEntry(output.Entry, context) : void 0,
        Fault: (0, smithy_client_1.expectString)(output.Fault),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1FailedCreateAssociation");
    var deserializeAws_json1_1FailedCreateAssociationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1FailedCreateAssociation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1FailedCreateAssociationList");
    var deserializeAws_json1_1FailureDetails = /* @__PURE__ */ __name((output, context) => {
      return {
        Details: output.Details != null ? deserializeAws_json1_1AutomationParameterMap(output.Details, context) : void 0,
        FailureStage: (0, smithy_client_1.expectString)(output.FailureStage),
        FailureType: (0, smithy_client_1.expectString)(output.FailureType)
      };
    }, "deserializeAws_json1_1FailureDetails");
    var deserializeAws_json1_1FeatureNotAvailableException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1FeatureNotAvailableException");
    var deserializeAws_json1_1GetAutomationExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AutomationExecution: output.AutomationExecution != null ? deserializeAws_json1_1AutomationExecution(output.AutomationExecution, context) : void 0
      };
    }, "deserializeAws_json1_1GetAutomationExecutionResult");
    var deserializeAws_json1_1GetCalendarStateResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        AtTime: (0, smithy_client_1.expectString)(output.AtTime),
        NextTransitionTime: (0, smithy_client_1.expectString)(output.NextTransitionTime),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    }, "deserializeAws_json1_1GetCalendarStateResponse");
    var deserializeAws_json1_1GetCommandInvocationResult = /* @__PURE__ */ __name((output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutionElapsedTime: (0, smithy_client_1.expectString)(output.ExecutionElapsedTime),
        ExecutionEndDateTime: (0, smithy_client_1.expectString)(output.ExecutionEndDateTime),
        ExecutionStartDateTime: (0, smithy_client_1.expectString)(output.ExecutionStartDateTime),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        PluginName: (0, smithy_client_1.expectString)(output.PluginName),
        ResponseCode: (0, smithy_client_1.expectInt32)(output.ResponseCode),
        StandardErrorContent: (0, smithy_client_1.expectString)(output.StandardErrorContent),
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputContent: (0, smithy_client_1.expectString)(output.StandardOutputContent),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails)
      };
    }, "deserializeAws_json1_1GetCommandInvocationResult");
    var deserializeAws_json1_1GetConnectionStatusResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        Status: (0, smithy_client_1.expectString)(output.Status),
        Target: (0, smithy_client_1.expectString)(output.Target)
      };
    }, "deserializeAws_json1_1GetConnectionStatusResponse");
    var deserializeAws_json1_1GetDefaultPatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem)
      };
    }, "deserializeAws_json1_1GetDefaultPatchBaselineResult");
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        Product: (0, smithy_client_1.expectString)(output.Product),
        SnapshotDownloadUrl: (0, smithy_client_1.expectString)(output.SnapshotDownloadUrl),
        SnapshotId: (0, smithy_client_1.expectString)(output.SnapshotId)
      };
    }, "deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceResult");
    var deserializeAws_json1_1GetDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AttachmentsContent: output.AttachmentsContent != null ? deserializeAws_json1_1AttachmentContentList(output.AttachmentsContent, context) : void 0,
        Content: (0, smithy_client_1.expectString)(output.Content),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Requires: output.Requires != null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    }, "deserializeAws_json1_1GetDocumentResult");
    var deserializeAws_json1_1GetInventoryResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Entities: output.Entities != null ? deserializeAws_json1_1InventoryResultEntityList(output.Entities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1GetInventoryResult");
    var deserializeAws_json1_1GetInventorySchemaResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Schemas: output.Schemas != null ? deserializeAws_json1_1InventoryItemSchemaResultList(output.Schemas, context) : void 0
      };
    }, "deserializeAws_json1_1GetInventorySchemaResult");
    var deserializeAws_json1_1GetMaintenanceWindowExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskIds: output.TaskIds != null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskIdList(output.TaskIds, context) : void 0,
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionResult");
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationResult = /* @__PURE__ */ __name((output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        InvocationId: (0, smithy_client_1.expectString)(output.InvocationId),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Parameters: (0, smithy_client_1.expectString)(output.Parameters),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationResult");
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParametersList(output.TaskParameters, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0,
        Type: (0, smithy_client_1.expectString)(output.Type),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    }, "deserializeAws_json1_1GetMaintenanceWindowExecutionTaskResult");
    var deserializeAws_json1_1GetMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AllowUnassociatedTargets: (0, smithy_client_1.expectBoolean)(output.AllowUnassociatedTargets),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        ModifiedDate: output.ModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextExecutionTime: (0, smithy_client_1.expectString)(output.NextExecutionTime),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1GetMaintenanceWindowResult");
    var deserializeAws_json1_1GetMaintenanceWindowTaskResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo != null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskInvocationParameters: output.TaskInvocationParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters(output.TaskInvocationParameters, context) : void 0,
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    }, "deserializeAws_json1_1GetMaintenanceWindowTaskResult");
    var deserializeAws_json1_1GetOpsItemResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        OpsItem: output.OpsItem != null ? deserializeAws_json1_1OpsItem(output.OpsItem, context) : void 0
      };
    }, "deserializeAws_json1_1GetOpsItemResponse");
    var deserializeAws_json1_1GetOpsMetadataResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Metadata: output.Metadata != null ? deserializeAws_json1_1MetadataMap(output.Metadata, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId)
      };
    }, "deserializeAws_json1_1GetOpsMetadataResult");
    var deserializeAws_json1_1GetOpsSummaryResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Entities: output.Entities != null ? deserializeAws_json1_1OpsEntityList(output.Entities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1GetOpsSummaryResult");
    var deserializeAws_json1_1GetParameterHistoryResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterHistoryList(output.Parameters, context) : void 0
      };
    }, "deserializeAws_json1_1GetParameterHistoryResult");
    var deserializeAws_json1_1GetParameterResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Parameter: output.Parameter != null ? deserializeAws_json1_1Parameter(output.Parameter, context) : void 0
      };
    }, "deserializeAws_json1_1GetParameterResult");
    var deserializeAws_json1_1GetParametersByPathResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterList(output.Parameters, context) : void 0
      };
    }, "deserializeAws_json1_1GetParametersByPathResult");
    var deserializeAws_json1_1GetParametersResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InvalidParameters: output.InvalidParameters != null ? deserializeAws_json1_1ParameterNameList(output.InvalidParameters, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterList(output.Parameters, context) : void 0
      };
    }, "deserializeAws_json1_1GetParametersResult");
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    }, "deserializeAws_json1_1GetPatchBaselineForPatchGroupResult");
    var deserializeAws_json1_1GetPatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ApprovalRules: output.ApprovalRules != null ? deserializeAws_json1_1PatchRuleGroup(output.ApprovalRules, context) : void 0,
        ApprovedPatches: output.ApprovedPatches != null ? deserializeAws_json1_1PatchIdList(output.ApprovedPatches, context) : void 0,
        ApprovedPatchesComplianceLevel: (0, smithy_client_1.expectString)(output.ApprovedPatchesComplianceLevel),
        ApprovedPatchesEnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.ApprovedPatchesEnableNonSecurity),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        GlobalFilters: output.GlobalFilters != null ? deserializeAws_json1_1PatchFilterGroup(output.GlobalFilters, context) : void 0,
        ModifiedDate: output.ModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        PatchGroups: output.PatchGroups != null ? deserializeAws_json1_1PatchGroupList(output.PatchGroups, context) : void 0,
        RejectedPatches: output.RejectedPatches != null ? deserializeAws_json1_1PatchIdList(output.RejectedPatches, context) : void 0,
        RejectedPatchesAction: (0, smithy_client_1.expectString)(output.RejectedPatchesAction),
        Sources: output.Sources != null ? deserializeAws_json1_1PatchSourceList(output.Sources, context) : void 0
      };
    }, "deserializeAws_json1_1GetPatchBaselineResult");
    var deserializeAws_json1_1GetServiceSettingResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ServiceSetting: output.ServiceSetting != null ? deserializeAws_json1_1ServiceSetting(output.ServiceSetting, context) : void 0
      };
    }, "deserializeAws_json1_1GetServiceSettingResult");
    var deserializeAws_json1_1HierarchyLevelLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1HierarchyLevelLimitExceededException");
    var deserializeAws_json1_1HierarchyTypeMismatchException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1HierarchyTypeMismatchException");
    var deserializeAws_json1_1IdempotentParameterMismatch = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1IdempotentParameterMismatch");
    var deserializeAws_json1_1IncompatiblePolicyException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1IncompatiblePolicyException");
    var deserializeAws_json1_1InstanceAggregatedAssociationOverview = /* @__PURE__ */ __name((output, context) => {
      return {
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        InstanceAssociationStatusAggregatedCount: output.InstanceAssociationStatusAggregatedCount != null ? deserializeAws_json1_1InstanceAssociationStatusAggregatedCount(output.InstanceAssociationStatusAggregatedCount, context) : void 0
      };
    }, "deserializeAws_json1_1InstanceAggregatedAssociationOverview");
    var deserializeAws_json1_1InstanceAssociation = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        Content: (0, smithy_client_1.expectString)(output.Content),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId)
      };
    }, "deserializeAws_json1_1InstanceAssociation");
    var deserializeAws_json1_1InstanceAssociationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceAssociation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InstanceAssociationList");
    var deserializeAws_json1_1InstanceAssociationOutputLocation = /* @__PURE__ */ __name((output, context) => {
      return {
        S3Location: output.S3Location != null ? deserializeAws_json1_1S3OutputLocation(output.S3Location, context) : void 0
      };
    }, "deserializeAws_json1_1InstanceAssociationOutputLocation");
    var deserializeAws_json1_1InstanceAssociationOutputUrl = /* @__PURE__ */ __name((output, context) => {
      return {
        S3OutputUrl: output.S3OutputUrl != null ? deserializeAws_json1_1S3OutputUrl(output.S3OutputUrl, context) : void 0
      };
    }, "deserializeAws_json1_1InstanceAssociationOutputUrl");
    var deserializeAws_json1_1InstanceAssociationStatusAggregatedCount = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectInt32)(value)
        };
      }, {});
    }, "deserializeAws_json1_1InstanceAssociationStatusAggregatedCount");
    var deserializeAws_json1_1InstanceAssociationStatusInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ExecutionDate: output.ExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionDate))) : void 0,
        ExecutionSummary: (0, smithy_client_1.expectString)(output.ExecutionSummary),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputUrl: output.OutputUrl != null ? deserializeAws_json1_1InstanceAssociationOutputUrl(output.OutputUrl, context) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    }, "deserializeAws_json1_1InstanceAssociationStatusInfo");
    var deserializeAws_json1_1InstanceAssociationStatusInfos = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceAssociationStatusInfo(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InstanceAssociationStatusInfos");
    var deserializeAws_json1_1InstanceIdList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1InstanceIdList");
    var deserializeAws_json1_1InstanceInformation = /* @__PURE__ */ __name((output, context) => {
      return {
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId),
        AgentVersion: (0, smithy_client_1.expectString)(output.AgentVersion),
        AssociationOverview: output.AssociationOverview != null ? deserializeAws_json1_1InstanceAggregatedAssociationOverview(output.AssociationOverview, context) : void 0,
        AssociationStatus: (0, smithy_client_1.expectString)(output.AssociationStatus),
        ComputerName: (0, smithy_client_1.expectString)(output.ComputerName),
        IPAddress: (0, smithy_client_1.expectString)(output.IPAddress),
        IamRole: (0, smithy_client_1.expectString)(output.IamRole),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        IsLatestVersion: (0, smithy_client_1.expectBoolean)(output.IsLatestVersion),
        LastAssociationExecutionDate: output.LastAssociationExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAssociationExecutionDate))) : void 0,
        LastPingDateTime: output.LastPingDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastPingDateTime))) : void 0,
        LastSuccessfulAssociationExecutionDate: output.LastSuccessfulAssociationExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulAssociationExecutionDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        PingStatus: (0, smithy_client_1.expectString)(output.PingStatus),
        PlatformName: (0, smithy_client_1.expectString)(output.PlatformName),
        PlatformType: (0, smithy_client_1.expectString)(output.PlatformType),
        PlatformVersion: (0, smithy_client_1.expectString)(output.PlatformVersion),
        RegistrationDate: output.RegistrationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RegistrationDate))) : void 0,
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        SourceId: (0, smithy_client_1.expectString)(output.SourceId),
        SourceType: (0, smithy_client_1.expectString)(output.SourceType)
      };
    }, "deserializeAws_json1_1InstanceInformation");
    var deserializeAws_json1_1InstanceInformationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceInformation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InstanceInformationList");
    var deserializeAws_json1_1InstancePatchState = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CriticalNonCompliantCount: (0, smithy_client_1.expectInt32)(output.CriticalNonCompliantCount),
        FailedCount: (0, smithy_client_1.expectInt32)(output.FailedCount),
        InstallOverrideList: (0, smithy_client_1.expectString)(output.InstallOverrideList),
        InstalledCount: (0, smithy_client_1.expectInt32)(output.InstalledCount),
        InstalledOtherCount: (0, smithy_client_1.expectInt32)(output.InstalledOtherCount),
        InstalledPendingRebootCount: (0, smithy_client_1.expectInt32)(output.InstalledPendingRebootCount),
        InstalledRejectedCount: (0, smithy_client_1.expectInt32)(output.InstalledRejectedCount),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastNoRebootInstallOperationTime: output.LastNoRebootInstallOperationTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastNoRebootInstallOperationTime))) : void 0,
        MissingCount: (0, smithy_client_1.expectInt32)(output.MissingCount),
        NotApplicableCount: (0, smithy_client_1.expectInt32)(output.NotApplicableCount),
        Operation: (0, smithy_client_1.expectString)(output.Operation),
        OperationEndTime: output.OperationEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OperationEndTime))) : void 0,
        OperationStartTime: output.OperationStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OperationStartTime))) : void 0,
        OtherNonCompliantCount: (0, smithy_client_1.expectInt32)(output.OtherNonCompliantCount),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup),
        RebootOption: (0, smithy_client_1.expectString)(output.RebootOption),
        SecurityNonCompliantCount: (0, smithy_client_1.expectInt32)(output.SecurityNonCompliantCount),
        SnapshotId: (0, smithy_client_1.expectString)(output.SnapshotId),
        UnreportedNotApplicableCount: (0, smithy_client_1.expectInt32)(output.UnreportedNotApplicableCount)
      };
    }, "deserializeAws_json1_1InstancePatchState");
    var deserializeAws_json1_1InstancePatchStateList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstancePatchState(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InstancePatchStateList");
    var deserializeAws_json1_1InstancePatchStatesList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstancePatchState(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InstancePatchStatesList");
    var deserializeAws_json1_1InternalServerError = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InternalServerError");
    var deserializeAws_json1_1InvalidActivation = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidActivation");
    var deserializeAws_json1_1InvalidActivationId = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidActivationId");
    var deserializeAws_json1_1InvalidAggregatorException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidAggregatorException");
    var deserializeAws_json1_1InvalidAllowedPatternException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1InvalidAllowedPatternException");
    var deserializeAws_json1_1InvalidAssociation = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidAssociation");
    var deserializeAws_json1_1InvalidAssociationVersion = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidAssociationVersion");
    var deserializeAws_json1_1InvalidAutomationExecutionParametersException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidAutomationExecutionParametersException");
    var deserializeAws_json1_1InvalidAutomationSignalException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidAutomationSignalException");
    var deserializeAws_json1_1InvalidAutomationStatusUpdateException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidAutomationStatusUpdateException");
    var deserializeAws_json1_1InvalidCommandId = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvalidCommandId");
    var deserializeAws_json1_1InvalidDeleteInventoryParametersException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDeleteInventoryParametersException");
    var deserializeAws_json1_1InvalidDeletionIdException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDeletionIdException");
    var deserializeAws_json1_1InvalidDocument = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDocument");
    var deserializeAws_json1_1InvalidDocumentContent = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDocumentContent");
    var deserializeAws_json1_1InvalidDocumentOperation = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDocumentOperation");
    var deserializeAws_json1_1InvalidDocumentSchemaVersion = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDocumentSchemaVersion");
    var deserializeAws_json1_1InvalidDocumentType = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDocumentType");
    var deserializeAws_json1_1InvalidDocumentVersion = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidDocumentVersion");
    var deserializeAws_json1_1InvalidFilter = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidFilter");
    var deserializeAws_json1_1InvalidFilterKey = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvalidFilterKey");
    var deserializeAws_json1_1InvalidFilterOption = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1InvalidFilterOption");
    var deserializeAws_json1_1InvalidFilterValue = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidFilterValue");
    var deserializeAws_json1_1InvalidInstanceId = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidInstanceId");
    var deserializeAws_json1_1InvalidInstanceInformationFilterValue = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1InvalidInstanceInformationFilterValue");
    var deserializeAws_json1_1InvalidInventoryGroupException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidInventoryGroupException");
    var deserializeAws_json1_1InvalidInventoryItemContextException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidInventoryItemContextException");
    var deserializeAws_json1_1InvalidInventoryRequestException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidInventoryRequestException");
    var deserializeAws_json1_1InvalidItemContentException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1InvalidItemContentException");
    var deserializeAws_json1_1InvalidKeyId = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1InvalidKeyId");
    var deserializeAws_json1_1InvalidNextToken = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidNextToken");
    var deserializeAws_json1_1InvalidNotificationConfig = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidNotificationConfig");
    var deserializeAws_json1_1InvalidOptionException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidOptionException");
    var deserializeAws_json1_1InvalidOutputFolder = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvalidOutputFolder");
    var deserializeAws_json1_1InvalidOutputLocation = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvalidOutputLocation");
    var deserializeAws_json1_1InvalidParameters = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidParameters");
    var deserializeAws_json1_1InvalidPermissionType = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidPermissionType");
    var deserializeAws_json1_1InvalidPluginName = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvalidPluginName");
    var deserializeAws_json1_1InvalidPolicyAttributeException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1InvalidPolicyAttributeException");
    var deserializeAws_json1_1InvalidPolicyTypeException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1InvalidPolicyTypeException");
    var deserializeAws_json1_1InvalidResourceId = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvalidResourceId");
    var deserializeAws_json1_1InvalidResourceType = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvalidResourceType");
    var deserializeAws_json1_1InvalidResultAttributeException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidResultAttributeException");
    var deserializeAws_json1_1InvalidRole = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidRole");
    var deserializeAws_json1_1InvalidSchedule = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidSchedule");
    var deserializeAws_json1_1InvalidTag = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidTag");
    var deserializeAws_json1_1InvalidTarget = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidTarget");
    var deserializeAws_json1_1InvalidTargetMaps = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidTargetMaps");
    var deserializeAws_json1_1InvalidTypeNameException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidTypeNameException");
    var deserializeAws_json1_1InvalidUpdate = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1InvalidUpdate");
    var deserializeAws_json1_1InventoryDeletionsList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryDeletionStatusItem(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InventoryDeletionsList");
    var deserializeAws_json1_1InventoryDeletionStatusItem = /* @__PURE__ */ __name((output, context) => {
      return {
        DeletionId: (0, smithy_client_1.expectString)(output.DeletionId),
        DeletionStartTime: output.DeletionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletionStartTime))) : void 0,
        DeletionSummary: output.DeletionSummary != null ? deserializeAws_json1_1InventoryDeletionSummary(output.DeletionSummary, context) : void 0,
        LastStatus: (0, smithy_client_1.expectString)(output.LastStatus),
        LastStatusMessage: (0, smithy_client_1.expectString)(output.LastStatusMessage),
        LastStatusUpdateTime: output.LastStatusUpdateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastStatusUpdateTime))) : void 0,
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1InventoryDeletionStatusItem");
    var deserializeAws_json1_1InventoryDeletionSummary = /* @__PURE__ */ __name((output, context) => {
      return {
        RemainingCount: (0, smithy_client_1.expectInt32)(output.RemainingCount),
        SummaryItems: output.SummaryItems != null ? deserializeAws_json1_1InventoryDeletionSummaryItems(output.SummaryItems, context) : void 0,
        TotalCount: (0, smithy_client_1.expectInt32)(output.TotalCount)
      };
    }, "deserializeAws_json1_1InventoryDeletionSummary");
    var deserializeAws_json1_1InventoryDeletionSummaryItem = /* @__PURE__ */ __name((output, context) => {
      return {
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        RemainingCount: (0, smithy_client_1.expectInt32)(output.RemainingCount),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    }, "deserializeAws_json1_1InventoryDeletionSummaryItem");
    var deserializeAws_json1_1InventoryDeletionSummaryItems = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryDeletionSummaryItem(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InventoryDeletionSummaryItems");
    var deserializeAws_json1_1InventoryItemAttribute = /* @__PURE__ */ __name((output, context) => {
      return {
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    }, "deserializeAws_json1_1InventoryItemAttribute");
    var deserializeAws_json1_1InventoryItemAttributeList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemAttribute(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InventoryItemAttributeList");
    var deserializeAws_json1_1InventoryItemEntry = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    }, "deserializeAws_json1_1InventoryItemEntry");
    var deserializeAws_json1_1InventoryItemEntryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemEntry(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InventoryItemEntryList");
    var deserializeAws_json1_1InventoryItemSchema = /* @__PURE__ */ __name((output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1InventoryItemAttributeList(output.Attributes, context) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    }, "deserializeAws_json1_1InventoryItemSchema");
    var deserializeAws_json1_1InventoryItemSchemaResultList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemSchema(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InventoryItemSchemaResultList");
    var deserializeAws_json1_1InventoryResultEntity = /* @__PURE__ */ __name((output, context) => {
      return {
        Data: output.Data != null ? deserializeAws_json1_1InventoryResultItemMap(output.Data, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id)
      };
    }, "deserializeAws_json1_1InventoryResultEntity");
    var deserializeAws_json1_1InventoryResultEntityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryResultEntity(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1InventoryResultEntityList");
    var deserializeAws_json1_1InventoryResultItem = /* @__PURE__ */ __name((output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Content: output.Content != null ? deserializeAws_json1_1InventoryItemEntryList(output.Content, context) : void 0,
        ContentHash: (0, smithy_client_1.expectString)(output.ContentHash),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1InventoryResultItem");
    var deserializeAws_json1_1InventoryResultItemMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1InventoryResultItem(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1InventoryResultItemMap");
    var deserializeAws_json1_1InvocationDoesNotExist = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1InvocationDoesNotExist");
    var deserializeAws_json1_1ItemContentMismatchException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1ItemContentMismatchException");
    var deserializeAws_json1_1ItemSizeLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1ItemSizeLimitExceededException");
    var deserializeAws_json1_1LabelParameterVersionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InvalidLabels: output.InvalidLabels != null ? deserializeAws_json1_1ParameterLabelList(output.InvalidLabels, context) : void 0,
        ParameterVersion: (0, smithy_client_1.expectLong)(output.ParameterVersion)
      };
    }, "deserializeAws_json1_1LabelParameterVersionResult");
    var deserializeAws_json1_1ListAssociationsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Associations: output.Associations != null ? deserializeAws_json1_1AssociationList(output.Associations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListAssociationsResult");
    var deserializeAws_json1_1ListAssociationVersionsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationVersions: output.AssociationVersions != null ? deserializeAws_json1_1AssociationVersionList(output.AssociationVersions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListAssociationVersionsResult");
    var deserializeAws_json1_1ListCommandInvocationsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        CommandInvocations: output.CommandInvocations != null ? deserializeAws_json1_1CommandInvocationList(output.CommandInvocations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListCommandInvocationsResult");
    var deserializeAws_json1_1ListCommandsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Commands: output.Commands != null ? deserializeAws_json1_1CommandList(output.Commands, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListCommandsResult");
    var deserializeAws_json1_1ListComplianceItemsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ComplianceItems: output.ComplianceItems != null ? deserializeAws_json1_1ComplianceItemList(output.ComplianceItems, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListComplianceItemsResult");
    var deserializeAws_json1_1ListComplianceSummariesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ComplianceSummaryItems: output.ComplianceSummaryItems != null ? deserializeAws_json1_1ComplianceSummaryItemList(output.ComplianceSummaryItems, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListComplianceSummariesResult");
    var deserializeAws_json1_1ListDocumentMetadataHistoryResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        Author: (0, smithy_client_1.expectString)(output.Author),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Metadata: output.Metadata != null ? deserializeAws_json1_1DocumentMetadataResponseInfo(output.Metadata, context) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListDocumentMetadataHistoryResponse");
    var deserializeAws_json1_1ListDocumentsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        DocumentIdentifiers: output.DocumentIdentifiers != null ? deserializeAws_json1_1DocumentIdentifierList(output.DocumentIdentifiers, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListDocumentsResult");
    var deserializeAws_json1_1ListDocumentVersionsResult = /* @__PURE__ */ __name((output, context) => {
      return {
        DocumentVersions: output.DocumentVersions != null ? deserializeAws_json1_1DocumentVersionList(output.DocumentVersions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    }, "deserializeAws_json1_1ListDocumentVersionsResult");
    var deserializeAws_json1_1ListInventoryEntriesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Entries: output.Entries != null ? deserializeAws_json1_1InventoryItemEntryList(output.Entries, context) : void 0,
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1ListInventoryEntriesResult");
    var deserializeAws_json1_1ListOpsItemEventsResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Summaries: output.Summaries != null ? deserializeAws_json1_1OpsItemEventSummaries(output.Summaries, context) : void 0
      };
    }, "deserializeAws_json1_1ListOpsItemEventsResponse");
    var deserializeAws_json1_1ListOpsItemRelatedItemsResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Summaries: output.Summaries != null ? deserializeAws_json1_1OpsItemRelatedItemSummaries(output.Summaries, context) : void 0
      };
    }, "deserializeAws_json1_1ListOpsItemRelatedItemsResponse");
    var deserializeAws_json1_1ListOpsMetadataResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OpsMetadataList: output.OpsMetadataList != null ? deserializeAws_json1_1OpsMetadataList(output.OpsMetadataList, context) : void 0
      };
    }, "deserializeAws_json1_1ListOpsMetadataResult");
    var deserializeAws_json1_1ListResourceComplianceSummariesResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceComplianceSummaryItems: output.ResourceComplianceSummaryItems != null ? deserializeAws_json1_1ResourceComplianceSummaryItemList(output.ResourceComplianceSummaryItems, context) : void 0
      };
    }, "deserializeAws_json1_1ListResourceComplianceSummariesResult");
    var deserializeAws_json1_1ListResourceDataSyncResult = /* @__PURE__ */ __name((output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceDataSyncItems: output.ResourceDataSyncItems != null ? deserializeAws_json1_1ResourceDataSyncItemList(output.ResourceDataSyncItems, context) : void 0
      };
    }, "deserializeAws_json1_1ListResourceDataSyncResult");
    var deserializeAws_json1_1ListTagsForResourceResult = /* @__PURE__ */ __name((output, context) => {
      return {
        TagList: output.TagList != null ? deserializeAws_json1_1TagList(output.TagList, context) : void 0
      };
    }, "deserializeAws_json1_1ListTagsForResourceResult");
    var deserializeAws_json1_1LoggingInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        S3BucketName: (0, smithy_client_1.expectString)(output.S3BucketName),
        S3KeyPrefix: (0, smithy_client_1.expectString)(output.S3KeyPrefix),
        S3Region: (0, smithy_client_1.expectString)(output.S3Region)
      };
    }, "deserializeAws_json1_1LoggingInfo");
    var deserializeAws_json1_1MaintenanceWindowAutomationParameters = /* @__PURE__ */ __name((output, context) => {
      return {
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Parameters: output.Parameters != null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0
      };
    }, "deserializeAws_json1_1MaintenanceWindowAutomationParameters");
    var deserializeAws_json1_1MaintenanceWindowExecution = /* @__PURE__ */ __name((output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1MaintenanceWindowExecution");
    var deserializeAws_json1_1MaintenanceWindowExecutionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecution(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowExecutionList");
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentity = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0,
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    }, "deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentity");
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentity(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentityList");
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowExecutionTaskIdList");
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentity = /* @__PURE__ */ __name((output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        InvocationId: (0, smithy_client_1.expectString)(output.InvocationId),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Parameters: (0, smithy_client_1.expectString)(output.Parameters),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    }, "deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentity");
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentityList");
    var deserializeAws_json1_1MaintenanceWindowIdentity = /* @__PURE__ */ __name((output, context) => {
      return {
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextExecutionTime: (0, smithy_client_1.expectString)(output.NextExecutionTime),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1MaintenanceWindowIdentity");
    var deserializeAws_json1_1MaintenanceWindowIdentityForTarget = /* @__PURE__ */ __name((output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1MaintenanceWindowIdentityForTarget");
    var deserializeAws_json1_1MaintenanceWindowIdentityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowIdentity(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowIdentityList");
    var deserializeAws_json1_1MaintenanceWindowLambdaParameters = /* @__PURE__ */ __name((output, context) => {
      return {
        ClientContext: (0, smithy_client_1.expectString)(output.ClientContext),
        Payload: output.Payload != null ? context.base64Decoder(output.Payload) : void 0,
        Qualifier: (0, smithy_client_1.expectString)(output.Qualifier)
      };
    }, "deserializeAws_json1_1MaintenanceWindowLambdaParameters");
    var deserializeAws_json1_1MaintenanceWindowRunCommandParameters = /* @__PURE__ */ __name((output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentHash: (0, smithy_client_1.expectString)(output.DocumentHash),
        DocumentHashType: (0, smithy_client_1.expectString)(output.DocumentHashType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        NotificationConfig: output.NotificationConfig != null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        TimeoutSeconds: (0, smithy_client_1.expectInt32)(output.TimeoutSeconds)
      };
    }, "deserializeAws_json1_1MaintenanceWindowRunCommandParameters");
    var deserializeAws_json1_1MaintenanceWindowsForTargetList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowIdentityForTarget(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowsForTargetList");
    var deserializeAws_json1_1MaintenanceWindowStepFunctionsParameters = /* @__PURE__ */ __name((output, context) => {
      return {
        Input: (0, smithy_client_1.expectString)(output.Input),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    }, "deserializeAws_json1_1MaintenanceWindowStepFunctionsParameters");
    var deserializeAws_json1_1MaintenanceWindowTarget = /* @__PURE__ */ __name((output, context) => {
      return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    }, "deserializeAws_json1_1MaintenanceWindowTarget");
    var deserializeAws_json1_1MaintenanceWindowTargetList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTarget(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowTargetList");
    var deserializeAws_json1_1MaintenanceWindowTask = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo != null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        Type: (0, smithy_client_1.expectString)(output.Type),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    }, "deserializeAws_json1_1MaintenanceWindowTask");
    var deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters = /* @__PURE__ */ __name((output, context) => {
      return {
        Automation: output.Automation != null ? deserializeAws_json1_1MaintenanceWindowAutomationParameters(output.Automation, context) : void 0,
        Lambda: output.Lambda != null ? deserializeAws_json1_1MaintenanceWindowLambdaParameters(output.Lambda, context) : void 0,
        RunCommand: output.RunCommand != null ? deserializeAws_json1_1MaintenanceWindowRunCommandParameters(output.RunCommand, context) : void 0,
        StepFunctions: output.StepFunctions != null ? deserializeAws_json1_1MaintenanceWindowStepFunctionsParameters(output.StepFunctions, context) : void 0
      };
    }, "deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters");
    var deserializeAws_json1_1MaintenanceWindowTaskList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTask(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowTaskList");
    var deserializeAws_json1_1MaintenanceWindowTaskParameters = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1MaintenanceWindowTaskParameterValueExpression(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1MaintenanceWindowTaskParameters");
    var deserializeAws_json1_1MaintenanceWindowTaskParametersList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTaskParameters(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowTaskParametersList");
    var deserializeAws_json1_1MaintenanceWindowTaskParameterValueExpression = /* @__PURE__ */ __name((output, context) => {
      return {
        Values: output.Values != null ? deserializeAws_json1_1MaintenanceWindowTaskParameterValueList(output.Values, context) : void 0
      };
    }, "deserializeAws_json1_1MaintenanceWindowTaskParameterValueExpression");
    var deserializeAws_json1_1MaintenanceWindowTaskParameterValueList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1MaintenanceWindowTaskParameterValueList");
    var deserializeAws_json1_1MaxDocumentSizeExceeded = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1MaxDocumentSizeExceeded");
    var deserializeAws_json1_1MetadataMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1MetadataValue(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1MetadataMap");
    var deserializeAws_json1_1MetadataValue = /* @__PURE__ */ __name((output, context) => {
      return {
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    }, "deserializeAws_json1_1MetadataValue");
    var deserializeAws_json1_1ModifyDocumentPermissionResponse = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1ModifyDocumentPermissionResponse");
    var deserializeAws_json1_1NonCompliantSummary = /* @__PURE__ */ __name((output, context) => {
      return {
        NonCompliantCount: (0, smithy_client_1.expectInt32)(output.NonCompliantCount),
        SeveritySummary: output.SeveritySummary != null ? deserializeAws_json1_1SeveritySummary(output.SeveritySummary, context) : void 0
      };
    }, "deserializeAws_json1_1NonCompliantSummary");
    var deserializeAws_json1_1NormalStringMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    }, "deserializeAws_json1_1NormalStringMap");
    var deserializeAws_json1_1NotificationConfig = /* @__PURE__ */ __name((output, context) => {
      return {
        NotificationArn: (0, smithy_client_1.expectString)(output.NotificationArn),
        NotificationEvents: output.NotificationEvents != null ? deserializeAws_json1_1NotificationEventList(output.NotificationEvents, context) : void 0,
        NotificationType: (0, smithy_client_1.expectString)(output.NotificationType)
      };
    }, "deserializeAws_json1_1NotificationConfig");
    var deserializeAws_json1_1NotificationEventList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1NotificationEventList");
    var deserializeAws_json1_1OpsEntity = /* @__PURE__ */ __name((output, context) => {
      return {
        Data: output.Data != null ? deserializeAws_json1_1OpsEntityItemMap(output.Data, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id)
      };
    }, "deserializeAws_json1_1OpsEntity");
    var deserializeAws_json1_1OpsEntityItem = /* @__PURE__ */ __name((output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Content: output.Content != null ? deserializeAws_json1_1OpsEntityItemEntryList(output.Content, context) : void 0
      };
    }, "deserializeAws_json1_1OpsEntityItem");
    var deserializeAws_json1_1OpsEntityItemEntry = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    }, "deserializeAws_json1_1OpsEntityItemEntry");
    var deserializeAws_json1_1OpsEntityItemEntryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsEntityItemEntry(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsEntityItemEntryList");
    var deserializeAws_json1_1OpsEntityItemMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1OpsEntityItem(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1OpsEntityItemMap");
    var deserializeAws_json1_1OpsEntityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsEntity(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsEntityList");
    var deserializeAws_json1_1OpsItem = /* @__PURE__ */ __name((output, context) => {
      return {
        ActualEndTime: output.ActualEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualEndTime))) : void 0,
        ActualStartTime: output.ActualStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualStartTime))) : void 0,
        Category: (0, smithy_client_1.expectString)(output.Category),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedTime: output.LastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        Notifications: output.Notifications != null ? deserializeAws_json1_1OpsItemNotifications(output.Notifications, context) : void 0,
        OperationalData: output.OperationalData != null ? deserializeAws_json1_1OpsItemOperationalData(output.OperationalData, context) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        OpsItemType: (0, smithy_client_1.expectString)(output.OpsItemType),
        PlannedEndTime: output.PlannedEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedEndTime))) : void 0,
        PlannedStartTime: output.PlannedStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedStartTime))) : void 0,
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        RelatedOpsItems: output.RelatedOpsItems != null ? deserializeAws_json1_1RelatedOpsItems(output.RelatedOpsItems, context) : void 0,
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Source: (0, smithy_client_1.expectString)(output.Source),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    }, "deserializeAws_json1_1OpsItem");
    var deserializeAws_json1_1OpsItemAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    }, "deserializeAws_json1_1OpsItemAlreadyExistsException");
    var deserializeAws_json1_1OpsItemDataValue = /* @__PURE__ */ __name((output, context) => {
      return {
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    }, "deserializeAws_json1_1OpsItemDataValue");
    var deserializeAws_json1_1OpsItemEventSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemEventSummary(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsItemEventSummaries");
    var deserializeAws_json1_1OpsItemEventSummary = /* @__PURE__ */ __name((output, context) => {
      return {
        CreatedBy: output.CreatedBy != null ? deserializeAws_json1_1OpsItemIdentity(output.CreatedBy, context) : void 0,
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        Detail: (0, smithy_client_1.expectString)(output.Detail),
        DetailType: (0, smithy_client_1.expectString)(output.DetailType),
        EventId: (0, smithy_client_1.expectString)(output.EventId),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Source: (0, smithy_client_1.expectString)(output.Source)
      };
    }, "deserializeAws_json1_1OpsItemEventSummary");
    var deserializeAws_json1_1OpsItemIdentity = /* @__PURE__ */ __name((output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn)
      };
    }, "deserializeAws_json1_1OpsItemIdentity");
    var deserializeAws_json1_1OpsItemInvalidParameterException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        ParameterNames: output.ParameterNames != null ? deserializeAws_json1_1OpsItemParameterNamesList(output.ParameterNames, context) : void 0
      };
    }, "deserializeAws_json1_1OpsItemInvalidParameterException");
    var deserializeAws_json1_1OpsItemLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Limit: (0, smithy_client_1.expectInt32)(output.Limit),
        LimitType: (0, smithy_client_1.expectString)(output.LimitType),
        Message: (0, smithy_client_1.expectString)(output.Message),
        ResourceTypes: output.ResourceTypes != null ? deserializeAws_json1_1OpsItemParameterNamesList(output.ResourceTypes, context) : void 0
      };
    }, "deserializeAws_json1_1OpsItemLimitExceededException");
    var deserializeAws_json1_1OpsItemNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1OpsItemNotFoundException");
    var deserializeAws_json1_1OpsItemNotification = /* @__PURE__ */ __name((output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn)
      };
    }, "deserializeAws_json1_1OpsItemNotification");
    var deserializeAws_json1_1OpsItemNotifications = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemNotification(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsItemNotifications");
    var deserializeAws_json1_1OpsItemOperationalData = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1OpsItemDataValue(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1OpsItemOperationalData");
    var deserializeAws_json1_1OpsItemParameterNamesList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsItemParameterNamesList");
    var deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        ResourceUri: (0, smithy_client_1.expectString)(output.ResourceUri)
      };
    }, "deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsException");
    var deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundException");
    var deserializeAws_json1_1OpsItemRelatedItemSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemRelatedItemSummary(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsItemRelatedItemSummaries");
    var deserializeAws_json1_1OpsItemRelatedItemSummary = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationType: (0, smithy_client_1.expectString)(output.AssociationType),
        CreatedBy: output.CreatedBy != null ? deserializeAws_json1_1OpsItemIdentity(output.CreatedBy, context) : void 0,
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        LastModifiedBy: output.LastModifiedBy != null ? deserializeAws_json1_1OpsItemIdentity(output.LastModifiedBy, context) : void 0,
        LastModifiedTime: output.LastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        ResourceUri: (0, smithy_client_1.expectString)(output.ResourceUri)
      };
    }, "deserializeAws_json1_1OpsItemRelatedItemSummary");
    var deserializeAws_json1_1OpsItemSummaries = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemSummary(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsItemSummaries");
    var deserializeAws_json1_1OpsItemSummary = /* @__PURE__ */ __name((output, context) => {
      return {
        ActualEndTime: output.ActualEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualEndTime))) : void 0,
        ActualStartTime: output.ActualStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualStartTime))) : void 0,
        Category: (0, smithy_client_1.expectString)(output.Category),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedTime: output.LastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        OperationalData: output.OperationalData != null ? deserializeAws_json1_1OpsItemOperationalData(output.OperationalData, context) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        OpsItemType: (0, smithy_client_1.expectString)(output.OpsItemType),
        PlannedEndTime: output.PlannedEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedEndTime))) : void 0,
        PlannedStartTime: output.PlannedStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedStartTime))) : void 0,
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Source: (0, smithy_client_1.expectString)(output.Source),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    }, "deserializeAws_json1_1OpsItemSummary");
    var deserializeAws_json1_1OpsMetadata = /* @__PURE__ */ __name((output, context) => {
      return {
        CreationDate: output.CreationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDate))) : void 0,
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId)
      };
    }, "deserializeAws_json1_1OpsMetadata");
    var deserializeAws_json1_1OpsMetadataAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1OpsMetadataAlreadyExistsException");
    var deserializeAws_json1_1OpsMetadataInvalidArgumentException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1OpsMetadataInvalidArgumentException");
    var deserializeAws_json1_1OpsMetadataKeyLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1OpsMetadataKeyLimitExceededException");
    var deserializeAws_json1_1OpsMetadataLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1OpsMetadataLimitExceededException");
    var deserializeAws_json1_1OpsMetadataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsMetadata(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1OpsMetadataList");
    var deserializeAws_json1_1OpsMetadataNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1OpsMetadataNotFoundException");
    var deserializeAws_json1_1OpsMetadataTooManyUpdatesException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1OpsMetadataTooManyUpdatesException");
    var deserializeAws_json1_1OutputSource = /* @__PURE__ */ __name((output, context) => {
      return {
        OutputSourceId: (0, smithy_client_1.expectString)(output.OutputSourceId),
        OutputSourceType: (0, smithy_client_1.expectString)(output.OutputSourceType)
      };
    }, "deserializeAws_json1_1OutputSource");
    var deserializeAws_json1_1Parameter = /* @__PURE__ */ __name((output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Selector: (0, smithy_client_1.expectString)(output.Selector),
        SourceResult: (0, smithy_client_1.expectString)(output.SourceResult),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    }, "deserializeAws_json1_1Parameter");
    var deserializeAws_json1_1ParameterAlreadyExists = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1ParameterAlreadyExists");
    var deserializeAws_json1_1ParameterHistory = /* @__PURE__ */ __name((output, context) => {
      return {
        AllowedPattern: (0, smithy_client_1.expectString)(output.AllowedPattern),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Description: (0, smithy_client_1.expectString)(output.Description),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Labels: output.Labels != null ? deserializeAws_json1_1ParameterLabelList(output.Labels, context) : void 0,
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Policies: output.Policies != null ? deserializeAws_json1_1ParameterPolicyList(output.Policies, context) : void 0,
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    }, "deserializeAws_json1_1ParameterHistory");
    var deserializeAws_json1_1ParameterHistoryList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterHistory(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ParameterHistoryList");
    var deserializeAws_json1_1ParameterInlinePolicy = /* @__PURE__ */ __name((output, context) => {
      return {
        PolicyStatus: (0, smithy_client_1.expectString)(output.PolicyStatus),
        PolicyText: (0, smithy_client_1.expectString)(output.PolicyText),
        PolicyType: (0, smithy_client_1.expectString)(output.PolicyType)
      };
    }, "deserializeAws_json1_1ParameterInlinePolicy");
    var deserializeAws_json1_1ParameterLabelList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1ParameterLabelList");
    var deserializeAws_json1_1ParameterLimitExceeded = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1ParameterLimitExceeded");
    var deserializeAws_json1_1ParameterList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Parameter(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ParameterList");
    var deserializeAws_json1_1ParameterMaxVersionLimitExceeded = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1ParameterMaxVersionLimitExceeded");
    var deserializeAws_json1_1ParameterMetadata = /* @__PURE__ */ __name((output, context) => {
      return {
        AllowedPattern: (0, smithy_client_1.expectString)(output.AllowedPattern),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Description: (0, smithy_client_1.expectString)(output.Description),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Policies: output.Policies != null ? deserializeAws_json1_1ParameterPolicyList(output.Policies, context) : void 0,
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    }, "deserializeAws_json1_1ParameterMetadata");
    var deserializeAws_json1_1ParameterMetadataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterMetadata(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ParameterMetadataList");
    var deserializeAws_json1_1ParameterNameList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1ParameterNameList");
    var deserializeAws_json1_1ParameterNotFound = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1ParameterNotFound");
    var deserializeAws_json1_1ParameterPatternMismatchException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1ParameterPatternMismatchException");
    var deserializeAws_json1_1ParameterPolicyList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterInlinePolicy(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ParameterPolicyList");
    var deserializeAws_json1_1Parameters = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1ParameterValueList(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1Parameters");
    var deserializeAws_json1_1ParameterValueList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1ParameterValueList");
    var deserializeAws_json1_1ParameterVersionLabelLimitExceeded = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1ParameterVersionLabelLimitExceeded");
    var deserializeAws_json1_1ParameterVersionNotFound = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1ParameterVersionNotFound");
    var deserializeAws_json1_1Patch = /* @__PURE__ */ __name((output, context) => {
      return {
        AdvisoryIds: output.AdvisoryIds != null ? deserializeAws_json1_1PatchAdvisoryIdList(output.AdvisoryIds, context) : void 0,
        Arch: (0, smithy_client_1.expectString)(output.Arch),
        BugzillaIds: output.BugzillaIds != null ? deserializeAws_json1_1PatchBugzillaIdList(output.BugzillaIds, context) : void 0,
        CVEIds: output.CVEIds != null ? deserializeAws_json1_1PatchCVEIdList(output.CVEIds, context) : void 0,
        Classification: (0, smithy_client_1.expectString)(output.Classification),
        ContentUrl: (0, smithy_client_1.expectString)(output.ContentUrl),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Epoch: (0, smithy_client_1.expectInt32)(output.Epoch),
        Id: (0, smithy_client_1.expectString)(output.Id),
        KbNumber: (0, smithy_client_1.expectString)(output.KbNumber),
        Language: (0, smithy_client_1.expectString)(output.Language),
        MsrcNumber: (0, smithy_client_1.expectString)(output.MsrcNumber),
        MsrcSeverity: (0, smithy_client_1.expectString)(output.MsrcSeverity),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Product: (0, smithy_client_1.expectString)(output.Product),
        ProductFamily: (0, smithy_client_1.expectString)(output.ProductFamily),
        Release: (0, smithy_client_1.expectString)(output.Release),
        ReleaseDate: output.ReleaseDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReleaseDate))) : void 0,
        Repository: (0, smithy_client_1.expectString)(output.Repository),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Vendor: (0, smithy_client_1.expectString)(output.Vendor),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    }, "deserializeAws_json1_1Patch");
    var deserializeAws_json1_1PatchAdvisoryIdList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchAdvisoryIdList");
    var deserializeAws_json1_1PatchBaselineIdentity = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineDescription: (0, smithy_client_1.expectString)(output.BaselineDescription),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        BaselineName: (0, smithy_client_1.expectString)(output.BaselineName),
        DefaultBaseline: (0, smithy_client_1.expectBoolean)(output.DefaultBaseline),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem)
      };
    }, "deserializeAws_json1_1PatchBaselineIdentity");
    var deserializeAws_json1_1PatchBaselineIdentityList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchBaselineIdentity(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchBaselineIdentityList");
    var deserializeAws_json1_1PatchBugzillaIdList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchBugzillaIdList");
    var deserializeAws_json1_1PatchComplianceData = /* @__PURE__ */ __name((output, context) => {
      return {
        CVEIds: (0, smithy_client_1.expectString)(output.CVEIds),
        Classification: (0, smithy_client_1.expectString)(output.Classification),
        InstalledTime: output.InstalledTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.InstalledTime))) : void 0,
        KBId: (0, smithy_client_1.expectString)(output.KBId),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        State: (0, smithy_client_1.expectString)(output.State),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    }, "deserializeAws_json1_1PatchComplianceData");
    var deserializeAws_json1_1PatchComplianceDataList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchComplianceData(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchComplianceDataList");
    var deserializeAws_json1_1PatchCVEIdList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchCVEIdList");
    var deserializeAws_json1_1PatchFilter = /* @__PURE__ */ __name((output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Values: output.Values != null ? deserializeAws_json1_1PatchFilterValueList(output.Values, context) : void 0
      };
    }, "deserializeAws_json1_1PatchFilter");
    var deserializeAws_json1_1PatchFilterGroup = /* @__PURE__ */ __name((output, context) => {
      return {
        PatchFilters: output.PatchFilters != null ? deserializeAws_json1_1PatchFilterList(output.PatchFilters, context) : void 0
      };
    }, "deserializeAws_json1_1PatchFilterGroup");
    var deserializeAws_json1_1PatchFilterList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchFilter(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchFilterList");
    var deserializeAws_json1_1PatchFilterValueList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchFilterValueList");
    var deserializeAws_json1_1PatchGroupList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchGroupList");
    var deserializeAws_json1_1PatchGroupPatchBaselineMapping = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineIdentity: output.BaselineIdentity != null ? deserializeAws_json1_1PatchBaselineIdentity(output.BaselineIdentity, context) : void 0,
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    }, "deserializeAws_json1_1PatchGroupPatchBaselineMapping");
    var deserializeAws_json1_1PatchGroupPatchBaselineMappingList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchGroupPatchBaselineMapping(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchGroupPatchBaselineMappingList");
    var deserializeAws_json1_1PatchIdList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchIdList");
    var deserializeAws_json1_1PatchList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Patch(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchList");
    var deserializeAws_json1_1PatchPropertiesList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchPropertyEntry(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchPropertiesList");
    var deserializeAws_json1_1PatchPropertyEntry = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    }, "deserializeAws_json1_1PatchPropertyEntry");
    var deserializeAws_json1_1PatchRule = /* @__PURE__ */ __name((output, context) => {
      return {
        ApproveAfterDays: (0, smithy_client_1.expectInt32)(output.ApproveAfterDays),
        ApproveUntilDate: (0, smithy_client_1.expectString)(output.ApproveUntilDate),
        ComplianceLevel: (0, smithy_client_1.expectString)(output.ComplianceLevel),
        EnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.EnableNonSecurity),
        PatchFilterGroup: output.PatchFilterGroup != null ? deserializeAws_json1_1PatchFilterGroup(output.PatchFilterGroup, context) : void 0
      };
    }, "deserializeAws_json1_1PatchRule");
    var deserializeAws_json1_1PatchRuleGroup = /* @__PURE__ */ __name((output, context) => {
      return {
        PatchRules: output.PatchRules != null ? deserializeAws_json1_1PatchRuleList(output.PatchRules, context) : void 0
      };
    }, "deserializeAws_json1_1PatchRuleGroup");
    var deserializeAws_json1_1PatchRuleList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchRule(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchRuleList");
    var deserializeAws_json1_1PatchSource = /* @__PURE__ */ __name((output, context) => {
      return {
        Configuration: (0, smithy_client_1.expectString)(output.Configuration),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Products: output.Products != null ? deserializeAws_json1_1PatchSourceProductList(output.Products, context) : void 0
      };
    }, "deserializeAws_json1_1PatchSource");
    var deserializeAws_json1_1PatchSourceList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchSource(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchSourceList");
    var deserializeAws_json1_1PatchSourceProductList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PatchSourceProductList");
    var deserializeAws_json1_1PatchStatus = /* @__PURE__ */ __name((output, context) => {
      return {
        ApprovalDate: output.ApprovalDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ApprovalDate))) : void 0,
        ComplianceLevel: (0, smithy_client_1.expectString)(output.ComplianceLevel),
        DeploymentStatus: (0, smithy_client_1.expectString)(output.DeploymentStatus)
      };
    }, "deserializeAws_json1_1PatchStatus");
    var deserializeAws_json1_1PlatformTypeList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1PlatformTypeList");
    var deserializeAws_json1_1PoliciesLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1PoliciesLimitExceededException");
    var deserializeAws_json1_1ProgressCounters = /* @__PURE__ */ __name((output, context) => {
      return {
        CancelledSteps: (0, smithy_client_1.expectInt32)(output.CancelledSteps),
        FailedSteps: (0, smithy_client_1.expectInt32)(output.FailedSteps),
        SuccessSteps: (0, smithy_client_1.expectInt32)(output.SuccessSteps),
        TimedOutSteps: (0, smithy_client_1.expectInt32)(output.TimedOutSteps),
        TotalSteps: (0, smithy_client_1.expectInt32)(output.TotalSteps)
      };
    }, "deserializeAws_json1_1ProgressCounters");
    var deserializeAws_json1_1PutComplianceItemsResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1PutComplianceItemsResult");
    var deserializeAws_json1_1PutInventoryResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1PutInventoryResult");
    var deserializeAws_json1_1PutParameterResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    }, "deserializeAws_json1_1PutParameterResult");
    var deserializeAws_json1_1Regions = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1Regions");
    var deserializeAws_json1_1RegisterDefaultPatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    }, "deserializeAws_json1_1RegisterDefaultPatchBaselineResult");
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupResult = /* @__PURE__ */ __name((output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    }, "deserializeAws_json1_1RegisterPatchBaselineForPatchGroupResult");
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    }, "deserializeAws_json1_1RegisterTargetWithMaintenanceWindowResult");
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    }, "deserializeAws_json1_1RegisterTaskWithMaintenanceWindowResult");
    var deserializeAws_json1_1RelatedOpsItem = /* @__PURE__ */ __name((output, context) => {
      return {
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    }, "deserializeAws_json1_1RelatedOpsItem");
    var deserializeAws_json1_1RelatedOpsItems = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1RelatedOpsItem(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1RelatedOpsItems");
    var deserializeAws_json1_1RemoveTagsFromResourceResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1RemoveTagsFromResourceResult");
    var deserializeAws_json1_1ResetServiceSettingResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ServiceSetting: output.ServiceSetting != null ? deserializeAws_json1_1ServiceSetting(output.ServiceSetting, context) : void 0
      };
    }, "deserializeAws_json1_1ResetServiceSettingResult");
    var deserializeAws_json1_1ResolvedTargets = /* @__PURE__ */ __name((output, context) => {
      return {
        ParameterValues: output.ParameterValues != null ? deserializeAws_json1_1TargetParameterList(output.ParameterValues, context) : void 0,
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    }, "deserializeAws_json1_1ResolvedTargets");
    var deserializeAws_json1_1ResourceComplianceSummaryItem = /* @__PURE__ */ __name((output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        CompliantSummary: output.CompliantSummary != null ? deserializeAws_json1_1CompliantSummary(output.CompliantSummary, context) : void 0,
        ExecutionSummary: output.ExecutionSummary != null ? deserializeAws_json1_1ComplianceExecutionSummary(output.ExecutionSummary, context) : void 0,
        NonCompliantSummary: output.NonCompliantSummary != null ? deserializeAws_json1_1NonCompliantSummary(output.NonCompliantSummary, context) : void 0,
        OverallSeverity: (0, smithy_client_1.expectString)(output.OverallSeverity),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    }, "deserializeAws_json1_1ResourceComplianceSummaryItem");
    var deserializeAws_json1_1ResourceComplianceSummaryItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceComplianceSummaryItem(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ResourceComplianceSummaryItemList");
    var deserializeAws_json1_1ResourceDataSyncAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      return {
        SyncName: (0, smithy_client_1.expectString)(output.SyncName)
      };
    }, "deserializeAws_json1_1ResourceDataSyncAlreadyExistsException");
    var deserializeAws_json1_1ResourceDataSyncAwsOrganizationsSource = /* @__PURE__ */ __name((output, context) => {
      return {
        OrganizationSourceType: (0, smithy_client_1.expectString)(output.OrganizationSourceType),
        OrganizationalUnits: output.OrganizationalUnits != null ? deserializeAws_json1_1ResourceDataSyncOrganizationalUnitList(output.OrganizationalUnits, context) : void 0
      };
    }, "deserializeAws_json1_1ResourceDataSyncAwsOrganizationsSource");
    var deserializeAws_json1_1ResourceDataSyncConflictException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1ResourceDataSyncConflictException");
    var deserializeAws_json1_1ResourceDataSyncCountExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1ResourceDataSyncCountExceededException");
    var deserializeAws_json1_1ResourceDataSyncDestinationDataSharing = /* @__PURE__ */ __name((output, context) => {
      return {
        DestinationDataSharingType: (0, smithy_client_1.expectString)(output.DestinationDataSharingType)
      };
    }, "deserializeAws_json1_1ResourceDataSyncDestinationDataSharing");
    var deserializeAws_json1_1ResourceDataSyncInvalidConfigurationException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1ResourceDataSyncInvalidConfigurationException");
    var deserializeAws_json1_1ResourceDataSyncItem = /* @__PURE__ */ __name((output, context) => {
      return {
        LastStatus: (0, smithy_client_1.expectString)(output.LastStatus),
        LastSuccessfulSyncTime: output.LastSuccessfulSyncTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulSyncTime))) : void 0,
        LastSyncStatusMessage: (0, smithy_client_1.expectString)(output.LastSyncStatusMessage),
        LastSyncTime: output.LastSyncTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSyncTime))) : void 0,
        S3Destination: output.S3Destination != null ? deserializeAws_json1_1ResourceDataSyncS3Destination(output.S3Destination, context) : void 0,
        SyncCreatedTime: output.SyncCreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SyncCreatedTime))) : void 0,
        SyncLastModifiedTime: output.SyncLastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SyncLastModifiedTime))) : void 0,
        SyncName: (0, smithy_client_1.expectString)(output.SyncName),
        SyncSource: output.SyncSource != null ? deserializeAws_json1_1ResourceDataSyncSourceWithState(output.SyncSource, context) : void 0,
        SyncType: (0, smithy_client_1.expectString)(output.SyncType)
      };
    }, "deserializeAws_json1_1ResourceDataSyncItem");
    var deserializeAws_json1_1ResourceDataSyncItemList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceDataSyncItem(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ResourceDataSyncItemList");
    var deserializeAws_json1_1ResourceDataSyncNotFoundException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        SyncName: (0, smithy_client_1.expectString)(output.SyncName),
        SyncType: (0, smithy_client_1.expectString)(output.SyncType)
      };
    }, "deserializeAws_json1_1ResourceDataSyncNotFoundException");
    var deserializeAws_json1_1ResourceDataSyncOrganizationalUnit = /* @__PURE__ */ __name((output, context) => {
      return {
        OrganizationalUnitId: (0, smithy_client_1.expectString)(output.OrganizationalUnitId)
      };
    }, "deserializeAws_json1_1ResourceDataSyncOrganizationalUnit");
    var deserializeAws_json1_1ResourceDataSyncOrganizationalUnitList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceDataSyncOrganizationalUnit(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ResourceDataSyncOrganizationalUnitList");
    var deserializeAws_json1_1ResourceDataSyncS3Destination = /* @__PURE__ */ __name((output, context) => {
      return {
        AWSKMSKeyARN: (0, smithy_client_1.expectString)(output.AWSKMSKeyARN),
        BucketName: (0, smithy_client_1.expectString)(output.BucketName),
        DestinationDataSharing: output.DestinationDataSharing != null ? deserializeAws_json1_1ResourceDataSyncDestinationDataSharing(output.DestinationDataSharing, context) : void 0,
        Prefix: (0, smithy_client_1.expectString)(output.Prefix),
        Region: (0, smithy_client_1.expectString)(output.Region),
        SyncFormat: (0, smithy_client_1.expectString)(output.SyncFormat)
      };
    }, "deserializeAws_json1_1ResourceDataSyncS3Destination");
    var deserializeAws_json1_1ResourceDataSyncSourceRegionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1ResourceDataSyncSourceRegionList");
    var deserializeAws_json1_1ResourceDataSyncSourceWithState = /* @__PURE__ */ __name((output, context) => {
      return {
        AwsOrganizationsSource: output.AwsOrganizationsSource != null ? deserializeAws_json1_1ResourceDataSyncAwsOrganizationsSource(output.AwsOrganizationsSource, context) : void 0,
        EnableAllOpsDataSources: (0, smithy_client_1.expectBoolean)(output.EnableAllOpsDataSources),
        IncludeFutureRegions: (0, smithy_client_1.expectBoolean)(output.IncludeFutureRegions),
        SourceRegions: output.SourceRegions != null ? deserializeAws_json1_1ResourceDataSyncSourceRegionList(output.SourceRegions, context) : void 0,
        SourceType: (0, smithy_client_1.expectString)(output.SourceType),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    }, "deserializeAws_json1_1ResourceDataSyncSourceWithState");
    var deserializeAws_json1_1ResourceInUseException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1ResourceInUseException");
    var deserializeAws_json1_1ResourceLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1ResourceLimitExceededException");
    var deserializeAws_json1_1ResumeSessionResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StreamUrl: (0, smithy_client_1.expectString)(output.StreamUrl),
        TokenValue: (0, smithy_client_1.expectString)(output.TokenValue)
      };
    }, "deserializeAws_json1_1ResumeSessionResponse");
    var deserializeAws_json1_1ReviewInformation = /* @__PURE__ */ __name((output, context) => {
      return {
        ReviewedTime: output.ReviewedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReviewedTime))) : void 0,
        Reviewer: (0, smithy_client_1.expectString)(output.Reviewer),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    }, "deserializeAws_json1_1ReviewInformation");
    var deserializeAws_json1_1ReviewInformationList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ReviewInformation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ReviewInformationList");
    var deserializeAws_json1_1Runbook = /* @__PURE__ */ __name((output, context) => {
      return {
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Parameters: output.Parameters != null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0,
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    }, "deserializeAws_json1_1Runbook");
    var deserializeAws_json1_1Runbooks = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Runbook(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1Runbooks");
    var deserializeAws_json1_1S3OutputLocation = /* @__PURE__ */ __name((output, context) => {
      return {
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region)
      };
    }, "deserializeAws_json1_1S3OutputLocation");
    var deserializeAws_json1_1S3OutputUrl = /* @__PURE__ */ __name((output, context) => {
      return {
        OutputUrl: (0, smithy_client_1.expectString)(output.OutputUrl)
      };
    }, "deserializeAws_json1_1S3OutputUrl");
    var deserializeAws_json1_1ScheduledWindowExecution = /* @__PURE__ */ __name((output, context) => {
      return {
        ExecutionTime: (0, smithy_client_1.expectString)(output.ExecutionTime),
        Name: (0, smithy_client_1.expectString)(output.Name),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1ScheduledWindowExecution");
    var deserializeAws_json1_1ScheduledWindowExecutionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ScheduledWindowExecution(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1ScheduledWindowExecutionList");
    var deserializeAws_json1_1SendAutomationSignalResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1SendAutomationSignalResult");
    var deserializeAws_json1_1SendCommandResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Command: output.Command != null ? deserializeAws_json1_1Command(output.Command, context) : void 0
      };
    }, "deserializeAws_json1_1SendCommandResult");
    var deserializeAws_json1_1ServiceSetting = /* @__PURE__ */ __name((output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        SettingId: (0, smithy_client_1.expectString)(output.SettingId),
        SettingValue: (0, smithy_client_1.expectString)(output.SettingValue),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    }, "deserializeAws_json1_1ServiceSetting");
    var deserializeAws_json1_1ServiceSettingNotFound = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1ServiceSettingNotFound");
    var deserializeAws_json1_1Session = /* @__PURE__ */ __name((output, context) => {
      return {
        Details: (0, smithy_client_1.expectString)(output.Details),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        EndDate: output.EndDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndDate))) : void 0,
        MaxSessionDuration: (0, smithy_client_1.expectString)(output.MaxSessionDuration),
        OutputUrl: output.OutputUrl != null ? deserializeAws_json1_1SessionManagerOutputUrl(output.OutputUrl, context) : void 0,
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        Reason: (0, smithy_client_1.expectString)(output.Reason),
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StartDate: output.StartDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartDate))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        Target: (0, smithy_client_1.expectString)(output.Target)
      };
    }, "deserializeAws_json1_1Session");
    var deserializeAws_json1_1SessionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Session(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1SessionList");
    var deserializeAws_json1_1SessionManagerOutputUrl = /* @__PURE__ */ __name((output, context) => {
      return {
        CloudWatchOutputUrl: (0, smithy_client_1.expectString)(output.CloudWatchOutputUrl),
        S3OutputUrl: (0, smithy_client_1.expectString)(output.S3OutputUrl)
      };
    }, "deserializeAws_json1_1SessionManagerOutputUrl");
    var deserializeAws_json1_1SeveritySummary = /* @__PURE__ */ __name((output, context) => {
      return {
        CriticalCount: (0, smithy_client_1.expectInt32)(output.CriticalCount),
        HighCount: (0, smithy_client_1.expectInt32)(output.HighCount),
        InformationalCount: (0, smithy_client_1.expectInt32)(output.InformationalCount),
        LowCount: (0, smithy_client_1.expectInt32)(output.LowCount),
        MediumCount: (0, smithy_client_1.expectInt32)(output.MediumCount),
        UnspecifiedCount: (0, smithy_client_1.expectInt32)(output.UnspecifiedCount)
      };
    }, "deserializeAws_json1_1SeveritySummary");
    var deserializeAws_json1_1StartAssociationsOnceResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1StartAssociationsOnceResult");
    var deserializeAws_json1_1StartAutomationExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId)
      };
    }, "deserializeAws_json1_1StartAutomationExecutionResult");
    var deserializeAws_json1_1StartChangeRequestExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId)
      };
    }, "deserializeAws_json1_1StartChangeRequestExecutionResult");
    var deserializeAws_json1_1StartSessionResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StreamUrl: (0, smithy_client_1.expectString)(output.StreamUrl),
        TokenValue: (0, smithy_client_1.expectString)(output.TokenValue)
      };
    }, "deserializeAws_json1_1StartSessionResponse");
    var deserializeAws_json1_1StatusUnchanged = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1StatusUnchanged");
    var deserializeAws_json1_1StepExecution = /* @__PURE__ */ __name((output, context) => {
      return {
        Action: (0, smithy_client_1.expectString)(output.Action),
        ExecutionEndTime: output.ExecutionEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureDetails: output.FailureDetails != null ? deserializeAws_json1_1FailureDetails(output.FailureDetails, context) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        Inputs: output.Inputs != null ? deserializeAws_json1_1NormalStringMap(output.Inputs, context) : void 0,
        IsCritical: (0, smithy_client_1.expectBoolean)(output.IsCritical),
        IsEnd: (0, smithy_client_1.expectBoolean)(output.IsEnd),
        MaxAttempts: (0, smithy_client_1.expectInt32)(output.MaxAttempts),
        NextStep: (0, smithy_client_1.expectString)(output.NextStep),
        OnFailure: (0, smithy_client_1.expectString)(output.OnFailure),
        Outputs: output.Outputs != null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        OverriddenParameters: output.OverriddenParameters != null ? deserializeAws_json1_1AutomationParameterMap(output.OverriddenParameters, context) : void 0,
        Response: (0, smithy_client_1.expectString)(output.Response),
        ResponseCode: (0, smithy_client_1.expectString)(output.ResponseCode),
        StepExecutionId: (0, smithy_client_1.expectString)(output.StepExecutionId),
        StepName: (0, smithy_client_1.expectString)(output.StepName),
        StepStatus: (0, smithy_client_1.expectString)(output.StepStatus),
        TargetLocation: output.TargetLocation != null ? deserializeAws_json1_1TargetLocation(output.TargetLocation, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TimeoutSeconds: (0, smithy_client_1.expectLong)(output.TimeoutSeconds),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0,
        ValidNextSteps: output.ValidNextSteps != null ? deserializeAws_json1_1ValidNextStepList(output.ValidNextSteps, context) : void 0
      };
    }, "deserializeAws_json1_1StepExecution");
    var deserializeAws_json1_1StepExecutionList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1StepExecution(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1StepExecutionList");
    var deserializeAws_json1_1StopAutomationExecutionResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1StopAutomationExecutionResult");
    var deserializeAws_json1_1SubTypeCountLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1SubTypeCountLimitExceededException");
    var deserializeAws_json1_1Tag = /* @__PURE__ */ __name((output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    }, "deserializeAws_json1_1Tag");
    var deserializeAws_json1_1TagList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1TagList");
    var deserializeAws_json1_1Target = /* @__PURE__ */ __name((output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Values: output.Values != null ? deserializeAws_json1_1TargetValues(output.Values, context) : void 0
      };
    }, "deserializeAws_json1_1Target");
    var deserializeAws_json1_1TargetInUseException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1TargetInUseException");
    var deserializeAws_json1_1TargetLocation = /* @__PURE__ */ __name((output, context) => {
      return {
        Accounts: output.Accounts != null ? deserializeAws_json1_1Accounts(output.Accounts, context) : void 0,
        ExecutionRoleName: (0, smithy_client_1.expectString)(output.ExecutionRoleName),
        Regions: output.Regions != null ? deserializeAws_json1_1Regions(output.Regions, context) : void 0,
        TargetLocationAlarmConfiguration: output.TargetLocationAlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.TargetLocationAlarmConfiguration, context) : void 0,
        TargetLocationMaxConcurrency: (0, smithy_client_1.expectString)(output.TargetLocationMaxConcurrency),
        TargetLocationMaxErrors: (0, smithy_client_1.expectString)(output.TargetLocationMaxErrors)
      };
    }, "deserializeAws_json1_1TargetLocation");
    var deserializeAws_json1_1TargetLocations = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetLocation(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1TargetLocations");
    var deserializeAws_json1_1TargetMap = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_1TargetMapValueList(value, context)
        };
      }, {});
    }, "deserializeAws_json1_1TargetMap");
    var deserializeAws_json1_1TargetMaps = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetMap(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1TargetMaps");
    var deserializeAws_json1_1TargetMapValueList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1TargetMapValueList");
    var deserializeAws_json1_1TargetNotConnected = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1TargetNotConnected");
    var deserializeAws_json1_1TargetParameterList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1TargetParameterList");
    var deserializeAws_json1_1Targets = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Target(entry, context);
      });
      return retVal;
    }, "deserializeAws_json1_1Targets");
    var deserializeAws_json1_1TargetValues = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1TargetValues");
    var deserializeAws_json1_1TerminateSessionResponse = /* @__PURE__ */ __name((output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId)
      };
    }, "deserializeAws_json1_1TerminateSessionResponse");
    var deserializeAws_json1_1TooManyTagsError = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1TooManyTagsError");
    var deserializeAws_json1_1TooManyUpdates = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1TooManyUpdates");
    var deserializeAws_json1_1TotalSizeLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1TotalSizeLimitExceededException");
    var deserializeAws_json1_1UnlabelParameterVersionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        InvalidLabels: output.InvalidLabels != null ? deserializeAws_json1_1ParameterLabelList(output.InvalidLabels, context) : void 0,
        RemovedLabels: output.RemovedLabels != null ? deserializeAws_json1_1ParameterLabelList(output.RemovedLabels, context) : void 0
      };
    }, "deserializeAws_json1_1UnlabelParameterVersionResult");
    var deserializeAws_json1_1UnsupportedCalendarException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1UnsupportedCalendarException");
    var deserializeAws_json1_1UnsupportedFeatureRequiredException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1UnsupportedFeatureRequiredException");
    var deserializeAws_json1_1UnsupportedInventoryItemContextException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    }, "deserializeAws_json1_1UnsupportedInventoryItemContextException");
    var deserializeAws_json1_1UnsupportedInventorySchemaVersionException = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1UnsupportedInventorySchemaVersionException");
    var deserializeAws_json1_1UnsupportedOperatingSystem = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1UnsupportedOperatingSystem");
    var deserializeAws_json1_1UnsupportedParameterType = /* @__PURE__ */ __name((output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    }, "deserializeAws_json1_1UnsupportedParameterType");
    var deserializeAws_json1_1UnsupportedPlatformType = /* @__PURE__ */ __name((output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    }, "deserializeAws_json1_1UnsupportedPlatformType");
    var deserializeAws_json1_1UpdateAssociationResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    }, "deserializeAws_json1_1UpdateAssociationResult");
    var deserializeAws_json1_1UpdateAssociationStatusResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    }, "deserializeAws_json1_1UpdateAssociationStatusResult");
    var deserializeAws_json1_1UpdateDocumentDefaultVersionResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Description: output.Description != null ? deserializeAws_json1_1DocumentDefaultVersionDescription(output.Description, context) : void 0
      };
    }, "deserializeAws_json1_1UpdateDocumentDefaultVersionResult");
    var deserializeAws_json1_1UpdateDocumentMetadataResponse = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1UpdateDocumentMetadataResponse");
    var deserializeAws_json1_1UpdateDocumentResult = /* @__PURE__ */ __name((output, context) => {
      return {
        DocumentDescription: output.DocumentDescription != null ? deserializeAws_json1_1DocumentDescription(output.DocumentDescription, context) : void 0
      };
    }, "deserializeAws_json1_1UpdateDocumentResult");
    var deserializeAws_json1_1UpdateMaintenanceWindowResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AllowUnassociatedTargets: (0, smithy_client_1.expectBoolean)(output.AllowUnassociatedTargets),
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    }, "deserializeAws_json1_1UpdateMaintenanceWindowResult");
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetResult = /* @__PURE__ */ __name((output, context) => {
      return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    }, "deserializeAws_json1_1UpdateMaintenanceWindowTargetResult");
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskResult = /* @__PURE__ */ __name((output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo != null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskInvocationParameters: output.TaskInvocationParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters(output.TaskInvocationParameters, context) : void 0,
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    }, "deserializeAws_json1_1UpdateMaintenanceWindowTaskResult");
    var deserializeAws_json1_1UpdateManagedInstanceRoleResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1UpdateManagedInstanceRoleResult");
    var deserializeAws_json1_1UpdateOpsItemResponse = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1UpdateOpsItemResponse");
    var deserializeAws_json1_1UpdateOpsMetadataResult = /* @__PURE__ */ __name((output, context) => {
      return {
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn)
      };
    }, "deserializeAws_json1_1UpdateOpsMetadataResult");
    var deserializeAws_json1_1UpdatePatchBaselineResult = /* @__PURE__ */ __name((output, context) => {
      return {
        ApprovalRules: output.ApprovalRules != null ? deserializeAws_json1_1PatchRuleGroup(output.ApprovalRules, context) : void 0,
        ApprovedPatches: output.ApprovedPatches != null ? deserializeAws_json1_1PatchIdList(output.ApprovedPatches, context) : void 0,
        ApprovedPatchesComplianceLevel: (0, smithy_client_1.expectString)(output.ApprovedPatchesComplianceLevel),
        ApprovedPatchesEnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.ApprovedPatchesEnableNonSecurity),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        GlobalFilters: output.GlobalFilters != null ? deserializeAws_json1_1PatchFilterGroup(output.GlobalFilters, context) : void 0,
        ModifiedDate: output.ModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        RejectedPatches: output.RejectedPatches != null ? deserializeAws_json1_1PatchIdList(output.RejectedPatches, context) : void 0,
        RejectedPatchesAction: (0, smithy_client_1.expectString)(output.RejectedPatchesAction),
        Sources: output.Sources != null ? deserializeAws_json1_1PatchSourceList(output.Sources, context) : void 0
      };
    }, "deserializeAws_json1_1UpdatePatchBaselineResult");
    var deserializeAws_json1_1UpdateResourceDataSyncResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1UpdateResourceDataSyncResult");
    var deserializeAws_json1_1UpdateServiceSettingResult = /* @__PURE__ */ __name((output, context) => {
      return {};
    }, "deserializeAws_json1_1UpdateServiceSettingResult");
    var deserializeAws_json1_1ValidNextStepList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    }, "deserializeAws_json1_1ValidNextStepList");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var collectBody = /* @__PURE__ */ __name((streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    }, "collectBody");
    var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    }), "parseBody");
    var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    }, "parseErrorBody");
    var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
      const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
      const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      }, "sanitizeErrorCode");
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    }, "loadRestJsonErrorCode");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js
var require_AddTagsToResourceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddTagsToResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var AddTagsToResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddTagsToResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AddTagsToResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddTagsToResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddTagsToResourceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1AddTagsToResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1AddTagsToResourceCommand)(output, context);
      }
    };
    __name(AddTagsToResourceCommand, "AddTagsToResourceCommand");
    exports.AddTagsToResourceCommand = AddTagsToResourceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js
var require_AssociateOpsItemRelatedItemCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociateOpsItemRelatedItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var AssociateOpsItemRelatedItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AssociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssociateOpsItemRelatedItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssociateOpsItemRelatedItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1AssociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    __name(AssociateOpsItemRelatedItemCommand, "AssociateOpsItemRelatedItemCommand");
    exports.AssociateOpsItemRelatedItemCommand = AssociateOpsItemRelatedItemCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js
var require_CancelCommandCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelCommandCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CancelCommandCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CancelCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelCommandRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelCommandResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelCommandCommand)(output, context);
      }
    };
    __name(CancelCommandCommand, "CancelCommandCommand");
    exports.CancelCommandCommand = CancelCommandCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js
var require_CancelMaintenanceWindowExecutionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelMaintenanceWindowExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CancelMaintenanceWindowExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CancelMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelMaintenanceWindowExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelMaintenanceWindowExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    __name(CancelMaintenanceWindowExecutionCommand, "CancelMaintenanceWindowExecutionCommand");
    exports.CancelMaintenanceWindowExecutionCommand = CancelMaintenanceWindowExecutionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js
var require_CreateActivationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateActivationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateActivationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateActivationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateActivationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateActivationCommand)(output, context);
      }
    };
    __name(CreateActivationCommand, "CreateActivationCommand");
    exports.CreateActivationCommand = CreateActivationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js
var require_CreateAssociationBatchCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationBatchCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateAssociationBatchCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAssociationBatchCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationBatchCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationBatchRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationBatchResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateAssociationBatchCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateAssociationBatchCommand)(output, context);
      }
    };
    __name(CreateAssociationBatchCommand, "CreateAssociationBatchCommand");
    exports.CreateAssociationBatchCommand = CreateAssociationBatchCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js
var require_CreateAssociationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateAssociationCommand)(output, context);
      }
    };
    __name(CreateAssociationCommand, "CreateAssociationCommand");
    exports.CreateAssociationCommand = CreateAssociationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js
var require_CreateDocumentCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateDocumentCommand)(output, context);
      }
    };
    __name(CreateDocumentCommand, "CreateDocumentCommand");
    exports.CreateDocumentCommand = CreateDocumentCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js
var require_CreateMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateMaintenanceWindowCommand)(output, context);
      }
    };
    __name(CreateMaintenanceWindowCommand, "CreateMaintenanceWindowCommand");
    exports.CreateMaintenanceWindowCommand = CreateMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js
var require_CreateOpsItemCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOpsItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOpsItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateOpsItemCommand)(output, context);
      }
    };
    __name(CreateOpsItemCommand, "CreateOpsItemCommand");
    exports.CreateOpsItemCommand = CreateOpsItemCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js
var require_CreateOpsMetadataCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateOpsMetadataCommand)(output, context);
      }
    };
    __name(CreateOpsMetadataCommand, "CreateOpsMetadataCommand");
    exports.CreateOpsMetadataCommand = CreateOpsMetadataCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js
var require_CreatePatchBaselineCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreatePatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreatePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreatePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreatePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreatePatchBaselineCommand)(output, context);
      }
    };
    __name(CreatePatchBaselineCommand, "CreatePatchBaselineCommand");
    exports.CreatePatchBaselineCommand = CreatePatchBaselineCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js
var require_CreateResourceDataSyncCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateResourceDataSyncCommand)(output, context);
      }
    };
    __name(CreateResourceDataSyncCommand, "CreateResourceDataSyncCommand");
    exports.CreateResourceDataSyncCommand = CreateResourceDataSyncCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js
var require_DeleteActivationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteActivationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteActivationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteActivationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteActivationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteActivationCommand)(output, context);
      }
    };
    __name(DeleteActivationCommand, "DeleteActivationCommand");
    exports.DeleteActivationCommand = DeleteActivationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js
var require_DeleteAssociationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteAssociationCommand)(output, context);
      }
    };
    __name(DeleteAssociationCommand, "DeleteAssociationCommand");
    exports.DeleteAssociationCommand = DeleteAssociationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js
var require_DeleteDocumentCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteDocumentCommand)(output, context);
      }
    };
    __name(DeleteDocumentCommand, "DeleteDocumentCommand");
    exports.DeleteDocumentCommand = DeleteDocumentCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js
var require_DeleteInventoryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteInventoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteInventoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteInventoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteInventoryCommand)(output, context);
      }
    };
    __name(DeleteInventoryCommand, "DeleteInventoryCommand");
    exports.DeleteInventoryCommand = DeleteInventoryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js
var require_DeleteMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteMaintenanceWindowCommand)(output, context);
      }
    };
    __name(DeleteMaintenanceWindowCommand, "DeleteMaintenanceWindowCommand");
    exports.DeleteMaintenanceWindowCommand = DeleteMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js
var require_DeleteOpsMetadataCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteOpsMetadataCommand)(output, context);
      }
    };
    __name(DeleteOpsMetadataCommand, "DeleteOpsMetadataCommand");
    exports.DeleteOpsMetadataCommand = DeleteOpsMetadataCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js
var require_DeleteParameterCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParameterCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteParameterCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteParameterCommand2.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteParameterRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteParameterCommand)(output, context);
      }
    };
    __name(DeleteParameterCommand2, "DeleteParameterCommand");
    exports.DeleteParameterCommand = DeleteParameterCommand2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js
var require_DeleteParametersCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParametersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteParametersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteParametersCommand)(output, context);
      }
    };
    __name(DeleteParametersCommand, "DeleteParametersCommand");
    exports.DeleteParametersCommand = DeleteParametersCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js
var require_DeletePatchBaselineCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeletePatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeletePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeletePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeletePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeletePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeletePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeletePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeletePatchBaselineCommand)(output, context);
      }
    };
    __name(DeletePatchBaselineCommand, "DeletePatchBaselineCommand");
    exports.DeletePatchBaselineCommand = DeletePatchBaselineCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js
var require_DeleteResourceDataSyncCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteResourceDataSyncCommand)(output, context);
      }
    };
    __name(DeleteResourceDataSyncCommand, "DeleteResourceDataSyncCommand");
    exports.DeleteResourceDataSyncCommand = DeleteResourceDataSyncCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js
var require_DeregisterManagedInstanceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterManagedInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterManagedInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterManagedInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterManagedInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterManagedInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterManagedInstanceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterManagedInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterManagedInstanceCommand)(output, context);
      }
    };
    __name(DeregisterManagedInstanceCommand, "DeregisterManagedInstanceCommand");
    exports.DeregisterManagedInstanceCommand = DeregisterManagedInstanceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js
var require_DeregisterPatchBaselineForPatchGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterPatchBaselineForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    __name(DeregisterPatchBaselineForPatchGroupCommand, "DeregisterPatchBaselineForPatchGroupCommand");
    exports.DeregisterPatchBaselineForPatchGroupCommand = DeregisterPatchBaselineForPatchGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js
var require_DeregisterTargetFromMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTargetFromMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterTargetFromMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterTargetFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTargetFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand)(output, context);
      }
    };
    __name(DeregisterTargetFromMaintenanceWindowCommand, "DeregisterTargetFromMaintenanceWindowCommand");
    exports.DeregisterTargetFromMaintenanceWindowCommand = DeregisterTargetFromMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js
var require_DeregisterTaskFromMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTaskFromMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterTaskFromMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterTaskFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTaskFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand)(output, context);
      }
    };
    __name(DeregisterTaskFromMaintenanceWindowCommand, "DeregisterTaskFromMaintenanceWindowCommand");
    exports.DeregisterTaskFromMaintenanceWindowCommand = DeregisterTaskFromMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js
var require_DescribeActivationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeActivationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeActivationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeActivationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeActivationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeActivationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeActivationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeActivationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeActivationsCommand)(output, context);
      }
    };
    __name(DescribeActivationsCommand, "DescribeActivationsCommand");
    exports.DescribeActivationsCommand = DescribeActivationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js
var require_DescribeAssociationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationCommand)(output, context);
      }
    };
    __name(DescribeAssociationCommand, "DescribeAssociationCommand");
    exports.DescribeAssociationCommand = DescribeAssociationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js
var require_DescribeAssociationExecutionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAssociationExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationExecutionsCommand)(output, context);
      }
    };
    __name(DescribeAssociationExecutionsCommand, "DescribeAssociationExecutionsCommand");
    exports.DescribeAssociationExecutionsCommand = DescribeAssociationExecutionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js
var require_DescribeAssociationExecutionTargetsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionTargetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAssociationExecutionTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationExecutionTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionTargetsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionTargetsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand)(output, context);
      }
    };
    __name(DescribeAssociationExecutionTargetsCommand, "DescribeAssociationExecutionTargetsCommand");
    exports.DescribeAssociationExecutionTargetsCommand = DescribeAssociationExecutionTargetsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js
var require_DescribeAutomationExecutionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAutomationExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAutomationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAutomationExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAutomationExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAutomationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAutomationExecutionsCommand)(output, context);
      }
    };
    __name(DescribeAutomationExecutionsCommand, "DescribeAutomationExecutionsCommand");
    exports.DescribeAutomationExecutionsCommand = DescribeAutomationExecutionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js
var require_DescribeAutomationStepExecutionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationStepExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAutomationStepExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAutomationStepExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationStepExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAutomationStepExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAutomationStepExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAutomationStepExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand)(output, context);
      }
    };
    __name(DescribeAutomationStepExecutionsCommand, "DescribeAutomationStepExecutionsCommand");
    exports.DescribeAutomationStepExecutionsCommand = DescribeAutomationStepExecutionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js
var require_DescribeAvailablePatchesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAvailablePatchesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAvailablePatchesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAvailablePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAvailablePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAvailablePatchesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAvailablePatchesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAvailablePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAvailablePatchesCommand)(output, context);
      }
    };
    __name(DescribeAvailablePatchesCommand, "DescribeAvailablePatchesCommand");
    exports.DescribeAvailablePatchesCommand = DescribeAvailablePatchesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js
var require_DescribeDocumentCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeDocumentCommand)(output, context);
      }
    };
    __name(DescribeDocumentCommand, "DescribeDocumentCommand");
    exports.DescribeDocumentCommand = DescribeDocumentCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js
var require_DescribeDocumentPermissionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeDocumentPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDocumentPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDocumentPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeDocumentPermissionCommand)(output, context);
      }
    };
    __name(DescribeDocumentPermissionCommand, "DescribeDocumentPermissionCommand");
    exports.DescribeDocumentPermissionCommand = DescribeDocumentPermissionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js
var require_DescribeEffectiveInstanceAssociationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectiveInstanceAssociationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeEffectiveInstanceAssociationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeEffectiveInstanceAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectiveInstanceAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand)(output, context);
      }
    };
    __name(DescribeEffectiveInstanceAssociationsCommand, "DescribeEffectiveInstanceAssociationsCommand");
    exports.DescribeEffectiveInstanceAssociationsCommand = DescribeEffectiveInstanceAssociationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js
var require_DescribeEffectivePatchesForPatchBaselineCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectivePatchesForPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeEffectivePatchesForPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeEffectivePatchesForPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectivePatchesForPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand)(output, context);
      }
    };
    __name(DescribeEffectivePatchesForPatchBaselineCommand, "DescribeEffectivePatchesForPatchBaselineCommand");
    exports.DescribeEffectivePatchesForPatchBaselineCommand = DescribeEffectivePatchesForPatchBaselineCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js
var require_DescribeInstanceAssociationsStatusCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceAssociationsStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstanceAssociationsStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstanceAssociationsStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceAssociationsStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstanceAssociationsStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstanceAssociationsStatusResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand)(output, context);
      }
    };
    __name(DescribeInstanceAssociationsStatusCommand, "DescribeInstanceAssociationsStatusCommand");
    exports.DescribeInstanceAssociationsStatusCommand = DescribeInstanceAssociationsStatusCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js
var require_DescribeInstanceInformationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceInformationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstanceInformationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstanceInformationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceInformationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstanceInformationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstanceInformationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstanceInformationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstanceInformationCommand)(output, context);
      }
    };
    __name(DescribeInstanceInformationCommand, "DescribeInstanceInformationCommand");
    exports.DescribeInstanceInformationCommand = DescribeInstanceInformationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js
var require_DescribeInstancePatchesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstancePatchesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchesCommand)(output, context);
      }
    };
    __name(DescribeInstancePatchesCommand, "DescribeInstancePatchesCommand");
    exports.DescribeInstancePatchesCommand = DescribeInstancePatchesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js
var require_DescribeInstancePatchStatesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstancePatchStatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchStatesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchStatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchStatesCommand)(output, context);
      }
    };
    __name(DescribeInstancePatchStatesCommand, "DescribeInstancePatchStatesCommand");
    exports.DescribeInstancePatchStatesCommand = DescribeInstancePatchStatesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js
var require_DescribeInstancePatchStatesForPatchGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstancePatchStatesForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchStatesForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand)(output, context);
      }
    };
    __name(DescribeInstancePatchStatesForPatchGroupCommand, "DescribeInstancePatchStatesForPatchGroupCommand");
    exports.DescribeInstancePatchStatesForPatchGroupCommand = DescribeInstancePatchStatesForPatchGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js
var require_DescribeInventoryDeletionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInventoryDeletionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInventoryDeletionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInventoryDeletionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInventoryDeletionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInventoryDeletionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInventoryDeletionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInventoryDeletionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInventoryDeletionsCommand)(output, context);
      }
    };
    __name(DescribeInventoryDeletionsCommand, "DescribeInventoryDeletionsCommand");
    exports.DescribeInventoryDeletionsCommand = DescribeInventoryDeletionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js
var require_DescribeMaintenanceWindowExecutionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowExecutionsCommand, "DescribeMaintenanceWindowExecutionsCommand");
    exports.DescribeMaintenanceWindowExecutionsCommand = DescribeMaintenanceWindowExecutionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionTaskInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTaskInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowExecutionTaskInvocationsCommand, "DescribeMaintenanceWindowExecutionTaskInvocationsCommand");
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js
var require_DescribeMaintenanceWindowExecutionTasksCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTasksCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowExecutionTasksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowExecutionTasksCommand, "DescribeMaintenanceWindowExecutionTasksCommand");
    exports.DescribeMaintenanceWindowExecutionTasksCommand = DescribeMaintenanceWindowExecutionTasksCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js
var require_DescribeMaintenanceWindowScheduleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowScheduleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowScheduleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowScheduleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowScheduleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowScheduleResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowScheduleCommand, "DescribeMaintenanceWindowScheduleCommand");
    exports.DescribeMaintenanceWindowScheduleCommand = DescribeMaintenanceWindowScheduleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js
var require_DescribeMaintenanceWindowsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowsCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowsCommand, "DescribeMaintenanceWindowsCommand");
    exports.DescribeMaintenanceWindowsCommand = DescribeMaintenanceWindowsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js
var require_DescribeMaintenanceWindowsForTargetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsForTargetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowsForTargetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowsForTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsForTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowsForTargetCommand, "DescribeMaintenanceWindowsForTargetCommand");
    exports.DescribeMaintenanceWindowsForTargetCommand = DescribeMaintenanceWindowsForTargetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js
var require_DescribeMaintenanceWindowTargetsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTargetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowTargetsCommand, "DescribeMaintenanceWindowTargetsCommand");
    exports.DescribeMaintenanceWindowTargetsCommand = DescribeMaintenanceWindowTargetsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js
var require_DescribeMaintenanceWindowTasksCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTasksCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowTasksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand)(output, context);
      }
    };
    __name(DescribeMaintenanceWindowTasksCommand, "DescribeMaintenanceWindowTasksCommand");
    exports.DescribeMaintenanceWindowTasksCommand = DescribeMaintenanceWindowTasksCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js
var require_DescribeOpsItemsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeOpsItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeOpsItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeOpsItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeOpsItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeOpsItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeOpsItemsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeOpsItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeOpsItemsCommand)(output, context);
      }
    };
    __name(DescribeOpsItemsCommand, "DescribeOpsItemsCommand");
    exports.DescribeOpsItemsCommand = DescribeOpsItemsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js
var require_DescribeParametersCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeParametersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeParametersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeParametersCommand)(output, context);
      }
    };
    __name(DescribeParametersCommand, "DescribeParametersCommand");
    exports.DescribeParametersCommand = DescribeParametersCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js
var require_DescribePatchBaselinesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchBaselinesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchBaselinesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchBaselinesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchBaselinesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchBaselinesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchBaselinesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchBaselinesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchBaselinesCommand)(output, context);
      }
    };
    __name(DescribePatchBaselinesCommand, "DescribePatchBaselinesCommand");
    exports.DescribePatchBaselinesCommand = DescribePatchBaselinesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js
var require_DescribePatchGroupsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchGroupsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchGroupsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchGroupsCommand)(output, context);
      }
    };
    __name(DescribePatchGroupsCommand, "DescribePatchGroupsCommand");
    exports.DescribePatchGroupsCommand = DescribePatchGroupsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js
var require_DescribePatchGroupStateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupStateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchGroupStateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchGroupStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchGroupStateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchGroupStateResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchGroupStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchGroupStateCommand)(output, context);
      }
    };
    __name(DescribePatchGroupStateCommand, "DescribePatchGroupStateCommand");
    exports.DescribePatchGroupStateCommand = DescribePatchGroupStateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js
var require_DescribePatchPropertiesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchPropertiesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchPropertiesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchPropertiesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchPropertiesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchPropertiesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchPropertiesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchPropertiesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchPropertiesCommand)(output, context);
      }
    };
    __name(DescribePatchPropertiesCommand, "DescribePatchPropertiesCommand");
    exports.DescribePatchPropertiesCommand = DescribePatchPropertiesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js
var require_DescribeSessionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeSessionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeSessionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeSessionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeSessionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeSessionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeSessionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeSessionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeSessionsCommand)(output, context);
      }
    };
    __name(DescribeSessionsCommand, "DescribeSessionsCommand");
    exports.DescribeSessionsCommand = DescribeSessionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js
var require_DisassociateOpsItemRelatedItemCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociateOpsItemRelatedItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DisassociateOpsItemRelatedItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DisassociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DisassociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DisassociateOpsItemRelatedItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DisassociateOpsItemRelatedItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    __name(DisassociateOpsItemRelatedItemCommand, "DisassociateOpsItemRelatedItemCommand");
    exports.DisassociateOpsItemRelatedItemCommand = DisassociateOpsItemRelatedItemCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js
var require_GetAutomationExecutionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAutomationExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetAutomationExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetAutomationExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetAutomationExecutionCommand)(output, context);
      }
    };
    __name(GetAutomationExecutionCommand, "GetAutomationExecutionCommand");
    exports.GetAutomationExecutionCommand = GetAutomationExecutionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js
var require_GetCalendarStateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCalendarStateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetCalendarStateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCalendarStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCalendarStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetCalendarStateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetCalendarStateResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetCalendarStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetCalendarStateCommand)(output, context);
      }
    };
    __name(GetCalendarStateCommand, "GetCalendarStateCommand");
    exports.GetCalendarStateCommand = GetCalendarStateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js
var require_GetCommandInvocationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCommandInvocationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetCommandInvocationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCommandInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCommandInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetCommandInvocationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetCommandInvocationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetCommandInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetCommandInvocationCommand)(output, context);
      }
    };
    __name(GetCommandInvocationCommand, "GetCommandInvocationCommand");
    exports.GetCommandInvocationCommand = GetCommandInvocationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js
var require_GetConnectionStatusCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetConnectionStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetConnectionStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetConnectionStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetConnectionStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetConnectionStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetConnectionStatusResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetConnectionStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetConnectionStatusCommand)(output, context);
      }
    };
    __name(GetConnectionStatusCommand, "GetConnectionStatusCommand");
    exports.GetConnectionStatusCommand = GetConnectionStatusCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js
var require_GetDefaultPatchBaselineCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDefaultPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDefaultPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDefaultPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDefaultPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDefaultPatchBaselineCommand)(output, context);
      }
    };
    __name(GetDefaultPatchBaselineCommand, "GetDefaultPatchBaselineCommand");
    exports.GetDefaultPatchBaselineCommand = GetDefaultPatchBaselineCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js
var require_GetDeployablePatchSnapshotForInstanceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDeployablePatchSnapshotForInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDeployablePatchSnapshotForInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeployablePatchSnapshotForInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDeployablePatchSnapshotForInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand)(output, context);
      }
    };
    __name(GetDeployablePatchSnapshotForInstanceCommand, "GetDeployablePatchSnapshotForInstanceCommand");
    exports.GetDeployablePatchSnapshotForInstanceCommand = GetDeployablePatchSnapshotForInstanceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js
var require_GetDocumentCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDocumentCommand)(output, context);
      }
    };
    __name(GetDocumentCommand, "GetDocumentCommand");
    exports.GetDocumentCommand = GetDocumentCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js
var require_GetInventoryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.GetInventoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetInventoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetInventoryCommand)(output, context);
      }
    };
    __name(GetInventoryCommand, "GetInventoryCommand");
    exports.GetInventoryCommand = GetInventoryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js
var require_GetInventorySchemaCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventorySchemaCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetInventorySchemaCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetInventorySchemaCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventorySchemaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetInventorySchemaRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetInventorySchemaResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetInventorySchemaCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetInventorySchemaCommand)(output, context);
      }
    };
    __name(GetInventorySchemaCommand, "GetInventorySchemaCommand");
    exports.GetInventorySchemaCommand = GetInventorySchemaCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js
var require_GetMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowCommand)(output, context);
      }
    };
    __name(GetMaintenanceWindowCommand, "GetMaintenanceWindowCommand");
    exports.GetMaintenanceWindowCommand = GetMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js
var require_GetMaintenanceWindowExecutionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    __name(GetMaintenanceWindowExecutionCommand, "GetMaintenanceWindowExecutionCommand");
    exports.GetMaintenanceWindowExecutionCommand = GetMaintenanceWindowExecutionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js
var require_GetMaintenanceWindowExecutionTaskCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowExecutionTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand)(output, context);
      }
    };
    __name(GetMaintenanceWindowExecutionTaskCommand, "GetMaintenanceWindowExecutionTaskCommand");
    exports.GetMaintenanceWindowExecutionTaskCommand = GetMaintenanceWindowExecutionTaskCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js
var require_GetMaintenanceWindowExecutionTaskInvocationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowExecutionTaskInvocationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionTaskInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand)(output, context);
      }
    };
    __name(GetMaintenanceWindowExecutionTaskInvocationCommand, "GetMaintenanceWindowExecutionTaskInvocationCommand");
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = GetMaintenanceWindowExecutionTaskInvocationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js
var require_GetMaintenanceWindowTaskCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowTaskCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowTaskCommand)(output, context);
      }
    };
    __name(GetMaintenanceWindowTaskCommand, "GetMaintenanceWindowTaskCommand");
    exports.GetMaintenanceWindowTaskCommand = GetMaintenanceWindowTaskCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js
var require_GetOpsItemCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetOpsItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsItemCommand)(output, context);
      }
    };
    __name(GetOpsItemCommand, "GetOpsItemCommand");
    exports.GetOpsItemCommand = GetOpsItemCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js
var require_GetOpsMetadataCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsMetadataCommand)(output, context);
      }
    };
    __name(GetOpsMetadataCommand, "GetOpsMetadataCommand");
    exports.GetOpsMetadataCommand = GetOpsMetadataCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js
var require_GetOpsSummaryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsSummaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetOpsSummaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsSummaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsSummaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.GetOpsSummaryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsSummaryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsSummaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsSummaryCommand)(output, context);
      }
    };
    __name(GetOpsSummaryCommand, "GetOpsSummaryCommand");
    exports.GetOpsSummaryCommand = GetOpsSummaryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js
var require_GetParameterCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParameterCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParameterCommand2.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParameterRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParameterCommand)(output, context);
      }
    };
    __name(GetParameterCommand2, "GetParameterCommand");
    exports.GetParameterCommand = GetParameterCommand2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js
var require_GetParameterHistoryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterHistoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParameterHistoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParameterHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParameterHistoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParameterHistoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParameterHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParameterHistoryCommand)(output, context);
      }
    };
    __name(GetParameterHistoryCommand, "GetParameterHistoryCommand");
    exports.GetParameterHistoryCommand = GetParameterHistoryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js
var require_GetParametersByPathCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersByPathCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParametersByPathCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParametersByPathCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersByPathCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParametersByPathRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParametersByPathResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParametersByPathCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParametersByPathCommand)(output, context);
      }
    };
    __name(GetParametersByPathCommand, "GetParametersByPathCommand");
    exports.GetParametersByPathCommand = GetParametersByPathCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js
var require_GetParametersCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParametersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParametersCommand)(output, context);
      }
    };
    __name(GetParametersCommand, "GetParametersCommand");
    exports.GetParametersCommand = GetParametersCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js
var require_GetPatchBaselineCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetPatchBaselineCommand)(output, context);
      }
    };
    __name(GetPatchBaselineCommand, "GetPatchBaselineCommand");
    exports.GetPatchBaselineCommand = GetPatchBaselineCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js
var require_GetPatchBaselineForPatchGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetPatchBaselineForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetPatchBaselineForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    __name(GetPatchBaselineForPatchGroupCommand, "GetPatchBaselineForPatchGroupCommand");
    exports.GetPatchBaselineForPatchGroupCommand = GetPatchBaselineForPatchGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js
var require_GetServiceSettingCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServiceSettingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetServiceSettingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetServiceSettingResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetServiceSettingCommand)(output, context);
      }
    };
    __name(GetServiceSettingCommand, "GetServiceSettingCommand");
    exports.GetServiceSettingCommand = GetServiceSettingCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js
var require_LabelParameterVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LabelParameterVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var LabelParameterVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "LabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.LabelParameterVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.LabelParameterVersionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1LabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1LabelParameterVersionCommand)(output, context);
      }
    };
    __name(LabelParameterVersionCommand, "LabelParameterVersionCommand");
    exports.LabelParameterVersionCommand = LabelParameterVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js
var require_ListAssociationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListAssociationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAssociationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAssociationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListAssociationsCommand)(output, context);
      }
    };
    __name(ListAssociationsCommand, "ListAssociationsCommand");
    exports.ListAssociationsCommand = ListAssociationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js
var require_ListAssociationVersionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListAssociationVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAssociationVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAssociationVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAssociationVersionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListAssociationVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListAssociationVersionsCommand)(output, context);
      }
    };
    __name(ListAssociationVersionsCommand, "ListAssociationVersionsCommand");
    exports.ListAssociationVersionsCommand = ListAssociationVersionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js
var require_ListCommandInvocationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandInvocationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListCommandInvocationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListCommandInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListCommandInvocationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListCommandInvocationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListCommandInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListCommandInvocationsCommand)(output, context);
      }
    };
    __name(ListCommandInvocationsCommand, "ListCommandInvocationsCommand");
    exports.ListCommandInvocationsCommand = ListCommandInvocationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js
var require_ListCommandsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListCommandsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListCommandsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListCommandsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListCommandsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListCommandsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListCommandsCommand)(output, context);
      }
    };
    __name(ListCommandsCommand, "ListCommandsCommand");
    exports.ListCommandsCommand = ListCommandsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js
var require_ListComplianceItemsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListComplianceItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListComplianceItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListComplianceItemsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListComplianceItemsCommand)(output, context);
      }
    };
    __name(ListComplianceItemsCommand, "ListComplianceItemsCommand");
    exports.ListComplianceItemsCommand = ListComplianceItemsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js
var require_ListComplianceSummariesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceSummariesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListComplianceSummariesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListComplianceSummariesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListComplianceSummariesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListComplianceSummariesCommand)(output, context);
      }
    };
    __name(ListComplianceSummariesCommand, "ListComplianceSummariesCommand");
    exports.ListComplianceSummariesCommand = ListComplianceSummariesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js
var require_ListDocumentMetadataHistoryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentMetadataHistoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDocumentMetadataHistoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentMetadataHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentMetadataHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentMetadataHistoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentMetadataHistoryResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentMetadataHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentMetadataHistoryCommand)(output, context);
      }
    };
    __name(ListDocumentMetadataHistoryCommand, "ListDocumentMetadataHistoryCommand");
    exports.ListDocumentMetadataHistoryCommand = ListDocumentMetadataHistoryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js
var require_ListDocumentsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDocumentsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentsCommand)(output, context);
      }
    };
    __name(ListDocumentsCommand, "ListDocumentsCommand");
    exports.ListDocumentsCommand = ListDocumentsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js
var require_ListDocumentVersionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDocumentVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentVersionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentVersionsCommand)(output, context);
      }
    };
    __name(ListDocumentVersionsCommand, "ListDocumentVersionsCommand");
    exports.ListDocumentVersionsCommand = ListDocumentVersionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js
var require_ListInventoryEntriesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListInventoryEntriesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListInventoryEntriesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListInventoryEntriesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListInventoryEntriesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListInventoryEntriesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListInventoryEntriesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListInventoryEntriesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListInventoryEntriesCommand)(output, context);
      }
    };
    __name(ListInventoryEntriesCommand, "ListInventoryEntriesCommand");
    exports.ListInventoryEntriesCommand = ListInventoryEntriesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js
var require_ListOpsItemEventsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemEventsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListOpsItemEventsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsItemEventsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemEventsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsItemEventsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsItemEventsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsItemEventsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsItemEventsCommand)(output, context);
      }
    };
    __name(ListOpsItemEventsCommand, "ListOpsItemEventsCommand");
    exports.ListOpsItemEventsCommand = ListOpsItemEventsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js
var require_ListOpsItemRelatedItemsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemRelatedItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListOpsItemRelatedItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsItemRelatedItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemRelatedItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsItemRelatedItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsItemRelatedItemsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsItemRelatedItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsItemRelatedItemsCommand)(output, context);
      }
    };
    __name(ListOpsItemRelatedItemsCommand, "ListOpsItemRelatedItemsCommand");
    exports.ListOpsItemRelatedItemsCommand = ListOpsItemRelatedItemsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js
var require_ListOpsMetadataCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsMetadataCommand)(output, context);
      }
    };
    __name(ListOpsMetadataCommand, "ListOpsMetadataCommand");
    exports.ListOpsMetadataCommand = ListOpsMetadataCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js
var require_ListResourceComplianceSummariesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceComplianceSummariesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListResourceComplianceSummariesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListResourceComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListResourceComplianceSummariesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListResourceComplianceSummariesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListResourceComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListResourceComplianceSummariesCommand)(output, context);
      }
    };
    __name(ListResourceComplianceSummariesCommand, "ListResourceComplianceSummariesCommand");
    exports.ListResourceComplianceSummariesCommand = ListResourceComplianceSummariesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js
var require_ListResourceDataSyncCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListResourceDataSyncCommand)(output, context);
      }
    };
    __name(ListResourceDataSyncCommand, "ListResourceDataSyncCommand");
    exports.ListResourceDataSyncCommand = ListResourceDataSyncCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListTagsForResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListTagsForResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListTagsForResourceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListTagsForResourceCommand)(output, context);
      }
    };
    __name(ListTagsForResourceCommand, "ListTagsForResourceCommand");
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js
var require_ModifyDocumentPermissionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDocumentPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ModifyDocumentPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ModifyDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ModifyDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDocumentPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDocumentPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ModifyDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ModifyDocumentPermissionCommand)(output, context);
      }
    };
    __name(ModifyDocumentPermissionCommand, "ModifyDocumentPermissionCommand");
    exports.ModifyDocumentPermissionCommand = ModifyDocumentPermissionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js
var require_PutComplianceItemsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutComplianceItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutComplianceItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutComplianceItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutComplianceItemsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutComplianceItemsCommand)(output, context);
      }
    };
    __name(PutComplianceItemsCommand, "PutComplianceItemsCommand");
    exports.PutComplianceItemsCommand = PutComplianceItemsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js
var require_PutInventoryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutInventoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutInventoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutInventoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutInventoryCommand)(output, context);
      }
    };
    __name(PutInventoryCommand, "PutInventoryCommand");
    exports.PutInventoryCommand = PutInventoryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js
var require_PutParameterCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutParameterCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutParameterCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutParameterCommand2.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutParameterRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutParameterCommand)(output, context);
      }
    };
    __name(PutParameterCommand2, "PutParameterCommand");
    exports.PutParameterCommand = PutParameterCommand2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js
var require_RegisterDefaultPatchBaselineCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterDefaultPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterDefaultPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterDefaultPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterDefaultPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand)(output, context);
      }
    };
    __name(RegisterDefaultPatchBaselineCommand, "RegisterDefaultPatchBaselineCommand");
    exports.RegisterDefaultPatchBaselineCommand = RegisterDefaultPatchBaselineCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js
var require_RegisterPatchBaselineForPatchGroupCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterPatchBaselineForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    __name(RegisterPatchBaselineForPatchGroupCommand, "RegisterPatchBaselineForPatchGroupCommand");
    exports.RegisterPatchBaselineForPatchGroupCommand = RegisterPatchBaselineForPatchGroupCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js
var require_RegisterTargetWithMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTargetWithMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterTargetWithMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterTargetWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTargetWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand)(output, context);
      }
    };
    __name(RegisterTargetWithMaintenanceWindowCommand, "RegisterTargetWithMaintenanceWindowCommand");
    exports.RegisterTargetWithMaintenanceWindowCommand = RegisterTargetWithMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js
var require_RegisterTaskWithMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTaskWithMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterTaskWithMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterTaskWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTaskWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand)(output, context);
      }
    };
    __name(RegisterTaskWithMaintenanceWindowCommand, "RegisterTaskWithMaintenanceWindowCommand");
    exports.RegisterTaskWithMaintenanceWindowCommand = RegisterTaskWithMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js
var require_RemoveTagsFromResourceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveTagsFromResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RemoveTagsFromResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveTagsFromResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RemoveTagsFromResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveTagsFromResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RemoveTagsFromResourceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RemoveTagsFromResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RemoveTagsFromResourceCommand)(output, context);
      }
    };
    __name(RemoveTagsFromResourceCommand, "RemoveTagsFromResourceCommand");
    exports.RemoveTagsFromResourceCommand = RemoveTagsFromResourceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js
var require_ResetServiceSettingCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetServiceSettingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ResetServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResetServiceSettingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ResetServiceSettingResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ResetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ResetServiceSettingCommand)(output, context);
      }
    };
    __name(ResetServiceSettingCommand, "ResetServiceSettingCommand");
    exports.ResetServiceSettingCommand = ResetServiceSettingCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js
var require_ResumeSessionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResumeSessionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ResumeSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResumeSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResumeSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResumeSessionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ResumeSessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ResumeSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ResumeSessionCommand)(output, context);
      }
    };
    __name(ResumeSessionCommand, "ResumeSessionCommand");
    exports.ResumeSessionCommand = ResumeSessionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js
var require_SendAutomationSignalCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendAutomationSignalCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var SendAutomationSignalCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SendAutomationSignalCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendAutomationSignalCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendAutomationSignalRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SendAutomationSignalResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SendAutomationSignalCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SendAutomationSignalCommand)(output, context);
      }
    };
    __name(SendAutomationSignalCommand, "SendAutomationSignalCommand");
    exports.SendAutomationSignalCommand = SendAutomationSignalCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js
var require_SendCommandCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendCommandCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var SendCommandCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SendCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendCommandRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SendCommandResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SendCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SendCommandCommand)(output, context);
      }
    };
    __name(SendCommandCommand, "SendCommandCommand");
    exports.SendCommandCommand = SendCommandCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js
var require_StartAssociationsOnceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAssociationsOnceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartAssociationsOnceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartAssociationsOnceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAssociationsOnceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartAssociationsOnceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartAssociationsOnceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartAssociationsOnceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartAssociationsOnceCommand)(output, context);
      }
    };
    __name(StartAssociationsOnceCommand, "StartAssociationsOnceCommand");
    exports.StartAssociationsOnceCommand = StartAssociationsOnceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js
var require_StartAutomationExecutionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAutomationExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartAutomationExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartAutomationExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartAutomationExecutionCommand)(output, context);
      }
    };
    __name(StartAutomationExecutionCommand, "StartAutomationExecutionCommand");
    exports.StartAutomationExecutionCommand = StartAutomationExecutionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js
var require_StartChangeRequestExecutionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartChangeRequestExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartChangeRequestExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartChangeRequestExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartChangeRequestExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartChangeRequestExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartChangeRequestExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartChangeRequestExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartChangeRequestExecutionCommand)(output, context);
      }
    };
    __name(StartChangeRequestExecutionCommand, "StartChangeRequestExecutionCommand");
    exports.StartChangeRequestExecutionCommand = StartChangeRequestExecutionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js
var require_StartSessionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartSessionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartSessionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartSessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartSessionCommand)(output, context);
      }
    };
    __name(StartSessionCommand, "StartSessionCommand");
    exports.StartSessionCommand = StartSessionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js
var require_StopAutomationExecutionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopAutomationExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StopAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StopAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StopAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StopAutomationExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StopAutomationExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StopAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StopAutomationExecutionCommand)(output, context);
      }
    };
    __name(StopAutomationExecutionCommand, "StopAutomationExecutionCommand");
    exports.StopAutomationExecutionCommand = StopAutomationExecutionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js
var require_TerminateSessionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerminateSessionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var TerminateSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TerminateSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "TerminateSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.TerminateSessionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.TerminateSessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1TerminateSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1TerminateSessionCommand)(output, context);
      }
    };
    __name(TerminateSessionCommand, "TerminateSessionCommand");
    exports.TerminateSessionCommand = TerminateSessionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js
var require_UnlabelParameterVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnlabelParameterVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UnlabelParameterVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UnlabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UnlabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UnlabelParameterVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UnlabelParameterVersionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UnlabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UnlabelParameterVersionCommand)(output, context);
      }
    };
    __name(UnlabelParameterVersionCommand, "UnlabelParameterVersionCommand");
    exports.UnlabelParameterVersionCommand = UnlabelParameterVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js
var require_UpdateAssociationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateAssociationCommand)(output, context);
      }
    };
    __name(UpdateAssociationCommand, "UpdateAssociationCommand");
    exports.UpdateAssociationCommand = UpdateAssociationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js
var require_UpdateAssociationStatusCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateAssociationStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAssociationStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAssociationStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateAssociationStatusResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateAssociationStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateAssociationStatusCommand)(output, context);
      }
    };
    __name(UpdateAssociationStatusCommand, "UpdateAssociationStatusCommand");
    exports.UpdateAssociationStatusCommand = UpdateAssociationStatusCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js
var require_UpdateDocumentCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentCommand)(output, context);
      }
    };
    __name(UpdateDocumentCommand, "UpdateDocumentCommand");
    exports.UpdateDocumentCommand = UpdateDocumentCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js
var require_UpdateDocumentDefaultVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentDefaultVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateDocumentDefaultVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentDefaultVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentDefaultVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateDocumentDefaultVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateDocumentDefaultVersionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentDefaultVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand)(output, context);
      }
    };
    __name(UpdateDocumentDefaultVersionCommand, "UpdateDocumentDefaultVersionCommand");
    exports.UpdateDocumentDefaultVersionCommand = UpdateDocumentDefaultVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js
var require_UpdateDocumentMetadataCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateDocumentMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateDocumentMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateDocumentMetadataResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentMetadataCommand)(output, context);
      }
    };
    __name(UpdateDocumentMetadataCommand, "UpdateDocumentMetadataCommand");
    exports.UpdateDocumentMetadataCommand = UpdateDocumentMetadataCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js
var require_UpdateMaintenanceWindowCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowCommand)(output, context);
      }
    };
    __name(UpdateMaintenanceWindowCommand, "UpdateMaintenanceWindowCommand");
    exports.UpdateMaintenanceWindowCommand = UpdateMaintenanceWindowCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js
var require_UpdateMaintenanceWindowTargetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTargetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateMaintenanceWindowTargetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand)(output, context);
      }
    };
    __name(UpdateMaintenanceWindowTargetCommand, "UpdateMaintenanceWindowTargetCommand");
    exports.UpdateMaintenanceWindowTargetCommand = UpdateMaintenanceWindowTargetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js
var require_UpdateMaintenanceWindowTaskCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTaskCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateMaintenanceWindowTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand)(output, context);
      }
    };
    __name(UpdateMaintenanceWindowTaskCommand, "UpdateMaintenanceWindowTaskCommand");
    exports.UpdateMaintenanceWindowTaskCommand = UpdateMaintenanceWindowTaskCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js
var require_UpdateManagedInstanceRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateManagedInstanceRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateManagedInstanceRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateManagedInstanceRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateManagedInstanceRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateManagedInstanceRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateManagedInstanceRoleResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateManagedInstanceRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateManagedInstanceRoleCommand)(output, context);
      }
    };
    __name(UpdateManagedInstanceRoleCommand, "UpdateManagedInstanceRoleCommand");
    exports.UpdateManagedInstanceRoleCommand = UpdateManagedInstanceRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js
var require_UpdateOpsItemCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateOpsItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateOpsItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateOpsItemCommand)(output, context);
      }
    };
    __name(UpdateOpsItemCommand, "UpdateOpsItemCommand");
    exports.UpdateOpsItemCommand = UpdateOpsItemCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js
var require_UpdateOpsMetadataCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateOpsMetadataCommand)(output, context);
      }
    };
    __name(UpdateOpsMetadataCommand, "UpdateOpsMetadataCommand");
    exports.UpdateOpsMetadataCommand = UpdateOpsMetadataCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js
var require_UpdatePatchBaselineCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdatePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdatePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdatePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdatePatchBaselineCommand)(output, context);
      }
    };
    __name(UpdatePatchBaselineCommand, "UpdatePatchBaselineCommand");
    exports.UpdatePatchBaselineCommand = UpdatePatchBaselineCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js
var require_UpdateResourceDataSyncCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateResourceDataSyncCommand)(output, context);
      }
    };
    __name(UpdateResourceDataSyncCommand, "UpdateResourceDataSyncCommand");
    exports.UpdateResourceDataSyncCommand = UpdateResourceDataSyncCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js
var require_UpdateServiceSettingCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateServiceSettingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateServiceSettingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateServiceSettingResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateServiceSettingCommand)(output, context);
      }
    };
    __name(UpdateServiceSettingCommand, "UpdateServiceSettingCommand");
    exports.UpdateServiceSettingCommand = UpdateServiceSettingCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    }, "booleanSelector");
    exports.booleanSelector = booleanSelector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint)
      };
    }, "resolveCustomEndpointsConfig");
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    }, "getEndpointFromRegion");
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    }, "resolveEndpointsConfig");
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    exports.isFipsRegion = isFipsRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = /* @__PURE__ */ __name((region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    exports.getRealRegion = getRealRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    }, "getHostnameFromVariants");
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = /* @__PURE__ */ __name((resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0, "getResolvedHostname");
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    }, "getResolvedPartition");
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = /* @__PURE__ */ __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    }, "getResolvedSigningRegion");
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = /* @__PURE__ */ __name((region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    }, "getRegionInfo");
    exports.getRegionInfo = getRegionInfo;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.208.0/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-content-length@3.208.0/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-content-length@3.208.0/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    __name(contentLengthMiddleware, "contentLengthMiddleware");
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    }), "getContentLengthPlugin");
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.208.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.208.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs8();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    __name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        request.headers["host"] = request.hostname;
      }
      return next(args);
    }, "hostHeaderMiddleware");
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    }), "getHostHeaderPlugin");
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.208.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.208.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = /* @__PURE__ */ __name(() => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === "function") {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    }, "loggerMiddleware");
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    }), "getLoggerPlugin");
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.208.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.208.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.208.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.208.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = /* @__PURE__ */ __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    }, "recursionDetectionMiddleware");
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    }), "getRecursionDetectionPlugin");
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.208.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.208.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.208.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.208.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = /* @__PURE__ */ __name((error) => error.$retryable !== void 0, "isRetryableByTrait");
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = /* @__PURE__ */ __name((error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name), "isClockSkewError");
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = /* @__PURE__ */ __name((error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    }, "isThrottlingError");
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = /* @__PURE__ */ __name((error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    }, "isTransientError");
    exports.isTransientError = isTransientError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs15();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    __name(DefaultRateLimiter, "DefaultRateLimiter");
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : constants_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = /* @__PURE__ */ __name((error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost, "getCapacityAmount");
      const hasRetryTokens = /* @__PURE__ */ __name((error) => getCapacityAmount(error) <= availableCapacity, "hasRetryTokens");
      const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      }, "retrieveRetryTokens");
      const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      }, "releaseRetryTokens");
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    }, "getDefaultRetryQuota");
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var constants_1 = require_constants3();
    var defaultDelayDecider = /* @__PURE__ */ __name((delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), "defaultDelayDecider");
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs15();
    var defaultRetryDecider = /* @__PURE__ */ __name((error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    }, "defaultRetryDecider");
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs15();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    __name(StandardRetryStrategy, "StandardRetryStrategy");
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    }, "getDelayFromRetryAfterHeader");
    var asSdkError = /* @__PURE__ */ __name((error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    }, "asSdkError");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    __name(AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy();
    var config_1 = require_config2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = /* @__PURE__ */ __name((input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        }
      };
    }, "resolveRetryConfig");
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var constants_1 = require_constants3();
    var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(() => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    }, "omitRetryHeadersMiddleware");
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    }), "getOmitRetryHeadersPlugin");
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var retryMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    }, "retryMiddleware");
    exports.retryMiddleware = retryMiddleware;
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    }), "getRetryPlugin");
    exports.getRetryPlugin = getRetryPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.208.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    __name(ProviderError, "ProviderError");
    exports.ProviderError = ProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    __name(CredentialsProviderError, "CredentialsProviderError");
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
      }
    };
    __name(TokenProviderError, "TokenProviderError");
    exports.TokenProviderError = TokenProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    __name(chain, "chain");
    exports.chain = chain;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = /* @__PURE__ */ __name((staticValue) => () => Promise.resolve(staticValue), "fromStatic");
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name(async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, "coalesceProvider");
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    }, "memoize");
    exports.memoize = memoize;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.208.0/node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-hex-encoding@3.201.0/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-hex-encoding@3.201.0/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    __name(fromHex, "fromHex");
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    __name(toHex, "toHex");
    exports.toHex = toHex;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs18();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = /* @__PURE__ */ __name((shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`, "createScope");
    exports.createScope = createScope;
    var getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    }, "getSigningKey");
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = /* @__PURE__ */ __name(() => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    }, "clearCredentialCache");
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    }, "hmac");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    }, "getCanonicalHeaders");
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = /* @__PURE__ */ __name((uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode), "escapeUri");
    exports.escapeUri = escapeUri;
    var hexEncode = /* @__PURE__ */ __name((c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = /* @__PURE__ */ __name((uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/"), "escapeUriPath");
    exports.escapeUriPath = escapeUriPath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs19();
    var constants_1 = require_constants4();
    var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    }, "getCanonicalQuery");
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+is-array-buffer@3.201.0/node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+is-array-buffer@3.201.0/node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs20();
    var util_hex_encoding_1 = require_dist_cjs18();
    var constants_1 = require_constants4();
    var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    }, "getPayloadHash");
    exports.getPayloadHash = getPayloadHash;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
    exports.hasHeader = hasHeader;
    var getHeaderValue = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    }, "getHeaderValue");
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    }, "deleteHeader");
    exports.deleteHeader = deleteHeader;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = /* @__PURE__ */ __name(({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0
    }), "cloneRequest");
    exports.cloneRequest = cloneRequest;
    var cloneQuery = /* @__PURE__ */ __name((query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {}), "cloneQuery");
    exports.cloneQuery = cloneQuery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    }, "moveHeadersToQuery");
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = /* @__PURE__ */ __name((request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    }, "prepareRequest");
    exports.prepareRequest = prepareRequest;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = /* @__PURE__ */ __name((time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
    exports.iso8601 = iso8601;
    var toDate = /* @__PURE__ */ __name((time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    }, "toDate");
    exports.toDate = toDate;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs18();
    var util_middleware_1 = require_dist_cjs4();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload: payload2 }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload2 }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    __name(SignatureV4, "SignatureV4");
    exports.SignatureV4 = SignatureV4;
    var formatDate = /* @__PURE__ */ __name((now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    }, "formatDate");
    var getCanonicalHeaderList = /* @__PURE__ */ __name((headers) => Object.keys(headers).sort().join(";"), "getCanonicalHeaderList");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.208.0/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs17();
    var signature_v4_1 = require_dist_cjs21();
    var util_middleware_1 = require_dist_cjs4();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = /* @__PURE__ */ __name((input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = /* @__PURE__ */ __name(() => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        }), "signer");
      } else {
        signer = /* @__PURE__ */ __name(async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        }, "signer");
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    }, "resolveAwsAuthConfig");
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = /* @__PURE__ */ __name((input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    }, "resolveSigV4AuthConfig");
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = /* @__PURE__ */ __name((credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    }, "normalizeCredentialProvider");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = /* @__PURE__ */ __name((systemClockOffset) => new Date(Date.now() + systemClockOffset), "getSkewCorrectedDate");
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = /* @__PURE__ */ __name((clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5, "isClockSkewed");
    exports.isClockSkewed = isClockSkewed;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = /* @__PURE__ */ __name((clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    }, "getUpdatedSystemClockOffset");
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    }, "awsAuthMiddleware");
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = /* @__PURE__ */ __name((response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    }, "getDateHeader");
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    }), "getAwsAuthPlugin");
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.208.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    __name(resolveUserAgentConfig, "resolveUserAgentConfig");
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var constants_1 = require_constants5();
    var userAgentMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    }, "userAgentMiddleware");
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = /* @__PURE__ */ __name(([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    }, "escapeUserAgent");
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = /* @__PURE__ */ __name((config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    }), "getUserAgentPlugin");
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.208.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ssm"
      };
    }, "resolveClientEndpointParameters");
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/package.json
var require_package = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-ssm",
      description: "AWS SDK for JavaScript Ssm Client for Node.js, Browser and React Native",
      version: "3.208.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.208.0",
        "@aws-sdk/config-resolver": "3.208.0",
        "@aws-sdk/credential-provider-node": "3.208.0",
        "@aws-sdk/fetch-http-handler": "3.208.0",
        "@aws-sdk/hash-node": "3.208.0",
        "@aws-sdk/invalid-dependency": "3.208.0",
        "@aws-sdk/middleware-content-length": "3.208.0",
        "@aws-sdk/middleware-endpoint": "3.208.0",
        "@aws-sdk/middleware-host-header": "3.208.0",
        "@aws-sdk/middleware-logger": "3.208.0",
        "@aws-sdk/middleware-recursion-detection": "3.208.0",
        "@aws-sdk/middleware-retry": "3.208.0",
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/middleware-signing": "3.208.0",
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/middleware-user-agent": "3.208.0",
        "@aws-sdk/node-config-provider": "3.208.0",
        "@aws-sdk/node-http-handler": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/smithy-client": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-base64-browser": "3.208.0",
        "@aws-sdk/util-base64-node": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.208.0",
        "@aws-sdk/util-defaults-mode-node": "3.208.0",
        "@aws-sdk/util-endpoints": "3.208.0",
        "@aws-sdk/util-user-agent-browser": "3.208.0",
        "@aws-sdk/util-user-agent-node": "3.208.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "@aws-sdk/util-waiter": "3.208.0",
        tslib: "^2.3.1",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ssm",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-ssm"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    __name(STSServiceException, "STSServiceException");
    exports.STSServiceException = STSServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponseFilterSensitiveLog = exports.GetSessionTokenRequestFilterSensitiveLog = exports.GetFederationTokenResponseFilterSensitiveLog = exports.FederatedUserFilterSensitiveLog = exports.GetFederationTokenRequestFilterSensitiveLog = exports.GetCallerIdentityResponseFilterSensitiveLog = exports.GetCallerIdentityRequestFilterSensitiveLog = exports.GetAccessKeyInfoResponseFilterSensitiveLog = exports.GetAccessKeyInfoRequestFilterSensitiveLog = exports.DecodeAuthorizationMessageResponseFilterSensitiveLog = exports.DecodeAuthorizationMessageRequestFilterSensitiveLog = exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports.AssumeRoleResponseFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.AssumeRoleRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.PolicyDescriptorTypeFilterSensitiveLog = exports.AssumedRoleUserFilterSensitiveLog = exports.InvalidAuthorizationMessageException = exports.IDPCommunicationErrorException = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    __name(ExpiredTokenException, "ExpiredTokenException");
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    __name(MalformedPolicyDocumentException, "MalformedPolicyDocumentException");
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    __name(PackedPolicyTooLargeException, "PackedPolicyTooLargeException");
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    __name(RegionDisabledException, "RegionDisabledException");
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    __name(IDPRejectedClaimException, "IDPRejectedClaimException");
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    __name(InvalidIdentityTokenException, "InvalidIdentityTokenException");
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    __name(IDPCommunicationErrorException, "IDPCommunicationErrorException");
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    __name(InvalidAuthorizationMessageException, "InvalidAuthorizationMessageException");
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var AssumedRoleUserFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssumedRoleUserFilterSensitiveLog");
    exports.AssumedRoleUserFilterSensitiveLog = AssumedRoleUserFilterSensitiveLog;
    var PolicyDescriptorTypeFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "PolicyDescriptorTypeFilterSensitiveLog");
    exports.PolicyDescriptorTypeFilterSensitiveLog = PolicyDescriptorTypeFilterSensitiveLog;
    var TagFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "TagFilterSensitiveLog");
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AssumeRoleRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssumeRoleRequestFilterSensitiveLog");
    exports.AssumeRoleRequestFilterSensitiveLog = AssumeRoleRequestFilterSensitiveLog;
    var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "CredentialsFilterSensitiveLog");
    exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssumeRoleResponseFilterSensitiveLog");
    exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssumeRoleWithSAMLRequestFilterSensitiveLog");
    exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssumeRoleWithSAMLResponseFilterSensitiveLog");
    exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssumeRoleWithWebIdentityRequestFilterSensitiveLog");
    exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AssumeRoleWithWebIdentityResponseFilterSensitiveLog");
    exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var DecodeAuthorizationMessageRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DecodeAuthorizationMessageRequestFilterSensitiveLog");
    exports.DecodeAuthorizationMessageRequestFilterSensitiveLog = DecodeAuthorizationMessageRequestFilterSensitiveLog;
    var DecodeAuthorizationMessageResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "DecodeAuthorizationMessageResponseFilterSensitiveLog");
    exports.DecodeAuthorizationMessageResponseFilterSensitiveLog = DecodeAuthorizationMessageResponseFilterSensitiveLog;
    var GetAccessKeyInfoRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetAccessKeyInfoRequestFilterSensitiveLog");
    exports.GetAccessKeyInfoRequestFilterSensitiveLog = GetAccessKeyInfoRequestFilterSensitiveLog;
    var GetAccessKeyInfoResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetAccessKeyInfoResponseFilterSensitiveLog");
    exports.GetAccessKeyInfoResponseFilterSensitiveLog = GetAccessKeyInfoResponseFilterSensitiveLog;
    var GetCallerIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetCallerIdentityRequestFilterSensitiveLog");
    exports.GetCallerIdentityRequestFilterSensitiveLog = GetCallerIdentityRequestFilterSensitiveLog;
    var GetCallerIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetCallerIdentityResponseFilterSensitiveLog");
    exports.GetCallerIdentityResponseFilterSensitiveLog = GetCallerIdentityResponseFilterSensitiveLog;
    var GetFederationTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetFederationTokenRequestFilterSensitiveLog");
    exports.GetFederationTokenRequestFilterSensitiveLog = GetFederationTokenRequestFilterSensitiveLog;
    var FederatedUserFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "FederatedUserFilterSensitiveLog");
    exports.FederatedUserFilterSensitiveLog = FederatedUserFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetFederationTokenResponseFilterSensitiveLog");
    exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetSessionTokenRequestFilterSensitiveLog");
    exports.GetSessionTokenRequestFilterSensitiveLog = GetSessionTokenRequestFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetSessionTokenResponseFilterSensitiveLog");
    exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = /* @__PURE__ */ __name(function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    }, "getAllMatches");
    var isName = /* @__PURE__ */ __name(function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    }, "isName");
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    __name(isWhiteSpace, "isWhiteSpace");
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    __name(readPI, "readPI");
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    __name(readCommentAndCDATA, "readCommentAndCDATA");
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    __name(readAttributeStr, "readAttributeStr");
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    __name(validateAttributeString, "validateAttributeString");
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    __name(validateNumberAmpersand, "validateNumberAmpersand");
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    __name(validateAmpersand, "validateAmpersand");
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    __name(getErrorObject, "getErrorObject");
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    __name(validateAttrName, "validateAttrName");
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    __name(validateTagName, "validateTagName");
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        col: lines[lines.length - 1].length + 1
      };
    }
    __name(getLineNumberForPosition, "getLineNumberForPosition");
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
    __name(getPositionFromMatch, "getPositionFromMatch");
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      allowBooleanAttributes: false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true
      },
      tagValueProcessor: function(tagName, val) {
        return val;
      },
      attributeValueProcessor: function(attrName, val) {
        return val;
      },
      stopNodes: [],
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false
    };
    var buildOptions = /* @__PURE__ */ __name(function(options) {
      return Object.assign({}, defaultOptions, options);
    }, "buildOptions");
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    __name(XmlNode, "XmlNode");
    module.exports = XmlNode;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, entity = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") {
              i += 7;
              entity = true;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") {
              i += 9;
            } else if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-") {
              comment = true;
            } else {
              throw new Error("Invalid DOCTYPE");
            }
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
              } else {
                throw new Error(`Invalid XML comment in DOCTYPE`);
              }
            } else if (entity) {
              parseEntityExp(exp, entities);
              entity = false;
            }
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    __name(readDocType, "readDocType");
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, "g"),
          val: match[3]
        };
      }
    }
    __name(parseEntityExp, "parseEntityExp");
    module.exports = readDocType;
  }
});

// ../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js"(exports, module) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    __name(toNumber, "toNumber");
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    __name(trimZeros, "trimZeros");
    module.exports = toNumber;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    __name(OrderedObjParser, "OrderedObjParser");
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    __name(addExternalEntities, "addExternalEntities");
    function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities)
            val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val;
            }
          }
        }
      }
    }
    __name(parseTextData, "parseTextData");
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    __name(resolveNameSpace, "resolveNameSpace");
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          const aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    __name(buildAttributesMap, "buildAttributesMap");
    var parseXml = /* @__PURE__ */ __name(function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath);
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val == void 0)
                val = "";
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    }, "parseXml");
    var replaceEntitiesValue = /* @__PURE__ */ __name(function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    }, "replaceEntitiesValue");
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    __name(saveTextToParentTag, "saveTextToParentTag");
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    __name(isItStopNode, "isItStopNode");
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    __name(tagExpWithClosingIndex, "tagExpWithClosingIndex");
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    __name(findClosingIndex, "findClosingIndex");
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    __name(readTagExp, "readTagExp");
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    __name(readStopNodeData, "readStopNodeData");
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === "string") {
        const newval = val.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val, options);
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    __name(parseValue, "parseValue");
    module.exports = OrderedObjParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    __name(prettify, "prettify");
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[":@"]) {
            assignAttributes(val, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode)
              val[options.textNodeName] = "";
            else
              val = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    __name(compress, "compress");
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    __name(propName, "propName");
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    __name(assignAttributes, "assignAttributes");
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || propCount === 1 && obj[options.textNodeName])
        return true;
      return false;
    }
    __name(isLeafTag, "isLeafTag");
    exports.prettify = prettify;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    __name(XMLParser, "XMLParser");
    module.exports = XMLParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module) {
    var EOL = "\n";
    function toXml(jArray, options) {
      return arrToStr(jArray, options, "", 0);
    }
    __name(toXml, "toXml");
    function arrToStr(arr, options, jPath, level) {
      let xmlStr = "";
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL + "" + options.indentBy.repeat(level);
      }
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          xmlStr += indentation + tagText;
          continue;
        } else if (tagName === options.cdataPropName) {
          xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          continue;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        let tagStart = indentation + `<${tagName}${attStr}`;
        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        }
      }
      return xmlStr;
    }
    __name(arrToStr, "arrToStr");
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    __name(propName, "propName");
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    __name(attr_to_str, "attr_to_str");
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    __name(isStopNode, "isStopNode");
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    __name(replaceEntitiesValue, "replaceEntitiesValue");
    module.exports = toXml;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      transformTagName: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
      if (this.options.suppressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
      this.replaceEntitiesValue = replaceEntitiesValue;
      this.buildAttrPairStr = buildAttrPairStr;
    }
    __name(Builder, "Builder");
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextNode(item, key, "", level);
            }
          }
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    function buildAttrPairStr(attrName, val) {
      val = this.options.attributeValueProcessor(attrName, "" + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val + '"';
    }
    __name(buildAttrPairStr, "buildAttrPairStr");
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjNode(result.val, key, result.attrStr, level);
      }
    }
    __name(processTextOrObjNode, "processTextOrObjNode");
    function buildObjectNode(val, key, attrStr, level) {
      let tagEndExp = "</" + key + this.tagEndChar;
      let piClosingChar = "";
      if (key[0] === "?") {
        piClosingChar = "?";
        tagEndExp = "";
      }
      if (attrStr && val.indexOf("<") === -1) {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
      }
    }
    __name(buildObjectNode, "buildObjectNode");
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else
          return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    __name(buildEmptyObjNode, "buildEmptyObjNode");
    function buildTextValNode(val, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "" && this.options.unpairedTags.indexOf(key) !== -1) {
          if (this.options.suppressUnpairedNode) {
            return this.indentate(level) + "<" + key + this.tagEndChar;
          } else {
            return this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          }
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    }
    __name(buildTextValNode, "buildTextValNode");
    function replaceEntitiesValue(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    __name(replaceEntitiesValue, "replaceEntitiesValue");
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val === "" && this.options.unpairedTags.indexOf(key) !== -1) {
        if (this.options.suppressUnpairedNode) {
          return this.indentate(level) + "<" + key + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        }
      } else if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else
          return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    __name(buildEmptyTextNode, "buildEmptyTextNode");
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    __name(indentate, "indentate");
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    __name(isAttribute, "isAttribute");
    module.exports = Builder;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.0.11/node_modules/fast-xml-parser/src/fxp.js"(exports, module) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryAssumeRoleCommand");
    exports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryAssumeRoleWithSAMLCommand");
    exports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryAssumeRoleWithWebIdentityCommand");
    exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryDecodeAuthorizationMessageCommand");
    exports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryGetAccessKeyInfoCommand");
    exports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryGetCallerIdentityCommand");
    exports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryGetFederationTokenCommand");
    exports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "serializeAws_queryGetSessionTokenCommand");
    exports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryAssumeRoleCommand");
    exports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    }, "deserializeAws_queryAssumeRoleCommandError");
    var deserializeAws_queryAssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryAssumeRoleWithSAMLCommand");
    exports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    }, "deserializeAws_queryAssumeRoleWithSAMLCommandError");
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryAssumeRoleWithWebIdentityCommand");
    exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    }, "deserializeAws_queryAssumeRoleWithWebIdentityCommandError");
    var deserializeAws_queryDecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryDecodeAuthorizationMessageCommand");
    exports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    }, "deserializeAws_queryDecodeAuthorizationMessageCommandError");
    var deserializeAws_queryGetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryGetAccessKeyInfoCommand");
    exports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    }, "deserializeAws_queryGetAccessKeyInfoCommandError");
    var deserializeAws_queryGetCallerIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryGetCallerIdentityCommand");
    exports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    }, "deserializeAws_queryGetCallerIdentityCommandError");
    var deserializeAws_queryGetFederationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryGetFederationTokenCommand");
    exports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    }, "deserializeAws_queryGetFederationTokenCommandError");
    var deserializeAws_queryGetSessionTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    }, "deserializeAws_queryGetSessionTokenCommand");
    exports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    }, "deserializeAws_queryGetSessionTokenCommandError");
    var deserializeAws_queryExpiredTokenExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryExpiredTokenExceptionResponse");
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryIDPCommunicationErrorExceptionResponse");
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryIDPRejectedClaimExceptionResponse");
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryInvalidAuthorizationMessageExceptionResponse");
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryInvalidIdentityTokenExceptionResponse");
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryMalformedPolicyDocumentExceptionResponse");
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryPackedPolicyTooLargeExceptionResponse");
    var deserializeAws_queryRegionDisabledExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    }, "deserializeAws_queryRegionDisabledExceptionResponse");
    var serializeAws_queryAssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    }, "serializeAws_queryAssumeRoleRequest");
    var serializeAws_queryAssumeRoleWithSAMLRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    }, "serializeAws_queryAssumeRoleWithSAMLRequest");
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    }, "serializeAws_queryAssumeRoleWithWebIdentityRequest");
    var serializeAws_queryDecodeAuthorizationMessageRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    }, "serializeAws_queryDecodeAuthorizationMessageRequest");
    var serializeAws_queryGetAccessKeyInfoRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    }, "serializeAws_queryGetAccessKeyInfoRequest");
    var serializeAws_queryGetCallerIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "serializeAws_queryGetCallerIdentityRequest");
    var serializeAws_queryGetFederationTokenRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "serializeAws_queryGetFederationTokenRequest");
    var serializeAws_queryGetSessionTokenRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    }, "serializeAws_queryGetSessionTokenRequest");
    var serializeAws_querypolicyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "serializeAws_querypolicyDescriptorListType");
    var serializeAws_queryPolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    }, "serializeAws_queryPolicyDescriptorType");
    var serializeAws_queryTag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    }, "serializeAws_queryTag");
    var serializeAws_querytagKeyListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "serializeAws_querytagKeyListType");
    var serializeAws_querytagListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "serializeAws_querytagListType");
    var deserializeAws_queryAssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    }, "deserializeAws_queryAssumedRoleUser");
    var deserializeAws_queryAssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    }, "deserializeAws_queryAssumeRoleResponse");
    var deserializeAws_queryAssumeRoleWithSAMLResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    }, "deserializeAws_queryAssumeRoleWithSAMLResponse");
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    }, "deserializeAws_queryAssumeRoleWithWebIdentityResponse");
    var deserializeAws_queryCredentials = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Expiration"]));
      }
      return contents;
    }, "deserializeAws_queryCredentials");
    var deserializeAws_queryDecodeAuthorizationMessageResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    }, "deserializeAws_queryDecodeAuthorizationMessageResponse");
    var deserializeAws_queryExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryExpiredTokenException");
    var deserializeAws_queryFederatedUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    }, "deserializeAws_queryFederatedUser");
    var deserializeAws_queryGetAccessKeyInfoResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    }, "deserializeAws_queryGetAccessKeyInfoResponse");
    var deserializeAws_queryGetCallerIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    }, "deserializeAws_queryGetCallerIdentityResponse");
    var deserializeAws_queryGetFederationTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    }, "deserializeAws_queryGetFederationTokenResponse");
    var deserializeAws_queryGetSessionTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    }, "deserializeAws_queryGetSessionTokenResponse");
    var deserializeAws_queryIDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryIDPCommunicationErrorException");
    var deserializeAws_queryIDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryIDPRejectedClaimException");
    var deserializeAws_queryInvalidAuthorizationMessageException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryInvalidAuthorizationMessageException");
    var deserializeAws_queryInvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryInvalidIdentityTokenException");
    var deserializeAws_queryMalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryMalformedPolicyDocumentException");
    var deserializeAws_queryPackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryPackedPolicyTooLargeException");
    var deserializeAws_queryRegionDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    }, "deserializeAws_queryRegionDisabledException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var collectBody = /* @__PURE__ */ __name((streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    }, "collectBody");
    var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    }), "parseBody");
    var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    }, "parseErrorBody");
    var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadQueryErrorCode");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    __name(AssumeRoleCommand, "AssumeRoleCommand");
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    __name(AssumeRoleWithSAMLCommand, "AssumeRoleWithSAMLCommand");
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    __name(AssumeRoleWithWebIdentityCommand, "AssumeRoleWithWebIdentityCommand");
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    __name(DecodeAuthorizationMessageCommand, "DecodeAuthorizationMessageCommand");
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    __name(GetAccessKeyInfoCommand, "GetAccessKeyInfoCommand");
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    __name(GetCallerIdentityCommand, "GetCallerIdentityCommand");
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    __name(GetFederationTokenCommand, "GetFederationTokenCommand");
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    __name(GetSessionTokenCommand, "GetSessionTokenCommand");
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-sdk-sts@3.208.0/node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-sdk-sts@3.208.0/node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs22();
    var resolveStsAuthConfig = /* @__PURE__ */ __name((input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    }), "resolveStsAuthConfig");
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    }, "resolveClientEndpointParameters");
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.208.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.208.0",
        "@aws-sdk/credential-provider-node": "3.208.0",
        "@aws-sdk/fetch-http-handler": "3.208.0",
        "@aws-sdk/hash-node": "3.208.0",
        "@aws-sdk/invalid-dependency": "3.208.0",
        "@aws-sdk/middleware-content-length": "3.208.0",
        "@aws-sdk/middleware-endpoint": "3.208.0",
        "@aws-sdk/middleware-host-header": "3.208.0",
        "@aws-sdk/middleware-logger": "3.208.0",
        "@aws-sdk/middleware-recursion-detection": "3.208.0",
        "@aws-sdk/middleware-retry": "3.208.0",
        "@aws-sdk/middleware-sdk-sts": "3.208.0",
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/middleware-signing": "3.208.0",
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/middleware-user-agent": "3.208.0",
        "@aws-sdk/node-config-provider": "3.208.0",
        "@aws-sdk/node-http-handler": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/smithy-client": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-base64-browser": "3.208.0",
        "@aws-sdk/util-base64-node": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.208.0",
        "@aws-sdk/util-defaults-mode-node": "3.208.0",
        "@aws-sdk/util-endpoints": "3.208.0",
        "@aws-sdk/util-user-agent-browser": "3.208.0",
        "@aws-sdk/util-user-agent-node": "3.208.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "fast-xml-parser": "4.0.11",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = /* @__PURE__ */ __name((region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    }, "decorateDefaultRegion");
    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    }, "getDefaultRoleAssumer");
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    }, "getDefaultRoleAssumerWithWebIdentity");
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    }), "decorateDefaultCredentialProvider");
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.208.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.208.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs17();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = /* @__PURE__ */ __name(() => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    }, "fromEnv");
    exports.fromEnv = fromEnv;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.208.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.208.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = __require("os");
    var path_1 = __require("path");
    var getHomeDir = /* @__PURE__ */ __name(() => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    }, "getHomeDir");
    exports.getHomeDir = getHomeDir;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = /* @__PURE__ */ __name((init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE, "getProfileName");
    exports.getProfileName = getProfileName;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = __require("crypto");
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = /* @__PURE__ */ __name((ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(ssoStartUrl).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    }, "getSSOTokenFilepath");
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = __require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = /* @__PURE__ */ __name(async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    }, "getSSOTokenFromFile");
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = /* @__PURE__ */ __name(() => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config"), "getConfigFilepath");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = /* @__PURE__ */ __name(() => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials"), "getCredentialsFilepath");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    }), "getProfileData");
    exports.getProfileData = getProfileData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = /* @__PURE__ */ __name((iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    }, "parseIni");
    exports.parseIni = parseIni;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = __require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = /* @__PURE__ */ __name((path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    }, "slurpFile");
    exports.slurpFile = slurpFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    }, "loadSharedConfigFiles");
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {}), "getSsoSessionData");
    exports.getSsoSessionData = getSsoSessionData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var loadSsoSessionData = /* @__PURE__ */ __name(async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    }, "loadSsoSessionData");
    exports.loadSsoSessionData = loadSsoSessionData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    }, "parseKnownFiles");
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.208.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs17();
    var buffer_1 = __require("buffer");
    var http_1 = __require("http");
    function httpRequest2(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    __name(httpRequest2, "httpRequest");
    exports.httpRequest = httpRequest2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string", "isImdsCredentials");
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = /* @__PURE__ */ __name((creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    }), "fromImdsCredentials");
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = /* @__PURE__ */ __name(({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout }), "providerConfigFromInit");
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    }, "retry");
    exports.retry = retry;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs17();
    var url_1 = __require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    }, "fromContainerMetadata");
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    }, "requestFromEcsImds");
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = /* @__PURE__ */ __name(async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    }, "getCmdsUri");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs17();
    var fromEnv = /* @__PURE__ */ __name((envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    }, "fromEnv");
    exports.fromEnv = fromEnv;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs17();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    }, "fromSharedConfigFiles");
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs17();
    var isFunction = /* @__PURE__ */ __name((func) => typeof func === "function", "isFunction");
    var fromStatic = /* @__PURE__ */ __name((defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue), "fromStatic");
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs17();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue))), "loadConfig");
    exports.loadConfig = loadConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.208.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs27();
    var url_parser_1 = require_dist_cjs2();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), "getInstanceMetadataEndpoint");
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = /* @__PURE__ */ __name(async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)(), "getFromEndpointConfig");
    var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    }, "getFromEndpointModeConfig");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    }, "getExtendedInstanceMetadataCredentials");
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    }, "staticStabilityProvider");
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs17();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = /* @__PURE__ */ __name((init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger }), "fromInstanceMetadata");
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = /* @__PURE__ */ __name((init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      }, "getCredentials");
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    }, "getInstanceImdsProvider");
    var getMetadataToken = /* @__PURE__ */ __name(async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }), "getMetadataToken");
    var getProfile = /* @__PURE__ */ __name(async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString(), "getProfile");
    var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    }, "getCredentialsFromProfile");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.208.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs25();
    var credential_provider_imds_1 = require_dist_cjs28();
    var property_provider_1 = require_dist_cjs17();
    var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName2) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName2}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    }, "resolveCredentialSource");
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs17();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg)), "isAssumeRoleProfile");
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined", "isAssumeRoleWithSourceProfile");
    var isAssumeRoleWithProviderProfile = /* @__PURE__ */ __name((arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined", "isAssumeRoleWithProviderProfile");
    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(async (profileName2, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName2];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName2} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName2)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName2} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    }, "resolveAssumeRoleCredentials");
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    exports.isSsoProfile = isSsoProfile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    __name(SSOServiceException, "SSOServiceException");
    exports.SSOServiceException = SSOServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequestFilterSensitiveLog = exports.ListAccountsResponseFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.ListAccountRolesResponseFilterSensitiveLog = exports.RoleInfoFilterSensitiveLog = exports.ListAccountRolesRequestFilterSensitiveLog = exports.GetRoleCredentialsResponseFilterSensitiveLog = exports.RoleCredentialsFilterSensitiveLog = exports.GetRoleCredentialsRequestFilterSensitiveLog = exports.AccountInfoFilterSensitiveLog = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    __name(InvalidRequestException, "InvalidRequestException");
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    __name(ResourceNotFoundException, "ResourceNotFoundException");
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    __name(TooManyRequestsException, "TooManyRequestsException");
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    __name(UnauthorizedException, "UnauthorizedException");
    exports.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "AccountInfoFilterSensitiveLog");
    exports.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    }), "GetRoleCredentialsRequestFilterSensitiveLog");
    exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    }), "RoleCredentialsFilterSensitiveLog");
    exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    }), "GetRoleCredentialsResponseFilterSensitiveLog");
    exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    }), "ListAccountRolesRequestFilterSensitiveLog");
    exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "RoleInfoFilterSensitiveLog");
    exports.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListAccountRolesResponseFilterSensitiveLog");
    exports.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    }), "ListAccountsRequestFilterSensitiveLog");
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "ListAccountsResponseFilterSensitiveLog");
    exports.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    }), "LogoutRequestFilterSensitiveLog");
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = map({
        role_name: [, input.roleName],
        account_id: [, input.accountId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    }, "serializeAws_restJson1GetRoleCredentialsCommand");
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, input.accountId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    }, "serializeAws_restJson1ListAccountRolesCommand");
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    }, "serializeAws_restJson1ListAccountsCommand");
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    }, "serializeAws_restJson1LogoutCommand");
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials != null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return contents;
    }, "deserializeAws_restJson1GetRoleCredentialsCommand");
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    }, "deserializeAws_restJson1GetRoleCredentialsCommandError");
    var deserializeAws_restJson1ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList != null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return contents;
    }, "deserializeAws_restJson1ListAccountRolesCommand");
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    }, "deserializeAws_restJson1ListAccountRolesCommandError");
    var deserializeAws_restJson1ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList != null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return contents;
    }, "deserializeAws_restJson1ListAccountsCommand");
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    }, "deserializeAws_restJson1ListAccountsCommandError");
    var deserializeAws_restJson1LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    }, "deserializeAws_restJson1LogoutCommand");
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    }, "deserializeAws_restJson1LogoutCommandError");
    var map = smithy_client_1.map;
    var deserializeAws_restJson1InvalidRequestExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    }, "deserializeAws_restJson1InvalidRequestExceptionResponse");
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    }, "deserializeAws_restJson1ResourceNotFoundExceptionResponse");
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    }, "deserializeAws_restJson1TooManyRequestsExceptionResponse");
    var deserializeAws_restJson1UnauthorizedExceptionResponse = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    }, "deserializeAws_restJson1UnauthorizedExceptionResponse");
    var deserializeAws_restJson1AccountInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    }, "deserializeAws_restJson1AccountInfo");
    var deserializeAws_restJson1AccountListType = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    }, "deserializeAws_restJson1AccountListType");
    var deserializeAws_restJson1RoleCredentials = /* @__PURE__ */ __name((output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    }, "deserializeAws_restJson1RoleCredentials");
    var deserializeAws_restJson1RoleInfo = /* @__PURE__ */ __name((output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    }, "deserializeAws_restJson1RoleInfo");
    var deserializeAws_restJson1RoleListType = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    }, "deserializeAws_restJson1RoleListType");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var collectBody = /* @__PURE__ */ __name((streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    }, "collectBody");
    var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
    var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
    var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    }), "parseBody");
    var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    }, "parseErrorBody");
    var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
      const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
      const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      }, "sanitizeErrorCode");
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    }, "loadRestJsonErrorCode");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    __name(GetRoleCredentialsCommand, "GetRoleCredentialsCommand");
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    __name(ListAccountRolesCommand, "ListAccountRolesCommand");
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    __name(ListAccountsCommand, "ListAccountsCommand");
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    __name(LogoutCommand, "LogoutCommand");
    exports.LogoutCommand = LogoutCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    }, "resolveClientEndpointParameters");
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.208.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.208.0",
        "@aws-sdk/fetch-http-handler": "3.208.0",
        "@aws-sdk/hash-node": "3.208.0",
        "@aws-sdk/invalid-dependency": "3.208.0",
        "@aws-sdk/middleware-content-length": "3.208.0",
        "@aws-sdk/middleware-endpoint": "3.208.0",
        "@aws-sdk/middleware-host-header": "3.208.0",
        "@aws-sdk/middleware-logger": "3.208.0",
        "@aws-sdk/middleware-recursion-detection": "3.208.0",
        "@aws-sdk/middleware-retry": "3.208.0",
        "@aws-sdk/middleware-serde": "3.208.0",
        "@aws-sdk/middleware-stack": "3.208.0",
        "@aws-sdk/middleware-user-agent": "3.208.0",
        "@aws-sdk/node-config-provider": "3.208.0",
        "@aws-sdk/node-http-handler": "3.208.0",
        "@aws-sdk/protocol-http": "3.208.0",
        "@aws-sdk/smithy-client": "3.208.0",
        "@aws-sdk/types": "3.208.0",
        "@aws-sdk/url-parser": "3.208.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-base64-browser": "3.208.0",
        "@aws-sdk/util-base64-node": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.208.0",
        "@aws-sdk/util-defaults-mode-node": "3.208.0",
        "@aws-sdk/util-endpoints": "3.208.0",
        "@aws-sdk/util-user-agent-browser": "3.208.0",
        "@aws-sdk/util-user-agent-node": "3.208.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-buffer-from@3.208.0/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-buffer-from@3.208.0/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs20();
    var buffer_1 = __require("buffer");
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    }, "fromArrayBuffer");
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    }, "fromString");
    exports.fromString = fromString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+hash-node@3.208.0/node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+hash-node@3.208.0/node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs29();
    var buffer_1 = __require("buffer");
    var crypto_1 = __require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret)) : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    __name(Hash, "Hash");
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
    __name(castSourceData, "castSourceData");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+querystring-builder@3.208.0/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+querystring-builder@3.208.0/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs19();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    __name(buildQueryString, "buildQueryString");
    exports.buildQueryString = buildQueryString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    }, "getTransformedHeaders");
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    }, "setConnectionTimeout");
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    }, "setSocketTimeout");
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = __require("stream");
    function writeRequestBody(httpRequest2, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest2.on("continue", () => {
          writeBody(httpRequest2, request.body);
        });
      } else {
        writeBody(httpRequest2, request.body);
      }
    }
    __name(writeRequestBody, "writeRequestBody");
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest2, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest2);
      } else if (body) {
        httpRequest2.end(Buffer.from(body));
      } else {
        httpRequest2.end();
      }
    }
    __name(writeBody, "writeBody");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs31();
    var http_1 = __require("http");
    var https_1 = __require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    __name(NodeHttpHandler, "NodeHttpHandler");
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs31();
    var http2_1 = __require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = /* @__PURE__ */ __name((err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          }, "reject");
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = /* @__PURE__ */ __name(() => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        }, "destroySessionCb");
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    __name(NodeHttp2Handler, "NodeHttp2Handler");
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = __require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    __name(Collector, "Collector");
    exports.Collector = Collector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = /* @__PURE__ */ __name((stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    }), "streamCollector");
    exports.streamCollector = streamCollector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.208.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = __require("fs");
    var calculateBodyLength = /* @__PURE__ */ __name((body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, "calculateBodyLength");
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/package.json
var require_package4 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/package.json"(exports, module) {
    module.exports = {
      name: "aws-crt",
      version: "1.14.7",
      description: "NodeJS/browser bindings to the aws-c-* libraries",
      homepage: "https://github.com/awslabs/aws-crt-nodejs",
      repository: {
        type: "git",
        url: "git+https://github.com/awslabs/aws-crt-nodejs.git"
      },
      contributors: [
        "AWS Common Runtime Team <aws-sdk-common-runtime@amazon.com>"
      ],
      license: "Apache-2.0",
      main: "./dist/index.js",
      browser: "./dist.browser/browser.js",
      types: "./dist/index.d.ts",
      scripts: {
        tsc: "node ./scripts/tsc.js",
        test: "npm run test:native",
        "test:node": "npm run test:native",
        "test:native": "npx jest --runInBand --verbose --config test/native/jest.config.js --forceExit",
        "test:browser": "npx jest --runInBand --verbose --config test/browser/jest.config.js --forceExit",
        "test:browser:ci": "npm run install:puppeteer && npm run test:browser",
        "install:puppeteer": "npm install --save-dev jest-puppeteer puppeteer @types/puppeteer",
        prepare: "node ./scripts/tsc.js && node ./scripts/install.js",
        install: "node ./scripts/install.js"
      },
      devDependencies: {
        "@types/crypto-js": "^3.1.43",
        "@types/jest": "^27.0.1",
        "@types/node": "^10.17.54",
        "@types/prettier": "2.6.0",
        "@types/puppeteer": "^5.4.4",
        "@types/uuid": "^3.4.8",
        "@types/ws": "^7.4.7",
        "aws-sdk": "^2.848.0",
        jest: "^27.2.1",
        "jest-puppeteer": "^5.0.4",
        "jest-runtime": "^27.2.1",
        puppeteer: "^3.3.0",
        "ts-jest": "^27.0.5",
        typedoc: "^0.22.18",
        "typedoc-plugin-merge-modules": "^3.1.0",
        typescript: "^4.7.4",
        uuid: "^8.3.2",
        yargs: "^17.2.1"
      },
      dependencies: {
        "@aws-sdk/util-utf8-browser": "^3.109.0",
        "@httptoolkit/websocket-stream": "^6.0.0",
        axios: "^0.24.0",
        "crypto-js": "^4.0.0",
        mqtt: "^4.3.7",
        "cmake-js": "^6.3.2",
        tar: "^6.1.11"
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/platform.js
var require_platform = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/platform.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crt_version = exports.package_info = exports.is_browser = exports.is_nodejs = void 0;
    function is_nodejs() {
      return typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node !== "undefined";
    }
    __name(is_nodejs, "is_nodejs");
    exports.is_nodejs = is_nodejs;
    function is_browser() {
      return !is_nodejs();
    }
    __name(is_browser, "is_browser");
    exports.is_browser = is_browser;
    function package_info() {
      try {
        const pkg = require_package4();
        return pkg;
      } catch (err) {
        return {
          name: "aws-crt-nodejs",
          version: "UNKNOWN"
        };
      }
    }
    __name(package_info, "package_info");
    exports.package_info = package_info;
    function crt_version() {
      const pkg = package_info();
      return pkg.version;
    }
    __name(crt_version, "crt_version");
    exports.crt_version = crt_version;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/resource_safety.js
var require_resource_safety = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/resource_safety.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.using = void 0;
    function using(resource, func) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          yield func(resource);
        } finally {
          resource.close();
        }
      });
    }
    __name(using, "using");
    exports.using = using;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/binding.js
var require_binding = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/binding.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var path = __importStar2(__require("path"));
    var os_1 = __require("os");
    var fs_1 = __require("fs");
    var process_1 = __require("process");
    var upgrade_string = "Please upgrade to node >=10.16.0, or use the provided browser implementation.";
    if ("napi" in process_1.versions) {
      const napi_version = parseInt(process_1.versions["napi"]);
      if (napi_version < 4) {
        throw new Error("The AWS CRT native implementation requires that NAPI version 4 be present. " + upgrade_string);
      }
    } else {
      throw new Error("The current runtime is not reporting an NAPI version. " + upgrade_string);
    }
    var binary_name = "aws-crt-nodejs";
    var platformDir = `${os_1.platform}-${os_1.arch}`;
    var source_root = path.resolve(__dirname, "..", "..");
    var dist = path.join(source_root, "dist");
    if ((0, fs_1.existsSync)(dist)) {
      source_root = dist;
    }
    var bin_path = path.resolve(source_root, "bin");
    var search_paths = [
      path.join(bin_path, platformDir, binary_name)
    ];
    var binding;
    for (const path2 of search_paths) {
      if ((0, fs_1.existsSync)(path2 + ".node")) {
        binding = __require(path2);
        break;
      }
    }
    if (binding == void 0) {
      throw new Error("AWS CRT binary not present in any of the following locations:\n	" + search_paths.join("\n	"));
    }
    exports.default = binding;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/crt.js
var require_crt = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/crt.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.native_memory_dump = exports.native_memory = void 0;
    var binding_1 = __importDefault2(require_binding());
    function native_memory() {
      return binding_1.default.native_memory();
    }
    __name(native_memory, "native_memory");
    exports.native_memory = native_memory;
    function native_memory_dump() {
      return binding_1.default.native_memory_dump();
    }
    __name(native_memory_dump, "native_memory_dump");
    exports.native_memory_dump = native_memory_dump;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/native_resource.js
var require_native_resource = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/native_resource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NativeResourceMixin = exports.NativeResource = void 0;
    var NativeResource = class {
      constructor(handle) {
        this.handle = handle;
      }
      native_handle() {
        return this.handle;
      }
    };
    __name(NativeResource, "NativeResource");
    exports.NativeResource = NativeResource;
    function NativeResourceMixin(Base) {
      return class extends Base {
        constructor(...args) {
          const handle = args.shift();
          super(...args);
          this._handle = handle;
        }
        _super(handle) {
          this._handle = handle;
        }
        native_handle() {
          return this._handle;
        }
      };
    }
    __name(NativeResourceMixin, "NativeResourceMixin");
    exports.NativeResourceMixin = NativeResourceMixin;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/io.js
var require_io = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/io.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;
    var TlsVersion;
    (function(TlsVersion2) {
      TlsVersion2[TlsVersion2["SSLv3"] = 0] = "SSLv3";
      TlsVersion2[TlsVersion2["TLSv1"] = 1] = "TLSv1";
      TlsVersion2[TlsVersion2["TLSv1_1"] = 2] = "TLSv1_1";
      TlsVersion2[TlsVersion2["TLSv1_2"] = 3] = "TLSv1_2";
      TlsVersion2[TlsVersion2["TLSv1_3"] = 4] = "TLSv1_3";
      TlsVersion2[TlsVersion2["Default"] = 128] = "Default";
    })(TlsVersion = exports.TlsVersion || (exports.TlsVersion = {}));
    var SocketType;
    (function(SocketType2) {
      SocketType2[SocketType2["STREAM"] = 0] = "STREAM";
      SocketType2[SocketType2["DGRAM"] = 1] = "DGRAM";
    })(SocketType = exports.SocketType || (exports.SocketType = {}));
    var SocketDomain;
    (function(SocketDomain2) {
      SocketDomain2[SocketDomain2["IPV4"] = 0] = "IPV4";
      SocketDomain2[SocketDomain2["IPV6"] = 1] = "IPV6";
      SocketDomain2[SocketDomain2["LOCAL"] = 2] = "LOCAL";
    })(SocketDomain = exports.SocketDomain || (exports.SocketDomain = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/io.js
var require_io2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/io.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pkcs11Lib = exports.TlsConnectionOptions = exports.ServerTlsContext = exports.ClientTlsContext = exports.TlsContext = exports.TlsContextOptions = exports.SocketOptions = exports.ClientBootstrap = exports.InputStream = exports.is_alpn_available = exports.enable_logging = exports.LogLevel = exports.error_code_to_name = exports.error_code_to_string = exports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var io_1 = require_io();
    var io_2 = require_io();
    Object.defineProperty(exports, "TlsVersion", { enumerable: true, get: function() {
      return io_2.TlsVersion;
    } });
    Object.defineProperty(exports, "SocketType", { enumerable: true, get: function() {
      return io_2.SocketType;
    } });
    Object.defineProperty(exports, "SocketDomain", { enumerable: true, get: function() {
      return io_2.SocketDomain;
    } });
    function error_code_to_string(error_code) {
      return binding_1.default.error_code_to_string(error_code);
    }
    __name(error_code_to_string, "error_code_to_string");
    exports.error_code_to_string = error_code_to_string;
    function error_code_to_name(error_code) {
      return binding_1.default.error_code_to_name(error_code);
    }
    __name(error_code_to_name, "error_code_to_name");
    exports.error_code_to_name = error_code_to_name;
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["NONE"] = 0] = "NONE";
      LogLevel2[LogLevel2["FATAL"] = 1] = "FATAL";
      LogLevel2[LogLevel2["ERROR"] = 2] = "ERROR";
      LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
      LogLevel2[LogLevel2["INFO"] = 4] = "INFO";
      LogLevel2[LogLevel2["DEBUG"] = 5] = "DEBUG";
      LogLevel2[LogLevel2["TRACE"] = 6] = "TRACE";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    function enable_logging(level) {
      binding_1.default.io_logging_enable(level);
    }
    __name(enable_logging, "enable_logging");
    exports.enable_logging = enable_logging;
    function is_alpn_available() {
      return binding_1.default.is_alpn_available();
    }
    __name(is_alpn_available, "is_alpn_available");
    exports.is_alpn_available = is_alpn_available;
    var InputStream = class extends native_resource_1.NativeResource {
      constructor(source) {
        super(binding_1.default.io_input_stream_new(16 * 1024));
        this.source = source;
        this.source.on("data", (data) => {
          data = Buffer.isBuffer(data) ? data : new Buffer(data.toString(), "utf8");
          binding_1.default.io_input_stream_append(this.native_handle(), data);
        });
        this.source.on("end", () => {
          binding_1.default.io_input_stream_append(this.native_handle(), void 0);
        });
      }
    };
    __name(InputStream, "InputStream");
    exports.InputStream = InputStream;
    var ClientBootstrap = class extends native_resource_1.NativeResource {
      constructor() {
        super(binding_1.default.io_client_bootstrap_new());
      }
    };
    __name(ClientBootstrap, "ClientBootstrap");
    exports.ClientBootstrap = ClientBootstrap;
    var SocketOptions = class extends native_resource_1.NativeResource {
      constructor(type = io_1.SocketType.STREAM, domain = io_1.SocketDomain.IPV6, connect_timeout_ms = 5e3, keepalive = false, keep_alive_interval_sec = 0, keep_alive_timeout_sec = 0, keep_alive_max_failed_probes = 0) {
        super(binding_1.default.io_socket_options_new(type, domain, connect_timeout_ms, keep_alive_interval_sec, keep_alive_timeout_sec, keep_alive_max_failed_probes, keepalive));
      }
    };
    __name(SocketOptions, "SocketOptions");
    exports.SocketOptions = SocketOptions;
    var TlsContextOptions = class {
      constructor() {
        this.min_tls_version = io_1.TlsVersion.Default;
        this.alpn_list = [];
        this.verify_peer = true;
      }
      override_default_trust_store_from_path(ca_dirpath, ca_filepath) {
        this.ca_dirpath = ca_dirpath;
        this.ca_filepath = ca_filepath;
      }
      override_default_trust_store(certificate_authority) {
        this.certificate_authority = certificate_authority;
      }
      static create_client_with_mtls(certificate, private_key) {
        let opt = new TlsContextOptions();
        opt.certificate = certificate;
        opt.private_key = private_key;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_from_path(certificate_filepath, private_key_filepath) {
        let opt = new TlsContextOptions();
        opt.certificate_filepath = certificate_filepath;
        opt.private_key_filepath = private_key_filepath;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password) {
        let opt = new TlsContextOptions();
        opt.pkcs12_filepath = pkcs12_filepath;
        opt.pkcs12_password = pkcs12_password;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {
        return this.create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password);
      }
      static create_client_with_mtls_pkcs11(options) {
        let opt = new TlsContextOptions();
        opt.pkcs11_options = options;
        opt.verify_peer = true;
        return opt;
      }
      static create_client_with_mtls_windows_cert_store_path(certificate_path) {
        let opt = new TlsContextOptions();
        opt.windows_cert_store_path = certificate_path;
        opt.verify_peer = true;
        return opt;
      }
      static create_server_with_mtls_from_path(certificate_filepath, private_key_filepath) {
        let opt = new TlsContextOptions();
        opt.certificate_filepath = certificate_filepath;
        opt.private_key_filepath = private_key_filepath;
        opt.verify_peer = false;
        return opt;
      }
      static create_server_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {
        let opt = new TlsContextOptions();
        opt.pkcs12_filepath = pkcs12_filepath;
        opt.pkcs12_password = pkcs12_password;
        opt.verify_peer = false;
        return opt;
      }
    };
    __name(TlsContextOptions, "TlsContextOptions");
    exports.TlsContextOptions = TlsContextOptions;
    var TlsContext = class extends native_resource_1.NativeResource {
      constructor(ctx_opt) {
        super(binding_1.default.io_tls_ctx_new(ctx_opt.min_tls_version, ctx_opt.ca_filepath, ctx_opt.ca_dirpath, ctx_opt.certificate_authority, ctx_opt.alpn_list && ctx_opt.alpn_list.length > 0 ? ctx_opt.alpn_list.join(";") : void 0, ctx_opt.certificate_filepath, ctx_opt.certificate, ctx_opt.private_key_filepath, ctx_opt.private_key, ctx_opt.pkcs12_filepath, ctx_opt.pkcs12_password, ctx_opt.pkcs11_options, ctx_opt.windows_cert_store_path, ctx_opt.verify_peer));
      }
    };
    __name(TlsContext, "TlsContext");
    exports.TlsContext = TlsContext;
    var ClientTlsContext = class extends TlsContext {
      constructor(ctx_opt) {
        if (!ctx_opt) {
          ctx_opt = new TlsContextOptions();
          ctx_opt.verify_peer = true;
        }
        super(ctx_opt);
      }
    };
    __name(ClientTlsContext, "ClientTlsContext");
    exports.ClientTlsContext = ClientTlsContext;
    var ServerTlsContext = class extends TlsContext {
      constructor(ctx_opt) {
        if (!ctx_opt) {
          ctx_opt = new TlsContextOptions();
          ctx_opt.verify_peer = false;
        }
        super(ctx_opt);
      }
    };
    __name(ServerTlsContext, "ServerTlsContext");
    exports.ServerTlsContext = ServerTlsContext;
    var TlsConnectionOptions = class extends native_resource_1.NativeResource {
      constructor(tls_ctx, server_name, alpn_list = []) {
        super(binding_1.default.io_tls_connection_options_new(tls_ctx.native_handle(), server_name, alpn_list && alpn_list.length > 0 ? alpn_list.join(";") : void 0));
        this.tls_ctx = tls_ctx;
        this.server_name = server_name;
        this.alpn_list = alpn_list;
      }
    };
    __name(TlsConnectionOptions, "TlsConnectionOptions");
    exports.TlsConnectionOptions = TlsConnectionOptions;
    var Pkcs11Lib = class extends native_resource_1.NativeResource {
      constructor(path, behavior = Pkcs11Lib.InitializeFinalizeBehavior.DEFAULT) {
        super(binding_1.default.io_pkcs11_lib_new(path, behavior));
      }
      close() {
        binding_1.default.io_pkcs11_lib_close(this.native_handle());
      }
    };
    __name(Pkcs11Lib, "Pkcs11Lib");
    exports.Pkcs11Lib = Pkcs11Lib;
    (function(Pkcs11Lib2) {
      let InitializeFinalizeBehavior;
      (function(InitializeFinalizeBehavior2) {
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["DEFAULT"] = 0] = "DEFAULT";
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["OMIT"] = 1] = "OMIT";
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["STRICT"] = 2] = "STRICT";
      })(InitializeFinalizeBehavior = Pkcs11Lib2.InitializeFinalizeBehavior || (Pkcs11Lib2.InitializeFinalizeBehavior = {}));
    })(Pkcs11Lib = exports.Pkcs11Lib || (exports.Pkcs11Lib = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/event.js
var require_event = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BufferedEventEmitter = void 0;
    var events_1 = __require("events");
    var BufferedEvent = class {
      constructor(event, args) {
        this.event = event;
        this.args = args;
      }
    };
    __name(BufferedEvent, "BufferedEvent");
    var BufferedEventEmitter = class extends events_1.EventEmitter {
      constructor() {
        super();
        this.corked = false;
      }
      cork() {
        this.corked = true;
      }
      uncork() {
        this.corked = false;
        while (this.eventQueue) {
          const event = this.eventQueue;
          super.emit(event.event, ...event.args);
          this.eventQueue = this.eventQueue.next;
        }
      }
      emit(event, ...args) {
        if (this.corked) {
          let last = this.lastQueuedEvent;
          this.lastQueuedEvent = new BufferedEvent(event, args);
          if (last) {
            last.next = this.lastQueuedEvent;
          } else {
            this.eventQueue = this.lastQueuedEvent;
          }
          return this.listeners(event).length > 0;
        }
        return super.emit(event, ...args);
      }
    };
    __name(BufferedEventEmitter, "BufferedEventEmitter");
    exports.BufferedEventEmitter = BufferedEventEmitter;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/error.js
var require_error = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/error.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CrtError = void 0;
    var binding_1 = __importDefault2(require_binding());
    var CrtError = class extends Error {
      constructor(error) {
        super(extract_message(error));
        this.error = error;
        this.error_code = extract_code(error);
        this.error_name = extract_name(error);
      }
    };
    __name(CrtError, "CrtError");
    exports.CrtError = CrtError;
    function extract_message(error) {
      if (typeof error === "number") {
        return binding_1.default.error_code_to_string(error);
      } else if (error instanceof CrtError) {
        return error.message;
      }
      return error.toString();
    }
    __name(extract_message, "extract_message");
    function extract_code(error) {
      if (typeof error === "number") {
        return error;
      } else if (error instanceof CrtError) {
        return error.error_code;
      }
      return void 0;
    }
    __name(extract_code, "extract_code");
    function extract_name(error) {
      if (typeof error === "number") {
        return binding_1.default.error_code_to_name(error);
      } else if (error instanceof CrtError) {
        return error.error_name;
      }
      return void 0;
    }
    __name(extract_name, "extract_name");
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/http.js
var require_http = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CommonHttpProxyOptions = exports.HttpProxyAuthenticationType = exports.HttpVersion = void 0;
    var HttpVersion;
    (function(HttpVersion2) {
      HttpVersion2[HttpVersion2["Unknown"] = 0] = "Unknown";
      HttpVersion2[HttpVersion2["Http1_0"] = 1] = "Http1_0";
      HttpVersion2[HttpVersion2["Http1_1"] = 2] = "Http1_1";
      HttpVersion2[HttpVersion2["Http2"] = 3] = "Http2";
    })(HttpVersion = exports.HttpVersion || (exports.HttpVersion = {}));
    var HttpProxyAuthenticationType;
    (function(HttpProxyAuthenticationType2) {
      HttpProxyAuthenticationType2[HttpProxyAuthenticationType2["None"] = 0] = "None";
      HttpProxyAuthenticationType2[HttpProxyAuthenticationType2["Basic"] = 1] = "Basic";
    })(HttpProxyAuthenticationType = exports.HttpProxyAuthenticationType || (exports.HttpProxyAuthenticationType = {}));
    var CommonHttpProxyOptions = class {
      constructor(host_name, port, auth_method = HttpProxyAuthenticationType.None, auth_username, auth_password) {
        this.host_name = host_name;
        this.port = port;
        this.auth_method = auth_method;
        this.auth_username = auth_username;
        this.auth_password = auth_password;
      }
    };
    __name(CommonHttpProxyOptions, "CommonHttpProxyOptions");
    exports.CommonHttpProxyOptions = CommonHttpProxyOptions;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/http.js
var require_http2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/http.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClientConnectionManager = exports.HttpClientStream = exports.HttpStream = exports.HttpClientConnection = exports.HttpProxyOptions = exports.HttpProxyConnectionType = exports.HttpConnection = exports.HttpRequest = exports.HttpHeaders = exports.HttpProxyAuthenticationType = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var error_1 = require_error();
    var http_1 = require_http();
    var http_2 = require_http();
    Object.defineProperty(exports, "HttpProxyAuthenticationType", { enumerable: true, get: function() {
      return http_2.HttpProxyAuthenticationType;
    } });
    var event_1 = require_event();
    exports.HttpHeaders = binding_1.default.HttpHeaders;
    var nativeHttpRequest = binding_1.default.HttpRequest;
    var HttpRequest = class extends nativeHttpRequest {
      constructor(method, path, headers, body) {
        super(method, path, headers, body === null || body === void 0 ? void 0 : body.native_handle());
      }
    };
    __name(HttpRequest, "HttpRequest");
    exports.HttpRequest = HttpRequest;
    var HttpConnection = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(native_handle) {
        super();
        this._super(native_handle);
      }
      close() {
        binding_1.default.http_connection_close(this.native_handle());
      }
      on(event, listener) {
        super.on(event, listener);
        if (event == "connect") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
    };
    __name(HttpConnection, "HttpConnection");
    exports.HttpConnection = HttpConnection;
    HttpConnection.CONNECT = "connect";
    HttpConnection.ERROR = "error";
    HttpConnection.CLOSE = "close";
    var HttpProxyConnectionType;
    (function(HttpProxyConnectionType2) {
      HttpProxyConnectionType2[HttpProxyConnectionType2["Legacy"] = 0] = "Legacy";
      HttpProxyConnectionType2[HttpProxyConnectionType2["Forwarding"] = 1] = "Forwarding";
      HttpProxyConnectionType2[HttpProxyConnectionType2["Tunneling"] = 2] = "Tunneling";
    })(HttpProxyConnectionType = exports.HttpProxyConnectionType || (exports.HttpProxyConnectionType = {}));
    var HttpProxyOptions = class extends http_1.CommonHttpProxyOptions {
      constructor(host_name, port, auth_method = http_1.HttpProxyAuthenticationType.None, auth_username, auth_password, tls_opts, connection_type) {
        super(host_name, port, auth_method, auth_username, auth_password);
        this.tls_opts = tls_opts;
        this.connection_type = connection_type;
      }
      create_native_handle() {
        return binding_1.default.http_proxy_options_new(this.host_name, this.port, this.auth_method, this.auth_username, this.auth_password, this.tls_opts ? this.tls_opts.native_handle() : void 0, this.connection_type ? this.connection_type : HttpProxyConnectionType.Legacy);
      }
    };
    __name(HttpProxyOptions, "HttpProxyOptions");
    exports.HttpProxyOptions = HttpProxyOptions;
    var HttpClientConnection = class extends HttpConnection {
      constructor(bootstrap, host_name, port, socket_options, tls_opts, proxy_options, handle) {
        super(handle ? handle : binding_1.default.http_connection_new(bootstrap != null ? bootstrap.native_handle() : null, (handle2, error_code) => {
          this._on_setup(handle2, error_code);
        }, (handle2, error_code) => {
          this._on_shutdown(handle2, error_code);
        }, host_name, port, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : void 0, proxy_options ? proxy_options.create_native_handle() : void 0));
        this.bootstrap = bootstrap;
        this.socket_options = socket_options;
        this.tls_opts = tls_opts;
      }
      _on_setup(native_handle, error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          return;
        }
        this.emit("connect");
      }
      _on_shutdown(native_handle, error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          return;
        }
        this.emit("close");
      }
      request(request) {
        let stream;
        const on_response_impl = /* @__PURE__ */ __name((status_code, headers) => {
          stream._on_response(status_code, headers);
        }, "on_response_impl");
        const on_body_impl = /* @__PURE__ */ __name((data) => {
          stream._on_body(data);
        }, "on_body_impl");
        const on_complete_impl = /* @__PURE__ */ __name((error_code) => {
          stream._on_complete(error_code);
        }, "on_complete_impl");
        const native_handle = binding_1.default.http_stream_new(this.native_handle(), request, on_complete_impl, on_response_impl, on_body_impl);
        return stream = new HttpClientStream(native_handle, this, request);
      }
    };
    __name(HttpClientConnection, "HttpClientConnection");
    exports.HttpClientConnection = HttpClientConnection;
    var HttpStream = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(native_handle, connection) {
        super();
        this.connection = connection;
        this._super(native_handle);
        this.cork();
      }
      activate() {
        binding_1.default.http_stream_activate(this.native_handle());
      }
      close() {
        binding_1.default.http_stream_close(this.native_handle());
      }
      _on_body(data) {
        this.emit("data", data);
      }
      _on_complete(error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          this.close();
          return;
        }
        this.on("end", () => {
          this.close();
        });
        this.emit("end");
      }
    };
    __name(HttpStream, "HttpStream");
    exports.HttpStream = HttpStream;
    var HttpClientStream = class extends HttpStream {
      constructor(native_handle, connection, request) {
        super(native_handle, connection);
        this.request = request;
      }
      status_code() {
        return this.response_status_code;
      }
      on(event, listener) {
        super.on(event, listener);
        if (event == "response") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
      _on_response(status_code, header_array) {
        this.response_status_code = status_code;
        let headers = new exports.HttpHeaders(header_array);
        this.emit("response", status_code, headers);
      }
    };
    __name(HttpClientStream, "HttpClientStream");
    exports.HttpClientStream = HttpClientStream;
    HttpClientStream.RESPONSE = "response";
    HttpClientStream.DATA = "data";
    HttpClientStream.ERROR = "error";
    HttpClientStream.END = "end";
    HttpClientStream.HEADERS = "headers";
    var HttpClientConnectionManager = class extends native_resource_1.NativeResource {
      constructor(bootstrap, host, port, max_connections, initial_window_size, socket_options, tls_opts, proxy_options) {
        super(binding_1.default.http_connection_manager_new(bootstrap != null ? bootstrap.native_handle() : null, host, port, max_connections, initial_window_size, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : void 0, proxy_options ? proxy_options.create_native_handle() : void 0, void 0));
        this.bootstrap = bootstrap;
        this.host = host;
        this.port = port;
        this.max_connections = max_connections;
        this.initial_window_size = initial_window_size;
        this.socket_options = socket_options;
        this.tls_opts = tls_opts;
        this.proxy_options = proxy_options;
        this.connections = /* @__PURE__ */ new Map();
      }
      acquire() {
        return new Promise((resolve, reject) => {
          const on_acquired = /* @__PURE__ */ __name((handle, error_code) => {
            if (error_code) {
              reject(new error_1.CrtError(error_code));
              return;
            }
            let connection = this.connections.get(handle);
            if (!connection) {
              connection = new HttpClientConnection(this.bootstrap, this.host, this.port, this.socket_options, this.tls_opts, this.proxy_options, handle);
              this.connections.set(handle, connection);
              connection.on("close", () => {
                this.connections.delete(handle);
              });
            }
            resolve(connection);
          }, "on_acquired");
          binding_1.default.http_connection_manager_acquire(this.native_handle(), on_acquired);
        });
      }
      release(connection) {
        binding_1.default.http_connection_manager_release(this.native_handle(), connection.native_handle());
      }
      close() {
        binding_1.default.http_connection_manager_close(this.native_handle());
      }
    };
    __name(HttpClientConnectionManager, "HttpClientConnectionManager");
    exports.HttpClientConnectionManager = HttpClientConnectionManager;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/mqtt.js
var require_mqtt = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/mqtt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RECONNECT_MIN_SEC = exports.DEFAULT_RECONNECT_MAX_SEC = exports.MqttWill = exports.QoS = void 0;
    var QoS;
    (function(QoS2) {
      QoS2[QoS2["AtMostOnce"] = 0] = "AtMostOnce";
      QoS2[QoS2["AtLeastOnce"] = 1] = "AtLeastOnce";
      QoS2[QoS2["ExactlyOnce"] = 2] = "ExactlyOnce";
    })(QoS = exports.QoS || (exports.QoS = {}));
    var MqttWill = class {
      constructor(topic, qos, payload2, retain = false) {
        this.topic = topic;
        this.qos = qos;
        this.payload = payload2;
        this.retain = retain;
      }
    };
    __name(MqttWill, "MqttWill");
    exports.MqttWill = MqttWill;
    exports.DEFAULT_RECONNECT_MAX_SEC = 128;
    exports.DEFAULT_RECONNECT_MIN_SEC = 1;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/mqtt.js
var require_mqtt2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/mqtt.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MqttClientConnection = exports.MqttClient = exports.MqttWill = exports.QoS = exports.HttpProxyOptions = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var event_1 = require_event();
    var error_1 = require_error();
    var io = __importStar2(require_io2());
    var http_1 = require_http2();
    Object.defineProperty(exports, "HttpProxyOptions", { enumerable: true, get: function() {
      return http_1.HttpProxyOptions;
    } });
    var mqtt_1 = require_mqtt();
    var mqtt_2 = require_mqtt();
    Object.defineProperty(exports, "QoS", { enumerable: true, get: function() {
      return mqtt_2.QoS;
    } });
    Object.defineProperty(exports, "MqttWill", { enumerable: true, get: function() {
      return mqtt_2.MqttWill;
    } });
    var MqttClient = class extends native_resource_1.NativeResource {
      constructor(bootstrap = void 0) {
        super(binding_1.default.mqtt_client_new(bootstrap != null ? bootstrap.native_handle() : null));
        this.bootstrap = bootstrap;
      }
      new_connection(config) {
        return new MqttClientConnection(this, config);
      }
    };
    __name(MqttClient, "MqttClient");
    exports.MqttClient = MqttClient;
    function normalize_payload(payload2) {
      if (ArrayBuffer.isView(payload2)) {
        return payload2;
      }
      if (payload2 instanceof ArrayBuffer) {
        return payload2;
      }
      if (typeof payload2 === "string") {
        return payload2;
      }
      if (typeof payload2 === "object") {
        return JSON.stringify(payload2);
      }
      throw new TypeError("payload parameter must be a string, object, or DataView.");
    }
    __name(normalize_payload, "normalize_payload");
    var MqttClientConnection = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(client, config) {
        super();
        this.client = client;
        this.config = config;
        const will = config.will ? {
          topic: config.will.topic,
          qos: config.will.qos,
          payload: normalize_payload(config.will.payload),
          retain: config.will.retain
        } : void 0;
        var min_sec = mqtt_1.DEFAULT_RECONNECT_MIN_SEC;
        var max_sec = mqtt_1.DEFAULT_RECONNECT_MAX_SEC;
        if (config.reconnect_min_sec !== void 0) {
          min_sec = config.reconnect_min_sec;
          max_sec = Math.max(min_sec, max_sec);
        }
        if (config.reconnect_max_sec !== void 0) {
          max_sec = config.reconnect_max_sec;
          min_sec = Math.min(min_sec, max_sec);
        }
        this._super(binding_1.default.mqtt_client_connection_new(client.native_handle(), (error_code) => {
          this._on_connection_interrupted(error_code);
        }, (return_code, session_present) => {
          this._on_connection_resumed(return_code, session_present);
        }, config.tls_ctx ? config.tls_ctx.native_handle() : null, will, config.username, config.password, config.use_websocket, config.proxy_options ? config.proxy_options.create_native_handle() : void 0, config.websocket_handshake_transform, min_sec, max_sec));
        this.tls_ctx = config.tls_ctx;
        binding_1.default.mqtt_client_connection_on_message(this.native_handle(), this._on_any_publish.bind(this));
        this.on("error", (error) => {
        });
      }
      close() {
        binding_1.default.mqtt_client_connection_close(this.native_handle());
      }
      on(event, listener) {
        super.on(event, listener);
        if (event == "connect") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
      connect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_connect(this.native_handle(), this.config.client_id, this.config.host_name, this.config.port, this.config.socket_options.native_handle(), this.config.keep_alive, this.config.ping_timeout, this.config.protocol_operation_timeout, this.config.clean_session, this._on_connect_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      reconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_reconnect(this.native_handle(), this._on_connect_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      publish(topic, payload2, qos, retain = false) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_publish(this.native_handle(), topic, normalize_payload(payload2), qos, retain, this._on_puback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      subscribe(topic, qos, on_message) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_subscribe(this.native_handle(), topic, qos, on_message, this._on_suback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      unsubscribe(topic) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_unsubscribe(this.native_handle(), topic, this._on_unsuback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      disconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_disconnect(this.native_handle(), this._on_disconnect_callback.bind(this, resolve));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      _reject(reject) {
        return (reason) => {
          reject(reason);
          process.nextTick(() => {
            this.emit("error", new error_1.CrtError(reason));
          });
        };
      }
      _on_connection_interrupted(error_code) {
        this.emit("interrupt", new error_1.CrtError(error_code));
      }
      _on_connection_resumed(return_code, session_present) {
        this.emit("resume", return_code, session_present);
      }
      _on_any_publish(topic, payload2, dup, qos, retain) {
        this.emit("message", topic, payload2, dup, qos, retain);
      }
      _on_connect_callback(resolve, reject, error_code, return_code, session_present) {
        if (error_code == 0 && return_code == 0) {
          resolve(session_present);
          this.emit("connect", session_present);
        } else if (error_code != 0) {
          reject("Failed to connect: " + io.error_code_to_string(error_code));
        } else {
          reject("Server rejected connection.");
        }
      }
      _on_puback_callback(resolve, reject, packet_id, error_code) {
        if (error_code == 0) {
          resolve({ packet_id });
        } else {
          reject("Failed to publish: " + io.error_code_to_string(error_code));
        }
      }
      _on_suback_callback(resolve, reject, packet_id, topic, qos, error_code) {
        if (error_code == 0) {
          resolve({ packet_id, topic, qos, error_code });
        } else {
          reject("Failed to subscribe: " + io.error_code_to_string(error_code));
        }
      }
      _on_unsuback_callback(resolve, reject, packet_id, error_code) {
        if (error_code == 0) {
          resolve({ packet_id });
        } else {
          reject("Failed to unsubscribe: " + io.error_code_to_string(error_code));
        }
      }
      _on_disconnect_callback(resolve) {
        resolve();
        this.emit("disconnect");
        this.close();
      }
    };
    __name(MqttClientConnection, "MqttClientConnection");
    exports.MqttClientConnection = MqttClientConnection;
    MqttClientConnection.CONNECT = "connect";
    MqttClientConnection.DISCONNECT = "disconnect";
    MqttClientConnection.ERROR = "error";
    MqttClientConnection.INTERRUPT = "interrupt";
    MqttClientConnection.RESUME = "resume";
    MqttClientConnection.MESSAGE = "message";
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/crypto.js
var require_crypto = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/crypto.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac_sha256 = exports.Sha256Hmac = exports.hash_sha1 = exports.Sha1Hash = exports.hash_sha256 = exports.Sha256Hash = exports.hash_md5 = exports.Md5Hash = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var Hash = class extends native_resource_1.NativeResource {
      update(data) {
        binding_1.default.hash_update(this.native_handle(), data);
      }
      finalize(truncate_to) {
        return binding_1.default.hash_digest(this.native_handle(), truncate_to);
      }
      constructor(hash_handle) {
        super(hash_handle);
      }
    };
    __name(Hash, "Hash");
    var Md5Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_md5_new());
      }
    };
    __name(Md5Hash, "Md5Hash");
    exports.Md5Hash = Md5Hash;
    function hash_md5(data, truncate_to) {
      return binding_1.default.hash_md5_compute(data, truncate_to);
    }
    __name(hash_md5, "hash_md5");
    exports.hash_md5 = hash_md5;
    var Sha256Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_sha256_new());
      }
    };
    __name(Sha256Hash, "Sha256Hash");
    exports.Sha256Hash = Sha256Hash;
    function hash_sha256(data, truncate_to) {
      return binding_1.default.hash_sha256_compute(data, truncate_to);
    }
    __name(hash_sha256, "hash_sha256");
    exports.hash_sha256 = hash_sha256;
    var Sha1Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_sha1_new());
      }
    };
    __name(Sha1Hash, "Sha1Hash");
    exports.Sha1Hash = Sha1Hash;
    function hash_sha1(data, truncate_to) {
      return binding_1.default.hash_sha1_compute(data, truncate_to);
    }
    __name(hash_sha1, "hash_sha1");
    exports.hash_sha1 = hash_sha1;
    var Hmac = class extends native_resource_1.NativeResource {
      update(data) {
        binding_1.default.hmac_update(this.native_handle(), data);
      }
      finalize(truncate_to) {
        return binding_1.default.hmac_digest(this.native_handle(), truncate_to);
      }
      constructor(hash_handle) {
        super(hash_handle);
      }
    };
    __name(Hmac, "Hmac");
    var Sha256Hmac = class extends Hmac {
      constructor(secret) {
        super(binding_1.default.hmac_sha256_new(secret));
      }
    };
    __name(Sha256Hmac, "Sha256Hmac");
    exports.Sha256Hmac = Sha256Hmac;
    function hmac_sha256(secret, data, truncate_to) {
      return binding_1.default.hmac_sha256_compute(secret, data, truncate_to);
    }
    __name(hmac_sha256, "hmac_sha256");
    exports.hmac_sha256 = hmac_sha256;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/auth.js
var require_auth = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/auth.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws_verify_sigv4a_signing = exports.aws_sign_request = exports.AwsSignedBodyHeaderType = exports.AwsSignedBodyValue = exports.AwsSignatureType = exports.AwsSigningAlgorithm = exports.AwsCredentialsProvider = void 0;
    var binding_1 = __importDefault2(require_binding());
    var error_1 = require_error();
    var io_1 = require_io2();
    var AwsCredentialsProvider = class extends binding_1.default.AwsCredentialsProvider {
      static newDefault(bootstrap = void 0) {
        return super.newDefault(bootstrap != null ? bootstrap.native_handle() : null);
      }
      static newStatic(access_key, secret_key, session_token) {
        return super.newStatic(access_key, secret_key, session_token);
      }
      static newCognito(config) {
        return super.newCognito(config, config.tlsContext != null ? config.tlsContext.native_handle() : new io_1.ClientTlsContext().native_handle(), config.bootstrap != null ? config.bootstrap.native_handle() : null, config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null);
      }
    };
    __name(AwsCredentialsProvider, "AwsCredentialsProvider");
    exports.AwsCredentialsProvider = AwsCredentialsProvider;
    var AwsSigningAlgorithm;
    (function(AwsSigningAlgorithm2) {
      AwsSigningAlgorithm2[AwsSigningAlgorithm2["SigV4"] = 0] = "SigV4";
      AwsSigningAlgorithm2[AwsSigningAlgorithm2["SigV4Asymmetric"] = 1] = "SigV4Asymmetric";
    })(AwsSigningAlgorithm = exports.AwsSigningAlgorithm || (exports.AwsSigningAlgorithm = {}));
    var AwsSignatureType;
    (function(AwsSignatureType2) {
      AwsSignatureType2[AwsSignatureType2["HttpRequestViaHeaders"] = 0] = "HttpRequestViaHeaders";
      AwsSignatureType2[AwsSignatureType2["HttpRequestViaQueryParams"] = 1] = "HttpRequestViaQueryParams";
      AwsSignatureType2[AwsSignatureType2["HttpRequestChunk"] = 2] = "HttpRequestChunk";
      AwsSignatureType2[AwsSignatureType2["HttpRequestEvent"] = 3] = "HttpRequestEvent";
    })(AwsSignatureType = exports.AwsSignatureType || (exports.AwsSignatureType = {}));
    var AwsSignedBodyValue;
    (function(AwsSignedBodyValue2) {
      AwsSignedBodyValue2["EmptySha256"] = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      AwsSignedBodyValue2["UnsignedPayload"] = "UNSIGNED-PAYLOAD";
      AwsSignedBodyValue2["StreamingAws4HmacSha256Payload"] = "STREAMING-AWS4-HMAC-SHA256-PAYLOAD";
      AwsSignedBodyValue2["StreamingAws4HmacSha256Events"] = "STREAMING-AWS4-HMAC-SHA256-EVENTS";
    })(AwsSignedBodyValue = exports.AwsSignedBodyValue || (exports.AwsSignedBodyValue = {}));
    var AwsSignedBodyHeaderType;
    (function(AwsSignedBodyHeaderType2) {
      AwsSignedBodyHeaderType2[AwsSignedBodyHeaderType2["None"] = 0] = "None";
      AwsSignedBodyHeaderType2[AwsSignedBodyHeaderType2["XAmzContentSha256"] = 1] = "XAmzContentSha256";
    })(AwsSignedBodyHeaderType = exports.AwsSignedBodyHeaderType || (exports.AwsSignedBodyHeaderType = {}));
    function aws_sign_request(request, config) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
          try {
            binding_1.default.aws_sign_request(request, config, (error_code) => {
              if (error_code == 0) {
                resolve(request);
              } else {
                reject(new error_1.CrtError(error_code));
              }
            });
          } catch (error) {
            reject(error);
          }
        });
      });
    }
    __name(aws_sign_request, "aws_sign_request");
    exports.aws_sign_request = aws_sign_request;
    function aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y) {
      return binding_1.default.aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y);
    }
    __name(aws_verify_sigv4a_signing, "aws_verify_sigv4a_signing");
    exports.aws_verify_sigv4a_signing = aws_verify_sigv4a_signing;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/aws_iot_shared.js
var require_aws_iot_shared = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/common/aws_iot_shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.populate_username_string_with_custom_authorizer = exports.is_string_and_not_empty = exports.add_to_username_parameter = void 0;
    function add_to_username_parameter(current_username, parameter_value, parameter_pre_text) {
      let return_string = current_username;
      if (return_string.indexOf("?") != -1) {
        return_string += "&";
      } else {
        return_string += "?";
      }
      if (parameter_value.indexOf(parameter_pre_text) != -1) {
        return return_string + parameter_value;
      } else {
        return return_string + parameter_pre_text + parameter_value;
      }
    }
    __name(add_to_username_parameter, "add_to_username_parameter");
    exports.add_to_username_parameter = add_to_username_parameter;
    function is_string_and_not_empty(item) {
      return item != void 0 && typeof item == "string" && item != "";
    }
    __name(is_string_and_not_empty, "is_string_and_not_empty");
    exports.is_string_and_not_empty = is_string_and_not_empty;
    function populate_username_string_with_custom_authorizer(current_username, input_username, input_authorizer, input_signature, input_builder_username) {
      let username_string = "";
      if (current_username) {
        username_string += current_username;
      }
      if (is_string_and_not_empty(input_username) == false) {
        if (is_string_and_not_empty(input_builder_username) && input_builder_username) {
          username_string += input_builder_username;
        }
      } else {
        username_string += input_username;
      }
      if (is_string_and_not_empty(input_authorizer) && input_authorizer) {
        username_string = add_to_username_parameter(username_string, input_authorizer, "x-amz-customauthorizer-name=");
      }
      if (is_string_and_not_empty(input_signature) && input_signature) {
        username_string = add_to_username_parameter(username_string, input_signature, "x-amz-customauthorizer-signature=");
      }
      return username_string;
    }
    __name(populate_username_string_with_custom_authorizer, "populate_username_string_with_custom_authorizer");
    exports.populate_username_string_with_custom_authorizer = populate_username_string_with_custom_authorizer;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/aws_iot.js
var require_aws_iot = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/aws_iot.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsIotMqttConnectionConfigBuilder = void 0;
    var mqtt_1 = require_mqtt();
    var io = __importStar2(require_io2());
    var io_1 = require_io2();
    var platform = __importStar2(require_platform());
    var error_1 = require_error();
    var auth_1 = require_auth();
    var iot_shared = __importStar2(require_aws_iot_shared());
    var AwsIotMqttConnectionConfigBuilder = class {
      constructor(tls_ctx_options) {
        this.tls_ctx_options = tls_ctx_options;
        this.params = {
          client_id: "",
          host_name: "",
          socket_options: new io.SocketOptions(),
          port: 8883,
          use_websocket: false,
          clean_session: false,
          keep_alive: void 0,
          will: void 0,
          username: "",
          password: void 0,
          tls_ctx: void 0,
          reconnect_min_sec: mqtt_1.DEFAULT_RECONNECT_MIN_SEC,
          reconnect_max_sec: mqtt_1.DEFAULT_RECONNECT_MAX_SEC
        };
        this.is_using_custom_authorizer = false;
      }
      static new_mtls_builder_from_path(cert_path, key_path) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_from_path(cert_path, key_path));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_mtls_builder(cert, private_key) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls(cert, private_key));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_mtls_pkcs11_builder(pkcs11_options) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_pkcs11(pkcs11_options));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_mtls_windows_cert_store_path_builder(certificate_path) {
        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(certificate_path));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      static new_default_builder() {
        let ctx_options = new io.TlsContextOptions();
        let builder = new AwsIotMqttConnectionConfigBuilder(ctx_options);
        return builder;
      }
      static new_websocket_builder(...args) {
        return this.new_with_websockets(...args);
      }
      static configure_websocket_handshake(builder, options) {
        if (options) {
          builder.params.websocket_handshake_transform = (request, done) => __awaiter2(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const signing_config = (_b = (_a = options.create_signing_config) === null || _a === void 0 ? void 0 : _a.call(options)) !== null && _b !== void 0 ? _b : {
              algorithm: auth_1.AwsSigningAlgorithm.SigV4,
              signature_type: auth_1.AwsSignatureType.HttpRequestViaQueryParams,
              provider: options.credentials_provider,
              region: options.region,
              service: (_c = options.service) !== null && _c !== void 0 ? _c : "iotdevicegateway",
              signed_body_value: auth_1.AwsSignedBodyValue.EmptySha256,
              omit_session_token: true
            };
            try {
              yield (0, auth_1.aws_sign_request)(request, signing_config);
              done();
            } catch (error) {
              if (error instanceof error_1.CrtError) {
                done(error.error_code);
              } else {
                done(3);
              }
            }
          });
        }
        return builder;
      }
      static new_with_websockets(options) {
        let tls_ctx_options = options === null || options === void 0 ? void 0 : options.tls_ctx_options;
        if (!tls_ctx_options) {
          tls_ctx_options = new io_1.TlsContextOptions();
          tls_ctx_options.alpn_list = [];
        }
        let builder = new AwsIotMqttConnectionConfigBuilder(tls_ctx_options);
        builder.params.use_websocket = true;
        builder.params.proxy_options = options === null || options === void 0 ? void 0 : options.proxy_options;
        if (builder.tls_ctx_options) {
          builder.params.port = 443;
        }
        this.configure_websocket_handshake(builder, options);
        return builder;
      }
      with_certificate_authority_from_path(ca_dirpath, ca_filepath) {
        this.tls_ctx_options.override_default_trust_store_from_path(ca_dirpath, ca_filepath);
        return this;
      }
      with_certificate_authority(ca) {
        this.tls_ctx_options.override_default_trust_store(ca);
        return this;
      }
      with_endpoint(endpoint) {
        this.params.host_name = endpoint;
        return this;
      }
      with_port(port) {
        this.params.port = port;
        return this;
      }
      with_client_id(client_id) {
        this.params.client_id = client_id;
        return this;
      }
      with_clean_session(clean_session) {
        this.params.clean_session = clean_session;
        return this;
      }
      with_keep_alive_seconds(keep_alive) {
        this.params.keep_alive = keep_alive;
        return this;
      }
      with_timeout_ms(timeout_ms) {
        this.with_ping_timeout_ms(timeout_ms);
        return this;
      }
      with_ping_timeout_ms(ping_timeout) {
        this.params.ping_timeout = ping_timeout;
        return this;
      }
      with_protocol_operation_timeout_ms(protocol_operation_timeout) {
        this.params.protocol_operation_timeout = protocol_operation_timeout;
        return this;
      }
      with_will(will) {
        this.params.will = will;
        return this;
      }
      with_socket_options(socket_options) {
        this.params.socket_options = socket_options;
        return this;
      }
      with_credentials(aws_region, aws_access_id, aws_secret_key, aws_sts_token) {
        return AwsIotMqttConnectionConfigBuilder.configure_websocket_handshake(this, {
          credentials_provider: auth_1.AwsCredentialsProvider.newStatic(aws_access_id, aws_secret_key, aws_sts_token),
          region: aws_region,
          service: "iotdevicegateway"
        });
      }
      with_http_proxy_options(proxy_options) {
        this.params.proxy_options = proxy_options;
        return this;
      }
      with_custom_authorizer(username, authorizer_name, authorizer_signature, password) {
        this.is_using_custom_authorizer = true;
        let username_string = iot_shared.populate_username_string_with_custom_authorizer("", username, authorizer_name, authorizer_signature, this.params.username);
        this.params.username = username_string;
        this.params.password = password;
        this.tls_ctx_options.alpn_list = ["mqtt"];
        this.params.port = 443;
        return this;
      }
      with_username(username) {
        this.params.username = username;
        return this;
      }
      with_password(password) {
        this.params.password = password;
        return this;
      }
      with_reconnect_max_sec(max_sec) {
        this.params.reconnect_max_sec = max_sec;
        return this;
      }
      with_reconnect_min_sec(min_sec) {
        this.params.reconnect_min_sec = min_sec;
        return this;
      }
      build() {
        var _a, _b, _c;
        if (this.params.client_id === void 0 || this.params.host_name === void 0) {
          throw "client_id and endpoint are required";
        }
        if (this.is_using_custom_authorizer == false) {
          if (iot_shared.is_string_and_not_empty(this.params.username)) {
            if (((_a = this.params.username) === null || _a === void 0 ? void 0 : _a.indexOf("x-amz-customauthorizer-name=")) != -1 || ((_b = this.params.username) === null || _b === void 0 ? void 0 : _b.indexOf("x-amz-customauthorizer-signature=")) != -1) {
              this.is_using_custom_authorizer = true;
            }
          }
        }
        if (this.is_using_custom_authorizer == true) {
          if (this.params.port != 443) {
            console.log("Warning: Attempting to connect to authorizer with unsupported port. Port is not 443...");
          }
          if (this.tls_ctx_options.alpn_list != ["mqtt"]) {
            this.tls_ctx_options.alpn_list = ["mqtt"];
          }
        }
        if (this.params.tls_ctx === void 0) {
          this.params.tls_ctx = new io.ClientTlsContext(this.tls_ctx_options);
        }
        if (iot_shared.is_string_and_not_empty(this.params.username) == false) {
          this.params.username = "?SDK=NodeJSv2&Version=";
        } else {
          if (((_c = this.params.username) === null || _c === void 0 ? void 0 : _c.indexOf("?")) != -1) {
            this.params.username += "&SDK=NodeJSv2&Version=";
          } else {
            this.params.username += "?SDK=NodeJSv2&Version=";
          }
        }
        this.params.username += platform.crt_version();
        return this.params;
      }
    };
    __name(AwsIotMqttConnectionConfigBuilder, "AwsIotMqttConnectionConfigBuilder");
    exports.AwsIotMqttConnectionConfigBuilder = AwsIotMqttConnectionConfigBuilder;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/checksums.js
var require_checksums = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/native/checksums.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crc32c = exports.crc32 = void 0;
    var binding_1 = __importDefault2(require_binding());
    function crc32(data, previous) {
      return binding_1.default.checksums_crc32(data, previous);
    }
    __name(crc32, "crc32");
    exports.crc32 = crc32;
    function crc32c(data, previous) {
      return binding_1.default.checksums_crc32c(data, previous);
    }
    __name(crc32c, "crc32c");
    exports.crc32c = crc32c;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.14.7/node_modules/aws-crt/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CrtError = exports.checksums = exports.resource_safety = exports.platform = exports.iot = exports.auth = exports.crypto = exports.http = exports.mqtt = exports.io = exports.crt = void 0;
    var platform = __importStar2(require_platform());
    exports.platform = platform;
    var resource_safety = __importStar2(require_resource_safety());
    exports.resource_safety = resource_safety;
    var crt = __importStar2(require_crt());
    exports.crt = crt;
    var io = __importStar2(require_io2());
    exports.io = io;
    var mqtt = __importStar2(require_mqtt2());
    exports.mqtt = mqtt;
    var http = __importStar2(require_http2());
    exports.http = http;
    var crypto5 = __importStar2(require_crypto());
    exports.crypto = crypto5;
    var auth = __importStar2(require_auth());
    exports.auth = auth;
    var iot = __importStar2(require_aws_iot());
    exports.iot = iot;
    var checksums = __importStar2(require_checksums());
    exports.checksums = checksums;
    var error_1 = require_error();
    Object.defineProperty(exports, "CrtError", { enumerable: true, get: function() {
      return error_1.CrtError;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.208.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.208.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = /* @__PURE__ */ __name(() => {
      try {
        if (typeof __require === "function" && typeof module !== "undefined" && module.require && require_dist()) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    }, "isCrtAvailable");
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.208.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.208.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs27();
    var os_1 = __require("os");
    var process_1 = __require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    }, "defaultUserAgent");
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8-node@3.208.0/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8-node@3.208.0/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs29();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, "fromUtf8");
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = /* @__PURE__ */ __name((input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8"), "toUtf8");
    exports.toUtf8 = toUtf8;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs29();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = /* @__PURE__ */ __name((input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }, "fromBase64");
    exports.fromBase64 = fromBase64;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs29();
    var toBase64 = /* @__PURE__ */ __name((input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64"), "toBase64");
    exports.toBase64 = toBase64;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports, module) {
    module.exports = {
      version: "1.1",
      partitions: [
        {
          id: "aws",
          regionRegex: "^(us|eu|ap|sa|ca|me|af)-\\w+-\\d+$",
          regions: {
            "af-south-1": {},
            "af-east-1": {},
            "ap-northeast-1": {},
            "ap-northeast-2": {},
            "ap-northeast-3": {},
            "ap-south-1": {},
            "ap-southeast-1": {},
            "ap-southeast-2": {},
            "ap-southeast-3": {},
            "ca-central-1": {},
            "eu-central-1": {},
            "eu-north-1": {},
            "eu-south-1": {},
            "eu-west-1": {},
            "eu-west-2": {},
            "eu-west-3": {},
            "me-south-1": {},
            "sa-east-1": {},
            "us-east-1": {},
            "us-east-2": {},
            "us-west-1": {},
            "us-west-2": {},
            "aws-global": {}
          },
          outputs: {
            name: "aws",
            dnsSuffix: "amazonaws.com",
            dualStackDnsSuffix: "api.aws",
            supportsFIPS: true,
            supportsDualStack: true
          }
        },
        {
          id: "aws-us-gov",
          regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
          regions: {
            "us-gov-west-1": {},
            "us-gov-east-1": {},
            "aws-us-gov-global": {}
          },
          outputs: {
            name: "aws-us-gov",
            dnsSuffix: "amazonaws.com",
            dualStackDnsSuffix: "api.aws",
            supportsFIPS: true,
            supportsDualStack: true
          }
        },
        {
          id: "aws-cn",
          regionRegex: "^cn\\-\\w+\\-\\d+$",
          regions: {
            "cn-north-1": {},
            "cn-northwest-1": {},
            "aws-cn-global": {}
          },
          outputs: {
            name: "aws-cn",
            dnsSuffix: "amazonaws.com.cn",
            dualStackDnsSuffix: "api.amazonwebservices.com.cn",
            supportsFIPS: true,
            supportsDualStack: true
          }
        },
        {
          id: "aws-iso",
          regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
          outputs: {
            name: "aws-iso",
            dnsSuffix: "c2s.ic.gov",
            supportsFIPS: true,
            supportsDualStack: false,
            dualStackDnsSuffix: "c2s.ic.gov"
          },
          regions: {
            "aws-iso-global": {}
          }
        },
        {
          id: "aws-iso-b",
          regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
          outputs: {
            name: "aws-iso-b",
            dnsSuffix: "sc2s.sgov.gov",
            supportsFIPS: true,
            supportsDualStack: false,
            dualStackDnsSuffix: "sc2s.sgov.gov"
          },
          regions: {
            "aws-iso-b-global": {}
          }
        }
      ]
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var { partitions } = partitions_json_1.default;
    var DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    var partition = /* @__PURE__ */ __name((value) => {
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    }, "partition");
    exports.partition = partition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debugId = void 0;
    exports.debugId = "endpoints";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    __name(toDebugString, "toDebugString");
    exports.toDebugString = toDebugString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    __name(EndpointError, "EndpointError");
    exports.EndpointError = EndpointError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = /* @__PURE__ */ __name((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
    exports.isIpAddress = isIpAddress;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    }, "isValidHostLabel");
    exports.isValidHostLabel = isValidHostLabel;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    }, "isVirtualHostableS3Bucket");
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseArn = void 0;
    var parseArn = /* @__PURE__ */ __name((value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    }, "parseArn");
    exports.parseArn = parseArn;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "booleanEquals");
    exports.booleanEquals = booleanEquals;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types5();
    var getAttrPathList = /* @__PURE__ */ __name((path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    }, "getAttrPathList");
    exports.getAttrPathList = getAttrPathList;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types5();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = /* @__PURE__ */ __name((value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value), "getAttr");
    exports.getAttr = getAttr;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSet = void 0;
    var isSet = /* @__PURE__ */ __name((value) => value != null, "isSet");
    exports.isSet = isSet;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    var not = /* @__PURE__ */ __name((value) => !value, "not");
    exports.not = not;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.208.0/node_modules/@aws-sdk/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth2(), exports);
    tslib_1.__exportStar(require_client2(), exports);
    tslib_1.__exportStar(require_command2(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto2(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_http3(), exports);
    tslib_1.__exportStar(require_logger(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_util2(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs37();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = /* @__PURE__ */ __name((value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url2 = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url2.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url2;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    }, "parseURL");
    exports.parseURL = parseURL;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringEquals = void 0;
    var stringEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "stringEquals");
    exports.stringEquals = stringEquals;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.substring = void 0;
    var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    }, "substring");
    exports.substring = substring;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uriEncode = void 0;
    var uriEncode = /* @__PURE__ */ __name((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
    exports.uriEncode = uriEncode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    }, "evaluateTemplate");
    exports.evaluateTemplate = evaluateTemplate;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    }, "getReferenceValue");
    exports.getReferenceValue = getReferenceValue;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    }, "evaluateExpression");
    exports.evaluateExpression = evaluateExpression;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = /* @__PURE__ */ __name(({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    }, "callFunction");
    exports.callFunction = callFunction;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    }, "evaluateCondition");
    exports.evaluateCondition = evaluateCondition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    }, "evaluateConditions");
    exports.evaluateConditions = evaluateConditions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = /* @__PURE__ */ __name((headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {}), "getEndpointHeaders");
    exports.getEndpointHeaders = getEndpointHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types5();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    }, "getEndpointProperty");
    exports.getEndpointProperty = getEndpointProperty;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = /* @__PURE__ */ __name((properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {}), "getEndpointProperties");
    exports.getEndpointProperties = getEndpointProperties;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    }, "getEndpointUrl");
    exports.getEndpointUrl = getEndpointUrl;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url: url2, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url2, endpointRuleOptions)
      };
    }, "evaluateEndpointRule");
    exports.evaluateEndpointRule = evaluateEndpointRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types5();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    }, "evaluateErrorRule");
    exports.evaluateErrorRule = evaluateErrorRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    }, "evaluateTreeRule");
    exports.evaluateTreeRule = evaluateTreeRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types5();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = /* @__PURE__ */ __name((rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    }, "evaluateRules");
    exports.evaluateRules = evaluateRules;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var utils_1 = require_utils();
    var resolveEndpoint = /* @__PURE__ */ __name((ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, debug_1.debugId, `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    }, "resolveEndpoint");
    exports.resolveEndpoint = resolveEndpoint;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.208.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types5(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    exports.ruleSet = {
      version: "1.0",
      parameters: {
        Region: {
          builtIn: "AWS::Region",
          required: false,
          documentation: "The AWS region used to dispatch the request.",
          type: "String"
        },
        UseDualStack: {
          builtIn: "AWS::UseDualStack",
          required: true,
          default: false,
          documentation: "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
          type: "Boolean"
        },
        UseFIPS: {
          builtIn: "AWS::UseFIPS",
          required: true,
          default: false,
          documentation: "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
          type: "Boolean"
        },
        Endpoint: {
          builtIn: "SDK::Endpoint",
          required: false,
          documentation: "Override the endpoint used to send this request",
          type: "String"
        }
      },
      rules: [
        {
          conditions: [
            {
              fn: "aws.partition",
              argv: [
                {
                  ref: "Region"
                }
              ],
              assign: "PartitionResult"
            }
          ],
          type: "tree",
          rules: [
            {
              conditions: [
                {
                  fn: "isSet",
                  argv: [
                    {
                      ref: "Endpoint"
                    }
                  ]
                },
                {
                  fn: "parseURL",
                  argv: [
                    {
                      ref: "Endpoint"
                    }
                  ],
                  assign: "url"
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        {
                          ref: "UseFIPS"
                        },
                        true
                      ]
                    }
                  ],
                  error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                  type: "error"
                },
                {
                  conditions: [],
                  type: "tree",
                  rules: [
                    {
                      conditions: [
                        {
                          fn: "booleanEquals",
                          argv: [
                            {
                              ref: "UseDualStack"
                            },
                            true
                          ]
                        }
                      ],
                      error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                      type: "error"
                    },
                    {
                      conditions: [],
                      endpoint: {
                        url: {
                          ref: "Endpoint"
                        },
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseFIPS"
                    },
                    true
                  ]
                },
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseDualStack"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsFIPS"
                          ]
                        }
                      ]
                    },
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsDualStack"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      endpoint: {
                        url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                  type: "error"
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseFIPS"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsFIPS"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      type: "tree",
                      rules: [
                        {
                          conditions: [],
                          endpoint: {
                            url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}",
                            properties: {},
                            headers: {}
                          },
                          type: "endpoint"
                        }
                      ]
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "FIPS is enabled but this partition does not support FIPS",
                  type: "error"
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseDualStack"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsDualStack"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      endpoint: {
                        url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}",
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "DualStack is enabled but this partition does not support DualStack",
                  type: "error"
                }
              ]
            },
            {
              conditions: [],
              endpoint: {
                url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}",
                properties: {},
                headers: {}
              },
              type: "endpoint"
            }
          ]
        }
      ]
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs38();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = /* @__PURE__ */ __name((endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    }, "defaultEndpointResolver");
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs36();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = /* @__PURE__ */ __name((config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? {},
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl
    }), "getRuntimeConfig");
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_imds_1 = require_dist_cjs28();
    var node_config_provider_1 = require_dist_cjs27();
    var property_provider_1 = require_dist_cjs17();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = /* @__PURE__ */ __name(({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    }), "resolveDefaultsModeConfig");
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    }, "resolveNodeDefaultsModeAuto");
    var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    }, "inferPhysicalRegion");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.208.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs10();
    var hash_node_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs16();
    var node_config_provider_1 = require_dist_cjs27();
    var node_http_handler_1 = require_dist_cjs32();
    var util_body_length_node_1 = require_dist_cjs33();
    var util_user_agent_node_1 = require_dist_cjs34();
    var util_utf8_node_1 = require_dist_cjs35();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs39();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = /* @__PURE__ */ __name((config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = /* @__PURE__ */ __name(() => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode), "defaultConfigProvider");
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: config?.utf8Decoder ?? util_utf8_node_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_node_1.toUtf8
      };
    }, "getRuntimeConfig");
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs16();
    var middleware_user_agent_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    __name(SSOClient, "SSOClient");
    exports.SSOClient = SSOClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    __name(SSO, "SSO");
    exports.SSO = SSO;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    }, "makePagedRequest");
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListAccountRoles, "paginateListAccountRoles");
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    }, "makePagedRequest");
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListAccounts, "paginateListAccounts");
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.208.0/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs17();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = /* @__PURE__ */ __name(async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      try {
        token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    }, "resolveSSOCredentials");
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs17();
    var validateSsoProfile = /* @__PURE__ */ __name((profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    }, "validateSsoProfile");
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs17();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = /* @__PURE__ */ __name((init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profileName2 = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName2];
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName2} is not configured with SSO credentials.`);
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient });
      }
    }, "fromSSO");
    exports.fromSSO = fromSSO;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.208.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs41();
    var credential_provider_sso_2 = require_dist_cjs41();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = /* @__PURE__ */ __name((data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    }, "resolveSsoCredentials");
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1, "isStaticCredsProfile");
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = /* @__PURE__ */ __name((profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    }), "resolveStaticCredentials");
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.208.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.208.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs17();
    var fromWebToken = /* @__PURE__ */ __name((init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    }, "fromWebToken");
    exports.fromWebToken = fromWebToken;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.208.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.208.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs17();
    var fs_1 = __require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = /* @__PURE__ */ __name((init = {}) => async () => {
      return resolveTokenFile(init);
    }, "fromTokenFile");
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = /* @__PURE__ */ __name((init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    }, "resolveTokenFile");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.208.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.208.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs42();
    var isWebIdentityProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })(), "resolveWebIdentityCredentials");
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs17();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = /* @__PURE__ */ __name(async (profileName2, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName2];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName2, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName2} could not be found or parsed in shared credentials file.`);
    }, "resolveProfileData");
    exports.resolveProfileData = resolveProfileData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = /* @__PURE__ */ __name((init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    }, "fromIni");
    exports.fromIni = fromIni;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.208.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName2, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName2} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName2} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName2} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    }, "getValidatedProcessCredentials");
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs17();
    var child_process_1 = __require("child_process");
    var util_1 = __require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName2, profiles) => {
      const profile = profiles[profileName2];
      if (profiles[profileName2]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName2} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName2, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName2} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName2} could not be found in shared credentials file.`);
      }
    }, "resolveProcessCredentials");
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = /* @__PURE__ */ __name((init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    }, "fromProcess");
    exports.fromProcess = fromProcess;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.208.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.208.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.208.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs28();
    var property_provider_1 = require_dist_cjs17();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = /* @__PURE__ */ __name((init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    }, "remoteProvider");
    exports.remoteProvider = remoteProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.208.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.208.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs25();
    var credential_provider_ini_1 = require_dist_cjs43();
    var credential_provider_process_1 = require_dist_cjs44();
    var credential_provider_sso_1 = require_dist_cjs41();
    var credential_provider_web_identity_1 = require_dist_cjs42();
    var property_provider_1 = require_dist_cjs17();
    var shared_ini_file_loader_1 = require_dist_cjs26();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = /* @__PURE__ */ __name((init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0), "defaultProvider");
    exports.defaultProvider = defaultProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.208.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.208.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    exports.ruleSet = {
      version: "1.0",
      parameters: {
        Region: {
          builtIn: "AWS::Region",
          required: false,
          documentation: "The AWS region used to dispatch the request.",
          type: "String"
        },
        UseDualStack: {
          builtIn: "AWS::UseDualStack",
          required: true,
          default: false,
          documentation: "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
          type: "Boolean"
        },
        UseFIPS: {
          builtIn: "AWS::UseFIPS",
          required: true,
          default: false,
          documentation: "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
          type: "Boolean"
        },
        Endpoint: {
          builtIn: "SDK::Endpoint",
          required: false,
          documentation: "Override the endpoint used to send this request",
          type: "String"
        },
        UseGlobalEndpoint: {
          builtIn: "AWS::STS::UseGlobalEndpoint",
          required: true,
          default: false,
          documentation: "Whether the global endpoint should be used, rather then the regional endpoint for us-east-1.",
          type: "Boolean"
        }
      },
      rules: [
        {
          conditions: [
            {
              fn: "aws.partition",
              argv: [
                {
                  ref: "Region"
                }
              ],
              assign: "PartitionResult"
            }
          ],
          type: "tree",
          rules: [
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseGlobalEndpoint"
                    },
                    true
                  ]
                },
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseFIPS"
                    },
                    false
                  ]
                },
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseDualStack"
                    },
                    false
                  ]
                },
                {
                  fn: "not",
                  argv: [
                    {
                      fn: "isSet",
                      argv: [
                        {
                          ref: "Endpoint"
                        }
                      ]
                    }
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "ap-northeast-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "ap-south-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "ap-southeast-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "ap-southeast-2"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "aws-global"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "ca-central-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "eu-central-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "eu-north-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "eu-west-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "eu-west-2"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "eu-west-3"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "sa-east-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "us-east-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "us-east-2"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "us-west-1"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "us-west-2"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [],
                  endpoint: {
                    url: "https://sts.{Region}.{PartitionResult#dnsSuffix}",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "{Region}"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "isSet",
                  argv: [
                    {
                      ref: "Endpoint"
                    }
                  ]
                },
                {
                  fn: "parseURL",
                  argv: [
                    {
                      ref: "Endpoint"
                    }
                  ],
                  assign: "url"
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        {
                          ref: "UseFIPS"
                        },
                        true
                      ]
                    }
                  ],
                  error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                  type: "error"
                },
                {
                  conditions: [],
                  type: "tree",
                  rules: [
                    {
                      conditions: [
                        {
                          fn: "booleanEquals",
                          argv: [
                            {
                              ref: "UseDualStack"
                            },
                            true
                          ]
                        }
                      ],
                      error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                      type: "error"
                    },
                    {
                      conditions: [],
                      endpoint: {
                        url: {
                          ref: "Endpoint"
                        },
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseFIPS"
                    },
                    true
                  ]
                },
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseDualStack"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsFIPS"
                          ]
                        }
                      ]
                    },
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsDualStack"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      endpoint: {
                        url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                  type: "error"
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseFIPS"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsFIPS"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      type: "tree",
                      rules: [
                        {
                          conditions: [
                            {
                              fn: "stringEquals",
                              argv: [
                                "aws-us-gov",
                                {
                                  fn: "getAttr",
                                  argv: [
                                    {
                                      ref: "PartitionResult"
                                    },
                                    "name"
                                  ]
                                }
                              ]
                            }
                          ],
                          endpoint: {
                            url: "https://sts.{Region}.{PartitionResult#dnsSuffix}",
                            properties: {},
                            headers: {}
                          },
                          type: "endpoint"
                        },
                        {
                          conditions: [],
                          endpoint: {
                            url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}",
                            properties: {},
                            headers: {}
                          },
                          type: "endpoint"
                        }
                      ]
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "FIPS is enabled but this partition does not support FIPS",
                  type: "error"
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseDualStack"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsDualStack"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      endpoint: {
                        url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}",
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "DualStack is enabled but this partition does not support DualStack",
                  type: "error"
                }
              ]
            },
            {
              conditions: [],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "stringEquals",
                      argv: [
                        {
                          ref: "Region"
                        },
                        "aws-global"
                      ]
                    }
                  ],
                  endpoint: {
                    url: "https://sts.amazonaws.com",
                    properties: {
                      authSchemes: [
                        {
                          name: "sigv4",
                          signingName: "sts",
                          signingRegion: "us-east-1"
                        }
                      ]
                    },
                    headers: {}
                  },
                  type: "endpoint"
                },
                {
                  conditions: [],
                  endpoint: {
                    url: "https://sts.{Region}.{PartitionResult#dnsSuffix}",
                    properties: {},
                    headers: {}
                  },
                  type: "endpoint"
                }
              ]
            }
          ]
        }
      ]
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs38();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = /* @__PURE__ */ __name((endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    }, "defaultEndpointResolver");
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs36();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = /* @__PURE__ */ __name((config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? {},
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl
    }), "getRuntimeConfig");
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs45();
    var hash_node_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs16();
    var node_config_provider_1 = require_dist_cjs27();
    var node_http_handler_1 = require_dist_cjs32();
    var util_body_length_node_1 = require_dist_cjs33();
    var util_user_agent_node_1 = require_dist_cjs34();
    var util_utf8_node_1 = require_dist_cjs35();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs39();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = /* @__PURE__ */ __name((config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = /* @__PURE__ */ __name(() => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode), "defaultConfigProvider");
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: config?.utf8Decoder ?? util_utf8_node_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_node_1.toUtf8
      };
    }, "getRuntimeConfig");
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs16();
    var middleware_sdk_sts_1 = require_dist_cjs24();
    var middleware_user_agent_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig2();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    __name(STSClient, "STSClient");
    exports.STSClient = STSClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    __name(STS, "STS");
    exports.STS = STS;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return /* @__PURE__ */ __name(class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        }, "CustomizableSTSClient");
    }, "getCustomizableStsClientCtor");
    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins)), "getDefaultRoleAssumer");
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    }), "decorateDefaultCredentialProvider");
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.208.0/node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    exports.ruleSet = {
      version: "1.0",
      parameters: {
        Region: {
          builtIn: "AWS::Region",
          required: false,
          documentation: "The AWS region used to dispatch the request.",
          type: "String"
        },
        UseDualStack: {
          builtIn: "AWS::UseDualStack",
          required: true,
          default: false,
          documentation: "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
          type: "Boolean"
        },
        UseFIPS: {
          builtIn: "AWS::UseFIPS",
          required: true,
          default: false,
          documentation: "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
          type: "Boolean"
        },
        Endpoint: {
          builtIn: "SDK::Endpoint",
          required: false,
          documentation: "Override the endpoint used to send this request",
          type: "String"
        }
      },
      rules: [
        {
          conditions: [
            {
              fn: "aws.partition",
              argv: [
                {
                  ref: "Region"
                }
              ],
              assign: "PartitionResult"
            }
          ],
          type: "tree",
          rules: [
            {
              conditions: [
                {
                  fn: "isSet",
                  argv: [
                    {
                      ref: "Endpoint"
                    }
                  ]
                },
                {
                  fn: "parseURL",
                  argv: [
                    {
                      ref: "Endpoint"
                    }
                  ],
                  assign: "url"
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        {
                          ref: "UseFIPS"
                        },
                        true
                      ]
                    }
                  ],
                  error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                  type: "error"
                },
                {
                  conditions: [],
                  type: "tree",
                  rules: [
                    {
                      conditions: [
                        {
                          fn: "booleanEquals",
                          argv: [
                            {
                              ref: "UseDualStack"
                            },
                            true
                          ]
                        }
                      ],
                      error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                      type: "error"
                    },
                    {
                      conditions: [],
                      endpoint: {
                        url: {
                          ref: "Endpoint"
                        },
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseFIPS"
                    },
                    true
                  ]
                },
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseDualStack"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsFIPS"
                          ]
                        }
                      ]
                    },
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsDualStack"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      endpoint: {
                        url: "https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                  type: "error"
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseFIPS"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsFIPS"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      type: "tree",
                      rules: [
                        {
                          conditions: [
                            {
                              fn: "stringEquals",
                              argv: [
                                "aws-us-gov",
                                {
                                  fn: "getAttr",
                                  argv: [
                                    {
                                      ref: "PartitionResult"
                                    },
                                    "name"
                                  ]
                                }
                              ]
                            }
                          ],
                          endpoint: {
                            url: "https://ssm.{Region}.{PartitionResult#dnsSuffix}",
                            properties: {},
                            headers: {}
                          },
                          type: "endpoint"
                        },
                        {
                          conditions: [],
                          endpoint: {
                            url: "https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}",
                            properties: {},
                            headers: {}
                          },
                          type: "endpoint"
                        }
                      ]
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "FIPS is enabled but this partition does not support FIPS",
                  type: "error"
                }
              ]
            },
            {
              conditions: [
                {
                  fn: "booleanEquals",
                  argv: [
                    {
                      ref: "UseDualStack"
                    },
                    true
                  ]
                }
              ],
              type: "tree",
              rules: [
                {
                  conditions: [
                    {
                      fn: "booleanEquals",
                      argv: [
                        true,
                        {
                          fn: "getAttr",
                          argv: [
                            {
                              ref: "PartitionResult"
                            },
                            "supportsDualStack"
                          ]
                        }
                      ]
                    }
                  ],
                  type: "tree",
                  rules: [
                    {
                      conditions: [],
                      endpoint: {
                        url: "https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}",
                        properties: {},
                        headers: {}
                      },
                      type: "endpoint"
                    }
                  ]
                },
                {
                  conditions: [],
                  error: "DualStack is enabled but this partition does not support DualStack",
                  type: "error"
                }
              ]
            },
            {
              conditions: [],
              endpoint: {
                url: "https://ssm.{Region}.{PartitionResult#dnsSuffix}",
                properties: {},
                headers: {}
              },
              type: "endpoint"
            }
          ]
        }
      ]
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs38();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = /* @__PURE__ */ __name((endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    }, "defaultEndpointResolver");
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs36();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = /* @__PURE__ */ __name((config) => ({
      apiVersion: "2014-11-06",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? {},
      serviceId: config?.serviceId ?? "SSM",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl
    }), "getRuntimeConfig");
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs46();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs45();
    var hash_node_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs16();
    var node_config_provider_1 = require_dist_cjs27();
    var node_http_handler_1 = require_dist_cjs32();
    var util_body_length_node_1 = require_dist_cjs33();
    var util_user_agent_node_1 = require_dist_cjs34();
    var util_utf8_node_1 = require_dist_cjs35();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs39();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = /* @__PURE__ */ __name((config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = /* @__PURE__ */ __name(() => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode), "defaultConfigProvider");
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: config?.utf8Decoder ?? util_utf8_node_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_node_1.toUtf8
      };
    }, "getRuntimeConfig");
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js
var require_SSMClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs16();
    var middleware_signing_1 = require_dist_cjs22();
    var middleware_user_agent_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var SSMClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    __name(SSMClient2, "SSMClient");
    exports.SSMClient = SSMClient2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js
var require_SSM = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSM = void 0;
    var AddTagsToResourceCommand_1 = require_AddTagsToResourceCommand();
    var AssociateOpsItemRelatedItemCommand_1 = require_AssociateOpsItemRelatedItemCommand();
    var CancelCommandCommand_1 = require_CancelCommandCommand();
    var CancelMaintenanceWindowExecutionCommand_1 = require_CancelMaintenanceWindowExecutionCommand();
    var CreateActivationCommand_1 = require_CreateActivationCommand();
    var CreateAssociationBatchCommand_1 = require_CreateAssociationBatchCommand();
    var CreateAssociationCommand_1 = require_CreateAssociationCommand();
    var CreateDocumentCommand_1 = require_CreateDocumentCommand();
    var CreateMaintenanceWindowCommand_1 = require_CreateMaintenanceWindowCommand();
    var CreateOpsItemCommand_1 = require_CreateOpsItemCommand();
    var CreateOpsMetadataCommand_1 = require_CreateOpsMetadataCommand();
    var CreatePatchBaselineCommand_1 = require_CreatePatchBaselineCommand();
    var CreateResourceDataSyncCommand_1 = require_CreateResourceDataSyncCommand();
    var DeleteActivationCommand_1 = require_DeleteActivationCommand();
    var DeleteAssociationCommand_1 = require_DeleteAssociationCommand();
    var DeleteDocumentCommand_1 = require_DeleteDocumentCommand();
    var DeleteInventoryCommand_1 = require_DeleteInventoryCommand();
    var DeleteMaintenanceWindowCommand_1 = require_DeleteMaintenanceWindowCommand();
    var DeleteOpsMetadataCommand_1 = require_DeleteOpsMetadataCommand();
    var DeleteParameterCommand_1 = require_DeleteParameterCommand();
    var DeleteParametersCommand_1 = require_DeleteParametersCommand();
    var DeletePatchBaselineCommand_1 = require_DeletePatchBaselineCommand();
    var DeleteResourceDataSyncCommand_1 = require_DeleteResourceDataSyncCommand();
    var DeregisterManagedInstanceCommand_1 = require_DeregisterManagedInstanceCommand();
    var DeregisterPatchBaselineForPatchGroupCommand_1 = require_DeregisterPatchBaselineForPatchGroupCommand();
    var DeregisterTargetFromMaintenanceWindowCommand_1 = require_DeregisterTargetFromMaintenanceWindowCommand();
    var DeregisterTaskFromMaintenanceWindowCommand_1 = require_DeregisterTaskFromMaintenanceWindowCommand();
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var DescribeAssociationCommand_1 = require_DescribeAssociationCommand();
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var DescribeDocumentCommand_1 = require_DescribeDocumentCommand();
    var DescribeDocumentPermissionCommand_1 = require_DescribeDocumentPermissionCommand();
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var DescribePatchGroupStateCommand_1 = require_DescribePatchGroupStateCommand();
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var DisassociateOpsItemRelatedItemCommand_1 = require_DisassociateOpsItemRelatedItemCommand();
    var GetAutomationExecutionCommand_1 = require_GetAutomationExecutionCommand();
    var GetCalendarStateCommand_1 = require_GetCalendarStateCommand();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var GetConnectionStatusCommand_1 = require_GetConnectionStatusCommand();
    var GetDefaultPatchBaselineCommand_1 = require_GetDefaultPatchBaselineCommand();
    var GetDeployablePatchSnapshotForInstanceCommand_1 = require_GetDeployablePatchSnapshotForInstanceCommand();
    var GetDocumentCommand_1 = require_GetDocumentCommand();
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var GetMaintenanceWindowCommand_1 = require_GetMaintenanceWindowCommand();
    var GetMaintenanceWindowExecutionCommand_1 = require_GetMaintenanceWindowExecutionCommand();
    var GetMaintenanceWindowExecutionTaskCommand_1 = require_GetMaintenanceWindowExecutionTaskCommand();
    var GetMaintenanceWindowExecutionTaskInvocationCommand_1 = require_GetMaintenanceWindowExecutionTaskInvocationCommand();
    var GetMaintenanceWindowTaskCommand_1 = require_GetMaintenanceWindowTaskCommand();
    var GetOpsItemCommand_1 = require_GetOpsItemCommand();
    var GetOpsMetadataCommand_1 = require_GetOpsMetadataCommand();
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var GetParameterCommand_1 = require_GetParameterCommand();
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var GetParametersCommand_1 = require_GetParametersCommand();
    var GetPatchBaselineCommand_1 = require_GetPatchBaselineCommand();
    var GetPatchBaselineForPatchGroupCommand_1 = require_GetPatchBaselineForPatchGroupCommand();
    var GetServiceSettingCommand_1 = require_GetServiceSettingCommand();
    var LabelParameterVersionCommand_1 = require_LabelParameterVersionCommand();
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var ListDocumentMetadataHistoryCommand_1 = require_ListDocumentMetadataHistoryCommand();
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var ListInventoryEntriesCommand_1 = require_ListInventoryEntriesCommand();
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand();
    var ModifyDocumentPermissionCommand_1 = require_ModifyDocumentPermissionCommand();
    var PutComplianceItemsCommand_1 = require_PutComplianceItemsCommand();
    var PutInventoryCommand_1 = require_PutInventoryCommand();
    var PutParameterCommand_1 = require_PutParameterCommand();
    var RegisterDefaultPatchBaselineCommand_1 = require_RegisterDefaultPatchBaselineCommand();
    var RegisterPatchBaselineForPatchGroupCommand_1 = require_RegisterPatchBaselineForPatchGroupCommand();
    var RegisterTargetWithMaintenanceWindowCommand_1 = require_RegisterTargetWithMaintenanceWindowCommand();
    var RegisterTaskWithMaintenanceWindowCommand_1 = require_RegisterTaskWithMaintenanceWindowCommand();
    var RemoveTagsFromResourceCommand_1 = require_RemoveTagsFromResourceCommand();
    var ResetServiceSettingCommand_1 = require_ResetServiceSettingCommand();
    var ResumeSessionCommand_1 = require_ResumeSessionCommand();
    var SendAutomationSignalCommand_1 = require_SendAutomationSignalCommand();
    var SendCommandCommand_1 = require_SendCommandCommand();
    var StartAssociationsOnceCommand_1 = require_StartAssociationsOnceCommand();
    var StartAutomationExecutionCommand_1 = require_StartAutomationExecutionCommand();
    var StartChangeRequestExecutionCommand_1 = require_StartChangeRequestExecutionCommand();
    var StartSessionCommand_1 = require_StartSessionCommand();
    var StopAutomationExecutionCommand_1 = require_StopAutomationExecutionCommand();
    var TerminateSessionCommand_1 = require_TerminateSessionCommand();
    var UnlabelParameterVersionCommand_1 = require_UnlabelParameterVersionCommand();
    var UpdateAssociationCommand_1 = require_UpdateAssociationCommand();
    var UpdateAssociationStatusCommand_1 = require_UpdateAssociationStatusCommand();
    var UpdateDocumentCommand_1 = require_UpdateDocumentCommand();
    var UpdateDocumentDefaultVersionCommand_1 = require_UpdateDocumentDefaultVersionCommand();
    var UpdateDocumentMetadataCommand_1 = require_UpdateDocumentMetadataCommand();
    var UpdateMaintenanceWindowCommand_1 = require_UpdateMaintenanceWindowCommand();
    var UpdateMaintenanceWindowTargetCommand_1 = require_UpdateMaintenanceWindowTargetCommand();
    var UpdateMaintenanceWindowTaskCommand_1 = require_UpdateMaintenanceWindowTaskCommand();
    var UpdateManagedInstanceRoleCommand_1 = require_UpdateManagedInstanceRoleCommand();
    var UpdateOpsItemCommand_1 = require_UpdateOpsItemCommand();
    var UpdateOpsMetadataCommand_1 = require_UpdateOpsMetadataCommand();
    var UpdatePatchBaselineCommand_1 = require_UpdatePatchBaselineCommand();
    var UpdateResourceDataSyncCommand_1 = require_UpdateResourceDataSyncCommand();
    var UpdateServiceSettingCommand_1 = require_UpdateServiceSettingCommand();
    var SSMClient_1 = require_SSMClient();
    var SSM2 = class extends SSMClient_1.SSMClient {
      addTagsToResource(args, optionsOrCb, cb) {
        const command = new AddTagsToResourceCommand_1.AddTagsToResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      associateOpsItemRelatedItem(args, optionsOrCb, cb) {
        const command = new AssociateOpsItemRelatedItemCommand_1.AssociateOpsItemRelatedItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelCommand(args, optionsOrCb, cb) {
        const command = new CancelCommandCommand_1.CancelCommandCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelMaintenanceWindowExecution(args, optionsOrCb, cb) {
        const command = new CancelMaintenanceWindowExecutionCommand_1.CancelMaintenanceWindowExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createActivation(args, optionsOrCb, cb) {
        const command = new CreateActivationCommand_1.CreateActivationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAssociation(args, optionsOrCb, cb) {
        const command = new CreateAssociationCommand_1.CreateAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAssociationBatch(args, optionsOrCb, cb) {
        const command = new CreateAssociationBatchCommand_1.CreateAssociationBatchCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDocument(args, optionsOrCb, cb) {
        const command = new CreateDocumentCommand_1.CreateDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new CreateMaintenanceWindowCommand_1.CreateMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOpsItem(args, optionsOrCb, cb) {
        const command = new CreateOpsItemCommand_1.CreateOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOpsMetadata(args, optionsOrCb, cb) {
        const command = new CreateOpsMetadataCommand_1.CreateOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createPatchBaseline(args, optionsOrCb, cb) {
        const command = new CreatePatchBaselineCommand_1.CreatePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createResourceDataSync(args, optionsOrCb, cb) {
        const command = new CreateResourceDataSyncCommand_1.CreateResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteActivation(args, optionsOrCb, cb) {
        const command = new DeleteActivationCommand_1.DeleteActivationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAssociation(args, optionsOrCb, cb) {
        const command = new DeleteAssociationCommand_1.DeleteAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDocument(args, optionsOrCb, cb) {
        const command = new DeleteDocumentCommand_1.DeleteDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteInventory(args, optionsOrCb, cb) {
        const command = new DeleteInventoryCommand_1.DeleteInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeleteMaintenanceWindowCommand_1.DeleteMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteOpsMetadata(args, optionsOrCb, cb) {
        const command = new DeleteOpsMetadataCommand_1.DeleteOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteParameter(args, optionsOrCb, cb) {
        const command = new DeleteParameterCommand_1.DeleteParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteParameters(args, optionsOrCb, cb) {
        const command = new DeleteParametersCommand_1.DeleteParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deletePatchBaseline(args, optionsOrCb, cb) {
        const command = new DeletePatchBaselineCommand_1.DeletePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteResourceDataSync(args, optionsOrCb, cb) {
        const command = new DeleteResourceDataSyncCommand_1.DeleteResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterManagedInstance(args, optionsOrCb, cb) {
        const command = new DeregisterManagedInstanceCommand_1.DeregisterManagedInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new DeregisterPatchBaselineForPatchGroupCommand_1.DeregisterPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterTargetFromMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeregisterTargetFromMaintenanceWindowCommand_1.DeregisterTargetFromMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterTaskFromMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeregisterTaskFromMaintenanceWindowCommand_1.DeregisterTaskFromMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeActivations(args, optionsOrCb, cb) {
        const command = new DescribeActivationsCommand_1.DescribeActivationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociation(args, optionsOrCb, cb) {
        const command = new DescribeAssociationCommand_1.DescribeAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociationExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociationExecutionTargets(args, optionsOrCb, cb) {
        const command = new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAutomationExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAutomationStepExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAvailablePatches(args, optionsOrCb, cb) {
        const command = new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDocument(args, optionsOrCb, cb) {
        const command = new DescribeDocumentCommand_1.DescribeDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDocumentPermission(args, optionsOrCb, cb) {
        const command = new DescribeDocumentPermissionCommand_1.DescribeDocumentPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEffectiveInstanceAssociations(args, optionsOrCb, cb) {
        const command = new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEffectivePatchesForPatchBaseline(args, optionsOrCb, cb) {
        const command = new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstanceAssociationsStatus(args, optionsOrCb, cb) {
        const command = new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstanceInformation(args, optionsOrCb, cb) {
        const command = new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatches(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatchStates(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatchStatesForPatchGroup(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInventoryDeletions(args, optionsOrCb, cb) {
        const command = new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutions(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutionTaskInvocations(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutionTasks(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindows(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowSchedule(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowsForTarget(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowTargets(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowTasks(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeOpsItems(args, optionsOrCb, cb) {
        const command = new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeParameters(args, optionsOrCb, cb) {
        const command = new DescribeParametersCommand_1.DescribeParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchBaselines(args, optionsOrCb, cb) {
        const command = new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchGroups(args, optionsOrCb, cb) {
        const command = new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchGroupState(args, optionsOrCb, cb) {
        const command = new DescribePatchGroupStateCommand_1.DescribePatchGroupStateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchProperties(args, optionsOrCb, cb) {
        const command = new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeSessions(args, optionsOrCb, cb) {
        const command = new DescribeSessionsCommand_1.DescribeSessionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disassociateOpsItemRelatedItem(args, optionsOrCb, cb) {
        const command = new DisassociateOpsItemRelatedItemCommand_1.DisassociateOpsItemRelatedItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAutomationExecution(args, optionsOrCb, cb) {
        const command = new GetAutomationExecutionCommand_1.GetAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCalendarState(args, optionsOrCb, cb) {
        const command = new GetCalendarStateCommand_1.GetCalendarStateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCommandInvocation(args, optionsOrCb, cb) {
        const command = new GetCommandInvocationCommand_1.GetCommandInvocationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getConnectionStatus(args, optionsOrCb, cb) {
        const command = new GetConnectionStatusCommand_1.GetConnectionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDefaultPatchBaseline(args, optionsOrCb, cb) {
        const command = new GetDefaultPatchBaselineCommand_1.GetDefaultPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeployablePatchSnapshotForInstance(args, optionsOrCb, cb) {
        const command = new GetDeployablePatchSnapshotForInstanceCommand_1.GetDeployablePatchSnapshotForInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDocument(args, optionsOrCb, cb) {
        const command = new GetDocumentCommand_1.GetDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getInventory(args, optionsOrCb, cb) {
        const command = new GetInventoryCommand_1.GetInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getInventorySchema(args, optionsOrCb, cb) {
        const command = new GetInventorySchemaCommand_1.GetInventorySchemaCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowCommand_1.GetMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecution(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionCommand_1.GetMaintenanceWindowExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecutionTask(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionTaskCommand_1.GetMaintenanceWindowExecutionTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecutionTaskInvocation(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionTaskInvocationCommand_1.GetMaintenanceWindowExecutionTaskInvocationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowTask(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowTaskCommand_1.GetMaintenanceWindowTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsItem(args, optionsOrCb, cb) {
        const command = new GetOpsItemCommand_1.GetOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsMetadata(args, optionsOrCb, cb) {
        const command = new GetOpsMetadataCommand_1.GetOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsSummary(args, optionsOrCb, cb) {
        const command = new GetOpsSummaryCommand_1.GetOpsSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameter(args, optionsOrCb, cb) {
        const command = new GetParameterCommand_1.GetParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameterHistory(args, optionsOrCb, cb) {
        const command = new GetParameterHistoryCommand_1.GetParameterHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameters(args, optionsOrCb, cb) {
        const command = new GetParametersCommand_1.GetParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParametersByPath(args, optionsOrCb, cb) {
        const command = new GetParametersByPathCommand_1.GetParametersByPathCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPatchBaseline(args, optionsOrCb, cb) {
        const command = new GetPatchBaselineCommand_1.GetPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new GetPatchBaselineForPatchGroupCommand_1.GetPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getServiceSetting(args, optionsOrCb, cb) {
        const command = new GetServiceSettingCommand_1.GetServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      labelParameterVersion(args, optionsOrCb, cb) {
        const command = new LabelParameterVersionCommand_1.LabelParameterVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAssociations(args, optionsOrCb, cb) {
        const command = new ListAssociationsCommand_1.ListAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAssociationVersions(args, optionsOrCb, cb) {
        const command = new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCommandInvocations(args, optionsOrCb, cb) {
        const command = new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCommands(args, optionsOrCb, cb) {
        const command = new ListCommandsCommand_1.ListCommandsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listComplianceItems(args, optionsOrCb, cb) {
        const command = new ListComplianceItemsCommand_1.ListComplianceItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listComplianceSummaries(args, optionsOrCb, cb) {
        const command = new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocumentMetadataHistory(args, optionsOrCb, cb) {
        const command = new ListDocumentMetadataHistoryCommand_1.ListDocumentMetadataHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocuments(args, optionsOrCb, cb) {
        const command = new ListDocumentsCommand_1.ListDocumentsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocumentVersions(args, optionsOrCb, cb) {
        const command = new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listInventoryEntries(args, optionsOrCb, cb) {
        const command = new ListInventoryEntriesCommand_1.ListInventoryEntriesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsItemEvents(args, optionsOrCb, cb) {
        const command = new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsItemRelatedItems(args, optionsOrCb, cb) {
        const command = new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsMetadata(args, optionsOrCb, cb) {
        const command = new ListOpsMetadataCommand_1.ListOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listResourceComplianceSummaries(args, optionsOrCb, cb) {
        const command = new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listResourceDataSync(args, optionsOrCb, cb) {
        const command = new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsForResource(args, optionsOrCb, cb) {
        const command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDocumentPermission(args, optionsOrCb, cb) {
        const command = new ModifyDocumentPermissionCommand_1.ModifyDocumentPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putComplianceItems(args, optionsOrCb, cb) {
        const command = new PutComplianceItemsCommand_1.PutComplianceItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putInventory(args, optionsOrCb, cb) {
        const command = new PutInventoryCommand_1.PutInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putParameter(args, optionsOrCb, cb) {
        const command = new PutParameterCommand_1.PutParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerDefaultPatchBaseline(args, optionsOrCb, cb) {
        const command = new RegisterDefaultPatchBaselineCommand_1.RegisterDefaultPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new RegisterPatchBaselineForPatchGroupCommand_1.RegisterPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerTargetWithMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new RegisterTargetWithMaintenanceWindowCommand_1.RegisterTargetWithMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerTaskWithMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new RegisterTaskWithMaintenanceWindowCommand_1.RegisterTaskWithMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeTagsFromResource(args, optionsOrCb, cb) {
        const command = new RemoveTagsFromResourceCommand_1.RemoveTagsFromResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resetServiceSetting(args, optionsOrCb, cb) {
        const command = new ResetServiceSettingCommand_1.ResetServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resumeSession(args, optionsOrCb, cb) {
        const command = new ResumeSessionCommand_1.ResumeSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendAutomationSignal(args, optionsOrCb, cb) {
        const command = new SendAutomationSignalCommand_1.SendAutomationSignalCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendCommand(args, optionsOrCb, cb) {
        const command = new SendCommandCommand_1.SendCommandCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startAssociationsOnce(args, optionsOrCb, cb) {
        const command = new StartAssociationsOnceCommand_1.StartAssociationsOnceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startAutomationExecution(args, optionsOrCb, cb) {
        const command = new StartAutomationExecutionCommand_1.StartAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startChangeRequestExecution(args, optionsOrCb, cb) {
        const command = new StartChangeRequestExecutionCommand_1.StartChangeRequestExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startSession(args, optionsOrCb, cb) {
        const command = new StartSessionCommand_1.StartSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopAutomationExecution(args, optionsOrCb, cb) {
        const command = new StopAutomationExecutionCommand_1.StopAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      terminateSession(args, optionsOrCb, cb) {
        const command = new TerminateSessionCommand_1.TerminateSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      unlabelParameterVersion(args, optionsOrCb, cb) {
        const command = new UnlabelParameterVersionCommand_1.UnlabelParameterVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAssociation(args, optionsOrCb, cb) {
        const command = new UpdateAssociationCommand_1.UpdateAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAssociationStatus(args, optionsOrCb, cb) {
        const command = new UpdateAssociationStatusCommand_1.UpdateAssociationStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocument(args, optionsOrCb, cb) {
        const command = new UpdateDocumentCommand_1.UpdateDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocumentDefaultVersion(args, optionsOrCb, cb) {
        const command = new UpdateDocumentDefaultVersionCommand_1.UpdateDocumentDefaultVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocumentMetadata(args, optionsOrCb, cb) {
        const command = new UpdateDocumentMetadataCommand_1.UpdateDocumentMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowCommand_1.UpdateMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindowTarget(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowTargetCommand_1.UpdateMaintenanceWindowTargetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindowTask(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowTaskCommand_1.UpdateMaintenanceWindowTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateManagedInstanceRole(args, optionsOrCb, cb) {
        const command = new UpdateManagedInstanceRoleCommand_1.UpdateManagedInstanceRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateOpsItem(args, optionsOrCb, cb) {
        const command = new UpdateOpsItemCommand_1.UpdateOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateOpsMetadata(args, optionsOrCb, cb) {
        const command = new UpdateOpsMetadataCommand_1.UpdateOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updatePatchBaseline(args, optionsOrCb, cb) {
        const command = new UpdatePatchBaselineCommand_1.UpdatePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateResourceDataSync(args, optionsOrCb, cb) {
        const command = new UpdateResourceDataSyncCommand_1.UpdateResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateServiceSetting(args, optionsOrCb, cb) {
        const command = new UpdateServiceSettingCommand_1.UpdateServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    __name(SSM2, "SSM");
    exports.SSM = SSM2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AddTagsToResourceCommand(), exports);
    tslib_1.__exportStar(require_AssociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_CancelCommandCommand(), exports);
    tslib_1.__exportStar(require_CancelMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_CreateActivationCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationBatchCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationCommand(), exports);
    tslib_1.__exportStar(require_CreateDocumentCommand(), exports);
    tslib_1.__exportStar(require_CreateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_CreatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_CreateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeleteActivationCommand(), exports);
    tslib_1.__exportStar(require_DeleteAssociationCommand(), exports);
    tslib_1.__exportStar(require_DeleteDocumentCommand(), exports);
    tslib_1.__exportStar(require_DeleteInventoryCommand(), exports);
    tslib_1.__exportStar(require_DeleteMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeleteOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_DeleteParameterCommand(), exports);
    tslib_1.__exportStar(require_DeleteParametersCommand(), exports);
    tslib_1.__exportStar(require_DeletePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DeleteResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeregisterManagedInstanceCommand(), exports);
    tslib_1.__exportStar(require_DeregisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTargetFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTaskFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DescribeActivationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowScheduleCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetCommand(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsCommand(), exports);
    tslib_1.__exportStar(require_DescribeParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupStateCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesCommand(), exports);
    tslib_1.__exportStar(require_DescribeSessionsCommand(), exports);
    tslib_1.__exportStar(require_DisassociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_GetAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetCalendarStateCommand(), exports);
    tslib_1.__exportStar(require_GetCommandInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetConnectionStatusCommand(), exports);
    tslib_1.__exportStar(require_GetDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetDeployablePatchSnapshotForInstanceCommand(), exports);
    tslib_1.__exportStar(require_GetDocumentCommand(), exports);
    tslib_1.__exportStar(require_GetInventoryCommand(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_GetOpsItemCommand(), exports);
    tslib_1.__exportStar(require_GetOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryCommand(), exports);
    tslib_1.__exportStar(require_GetParameterCommand(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryCommand(), exports);
    tslib_1.__exportStar(require_GetParametersByPathCommand(), exports);
    tslib_1.__exportStar(require_GetParametersCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_GetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_LabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentMetadataHistoryCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentsCommand(), exports);
    tslib_1.__exportStar(require_ListInventoryEntriesCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand(), exports);
    tslib_1.__exportStar(require_ModifyDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_PutComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_PutInventoryCommand(), exports);
    tslib_1.__exportStar(require_PutParameterCommand(), exports);
    tslib_1.__exportStar(require_RegisterDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_RegisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_RegisterTargetWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RegisterTaskWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RemoveTagsFromResourceCommand(), exports);
    tslib_1.__exportStar(require_ResetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_ResumeSessionCommand(), exports);
    tslib_1.__exportStar(require_SendAutomationSignalCommand(), exports);
    tslib_1.__exportStar(require_SendCommandCommand(), exports);
    tslib_1.__exportStar(require_StartAssociationsOnceCommand(), exports);
    tslib_1.__exportStar(require_StartAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartChangeRequestExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartSessionCommand(), exports);
    tslib_1.__exportStar(require_StopAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_TerminateSessionCommand(), exports);
    tslib_1.__exportStar(require_UnlabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationStatusCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentDefaultVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTargetCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_UpdateManagedInstanceRoleCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_UpdateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_UpdateServiceSettingCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports);
    tslib_1.__exportStar(require_models_1(), exports);
    tslib_1.__exportStar(require_models_2(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js
var require_DescribeActivationsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeActivations = void 0;
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeActivationsCommand_1.DescribeActivationsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeActivations(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeActivations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeActivations, "paginateDescribeActivations");
    exports.paginateDescribeActivations = paginateDescribeActivations;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js
var require_DescribeAssociationExecutionTargetsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutionTargets = void 0;
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeAssociationExecutionTargets(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeAssociationExecutionTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeAssociationExecutionTargets, "paginateDescribeAssociationExecutionTargets");
    exports.paginateDescribeAssociationExecutionTargets = paginateDescribeAssociationExecutionTargets;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js
var require_DescribeAssociationExecutionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutions = void 0;
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeAssociationExecutions(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeAssociationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeAssociationExecutions, "paginateDescribeAssociationExecutions");
    exports.paginateDescribeAssociationExecutions = paginateDescribeAssociationExecutions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js
var require_DescribeAutomationExecutionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationExecutions = void 0;
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeAutomationExecutions(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeAutomationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeAutomationExecutions, "paginateDescribeAutomationExecutions");
    exports.paginateDescribeAutomationExecutions = paginateDescribeAutomationExecutions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js
var require_DescribeAutomationStepExecutionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationStepExecutions = void 0;
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeAutomationStepExecutions(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeAutomationStepExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeAutomationStepExecutions, "paginateDescribeAutomationStepExecutions");
    exports.paginateDescribeAutomationStepExecutions = paginateDescribeAutomationStepExecutions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js
var require_DescribeAvailablePatchesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAvailablePatches = void 0;
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeAvailablePatches(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeAvailablePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeAvailablePatches, "paginateDescribeAvailablePatches");
    exports.paginateDescribeAvailablePatches = paginateDescribeAvailablePatches;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js
var require_DescribeEffectiveInstanceAssociationsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectiveInstanceAssociations = void 0;
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeEffectiveInstanceAssociations(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeEffectiveInstanceAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeEffectiveInstanceAssociations, "paginateDescribeEffectiveInstanceAssociations");
    exports.paginateDescribeEffectiveInstanceAssociations = paginateDescribeEffectiveInstanceAssociations;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js
var require_DescribeEffectivePatchesForPatchBaselinePaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectivePatchesForPatchBaseline = void 0;
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeEffectivePatchesForPatchBaseline(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeEffectivePatchesForPatchBaseline(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeEffectivePatchesForPatchBaseline, "paginateDescribeEffectivePatchesForPatchBaseline");
    exports.paginateDescribeEffectivePatchesForPatchBaseline = paginateDescribeEffectivePatchesForPatchBaseline;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js
var require_DescribeInstanceAssociationsStatusPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceAssociationsStatus = void 0;
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeInstanceAssociationsStatus(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeInstanceAssociationsStatus(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeInstanceAssociationsStatus, "paginateDescribeInstanceAssociationsStatus");
    exports.paginateDescribeInstanceAssociationsStatus = paginateDescribeInstanceAssociationsStatus;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js
var require_DescribeInstanceInformationPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceInformation = void 0;
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeInstanceInformation(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeInstanceInformation(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeInstanceInformation, "paginateDescribeInstanceInformation");
    exports.paginateDescribeInstanceInformation = paginateDescribeInstanceInformation;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js
var require_DescribeInstancePatchStatesForPatchGroupPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStatesForPatchGroup = void 0;
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeInstancePatchStatesForPatchGroup(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeInstancePatchStatesForPatchGroup(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeInstancePatchStatesForPatchGroup, "paginateDescribeInstancePatchStatesForPatchGroup");
    exports.paginateDescribeInstancePatchStatesForPatchGroup = paginateDescribeInstancePatchStatesForPatchGroup;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js
var require_DescribeInstancePatchStatesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStates = void 0;
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeInstancePatchStates(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeInstancePatchStates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeInstancePatchStates, "paginateDescribeInstancePatchStates");
    exports.paginateDescribeInstancePatchStates = paginateDescribeInstancePatchStates;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js
var require_DescribeInstancePatchesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatches = void 0;
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeInstancePatches(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeInstancePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeInstancePatches, "paginateDescribeInstancePatches");
    exports.paginateDescribeInstancePatches = paginateDescribeInstancePatches;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js
var require_DescribeInventoryDeletionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInventoryDeletions = void 0;
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeInventoryDeletions(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeInventoryDeletions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeInventoryDeletions, "paginateDescribeInventoryDeletions");
    exports.paginateDescribeInventoryDeletions = paginateDescribeInventoryDeletions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = void 0;
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindowExecutionTaskInvocations(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindowExecutionTaskInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindowExecutionTaskInvocations, "paginateDescribeMaintenanceWindowExecutionTaskInvocations");
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = paginateDescribeMaintenanceWindowExecutionTaskInvocations;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js
var require_DescribeMaintenanceWindowExecutionTasksPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTasks = void 0;
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindowExecutionTasks(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindowExecutionTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindowExecutionTasks, "paginateDescribeMaintenanceWindowExecutionTasks");
    exports.paginateDescribeMaintenanceWindowExecutionTasks = paginateDescribeMaintenanceWindowExecutionTasks;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js
var require_DescribeMaintenanceWindowExecutionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutions = void 0;
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindowExecutions(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindowExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindowExecutions, "paginateDescribeMaintenanceWindowExecutions");
    exports.paginateDescribeMaintenanceWindowExecutions = paginateDescribeMaintenanceWindowExecutions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js
var require_DescribeMaintenanceWindowSchedulePaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowSchedule = void 0;
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindowSchedule(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindowSchedule(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindowSchedule, "paginateDescribeMaintenanceWindowSchedule");
    exports.paginateDescribeMaintenanceWindowSchedule = paginateDescribeMaintenanceWindowSchedule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js
var require_DescribeMaintenanceWindowTargetsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTargets = void 0;
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindowTargets(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindowTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindowTargets, "paginateDescribeMaintenanceWindowTargets");
    exports.paginateDescribeMaintenanceWindowTargets = paginateDescribeMaintenanceWindowTargets;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js
var require_DescribeMaintenanceWindowTasksPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTasks = void 0;
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindowTasks(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindowTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindowTasks, "paginateDescribeMaintenanceWindowTasks");
    exports.paginateDescribeMaintenanceWindowTasks = paginateDescribeMaintenanceWindowTasks;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js
var require_DescribeMaintenanceWindowsForTargetPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowsForTarget = void 0;
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindowsForTarget(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindowsForTarget(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindowsForTarget, "paginateDescribeMaintenanceWindowsForTarget");
    exports.paginateDescribeMaintenanceWindowsForTarget = paginateDescribeMaintenanceWindowsForTarget;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js
var require_DescribeMaintenanceWindowsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindows = void 0;
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeMaintenanceWindows(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeMaintenanceWindows(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeMaintenanceWindows, "paginateDescribeMaintenanceWindows");
    exports.paginateDescribeMaintenanceWindows = paginateDescribeMaintenanceWindows;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js
var require_DescribeOpsItemsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeOpsItems = void 0;
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeOpsItems(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeOpsItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeOpsItems, "paginateDescribeOpsItems");
    exports.paginateDescribeOpsItems = paginateDescribeOpsItems;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js
var require_DescribeParametersPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeParameters = void 0;
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeParametersCommand_1.DescribeParametersCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeParameters(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeParameters, "paginateDescribeParameters");
    exports.paginateDescribeParameters = paginateDescribeParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js
var require_DescribePatchBaselinesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchBaselines = void 0;
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describePatchBaselines(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribePatchBaselines(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribePatchBaselines, "paginateDescribePatchBaselines");
    exports.paginateDescribePatchBaselines = paginateDescribePatchBaselines;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js
var require_DescribePatchGroupsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchGroups = void 0;
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describePatchGroups(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribePatchGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribePatchGroups, "paginateDescribePatchGroups");
    exports.paginateDescribePatchGroups = paginateDescribePatchGroups;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js
var require_DescribePatchPropertiesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchProperties = void 0;
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describePatchProperties(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribePatchProperties(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribePatchProperties, "paginateDescribePatchProperties");
    exports.paginateDescribePatchProperties = paginateDescribePatchProperties;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js
var require_DescribeSessionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeSessions = void 0;
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new DescribeSessionsCommand_1.DescribeSessionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.describeSessions(input, ...args);
    }, "makePagedRequest");
    async function* paginateDescribeSessions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateDescribeSessions, "paginateDescribeSessions");
    exports.paginateDescribeSessions = paginateDescribeSessions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js
var require_GetInventoryPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventory = void 0;
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new GetInventoryCommand_1.GetInventoryCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.getInventory(input, ...args);
    }, "makePagedRequest");
    async function* paginateGetInventory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateGetInventory, "paginateGetInventory");
    exports.paginateGetInventory = paginateGetInventory;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js
var require_GetInventorySchemaPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventorySchema = void 0;
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new GetInventorySchemaCommand_1.GetInventorySchemaCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.getInventorySchema(input, ...args);
    }, "makePagedRequest");
    async function* paginateGetInventorySchema(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateGetInventorySchema, "paginateGetInventorySchema");
    exports.paginateGetInventorySchema = paginateGetInventorySchema;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js
var require_GetOpsSummaryPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetOpsSummary = void 0;
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new GetOpsSummaryCommand_1.GetOpsSummaryCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.getOpsSummary(input, ...args);
    }, "makePagedRequest");
    async function* paginateGetOpsSummary(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateGetOpsSummary, "paginateGetOpsSummary");
    exports.paginateGetOpsSummary = paginateGetOpsSummary;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js
var require_GetParameterHistoryPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParameterHistory = void 0;
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new GetParameterHistoryCommand_1.GetParameterHistoryCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.getParameterHistory(input, ...args);
    }, "makePagedRequest");
    async function* paginateGetParameterHistory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateGetParameterHistory, "paginateGetParameterHistory");
    exports.paginateGetParameterHistory = paginateGetParameterHistory;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js
var require_GetParametersByPathPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParametersByPath = void 0;
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new GetParametersByPathCommand_1.GetParametersByPathCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.getParametersByPath(input, ...args);
    }, "makePagedRequest");
    async function* paginateGetParametersByPath(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateGetParametersByPath, "paginateGetParametersByPath");
    exports.paginateGetParametersByPath = paginateGetParametersByPath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js
var require_ListAssociationVersionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociationVersions = void 0;
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listAssociationVersions(input, ...args);
    }, "makePagedRequest");
    async function* paginateListAssociationVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListAssociationVersions, "paginateListAssociationVersions");
    exports.paginateListAssociationVersions = paginateListAssociationVersions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js
var require_ListAssociationsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociations = void 0;
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListAssociationsCommand_1.ListAssociationsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listAssociations(input, ...args);
    }, "makePagedRequest");
    async function* paginateListAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListAssociations, "paginateListAssociations");
    exports.paginateListAssociations = paginateListAssociations;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js
var require_ListCommandInvocationsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommandInvocations = void 0;
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listCommandInvocations(input, ...args);
    }, "makePagedRequest");
    async function* paginateListCommandInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListCommandInvocations, "paginateListCommandInvocations");
    exports.paginateListCommandInvocations = paginateListCommandInvocations;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js
var require_ListCommandsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommands = void 0;
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListCommandsCommand_1.ListCommandsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listCommands(input, ...args);
    }, "makePagedRequest");
    async function* paginateListCommands(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListCommands, "paginateListCommands");
    exports.paginateListCommands = paginateListCommands;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js
var require_ListComplianceItemsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceItems = void 0;
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListComplianceItemsCommand_1.ListComplianceItemsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listComplianceItems(input, ...args);
    }, "makePagedRequest");
    async function* paginateListComplianceItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListComplianceItems, "paginateListComplianceItems");
    exports.paginateListComplianceItems = paginateListComplianceItems;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js
var require_ListComplianceSummariesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceSummaries = void 0;
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listComplianceSummaries(input, ...args);
    }, "makePagedRequest");
    async function* paginateListComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListComplianceSummaries, "paginateListComplianceSummaries");
    exports.paginateListComplianceSummaries = paginateListComplianceSummaries;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js
var require_ListDocumentVersionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocumentVersions = void 0;
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listDocumentVersions(input, ...args);
    }, "makePagedRequest");
    async function* paginateListDocumentVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListDocumentVersions, "paginateListDocumentVersions");
    exports.paginateListDocumentVersions = paginateListDocumentVersions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js
var require_ListDocumentsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocuments = void 0;
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListDocumentsCommand_1.ListDocumentsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listDocuments(input, ...args);
    }, "makePagedRequest");
    async function* paginateListDocuments(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListDocuments, "paginateListDocuments");
    exports.paginateListDocuments = paginateListDocuments;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js
var require_ListOpsItemEventsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemEvents = void 0;
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listOpsItemEvents(input, ...args);
    }, "makePagedRequest");
    async function* paginateListOpsItemEvents(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListOpsItemEvents, "paginateListOpsItemEvents");
    exports.paginateListOpsItemEvents = paginateListOpsItemEvents;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js
var require_ListOpsItemRelatedItemsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemRelatedItems = void 0;
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listOpsItemRelatedItems(input, ...args);
    }, "makePagedRequest");
    async function* paginateListOpsItemRelatedItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListOpsItemRelatedItems, "paginateListOpsItemRelatedItems");
    exports.paginateListOpsItemRelatedItems = paginateListOpsItemRelatedItems;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js
var require_ListOpsMetadataPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsMetadata = void 0;
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListOpsMetadataCommand_1.ListOpsMetadataCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listOpsMetadata(input, ...args);
    }, "makePagedRequest");
    async function* paginateListOpsMetadata(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListOpsMetadata, "paginateListOpsMetadata");
    exports.paginateListOpsMetadata = paginateListOpsMetadata;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js
var require_ListResourceComplianceSummariesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceComplianceSummaries = void 0;
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listResourceComplianceSummaries(input, ...args);
    }, "makePagedRequest");
    async function* paginateListResourceComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListResourceComplianceSummaries, "paginateListResourceComplianceSummaries");
    exports.paginateListResourceComplianceSummaries = paginateListResourceComplianceSummaries;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js
var require_ListResourceDataSyncPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceDataSync = void 0;
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var SSM_1 = require_SSM();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.send(new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(input), ...args);
    }, "makePagedClientRequest");
    var makePagedRequest = /* @__PURE__ */ __name(async (client, input, ...args) => {
      return await client.listResourceDataSync(input, ...args);
    }, "makePagedRequest");
    async function* paginateListResourceDataSync(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSM_1.SSM) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    __name(paginateListResourceDataSync, "paginateListResourceDataSync");
    exports.paginateListResourceDataSync = paginateListResourceDataSync;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DescribeActivationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselinePaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationPaginator(), exports);
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowSchedulePaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeParametersPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeSessionsPaginator(), exports);
    tslib_1.__exportStar(require_GetInventoryPaginator(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaPaginator(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryPaginator(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryPaginator(), exports);
    tslib_1.__exportStar(require_GetParametersByPathPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncPaginator(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = /* @__PURE__ */ __name((seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    }, "sleep");
    exports.sleep = sleep;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = /* @__PURE__ */ __name((result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    }, "checkExceptions");
    exports.checkExceptions = checkExceptions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = /* @__PURE__ */ __name((minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    }, "exponentialBackoffWithJitter");
    var randomInRange = /* @__PURE__ */ __name((min, max) => min + Math.random() * (max - min), "randomInRange");
    var runPolling = /* @__PURE__ */ __name(async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    }, "runPolling");
    exports.runPolling = runPolling;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = /* @__PURE__ */ __name((options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    }, "validateWaiterOptions");
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter2();
    var abortTimeout = /* @__PURE__ */ __name(async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    }, "abortTimeout");
    var createWaiter = /* @__PURE__ */ __name(async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    }, "createWaiter");
    exports.createWaiter = createWaiter;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.208.0/node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js
var require_waitForCommandExecuted = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilCommandExecuted = exports.waitForCommandExecuted = void 0;
    var util_waiter_1 = require_dist_cjs47();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var checkState = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetCommandInvocationCommand_1.GetCommandInvocationCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Delayed") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Success") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Cancelled") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "TimedOut") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "Cancelling") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvocationDoesNotExist") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForCommandExecuted = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    }, "waitForCommandExecuted");
    exports.waitForCommandExecuted = waitForCommandExecuted;
    var waitUntilCommandExecuted = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    }, "waitUntilCommandExecuted");
    exports.waitUntilCommandExecuted = waitUntilCommandExecuted;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForCommandExecuted(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-ssm@3.208.0/node_modules/@aws-sdk/client-ssm/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSM(), exports);
    tslib_1.__exportStar(require_SSMClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var SSMServiceException_1 = require_SSMServiceException();
    Object.defineProperty(exports, "SSMServiceException", { enumerable: true, get: function() {
      return SSMServiceException_1.SSMServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/json/builder.js
var require_builder = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/json/builder.js"(exports, module) {
    var util = require_util3();
    function JsonBuilder() {
    }
    __name(JsonBuilder, "JsonBuilder");
    JsonBuilder.prototype.build = function(value, shape) {
      return JSON.stringify(translate(value, shape));
    };
    function translate(value, shape) {
      if (!shape || value === void 0 || value === null)
        return void 0;
      switch (shape.type) {
        case "structure":
          return translateStructure(value, shape);
        case "map":
          return translateMap(value, shape);
        case "list":
          return translateList(value, shape);
        default:
          return translateScalar(value, shape);
      }
    }
    __name(translate, "translate");
    function translateStructure(structure, shape) {
      if (shape.isDocument) {
        return structure;
      }
      var struct = {};
      util.each(structure, function(name, value) {
        var memberShape = shape.members[name];
        if (memberShape) {
          if (memberShape.location !== "body")
            return;
          var locationName = memberShape.isLocationName ? memberShape.name : name;
          var result = translate(value, memberShape);
          if (result !== void 0)
            struct[locationName] = result;
        }
      });
      return struct;
    }
    __name(translateStructure, "translateStructure");
    function translateList(list, shape) {
      var out = [];
      util.arrayEach(list, function(value) {
        var result = translate(value, shape.member);
        if (result !== void 0)
          out.push(result);
      });
      return out;
    }
    __name(translateList, "translateList");
    function translateMap(map, shape) {
      var out = {};
      util.each(map, function(key, value) {
        var result = translate(value, shape.value);
        if (result !== void 0)
          out[key] = result;
      });
      return out;
    }
    __name(translateMap, "translateMap");
    function translateScalar(value, shape) {
      return shape.toWireFormat(value);
    }
    __name(translateScalar, "translateScalar");
    module.exports = JsonBuilder;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/json/parser.js
var require_parser = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/json/parser.js"(exports, module) {
    var util = require_util3();
    function JsonParser() {
    }
    __name(JsonParser, "JsonParser");
    JsonParser.prototype.parse = function(value, shape) {
      return translate(JSON.parse(value), shape);
    };
    function translate(value, shape) {
      if (!shape || value === void 0)
        return void 0;
      switch (shape.type) {
        case "structure":
          return translateStructure(value, shape);
        case "map":
          return translateMap(value, shape);
        case "list":
          return translateList(value, shape);
        default:
          return translateScalar(value, shape);
      }
    }
    __name(translate, "translate");
    function translateStructure(structure, shape) {
      if (structure == null)
        return void 0;
      if (shape.isDocument)
        return structure;
      var struct = {};
      var shapeMembers = shape.members;
      util.each(shapeMembers, function(name, memberShape) {
        var locationName = memberShape.isLocationName ? memberShape.name : name;
        if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
          var value = structure[locationName];
          var result = translate(value, memberShape);
          if (result !== void 0)
            struct[name] = result;
        }
      });
      return struct;
    }
    __name(translateStructure, "translateStructure");
    function translateList(list, shape) {
      if (list == null)
        return void 0;
      var out = [];
      util.arrayEach(list, function(value) {
        var result = translate(value, shape.member);
        if (result === void 0)
          out.push(null);
        else
          out.push(result);
      });
      return out;
    }
    __name(translateList, "translateList");
    function translateMap(map, shape) {
      if (map == null)
        return void 0;
      var out = {};
      util.each(map, function(key, value) {
        var result = translate(value, shape.value);
        if (result === void 0)
          out[key] = null;
        else
          out[key] = result;
      });
      return out;
    }
    __name(translateMap, "translateMap");
    function translateScalar(value, shape) {
      return shape.toType(value);
    }
    __name(translateScalar, "translateScalar");
    module.exports = JsonParser;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/helpers.js
var require_helpers = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/helpers.js"(exports, module) {
    var util = require_util3();
    var AWS2 = require_core();
    function populateHostPrefix(request) {
      var enabled = request.service.config.hostPrefixEnabled;
      if (!enabled)
        return request;
      var operationModel = request.service.api.operations[request.operation];
      if (hasEndpointDiscover(request))
        return request;
      if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {
        var hostPrefixNotation = operationModel.endpoint.hostPrefix;
        var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);
        prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);
        validateHostname(request.httpRequest.endpoint.hostname);
      }
      return request;
    }
    __name(populateHostPrefix, "populateHostPrefix");
    function hasEndpointDiscover(request) {
      var api = request.service.api;
      var operationModel = api.operations[request.operation];
      var isEndpointOperation = api.endpointOperation && api.endpointOperation === util.string.lowerFirst(operationModel.name);
      return operationModel.endpointDiscoveryRequired !== "NULL" || isEndpointOperation === true;
    }
    __name(hasEndpointDiscover, "hasEndpointDiscover");
    function expandHostPrefix(hostPrefixNotation, params, shape) {
      util.each(shape.members, function(name, member) {
        if (member.hostLabel === true) {
          if (typeof params[name] !== "string" || params[name] === "") {
            throw util.error(new Error(), {
              message: "Parameter " + name + " should be a non-empty string.",
              code: "InvalidParameter"
            });
          }
          var regex = new RegExp("\\{" + name + "\\}", "g");
          hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);
        }
      });
      return hostPrefixNotation;
    }
    __name(expandHostPrefix, "expandHostPrefix");
    function prependEndpointPrefix(endpoint, prefix) {
      if (endpoint.host) {
        endpoint.host = prefix + endpoint.host;
      }
      if (endpoint.hostname) {
        endpoint.hostname = prefix + endpoint.hostname;
      }
    }
    __name(prependEndpointPrefix, "prependEndpointPrefix");
    function validateHostname(hostname) {
      var labels = hostname.split(".");
      var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;
      util.arrayEach(labels, function(label) {
        if (!label.length || label.length < 1 || label.length > 63) {
          throw util.error(new Error(), {
            code: "ValidationError",
            message: "Hostname label length should be between 1 to 63 characters, inclusive."
          });
        }
        if (!hostPattern.test(label)) {
          throw AWS2.util.error(
            new Error(),
            { code: "ValidationError", message: label + " is not hostname compatible." }
          );
        }
      });
    }
    __name(validateHostname, "validateHostname");
    module.exports = {
      populateHostPrefix
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/json.js
var require_json = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/json.js"(exports, module) {
    var util = require_util3();
    var JsonBuilder = require_builder();
    var JsonParser = require_parser();
    var populateHostPrefix = require_helpers().populateHostPrefix;
    function buildRequest(req) {
      var httpRequest2 = req.httpRequest;
      var api = req.service.api;
      var target = api.targetPrefix + "." + api.operations[req.operation].name;
      var version2 = api.jsonVersion || "1.0";
      var input = api.operations[req.operation].input;
      var builder = new JsonBuilder();
      if (version2 === 1)
        version2 = "1.0";
      httpRequest2.body = builder.build(req.params || {}, input);
      httpRequest2.headers["Content-Type"] = "application/x-amz-json-" + version2;
      httpRequest2.headers["X-Amz-Target"] = target;
      populateHostPrefix(req);
    }
    __name(buildRequest, "buildRequest");
    function extractError(resp) {
      var error = {};
      var httpResponse = resp.httpResponse;
      error.code = httpResponse.headers["x-amzn-errortype"] || "UnknownError";
      if (typeof error.code === "string") {
        error.code = error.code.split(":")[0];
      }
      if (httpResponse.body.length > 0) {
        try {
          var e = JSON.parse(httpResponse.body.toString());
          var code = e.__type || e.code || e.Code;
          if (code) {
            error.code = code.split("#").pop();
          }
          if (error.code === "RequestEntityTooLarge") {
            error.message = "Request body must be less than 1 MB";
          } else {
            error.message = e.message || e.Message || null;
          }
        } catch (e2) {
          error.statusCode = httpResponse.statusCode;
          error.message = httpResponse.statusMessage;
        }
      } else {
        error.statusCode = httpResponse.statusCode;
        error.message = httpResponse.statusCode.toString();
      }
      resp.error = util.error(new Error(), error);
    }
    __name(extractError, "extractError");
    function extractData(resp) {
      var body = resp.httpResponse.body.toString() || "{}";
      if (resp.request.service.config.convertResponseTypes === false) {
        resp.data = JSON.parse(body);
      } else {
        var operation = resp.request.service.api.operations[resp.request.operation];
        var shape = operation.output || {};
        var parser = new JsonParser();
        resp.data = parser.parse(body, shape);
      }
    }
    __name(extractData, "extractData");
    module.exports = {
      buildRequest,
      extractError,
      extractData
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/query/query_param_serializer.js
var require_query_param_serializer = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/query/query_param_serializer.js"(exports, module) {
    var util = require_util3();
    function QueryParamSerializer() {
    }
    __name(QueryParamSerializer, "QueryParamSerializer");
    QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
      serializeStructure("", params, shape, fn);
    };
    function ucfirst(shape) {
      if (shape.isQueryName || shape.api.protocol !== "ec2") {
        return shape.name;
      } else {
        return shape.name[0].toUpperCase() + shape.name.substr(1);
      }
    }
    __name(ucfirst, "ucfirst");
    function serializeStructure(prefix, struct, rules, fn) {
      util.each(rules.members, function(name, member) {
        var value = struct[name];
        if (value === null || value === void 0)
          return;
        var memberName = ucfirst(member);
        memberName = prefix ? prefix + "." + memberName : memberName;
        serializeMember(memberName, value, member, fn);
      });
    }
    __name(serializeStructure, "serializeStructure");
    function serializeMap(name, map, rules, fn) {
      var i = 1;
      util.each(map, function(key, value) {
        var prefix = rules.flattened ? "." : ".entry.";
        var position = prefix + i++ + ".";
        var keyName = position + (rules.key.name || "key");
        var valueName = position + (rules.value.name || "value");
        serializeMember(name + keyName, key, rules.key, fn);
        serializeMember(name + valueName, value, rules.value, fn);
      });
    }
    __name(serializeMap, "serializeMap");
    function serializeList(name, list, rules, fn) {
      var memberRules = rules.member || {};
      if (list.length === 0) {
        fn.call(this, name, null);
        return;
      }
      util.arrayEach(list, function(v, n) {
        var suffix = "." + (n + 1);
        if (rules.api.protocol === "ec2") {
          suffix = suffix + "";
        } else if (rules.flattened) {
          if (memberRules.name) {
            var parts = name.split(".");
            parts.pop();
            parts.push(ucfirst(memberRules));
            name = parts.join(".");
          }
        } else {
          suffix = "." + (memberRules.name ? memberRules.name : "member") + suffix;
        }
        serializeMember(name + suffix, v, memberRules, fn);
      });
    }
    __name(serializeList, "serializeList");
    function serializeMember(name, value, rules, fn) {
      if (value === null || value === void 0)
        return;
      if (rules.type === "structure") {
        serializeStructure(name, value, rules, fn);
      } else if (rules.type === "list") {
        serializeList(name, value, rules, fn);
      } else if (rules.type === "map") {
        serializeMap(name, value, rules, fn);
      } else {
        fn(name, rules.toWireFormat(value).toString());
      }
    }
    __name(serializeMember, "serializeMember");
    module.exports = QueryParamSerializer;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/collection.js
var require_collection = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/collection.js"(exports, module) {
    var memoizedProperty = require_util3().memoizedProperty;
    function memoize(name, value, factory, nameTr) {
      memoizedProperty(this, nameTr(name), function() {
        return factory(name, value);
      });
    }
    __name(memoize, "memoize");
    function Collection(iterable, options, factory, nameTr, callback) {
      nameTr = nameTr || String;
      var self = this;
      for (var id in iterable) {
        if (Object.prototype.hasOwnProperty.call(iterable, id)) {
          memoize.call(self, id, iterable[id], factory, nameTr);
          if (callback)
            callback(id, iterable[id]);
        }
      }
    }
    __name(Collection, "Collection");
    module.exports = Collection;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/shape.js
var require_shape = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/shape.js"(exports, module) {
    var Collection = require_collection();
    var util = require_util3();
    function property(obj, name, value) {
      if (value !== null && value !== void 0) {
        util.property.apply(this, arguments);
      }
    }
    __name(property, "property");
    function memoizedProperty(obj, name) {
      if (!obj.constructor.prototype[name]) {
        util.memoizedProperty.apply(this, arguments);
      }
    }
    __name(memoizedProperty, "memoizedProperty");
    function Shape(shape, options, memberName) {
      options = options || {};
      property(this, "shape", shape.shape);
      property(this, "api", options.api, false);
      property(this, "type", shape.type);
      property(this, "enum", shape.enum);
      property(this, "min", shape.min);
      property(this, "max", shape.max);
      property(this, "pattern", shape.pattern);
      property(this, "location", shape.location || this.location || "body");
      property(this, "name", this.name || shape.xmlName || shape.queryName || shape.locationName || memberName);
      property(this, "isStreaming", shape.streaming || this.isStreaming || false);
      property(this, "requiresLength", shape.requiresLength, false);
      property(this, "isComposite", shape.isComposite || false);
      property(this, "isShape", true, false);
      property(this, "isQueryName", Boolean(shape.queryName), false);
      property(this, "isLocationName", Boolean(shape.locationName), false);
      property(this, "isIdempotent", shape.idempotencyToken === true);
      property(this, "isJsonValue", shape.jsonvalue === true);
      property(this, "isSensitive", shape.sensitive === true || shape.prototype && shape.prototype.sensitive === true);
      property(this, "isEventStream", Boolean(shape.eventstream), false);
      property(this, "isEvent", Boolean(shape.event), false);
      property(this, "isEventPayload", Boolean(shape.eventpayload), false);
      property(this, "isEventHeader", Boolean(shape.eventheader), false);
      property(this, "isTimestampFormatSet", Boolean(shape.timestampFormat) || shape.prototype && shape.prototype.isTimestampFormatSet === true, false);
      property(this, "endpointDiscoveryId", Boolean(shape.endpointdiscoveryid), false);
      property(this, "hostLabel", Boolean(shape.hostLabel), false);
      if (options.documentation) {
        property(this, "documentation", shape.documentation);
        property(this, "documentationUrl", shape.documentationUrl);
      }
      if (shape.xmlAttribute) {
        property(this, "isXmlAttribute", shape.xmlAttribute || false);
      }
      property(this, "defaultValue", null);
      this.toWireFormat = function(value) {
        if (value === null || value === void 0)
          return "";
        return value;
      };
      this.toType = function(value) {
        return value;
      };
    }
    __name(Shape, "Shape");
    Shape.normalizedTypes = {
      character: "string",
      double: "float",
      long: "integer",
      short: "integer",
      biginteger: "integer",
      bigdecimal: "float",
      blob: "binary"
    };
    Shape.types = {
      "structure": StructureShape,
      "list": ListShape,
      "map": MapShape,
      "boolean": BooleanShape,
      "timestamp": TimestampShape,
      "float": FloatShape,
      "integer": IntegerShape,
      "string": StringShape,
      "base64": Base64Shape,
      "binary": BinaryShape
    };
    Shape.resolve = /* @__PURE__ */ __name(function resolve(shape, options) {
      if (shape.shape) {
        var refShape = options.api.shapes[shape.shape];
        if (!refShape) {
          throw new Error("Cannot find shape reference: " + shape.shape);
        }
        return refShape;
      } else {
        return null;
      }
    }, "resolve");
    Shape.create = /* @__PURE__ */ __name(function create(shape, options, memberName) {
      if (shape.isShape)
        return shape;
      var refShape = Shape.resolve(shape, options);
      if (refShape) {
        var filteredKeys = Object.keys(shape);
        if (!options.documentation) {
          filteredKeys = filteredKeys.filter(function(name) {
            return !name.match(/documentation/);
          });
        }
        var InlineShape = /* @__PURE__ */ __name(function() {
          refShape.constructor.call(this, shape, options, memberName);
        }, "InlineShape");
        InlineShape.prototype = refShape;
        return new InlineShape();
      } else {
        if (!shape.type) {
          if (shape.members)
            shape.type = "structure";
          else if (shape.member)
            shape.type = "list";
          else if (shape.key)
            shape.type = "map";
          else
            shape.type = "string";
        }
        var origType = shape.type;
        if (Shape.normalizedTypes[shape.type]) {
          shape.type = Shape.normalizedTypes[shape.type];
        }
        if (Shape.types[shape.type]) {
          return new Shape.types[shape.type](shape, options, memberName);
        } else {
          throw new Error("Unrecognized shape type: " + origType);
        }
      }
    }, "create");
    function CompositeShape(shape) {
      Shape.apply(this, arguments);
      property(this, "isComposite", true);
      if (shape.flattened) {
        property(this, "flattened", shape.flattened || false);
      }
    }
    __name(CompositeShape, "CompositeShape");
    function StructureShape(shape, options) {
      var self = this;
      var requiredMap = null, firstInit = !this.isShape;
      CompositeShape.apply(this, arguments);
      if (firstInit) {
        property(this, "defaultValue", function() {
          return {};
        });
        property(this, "members", {});
        property(this, "memberNames", []);
        property(this, "required", []);
        property(this, "isRequired", function() {
          return false;
        });
        property(this, "isDocument", Boolean(shape.document));
      }
      if (shape.members) {
        property(this, "members", new Collection(shape.members, options, function(name, member) {
          return Shape.create(member, options, name);
        }));
        memoizedProperty(this, "memberNames", function() {
          return shape.xmlOrder || Object.keys(shape.members);
        });
        if (shape.event) {
          memoizedProperty(this, "eventPayloadMemberName", function() {
            var members = self.members;
            var memberNames = self.memberNames;
            for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
              if (members[memberNames[i]].isEventPayload) {
                return memberNames[i];
              }
            }
          });
          memoizedProperty(this, "eventHeaderMemberNames", function() {
            var members = self.members;
            var memberNames = self.memberNames;
            var eventHeaderMemberNames = [];
            for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
              if (members[memberNames[i]].isEventHeader) {
                eventHeaderMemberNames.push(memberNames[i]);
              }
            }
            return eventHeaderMemberNames;
          });
        }
      }
      if (shape.required) {
        property(this, "required", shape.required);
        property(this, "isRequired", function(name) {
          if (!requiredMap) {
            requiredMap = {};
            for (var i = 0; i < shape.required.length; i++) {
              requiredMap[shape.required[i]] = true;
            }
          }
          return requiredMap[name];
        }, false, true);
      }
      property(this, "resultWrapper", shape.resultWrapper || null);
      if (shape.payload) {
        property(this, "payload", shape.payload);
      }
      if (typeof shape.xmlNamespace === "string") {
        property(this, "xmlNamespaceUri", shape.xmlNamespace);
      } else if (typeof shape.xmlNamespace === "object") {
        property(this, "xmlNamespacePrefix", shape.xmlNamespace.prefix);
        property(this, "xmlNamespaceUri", shape.xmlNamespace.uri);
      }
    }
    __name(StructureShape, "StructureShape");
    function ListShape(shape, options) {
      var self = this, firstInit = !this.isShape;
      CompositeShape.apply(this, arguments);
      if (firstInit) {
        property(this, "defaultValue", function() {
          return [];
        });
      }
      if (shape.member) {
        memoizedProperty(this, "member", function() {
          return Shape.create(shape.member, options);
        });
      }
      if (this.flattened) {
        var oldName = this.name;
        memoizedProperty(this, "name", function() {
          return self.member.name || oldName;
        });
      }
    }
    __name(ListShape, "ListShape");
    function MapShape(shape, options) {
      var firstInit = !this.isShape;
      CompositeShape.apply(this, arguments);
      if (firstInit) {
        property(this, "defaultValue", function() {
          return {};
        });
        property(this, "key", Shape.create({ type: "string" }, options));
        property(this, "value", Shape.create({ type: "string" }, options));
      }
      if (shape.key) {
        memoizedProperty(this, "key", function() {
          return Shape.create(shape.key, options);
        });
      }
      if (shape.value) {
        memoizedProperty(this, "value", function() {
          return Shape.create(shape.value, options);
        });
      }
    }
    __name(MapShape, "MapShape");
    function TimestampShape(shape) {
      var self = this;
      Shape.apply(this, arguments);
      if (shape.timestampFormat) {
        property(this, "timestampFormat", shape.timestampFormat);
      } else if (self.isTimestampFormatSet && this.timestampFormat) {
        property(this, "timestampFormat", this.timestampFormat);
      } else if (this.location === "header") {
        property(this, "timestampFormat", "rfc822");
      } else if (this.location === "querystring") {
        property(this, "timestampFormat", "iso8601");
      } else if (this.api) {
        switch (this.api.protocol) {
          case "json":
          case "rest-json":
            property(this, "timestampFormat", "unixTimestamp");
            break;
          case "rest-xml":
          case "query":
          case "ec2":
            property(this, "timestampFormat", "iso8601");
            break;
        }
      }
      this.toType = function(value) {
        if (value === null || value === void 0)
          return null;
        if (typeof value.toUTCString === "function")
          return value;
        return typeof value === "string" || typeof value === "number" ? util.date.parseTimestamp(value) : null;
      };
      this.toWireFormat = function(value) {
        return util.date.format(value, self.timestampFormat);
      };
    }
    __name(TimestampShape, "TimestampShape");
    function StringShape() {
      Shape.apply(this, arguments);
      var nullLessProtocols = ["rest-xml", "query", "ec2"];
      this.toType = function(value) {
        value = this.api && nullLessProtocols.indexOf(this.api.protocol) > -1 ? value || "" : value;
        if (this.isJsonValue) {
          return JSON.parse(value);
        }
        return value && typeof value.toString === "function" ? value.toString() : value;
      };
      this.toWireFormat = function(value) {
        return this.isJsonValue ? JSON.stringify(value) : value;
      };
    }
    __name(StringShape, "StringShape");
    function FloatShape() {
      Shape.apply(this, arguments);
      this.toType = function(value) {
        if (value === null || value === void 0)
          return null;
        return parseFloat(value);
      };
      this.toWireFormat = this.toType;
    }
    __name(FloatShape, "FloatShape");
    function IntegerShape() {
      Shape.apply(this, arguments);
      this.toType = function(value) {
        if (value === null || value === void 0)
          return null;
        return parseInt(value, 10);
      };
      this.toWireFormat = this.toType;
    }
    __name(IntegerShape, "IntegerShape");
    function BinaryShape() {
      Shape.apply(this, arguments);
      this.toType = function(value) {
        var buf = util.base64.decode(value);
        if (this.isSensitive && util.isNode() && typeof util.Buffer.alloc === "function") {
          var secureBuf = util.Buffer.alloc(buf.length, buf);
          buf.fill(0);
          buf = secureBuf;
        }
        return buf;
      };
      this.toWireFormat = util.base64.encode;
    }
    __name(BinaryShape, "BinaryShape");
    function Base64Shape() {
      BinaryShape.apply(this, arguments);
    }
    __name(Base64Shape, "Base64Shape");
    function BooleanShape() {
      Shape.apply(this, arguments);
      this.toType = function(value) {
        if (typeof value === "boolean")
          return value;
        if (value === null || value === void 0)
          return null;
        return value === "true";
      };
    }
    __name(BooleanShape, "BooleanShape");
    Shape.shapes = {
      StructureShape,
      ListShape,
      MapShape,
      StringShape,
      BooleanShape,
      Base64Shape
    };
    module.exports = Shape;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/query.js
var require_query = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/query.js"(exports, module) {
    var AWS2 = require_core();
    var util = require_util3();
    var QueryParamSerializer = require_query_param_serializer();
    var Shape = require_shape();
    var populateHostPrefix = require_helpers().populateHostPrefix;
    function buildRequest(req) {
      var operation = req.service.api.operations[req.operation];
      var httpRequest2 = req.httpRequest;
      httpRequest2.headers["Content-Type"] = "application/x-www-form-urlencoded; charset=utf-8";
      httpRequest2.params = {
        Version: req.service.api.apiVersion,
        Action: operation.name
      };
      var builder = new QueryParamSerializer();
      builder.serialize(req.params, operation.input, function(name, value) {
        httpRequest2.params[name] = value;
      });
      httpRequest2.body = util.queryParamsToString(httpRequest2.params);
      populateHostPrefix(req);
    }
    __name(buildRequest, "buildRequest");
    function extractError(resp) {
      var data, body = resp.httpResponse.body.toString();
      if (body.match("<UnknownOperationException")) {
        data = {
          Code: "UnknownOperation",
          Message: "Unknown operation " + resp.request.operation
        };
      } else {
        try {
          data = new AWS2.XML.Parser().parse(body);
        } catch (e) {
          data = {
            Code: resp.httpResponse.statusCode,
            Message: resp.httpResponse.statusMessage
          };
        }
      }
      if (data.requestId && !resp.requestId)
        resp.requestId = data.requestId;
      if (data.Errors)
        data = data.Errors;
      if (data.Error)
        data = data.Error;
      if (data.Code) {
        resp.error = util.error(new Error(), {
          code: data.Code,
          message: data.Message
        });
      } else {
        resp.error = util.error(new Error(), {
          code: resp.httpResponse.statusCode,
          message: null
        });
      }
    }
    __name(extractError, "extractError");
    function extractData(resp) {
      var req = resp.request;
      var operation = req.service.api.operations[req.operation];
      var shape = operation.output || {};
      var origRules = shape;
      if (origRules.resultWrapper) {
        var tmp = Shape.create({ type: "structure" });
        tmp.members[origRules.resultWrapper] = shape;
        tmp.memberNames = [origRules.resultWrapper];
        util.property(shape, "name", shape.resultWrapper);
        shape = tmp;
      }
      var parser = new AWS2.XML.Parser();
      if (shape && shape.members && !shape.members._XAMZRequestId) {
        var requestIdShape = Shape.create(
          { type: "string" },
          { api: { protocol: "query" } },
          "requestId"
        );
        shape.members._XAMZRequestId = requestIdShape;
      }
      var data = parser.parse(resp.httpResponse.body.toString(), shape);
      resp.requestId = data._XAMZRequestId || data.requestId;
      if (data._XAMZRequestId)
        delete data._XAMZRequestId;
      if (origRules.resultWrapper) {
        if (data[origRules.resultWrapper]) {
          util.update(data, data[origRules.resultWrapper]);
          delete data[origRules.resultWrapper];
        }
      }
      resp.data = data;
    }
    __name(extractData, "extractData");
    module.exports = {
      buildRequest,
      extractError,
      extractData
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/rest.js
var require_rest = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/rest.js"(exports, module) {
    var util = require_util3();
    var populateHostPrefix = require_helpers().populateHostPrefix;
    function populateMethod(req) {
      req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
    }
    __name(populateMethod, "populateMethod");
    function generateURI(endpointPath, operationPath, input, params) {
      var uri = [endpointPath, operationPath].join("/");
      uri = uri.replace(/\/+/g, "/");
      var queryString = {}, queryStringSet = false;
      util.each(input.members, function(name, member) {
        var paramValue = params[name];
        if (paramValue === null || paramValue === void 0)
          return;
        if (member.location === "uri") {
          var regex = new RegExp("\\{" + member.name + "(\\+)?\\}");
          uri = uri.replace(regex, function(_, plus) {
            var fn = plus ? util.uriEscapePath : util.uriEscape;
            return fn(String(paramValue));
          });
        } else if (member.location === "querystring") {
          queryStringSet = true;
          if (member.type === "list") {
            queryString[member.name] = paramValue.map(function(val) {
              return util.uriEscape(member.member.toWireFormat(val).toString());
            });
          } else if (member.type === "map") {
            util.each(paramValue, function(key, value) {
              if (Array.isArray(value)) {
                queryString[key] = value.map(function(val) {
                  return util.uriEscape(String(val));
                });
              } else {
                queryString[key] = util.uriEscape(String(value));
              }
            });
          } else {
            queryString[member.name] = util.uriEscape(member.toWireFormat(paramValue).toString());
          }
        }
      });
      if (queryStringSet) {
        uri += uri.indexOf("?") >= 0 ? "&" : "?";
        var parts = [];
        util.arrayEach(Object.keys(queryString).sort(), function(key) {
          if (!Array.isArray(queryString[key])) {
            queryString[key] = [queryString[key]];
          }
          for (var i = 0; i < queryString[key].length; i++) {
            parts.push(util.uriEscape(String(key)) + "=" + queryString[key][i]);
          }
        });
        uri += parts.join("&");
      }
      return uri;
    }
    __name(generateURI, "generateURI");
    function populateURI(req) {
      var operation = req.service.api.operations[req.operation];
      var input = operation.input;
      var uri = generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
      req.httpRequest.path = uri;
    }
    __name(populateURI, "populateURI");
    function populateHeaders(req) {
      var operation = req.service.api.operations[req.operation];
      util.each(operation.input.members, function(name, member) {
        var value = req.params[name];
        if (value === null || value === void 0)
          return;
        if (member.location === "headers" && member.type === "map") {
          util.each(value, function(key, memberValue) {
            req.httpRequest.headers[member.name + key] = memberValue;
          });
        } else if (member.location === "header") {
          value = member.toWireFormat(value).toString();
          if (member.isJsonValue) {
            value = util.base64.encode(value);
          }
          req.httpRequest.headers[member.name] = value;
        }
      });
    }
    __name(populateHeaders, "populateHeaders");
    function buildRequest(req) {
      populateMethod(req);
      populateURI(req);
      populateHeaders(req);
      populateHostPrefix(req);
    }
    __name(buildRequest, "buildRequest");
    function extractError() {
    }
    __name(extractError, "extractError");
    function extractData(resp) {
      var req = resp.request;
      var data = {};
      var r = resp.httpResponse;
      var operation = req.service.api.operations[req.operation];
      var output = operation.output;
      var headers = {};
      util.each(r.headers, function(k, v) {
        headers[k.toLowerCase()] = v;
      });
      util.each(output.members, function(name, member) {
        var header = (member.name || name).toLowerCase();
        if (member.location === "headers" && member.type === "map") {
          data[name] = {};
          var location = member.isLocationName ? member.name : "";
          var pattern = new RegExp("^" + location + "(.+)", "i");
          util.each(r.headers, function(k, v) {
            var result = k.match(pattern);
            if (result !== null) {
              data[name][result[1]] = v;
            }
          });
        } else if (member.location === "header") {
          if (headers[header] !== void 0) {
            var value = member.isJsonValue ? util.base64.decode(headers[header]) : headers[header];
            data[name] = member.toType(value);
          }
        } else if (member.location === "statusCode") {
          data[name] = parseInt(r.statusCode, 10);
        }
      });
      resp.data = data;
    }
    __name(extractData, "extractData");
    module.exports = {
      buildRequest,
      extractError,
      extractData,
      generateURI
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/rest_json.js
var require_rest_json = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/rest_json.js"(exports, module) {
    var util = require_util3();
    var Rest = require_rest();
    var Json = require_json();
    var JsonBuilder = require_builder();
    var JsonParser = require_parser();
    var METHODS_WITHOUT_BODY = ["GET", "HEAD", "DELETE"];
    function unsetContentLength(req) {
      var payloadMember = util.getRequestPayloadShape(req);
      if (payloadMember === void 0 && METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) >= 0) {
        delete req.httpRequest.headers["Content-Length"];
      }
    }
    __name(unsetContentLength, "unsetContentLength");
    function populateBody(req) {
      var builder = new JsonBuilder();
      var input = req.service.api.operations[req.operation].input;
      if (input.payload) {
        var params = {};
        var payloadShape = input.members[input.payload];
        params = req.params[input.payload];
        if (payloadShape.type === "structure") {
          req.httpRequest.body = builder.build(params || {}, payloadShape);
          applyContentTypeHeader(req);
        } else if (params !== void 0) {
          req.httpRequest.body = params;
          if (payloadShape.type === "binary" || payloadShape.isStreaming) {
            applyContentTypeHeader(req, true);
          }
        }
      } else {
        req.httpRequest.body = builder.build(req.params, input);
        applyContentTypeHeader(req);
      }
    }
    __name(populateBody, "populateBody");
    function applyContentTypeHeader(req, isBinary) {
      if (!req.httpRequest.headers["Content-Type"]) {
        var type = isBinary ? "binary/octet-stream" : "application/json";
        req.httpRequest.headers["Content-Type"] = type;
      }
    }
    __name(applyContentTypeHeader, "applyContentTypeHeader");
    function buildRequest(req) {
      Rest.buildRequest(req);
      if (METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) < 0) {
        populateBody(req);
      }
    }
    __name(buildRequest, "buildRequest");
    function extractError(resp) {
      Json.extractError(resp);
    }
    __name(extractError, "extractError");
    function extractData(resp) {
      Rest.extractData(resp);
      var req = resp.request;
      var operation = req.service.api.operations[req.operation];
      var rules = req.service.api.operations[req.operation].output || {};
      var parser;
      var hasEventOutput = operation.hasEventOutput;
      if (rules.payload) {
        var payloadMember = rules.members[rules.payload];
        var body = resp.httpResponse.body;
        if (payloadMember.isEventStream) {
          parser = new JsonParser();
          resp.data[payload] = util.createEventStream(
            AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body,
            parser,
            payloadMember
          );
        } else if (payloadMember.type === "structure" || payloadMember.type === "list") {
          var parser = new JsonParser();
          resp.data[rules.payload] = parser.parse(body, payloadMember);
        } else if (payloadMember.type === "binary" || payloadMember.isStreaming) {
          resp.data[rules.payload] = body;
        } else {
          resp.data[rules.payload] = payloadMember.toType(body);
        }
      } else {
        var data = resp.data;
        Json.extractData(resp);
        resp.data = util.merge(data, resp.data);
      }
    }
    __name(extractData, "extractData");
    module.exports = {
      buildRequest,
      extractError,
      extractData,
      unsetContentLength
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/rest_xml.js
var require_rest_xml = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/protocol/rest_xml.js"(exports, module) {
    var AWS2 = require_core();
    var util = require_util3();
    var Rest = require_rest();
    function populateBody(req) {
      var input = req.service.api.operations[req.operation].input;
      var builder = new AWS2.XML.Builder();
      var params = req.params;
      var payload2 = input.payload;
      if (payload2) {
        var payloadMember = input.members[payload2];
        params = params[payload2];
        if (params === void 0)
          return;
        if (payloadMember.type === "structure") {
          var rootElement = payloadMember.name;
          req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
        } else {
          req.httpRequest.body = params;
        }
      } else {
        req.httpRequest.body = builder.toXML(params, input, input.name || input.shape || util.string.upperFirst(req.operation) + "Request");
      }
    }
    __name(populateBody, "populateBody");
    function buildRequest(req) {
      Rest.buildRequest(req);
      if (["GET", "HEAD"].indexOf(req.httpRequest.method) < 0) {
        populateBody(req);
      }
    }
    __name(buildRequest, "buildRequest");
    function extractError(resp) {
      Rest.extractError(resp);
      var data;
      try {
        data = new AWS2.XML.Parser().parse(resp.httpResponse.body.toString());
      } catch (e) {
        data = {
          Code: resp.httpResponse.statusCode,
          Message: resp.httpResponse.statusMessage
        };
      }
      if (data.Errors)
        data = data.Errors;
      if (data.Error)
        data = data.Error;
      if (data.Code) {
        resp.error = util.error(new Error(), {
          code: data.Code,
          message: data.Message
        });
      } else {
        resp.error = util.error(new Error(), {
          code: resp.httpResponse.statusCode,
          message: null
        });
      }
    }
    __name(extractError, "extractError");
    function extractData(resp) {
      Rest.extractData(resp);
      var parser;
      var req = resp.request;
      var body = resp.httpResponse.body;
      var operation = req.service.api.operations[req.operation];
      var output = operation.output;
      var hasEventOutput = operation.hasEventOutput;
      var payload2 = output.payload;
      if (payload2) {
        var payloadMember = output.members[payload2];
        if (payloadMember.isEventStream) {
          parser = new AWS2.XML.Parser();
          resp.data[payload2] = util.createEventStream(
            AWS2.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body,
            parser,
            payloadMember
          );
        } else if (payloadMember.type === "structure") {
          parser = new AWS2.XML.Parser();
          resp.data[payload2] = parser.parse(body.toString(), payloadMember);
        } else if (payloadMember.type === "binary" || payloadMember.isStreaming) {
          resp.data[payload2] = body;
        } else {
          resp.data[payload2] = payloadMember.toType(body);
        }
      } else if (body.length > 0) {
        parser = new AWS2.XML.Parser();
        var data = parser.parse(body.toString(), output);
        util.update(resp.data, data);
      }
    }
    __name(extractData, "extractData");
    module.exports = {
      buildRequest,
      extractError,
      extractData
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/escape-attribute.js
var require_escape_attribute = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/escape-attribute.js"(exports, module) {
    function escapeAttribute(value) {
      return value.replace(/&/g, "&amp;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    }
    __name(escapeAttribute, "escapeAttribute");
    module.exports = {
      escapeAttribute
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/xml-node.js
var require_xml_node = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/xml-node.js"(exports, module) {
    var escapeAttribute = require_escape_attribute().escapeAttribute;
    function XmlNode(name, children) {
      if (children === void 0) {
        children = [];
      }
      this.name = name;
      this.children = children;
      this.attributes = {};
    }
    __name(XmlNode, "XmlNode");
    XmlNode.prototype.addAttribute = function(name, value) {
      this.attributes[name] = value;
      return this;
    };
    XmlNode.prototype.addChildNode = function(child) {
      this.children.push(child);
      return this;
    };
    XmlNode.prototype.removeAttribute = function(name) {
      delete this.attributes[name];
      return this;
    };
    XmlNode.prototype.toString = function() {
      var hasChildren = Boolean(this.children.length);
      var xmlText = "<" + this.name;
      var attributes = this.attributes;
      for (var i = 0, attributeNames = Object.keys(attributes); i < attributeNames.length; i++) {
        var attributeName = attributeNames[i];
        var attribute = attributes[attributeName];
        if (typeof attribute !== "undefined" && attribute !== null) {
          xmlText += " " + attributeName + '="' + escapeAttribute("" + attribute) + '"';
        }
      }
      return xmlText += !hasChildren ? "/>" : ">" + this.children.map(function(c) {
        return c.toString();
      }).join("") + "</" + this.name + ">";
    };
    module.exports = {
      XmlNode
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/escape-element.js
var require_escape_element = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/escape-element.js"(exports, module) {
    function escapeElement(value) {
      return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
    }
    __name(escapeElement, "escapeElement");
    module.exports = {
      escapeElement
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/xml-text.js
var require_xml_text = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/xml-text.js"(exports, module) {
    var escapeElement = require_escape_element().escapeElement;
    function XmlText(value) {
      this.value = value;
    }
    __name(XmlText, "XmlText");
    XmlText.prototype.toString = function() {
      return escapeElement("" + this.value);
    };
    module.exports = {
      XmlText
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/builder.js
var require_builder2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/builder.js"(exports, module) {
    var util = require_util3();
    var XmlNode = require_xml_node().XmlNode;
    var XmlText = require_xml_text().XmlText;
    function XmlBuilder() {
    }
    __name(XmlBuilder, "XmlBuilder");
    XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
      var xml = new XmlNode(rootElement);
      applyNamespaces(xml, shape, true);
      serialize(xml, params, shape);
      return xml.children.length > 0 || noEmpty ? xml.toString() : "";
    };
    function serialize(xml, value, shape) {
      switch (shape.type) {
        case "structure":
          return serializeStructure(xml, value, shape);
        case "map":
          return serializeMap(xml, value, shape);
        case "list":
          return serializeList(xml, value, shape);
        default:
          return serializeScalar(xml, value, shape);
      }
    }
    __name(serialize, "serialize");
    function serializeStructure(xml, params, shape) {
      util.arrayEach(shape.memberNames, function(memberName) {
        var memberShape = shape.members[memberName];
        if (memberShape.location !== "body")
          return;
        var value = params[memberName];
        var name = memberShape.name;
        if (value !== void 0 && value !== null) {
          if (memberShape.isXmlAttribute) {
            xml.addAttribute(name, value);
          } else if (memberShape.flattened) {
            serialize(xml, value, memberShape);
          } else {
            var element = new XmlNode(name);
            xml.addChildNode(element);
            applyNamespaces(element, memberShape);
            serialize(element, value, memberShape);
          }
        }
      });
    }
    __name(serializeStructure, "serializeStructure");
    function serializeMap(xml, map, shape) {
      var xmlKey = shape.key.name || "key";
      var xmlValue = shape.value.name || "value";
      util.each(map, function(key, value) {
        var entry = new XmlNode(shape.flattened ? shape.name : "entry");
        xml.addChildNode(entry);
        var entryKey = new XmlNode(xmlKey);
        var entryValue = new XmlNode(xmlValue);
        entry.addChildNode(entryKey);
        entry.addChildNode(entryValue);
        serialize(entryKey, key, shape.key);
        serialize(entryValue, value, shape.value);
      });
    }
    __name(serializeMap, "serializeMap");
    function serializeList(xml, list, shape) {
      if (shape.flattened) {
        util.arrayEach(list, function(value) {
          var name = shape.member.name || shape.name;
          var element = new XmlNode(name);
          xml.addChildNode(element);
          serialize(element, value, shape.member);
        });
      } else {
        util.arrayEach(list, function(value) {
          var name = shape.member.name || "member";
          var element = new XmlNode(name);
          xml.addChildNode(element);
          serialize(element, value, shape.member);
        });
      }
    }
    __name(serializeList, "serializeList");
    function serializeScalar(xml, value, shape) {
      xml.addChildNode(
        new XmlText(shape.toWireFormat(value))
      );
    }
    __name(serializeScalar, "serializeScalar");
    function applyNamespaces(xml, shape, isRoot) {
      var uri, prefix = "xmlns";
      if (shape.xmlNamespaceUri) {
        uri = shape.xmlNamespaceUri;
        if (shape.xmlNamespacePrefix)
          prefix += ":" + shape.xmlNamespacePrefix;
      } else if (isRoot && shape.api.xmlNamespaceUri) {
        uri = shape.api.xmlNamespaceUri;
      }
      if (uri)
        xml.addAttribute(prefix, uri);
    }
    __name(applyNamespaces, "applyNamespaces");
    module.exports = XmlBuilder;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/operation.js
var require_operation = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/operation.js"(exports, module) {
    var Shape = require_shape();
    var util = require_util3();
    var property = util.property;
    var memoizedProperty = util.memoizedProperty;
    function Operation(name, operation, options) {
      var self = this;
      options = options || {};
      property(this, "name", operation.name || name);
      property(this, "api", options.api, false);
      operation.http = operation.http || {};
      property(this, "endpoint", operation.endpoint);
      property(this, "httpMethod", operation.http.method || "POST");
      property(this, "httpPath", operation.http.requestUri || "/");
      property(this, "authtype", operation.authtype || "");
      property(
        this,
        "endpointDiscoveryRequired",
        operation.endpointdiscovery ? operation.endpointdiscovery.required ? "REQUIRED" : "OPTIONAL" : "NULL"
      );
      var httpChecksumRequired = operation.httpChecksumRequired || operation.httpChecksum && operation.httpChecksum.requestChecksumRequired;
      property(this, "httpChecksumRequired", httpChecksumRequired, false);
      memoizedProperty(this, "input", function() {
        if (!operation.input) {
          return new Shape.create({ type: "structure" }, options);
        }
        return Shape.create(operation.input, options);
      });
      memoizedProperty(this, "output", function() {
        if (!operation.output) {
          return new Shape.create({ type: "structure" }, options);
        }
        return Shape.create(operation.output, options);
      });
      memoizedProperty(this, "errors", function() {
        var list = [];
        if (!operation.errors)
          return null;
        for (var i = 0; i < operation.errors.length; i++) {
          list.push(Shape.create(operation.errors[i], options));
        }
        return list;
      });
      memoizedProperty(this, "paginator", function() {
        return options.api.paginators[name];
      });
      if (options.documentation) {
        property(this, "documentation", operation.documentation);
        property(this, "documentationUrl", operation.documentationUrl);
      }
      memoizedProperty(this, "idempotentMembers", function() {
        var idempotentMembers = [];
        var input = self.input;
        var members = input.members;
        if (!input.members) {
          return idempotentMembers;
        }
        for (var name2 in members) {
          if (!members.hasOwnProperty(name2)) {
            continue;
          }
          if (members[name2].isIdempotent === true) {
            idempotentMembers.push(name2);
          }
        }
        return idempotentMembers;
      });
      memoizedProperty(this, "hasEventOutput", function() {
        var output = self.output;
        return hasEventStream(output);
      });
    }
    __name(Operation, "Operation");
    function hasEventStream(topLevelShape) {
      var members = topLevelShape.members;
      var payload2 = topLevelShape.payload;
      if (!topLevelShape.members) {
        return false;
      }
      if (payload2) {
        var payloadMember = members[payload2];
        return payloadMember.isEventStream;
      }
      for (var name in members) {
        if (!members.hasOwnProperty(name)) {
          if (members[name].isEventStream === true) {
            return true;
          }
        }
      }
      return false;
    }
    __name(hasEventStream, "hasEventStream");
    module.exports = Operation;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/paginator.js
var require_paginator = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/paginator.js"(exports, module) {
    var property = require_util3().property;
    function Paginator(name, paginator) {
      property(this, "inputToken", paginator.input_token);
      property(this, "limitKey", paginator.limit_key);
      property(this, "moreResults", paginator.more_results);
      property(this, "outputToken", paginator.output_token);
      property(this, "resultKey", paginator.result_key);
    }
    __name(Paginator, "Paginator");
    module.exports = Paginator;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/resource_waiter.js
var require_resource_waiter = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/resource_waiter.js"(exports, module) {
    var util = require_util3();
    var property = util.property;
    function ResourceWaiter(name, waiter, options) {
      options = options || {};
      property(this, "name", name);
      property(this, "api", options.api, false);
      if (waiter.operation) {
        property(this, "operation", util.string.lowerFirst(waiter.operation));
      }
      var self = this;
      var keys = [
        "type",
        "description",
        "delay",
        "maxAttempts",
        "acceptors"
      ];
      keys.forEach(function(key) {
        var value = waiter[key];
        if (value) {
          property(self, key, value);
        }
      });
    }
    __name(ResourceWaiter, "ResourceWaiter");
    module.exports = ResourceWaiter;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/metadata.json
var require_metadata = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/metadata.json"(exports, module) {
    module.exports = {
      acm: {
        name: "ACM",
        cors: true
      },
      apigateway: {
        name: "APIGateway",
        cors: true
      },
      applicationautoscaling: {
        prefix: "application-autoscaling",
        name: "ApplicationAutoScaling",
        cors: true
      },
      appstream: {
        name: "AppStream"
      },
      autoscaling: {
        name: "AutoScaling",
        cors: true
      },
      batch: {
        name: "Batch"
      },
      budgets: {
        name: "Budgets"
      },
      clouddirectory: {
        name: "CloudDirectory",
        versions: [
          "2016-05-10*"
        ]
      },
      cloudformation: {
        name: "CloudFormation",
        cors: true
      },
      cloudfront: {
        name: "CloudFront",
        versions: [
          "2013-05-12*",
          "2013-11-11*",
          "2014-05-31*",
          "2014-10-21*",
          "2014-11-06*",
          "2015-04-17*",
          "2015-07-27*",
          "2015-09-17*",
          "2016-01-13*",
          "2016-01-28*",
          "2016-08-01*",
          "2016-08-20*",
          "2016-09-07*",
          "2016-09-29*",
          "2016-11-25*",
          "2017-03-25*",
          "2017-10-30*",
          "2018-06-18*",
          "2018-11-05*",
          "2019-03-26*"
        ],
        cors: true
      },
      cloudhsm: {
        name: "CloudHSM",
        cors: true
      },
      cloudsearch: {
        name: "CloudSearch"
      },
      cloudsearchdomain: {
        name: "CloudSearchDomain"
      },
      cloudtrail: {
        name: "CloudTrail",
        cors: true
      },
      cloudwatch: {
        prefix: "monitoring",
        name: "CloudWatch",
        cors: true
      },
      cloudwatchevents: {
        prefix: "events",
        name: "CloudWatchEvents",
        versions: [
          "2014-02-03*"
        ],
        cors: true
      },
      cloudwatchlogs: {
        prefix: "logs",
        name: "CloudWatchLogs",
        cors: true
      },
      codebuild: {
        name: "CodeBuild",
        cors: true
      },
      codecommit: {
        name: "CodeCommit",
        cors: true
      },
      codedeploy: {
        name: "CodeDeploy",
        cors: true
      },
      codepipeline: {
        name: "CodePipeline",
        cors: true
      },
      cognitoidentity: {
        prefix: "cognito-identity",
        name: "CognitoIdentity",
        cors: true
      },
      cognitoidentityserviceprovider: {
        prefix: "cognito-idp",
        name: "CognitoIdentityServiceProvider",
        cors: true
      },
      cognitosync: {
        prefix: "cognito-sync",
        name: "CognitoSync",
        cors: true
      },
      configservice: {
        prefix: "config",
        name: "ConfigService",
        cors: true
      },
      cur: {
        name: "CUR",
        cors: true
      },
      datapipeline: {
        name: "DataPipeline"
      },
      devicefarm: {
        name: "DeviceFarm",
        cors: true
      },
      directconnect: {
        name: "DirectConnect",
        cors: true
      },
      directoryservice: {
        prefix: "ds",
        name: "DirectoryService"
      },
      discovery: {
        name: "Discovery"
      },
      dms: {
        name: "DMS"
      },
      dynamodb: {
        name: "DynamoDB",
        cors: true
      },
      dynamodbstreams: {
        prefix: "streams.dynamodb",
        name: "DynamoDBStreams",
        cors: true
      },
      ec2: {
        name: "EC2",
        versions: [
          "2013-06-15*",
          "2013-10-15*",
          "2014-02-01*",
          "2014-05-01*",
          "2014-06-15*",
          "2014-09-01*",
          "2014-10-01*",
          "2015-03-01*",
          "2015-04-15*",
          "2015-10-01*",
          "2016-04-01*",
          "2016-09-15*"
        ],
        cors: true
      },
      ecr: {
        name: "ECR",
        cors: true
      },
      ecs: {
        name: "ECS",
        cors: true
      },
      efs: {
        prefix: "elasticfilesystem",
        name: "EFS",
        cors: true
      },
      elasticache: {
        name: "ElastiCache",
        versions: [
          "2012-11-15*",
          "2014-03-24*",
          "2014-07-15*",
          "2014-09-30*"
        ],
        cors: true
      },
      elasticbeanstalk: {
        name: "ElasticBeanstalk",
        cors: true
      },
      elb: {
        prefix: "elasticloadbalancing",
        name: "ELB",
        cors: true
      },
      elbv2: {
        prefix: "elasticloadbalancingv2",
        name: "ELBv2",
        cors: true
      },
      emr: {
        prefix: "elasticmapreduce",
        name: "EMR",
        cors: true
      },
      es: {
        name: "ES"
      },
      elastictranscoder: {
        name: "ElasticTranscoder",
        cors: true
      },
      firehose: {
        name: "Firehose",
        cors: true
      },
      gamelift: {
        name: "GameLift",
        cors: true
      },
      glacier: {
        name: "Glacier"
      },
      health: {
        name: "Health"
      },
      iam: {
        name: "IAM",
        cors: true
      },
      importexport: {
        name: "ImportExport"
      },
      inspector: {
        name: "Inspector",
        versions: [
          "2015-08-18*"
        ],
        cors: true
      },
      iot: {
        name: "Iot",
        cors: true
      },
      iotdata: {
        prefix: "iot-data",
        name: "IotData",
        cors: true
      },
      kinesis: {
        name: "Kinesis",
        cors: true
      },
      kinesisanalytics: {
        name: "KinesisAnalytics"
      },
      kms: {
        name: "KMS",
        cors: true
      },
      lambda: {
        name: "Lambda",
        cors: true
      },
      lexruntime: {
        prefix: "runtime.lex",
        name: "LexRuntime",
        cors: true
      },
      lightsail: {
        name: "Lightsail"
      },
      machinelearning: {
        name: "MachineLearning",
        cors: true
      },
      marketplacecommerceanalytics: {
        name: "MarketplaceCommerceAnalytics",
        cors: true
      },
      marketplacemetering: {
        prefix: "meteringmarketplace",
        name: "MarketplaceMetering"
      },
      mturk: {
        prefix: "mturk-requester",
        name: "MTurk",
        cors: true
      },
      mobileanalytics: {
        name: "MobileAnalytics",
        cors: true
      },
      opsworks: {
        name: "OpsWorks",
        cors: true
      },
      opsworkscm: {
        name: "OpsWorksCM"
      },
      organizations: {
        name: "Organizations"
      },
      pinpoint: {
        name: "Pinpoint"
      },
      polly: {
        name: "Polly",
        cors: true
      },
      rds: {
        name: "RDS",
        versions: [
          "2014-09-01*"
        ],
        cors: true
      },
      redshift: {
        name: "Redshift",
        cors: true
      },
      rekognition: {
        name: "Rekognition",
        cors: true
      },
      resourcegroupstaggingapi: {
        name: "ResourceGroupsTaggingAPI"
      },
      route53: {
        name: "Route53",
        cors: true
      },
      route53domains: {
        name: "Route53Domains",
        cors: true
      },
      s3: {
        name: "S3",
        dualstackAvailable: true,
        cors: true
      },
      s3control: {
        name: "S3Control",
        dualstackAvailable: true,
        xmlNoDefaultLists: true
      },
      servicecatalog: {
        name: "ServiceCatalog",
        cors: true
      },
      ses: {
        prefix: "email",
        name: "SES",
        cors: true
      },
      shield: {
        name: "Shield"
      },
      simpledb: {
        prefix: "sdb",
        name: "SimpleDB"
      },
      sms: {
        name: "SMS"
      },
      snowball: {
        name: "Snowball"
      },
      sns: {
        name: "SNS",
        cors: true
      },
      sqs: {
        name: "SQS",
        cors: true
      },
      ssm: {
        name: "SSM",
        cors: true
      },
      storagegateway: {
        name: "StorageGateway",
        cors: true
      },
      stepfunctions: {
        prefix: "states",
        name: "StepFunctions"
      },
      sts: {
        name: "STS",
        cors: true
      },
      support: {
        name: "Support"
      },
      swf: {
        name: "SWF"
      },
      xray: {
        name: "XRay",
        cors: true
      },
      waf: {
        name: "WAF",
        cors: true
      },
      wafregional: {
        prefix: "waf-regional",
        name: "WAFRegional"
      },
      workdocs: {
        name: "WorkDocs",
        cors: true
      },
      workspaces: {
        name: "WorkSpaces"
      },
      codestar: {
        name: "CodeStar"
      },
      lexmodelbuildingservice: {
        prefix: "lex-models",
        name: "LexModelBuildingService",
        cors: true
      },
      marketplaceentitlementservice: {
        prefix: "entitlement.marketplace",
        name: "MarketplaceEntitlementService"
      },
      athena: {
        name: "Athena",
        cors: true
      },
      greengrass: {
        name: "Greengrass"
      },
      dax: {
        name: "DAX"
      },
      migrationhub: {
        prefix: "AWSMigrationHub",
        name: "MigrationHub"
      },
      cloudhsmv2: {
        name: "CloudHSMV2",
        cors: true
      },
      glue: {
        name: "Glue"
      },
      mobile: {
        name: "Mobile"
      },
      pricing: {
        name: "Pricing",
        cors: true
      },
      costexplorer: {
        prefix: "ce",
        name: "CostExplorer",
        cors: true
      },
      mediaconvert: {
        name: "MediaConvert"
      },
      medialive: {
        name: "MediaLive"
      },
      mediapackage: {
        name: "MediaPackage"
      },
      mediastore: {
        name: "MediaStore"
      },
      mediastoredata: {
        prefix: "mediastore-data",
        name: "MediaStoreData",
        cors: true
      },
      appsync: {
        name: "AppSync"
      },
      guardduty: {
        name: "GuardDuty"
      },
      mq: {
        name: "MQ"
      },
      comprehend: {
        name: "Comprehend",
        cors: true
      },
      iotjobsdataplane: {
        prefix: "iot-jobs-data",
        name: "IoTJobsDataPlane"
      },
      kinesisvideoarchivedmedia: {
        prefix: "kinesis-video-archived-media",
        name: "KinesisVideoArchivedMedia",
        cors: true
      },
      kinesisvideomedia: {
        prefix: "kinesis-video-media",
        name: "KinesisVideoMedia",
        cors: true
      },
      kinesisvideo: {
        name: "KinesisVideo",
        cors: true
      },
      sagemakerruntime: {
        prefix: "runtime.sagemaker",
        name: "SageMakerRuntime"
      },
      sagemaker: {
        name: "SageMaker"
      },
      translate: {
        name: "Translate",
        cors: true
      },
      resourcegroups: {
        prefix: "resource-groups",
        name: "ResourceGroups",
        cors: true
      },
      alexaforbusiness: {
        name: "AlexaForBusiness"
      },
      cloud9: {
        name: "Cloud9"
      },
      serverlessapplicationrepository: {
        prefix: "serverlessrepo",
        name: "ServerlessApplicationRepository"
      },
      servicediscovery: {
        name: "ServiceDiscovery"
      },
      workmail: {
        name: "WorkMail"
      },
      autoscalingplans: {
        prefix: "autoscaling-plans",
        name: "AutoScalingPlans"
      },
      transcribeservice: {
        prefix: "transcribe",
        name: "TranscribeService"
      },
      connect: {
        name: "Connect",
        cors: true
      },
      acmpca: {
        prefix: "acm-pca",
        name: "ACMPCA"
      },
      fms: {
        name: "FMS"
      },
      secretsmanager: {
        name: "SecretsManager",
        cors: true
      },
      iotanalytics: {
        name: "IoTAnalytics",
        cors: true
      },
      iot1clickdevicesservice: {
        prefix: "iot1click-devices",
        name: "IoT1ClickDevicesService"
      },
      iot1clickprojects: {
        prefix: "iot1click-projects",
        name: "IoT1ClickProjects"
      },
      pi: {
        name: "PI"
      },
      neptune: {
        name: "Neptune"
      },
      mediatailor: {
        name: "MediaTailor"
      },
      eks: {
        name: "EKS"
      },
      macie: {
        name: "Macie"
      },
      dlm: {
        name: "DLM"
      },
      signer: {
        name: "Signer"
      },
      chime: {
        name: "Chime"
      },
      pinpointemail: {
        prefix: "pinpoint-email",
        name: "PinpointEmail"
      },
      ram: {
        name: "RAM"
      },
      route53resolver: {
        name: "Route53Resolver"
      },
      pinpointsmsvoice: {
        prefix: "sms-voice",
        name: "PinpointSMSVoice"
      },
      quicksight: {
        name: "QuickSight"
      },
      rdsdataservice: {
        prefix: "rds-data",
        name: "RDSDataService"
      },
      amplify: {
        name: "Amplify"
      },
      datasync: {
        name: "DataSync"
      },
      robomaker: {
        name: "RoboMaker"
      },
      transfer: {
        name: "Transfer"
      },
      globalaccelerator: {
        name: "GlobalAccelerator"
      },
      comprehendmedical: {
        name: "ComprehendMedical",
        cors: true
      },
      kinesisanalyticsv2: {
        name: "KinesisAnalyticsV2"
      },
      mediaconnect: {
        name: "MediaConnect"
      },
      fsx: {
        name: "FSx"
      },
      securityhub: {
        name: "SecurityHub"
      },
      appmesh: {
        name: "AppMesh",
        versions: [
          "2018-10-01*"
        ]
      },
      licensemanager: {
        prefix: "license-manager",
        name: "LicenseManager"
      },
      kafka: {
        name: "Kafka"
      },
      apigatewaymanagementapi: {
        name: "ApiGatewayManagementApi"
      },
      apigatewayv2: {
        name: "ApiGatewayV2"
      },
      docdb: {
        name: "DocDB"
      },
      backup: {
        name: "Backup"
      },
      worklink: {
        name: "WorkLink"
      },
      textract: {
        name: "Textract"
      },
      managedblockchain: {
        name: "ManagedBlockchain"
      },
      mediapackagevod: {
        prefix: "mediapackage-vod",
        name: "MediaPackageVod"
      },
      groundstation: {
        name: "GroundStation"
      },
      iotthingsgraph: {
        name: "IoTThingsGraph"
      },
      iotevents: {
        name: "IoTEvents"
      },
      ioteventsdata: {
        prefix: "iotevents-data",
        name: "IoTEventsData"
      },
      personalize: {
        name: "Personalize",
        cors: true
      },
      personalizeevents: {
        prefix: "personalize-events",
        name: "PersonalizeEvents",
        cors: true
      },
      personalizeruntime: {
        prefix: "personalize-runtime",
        name: "PersonalizeRuntime",
        cors: true
      },
      applicationinsights: {
        prefix: "application-insights",
        name: "ApplicationInsights"
      },
      servicequotas: {
        prefix: "service-quotas",
        name: "ServiceQuotas"
      },
      ec2instanceconnect: {
        prefix: "ec2-instance-connect",
        name: "EC2InstanceConnect"
      },
      eventbridge: {
        name: "EventBridge"
      },
      lakeformation: {
        name: "LakeFormation"
      },
      forecastservice: {
        prefix: "forecast",
        name: "ForecastService",
        cors: true
      },
      forecastqueryservice: {
        prefix: "forecastquery",
        name: "ForecastQueryService",
        cors: true
      },
      qldb: {
        name: "QLDB"
      },
      qldbsession: {
        prefix: "qldb-session",
        name: "QLDBSession"
      },
      workmailmessageflow: {
        name: "WorkMailMessageFlow"
      },
      codestarnotifications: {
        prefix: "codestar-notifications",
        name: "CodeStarNotifications"
      },
      savingsplans: {
        name: "SavingsPlans"
      },
      sso: {
        name: "SSO"
      },
      ssooidc: {
        prefix: "sso-oidc",
        name: "SSOOIDC"
      },
      marketplacecatalog: {
        prefix: "marketplace-catalog",
        name: "MarketplaceCatalog",
        cors: true
      },
      dataexchange: {
        name: "DataExchange"
      },
      sesv2: {
        name: "SESV2"
      },
      migrationhubconfig: {
        prefix: "migrationhub-config",
        name: "MigrationHubConfig"
      },
      connectparticipant: {
        name: "ConnectParticipant"
      },
      appconfig: {
        name: "AppConfig"
      },
      iotsecuretunneling: {
        name: "IoTSecureTunneling"
      },
      wafv2: {
        name: "WAFV2"
      },
      elasticinference: {
        prefix: "elastic-inference",
        name: "ElasticInference"
      },
      imagebuilder: {
        name: "Imagebuilder"
      },
      schemas: {
        name: "Schemas"
      },
      accessanalyzer: {
        name: "AccessAnalyzer"
      },
      codegurureviewer: {
        prefix: "codeguru-reviewer",
        name: "CodeGuruReviewer"
      },
      codeguruprofiler: {
        name: "CodeGuruProfiler"
      },
      computeoptimizer: {
        prefix: "compute-optimizer",
        name: "ComputeOptimizer"
      },
      frauddetector: {
        name: "FraudDetector"
      },
      kendra: {
        name: "Kendra"
      },
      networkmanager: {
        name: "NetworkManager"
      },
      outposts: {
        name: "Outposts"
      },
      augmentedairuntime: {
        prefix: "sagemaker-a2i-runtime",
        name: "AugmentedAIRuntime"
      },
      ebs: {
        name: "EBS"
      },
      kinesisvideosignalingchannels: {
        prefix: "kinesis-video-signaling",
        name: "KinesisVideoSignalingChannels",
        cors: true
      },
      detective: {
        name: "Detective"
      },
      codestarconnections: {
        prefix: "codestar-connections",
        name: "CodeStarconnections"
      },
      synthetics: {
        name: "Synthetics"
      },
      iotsitewise: {
        name: "IoTSiteWise"
      },
      macie2: {
        name: "Macie2"
      },
      codeartifact: {
        name: "CodeArtifact"
      },
      honeycode: {
        name: "Honeycode"
      },
      ivs: {
        name: "IVS"
      },
      braket: {
        name: "Braket"
      },
      identitystore: {
        name: "IdentityStore"
      },
      appflow: {
        name: "Appflow"
      },
      redshiftdata: {
        prefix: "redshift-data",
        name: "RedshiftData"
      },
      ssoadmin: {
        prefix: "sso-admin",
        name: "SSOAdmin"
      },
      timestreamquery: {
        prefix: "timestream-query",
        name: "TimestreamQuery"
      },
      timestreamwrite: {
        prefix: "timestream-write",
        name: "TimestreamWrite"
      },
      s3outposts: {
        name: "S3Outposts"
      },
      databrew: {
        name: "DataBrew"
      },
      servicecatalogappregistry: {
        prefix: "servicecatalog-appregistry",
        name: "ServiceCatalogAppRegistry"
      },
      networkfirewall: {
        prefix: "network-firewall",
        name: "NetworkFirewall"
      },
      mwaa: {
        name: "MWAA"
      },
      amplifybackend: {
        name: "AmplifyBackend"
      },
      appintegrations: {
        name: "AppIntegrations"
      },
      connectcontactlens: {
        prefix: "connect-contact-lens",
        name: "ConnectContactLens"
      },
      devopsguru: {
        prefix: "devops-guru",
        name: "DevOpsGuru"
      },
      ecrpublic: {
        prefix: "ecr-public",
        name: "ECRPUBLIC"
      },
      lookoutvision: {
        name: "LookoutVision"
      },
      sagemakerfeaturestoreruntime: {
        prefix: "sagemaker-featurestore-runtime",
        name: "SageMakerFeatureStoreRuntime"
      },
      customerprofiles: {
        prefix: "customer-profiles",
        name: "CustomerProfiles"
      },
      auditmanager: {
        name: "AuditManager"
      },
      emrcontainers: {
        prefix: "emr-containers",
        name: "EMRcontainers"
      },
      healthlake: {
        name: "HealthLake"
      },
      sagemakeredge: {
        prefix: "sagemaker-edge",
        name: "SagemakerEdge"
      },
      amp: {
        name: "Amp"
      },
      greengrassv2: {
        name: "GreengrassV2"
      },
      iotdeviceadvisor: {
        name: "IotDeviceAdvisor"
      },
      iotfleethub: {
        name: "IoTFleetHub"
      },
      iotwireless: {
        name: "IoTWireless"
      },
      location: {
        name: "Location",
        cors: true
      },
      wellarchitected: {
        name: "WellArchitected"
      },
      lexmodelsv2: {
        prefix: "models.lex.v2",
        name: "LexModelsV2"
      },
      lexruntimev2: {
        prefix: "runtime.lex.v2",
        name: "LexRuntimeV2",
        cors: true
      },
      fis: {
        name: "Fis"
      },
      lookoutmetrics: {
        name: "LookoutMetrics"
      },
      mgn: {
        name: "Mgn"
      },
      lookoutequipment: {
        name: "LookoutEquipment"
      },
      nimble: {
        name: "Nimble"
      },
      finspace: {
        name: "Finspace"
      },
      finspacedata: {
        prefix: "finspace-data",
        name: "Finspacedata"
      },
      ssmcontacts: {
        prefix: "ssm-contacts",
        name: "SSMContacts"
      },
      ssmincidents: {
        prefix: "ssm-incidents",
        name: "SSMIncidents"
      },
      applicationcostprofiler: {
        name: "ApplicationCostProfiler"
      },
      apprunner: {
        name: "AppRunner"
      },
      proton: {
        name: "Proton"
      },
      route53recoverycluster: {
        prefix: "route53-recovery-cluster",
        name: "Route53RecoveryCluster"
      },
      route53recoverycontrolconfig: {
        prefix: "route53-recovery-control-config",
        name: "Route53RecoveryControlConfig"
      },
      route53recoveryreadiness: {
        prefix: "route53-recovery-readiness",
        name: "Route53RecoveryReadiness"
      },
      chimesdkidentity: {
        prefix: "chime-sdk-identity",
        name: "ChimeSDKIdentity"
      },
      chimesdkmessaging: {
        prefix: "chime-sdk-messaging",
        name: "ChimeSDKMessaging"
      },
      snowdevicemanagement: {
        prefix: "snow-device-management",
        name: "SnowDeviceManagement"
      },
      memorydb: {
        name: "MemoryDB"
      },
      opensearch: {
        name: "OpenSearch"
      },
      kafkaconnect: {
        name: "KafkaConnect"
      },
      voiceid: {
        prefix: "voice-id",
        name: "VoiceID"
      },
      wisdom: {
        name: "Wisdom"
      },
      account: {
        name: "Account"
      },
      cloudcontrol: {
        name: "CloudControl"
      },
      grafana: {
        name: "Grafana"
      },
      panorama: {
        name: "Panorama"
      },
      chimesdkmeetings: {
        prefix: "chime-sdk-meetings",
        name: "ChimeSDKMeetings"
      },
      resiliencehub: {
        name: "Resiliencehub"
      },
      migrationhubstrategy: {
        name: "MigrationHubStrategy"
      },
      appconfigdata: {
        name: "AppConfigData"
      },
      drs: {
        name: "Drs"
      },
      migrationhubrefactorspaces: {
        prefix: "migration-hub-refactor-spaces",
        name: "MigrationHubRefactorSpaces"
      },
      evidently: {
        name: "Evidently"
      },
      inspector2: {
        name: "Inspector2"
      },
      rbin: {
        name: "Rbin"
      },
      rum: {
        name: "RUM"
      },
      backupgateway: {
        prefix: "backup-gateway",
        name: "BackupGateway"
      },
      iottwinmaker: {
        name: "IoTTwinMaker"
      },
      workspacesweb: {
        prefix: "workspaces-web",
        name: "WorkSpacesWeb"
      },
      amplifyuibuilder: {
        name: "AmplifyUIBuilder"
      },
      keyspaces: {
        name: "Keyspaces"
      },
      billingconductor: {
        name: "Billingconductor"
      },
      gamesparks: {
        name: "GameSparks"
      },
      pinpointsmsvoicev2: {
        prefix: "pinpoint-sms-voice-v2",
        name: "PinpointSMSVoiceV2"
      },
      ivschat: {
        name: "Ivschat"
      },
      chimesdkmediapipelines: {
        prefix: "chime-sdk-media-pipelines",
        name: "ChimeSDKMediaPipelines"
      },
      emrserverless: {
        prefix: "emr-serverless",
        name: "EMRServerless"
      },
      m2: {
        name: "M2"
      },
      connectcampaigns: {
        name: "ConnectCampaigns"
      },
      redshiftserverless: {
        prefix: "redshift-serverless",
        name: "RedshiftServerless"
      },
      rolesanywhere: {
        name: "RolesAnywhere"
      },
      licensemanagerusersubscriptions: {
        prefix: "license-manager-user-subscriptions",
        name: "LicenseManagerUserSubscriptions"
      },
      backupstorage: {
        name: "BackupStorage"
      },
      privatenetworks: {
        name: "PrivateNetworks"
      },
      supportapp: {
        prefix: "support-app",
        name: "SupportApp"
      },
      controltower: {
        name: "ControlTower"
      },
      iotfleetwise: {
        name: "IoTFleetWise"
      },
      migrationhuborchestrator: {
        name: "MigrationHubOrchestrator"
      },
      connectcases: {
        name: "ConnectCases"
      },
      resourceexplorer2: {
        prefix: "resource-explorer-2",
        name: "ResourceExplorer2"
      },
      scheduler: {
        name: "Scheduler"
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/api.js
var require_api = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/model/api.js"(exports, module) {
    var Collection = require_collection();
    var Operation = require_operation();
    var Shape = require_shape();
    var Paginator = require_paginator();
    var ResourceWaiter = require_resource_waiter();
    var metadata = require_metadata();
    var util = require_util3();
    var property = util.property;
    var memoizedProperty = util.memoizedProperty;
    function Api(api, options) {
      var self = this;
      api = api || {};
      options = options || {};
      options.api = this;
      api.metadata = api.metadata || {};
      var serviceIdentifier = options.serviceIdentifier;
      delete options.serviceIdentifier;
      property(this, "isApi", true, false);
      property(this, "apiVersion", api.metadata.apiVersion);
      property(this, "endpointPrefix", api.metadata.endpointPrefix);
      property(this, "signingName", api.metadata.signingName);
      property(this, "globalEndpoint", api.metadata.globalEndpoint);
      property(this, "signatureVersion", api.metadata.signatureVersion);
      property(this, "jsonVersion", api.metadata.jsonVersion);
      property(this, "targetPrefix", api.metadata.targetPrefix);
      property(this, "protocol", api.metadata.protocol);
      property(this, "timestampFormat", api.metadata.timestampFormat);
      property(this, "xmlNamespaceUri", api.metadata.xmlNamespace);
      property(this, "abbreviation", api.metadata.serviceAbbreviation);
      property(this, "fullName", api.metadata.serviceFullName);
      property(this, "serviceId", api.metadata.serviceId);
      if (serviceIdentifier && metadata[serviceIdentifier]) {
        property(this, "xmlNoDefaultLists", metadata[serviceIdentifier].xmlNoDefaultLists, false);
      }
      memoizedProperty(this, "className", function() {
        var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
        if (!name)
          return null;
        name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, "");
        if (name === "ElasticLoadBalancing")
          name = "ELB";
        return name;
      });
      function addEndpointOperation(name, operation) {
        if (operation.endpointoperation === true) {
          property(self, "endpointOperation", util.string.lowerFirst(name));
        }
        if (operation.endpointdiscovery && !self.hasRequiredEndpointDiscovery) {
          property(
            self,
            "hasRequiredEndpointDiscovery",
            operation.endpointdiscovery.required === true
          );
        }
      }
      __name(addEndpointOperation, "addEndpointOperation");
      property(this, "operations", new Collection(api.operations, options, function(name, operation) {
        return new Operation(name, operation, options);
      }, util.string.lowerFirst, addEndpointOperation));
      property(this, "shapes", new Collection(api.shapes, options, function(name, shape) {
        return Shape.create(shape, options);
      }));
      property(this, "paginators", new Collection(api.paginators, options, function(name, paginator) {
        return new Paginator(name, paginator, options);
      }));
      property(this, "waiters", new Collection(api.waiters, options, function(name, waiter) {
        return new ResourceWaiter(name, waiter, options);
      }, util.string.lowerFirst));
      if (options.documentation) {
        property(this, "documentation", api.documentation);
        property(this, "documentationUrl", api.documentationUrl);
      }
      property(this, "awsQueryCompatible", api.metadata.awsQueryCompatible);
    }
    __name(Api, "Api");
    module.exports = Api;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/api_loader.js
var require_api_loader = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/api_loader.js"(exports, module) {
    function apiLoader(svc, version2) {
      if (!apiLoader.services.hasOwnProperty(svc)) {
        throw new Error("InvalidService: Failed to load api for " + svc);
      }
      return apiLoader.services[svc][version2];
    }
    __name(apiLoader, "apiLoader");
    apiLoader.services = {};
    module.exports = apiLoader;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/vendor/endpoint-cache/utils/LRU.js
var require_LRU = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/vendor/endpoint-cache/utils/LRU.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LinkedListNode = function() {
      function LinkedListNode2(key, value) {
        this.key = key;
        this.value = value;
      }
      __name(LinkedListNode2, "LinkedListNode");
      return LinkedListNode2;
    }();
    var LRUCache = function() {
      function LRUCache2(size) {
        this.nodeMap = {};
        this.size = 0;
        if (typeof size !== "number" || size < 1) {
          throw new Error("Cache size can only be positive number");
        }
        this.sizeLimit = size;
      }
      __name(LRUCache2, "LRUCache");
      Object.defineProperty(LRUCache2.prototype, "length", {
        get: function() {
          return this.size;
        },
        enumerable: true,
        configurable: true
      });
      LRUCache2.prototype.prependToList = function(node) {
        if (!this.headerNode) {
          this.tailNode = node;
        } else {
          this.headerNode.prev = node;
          node.next = this.headerNode;
        }
        this.headerNode = node;
        this.size++;
      };
      LRUCache2.prototype.removeFromTail = function() {
        if (!this.tailNode) {
          return void 0;
        }
        var node = this.tailNode;
        var prevNode = node.prev;
        if (prevNode) {
          prevNode.next = void 0;
        }
        node.prev = void 0;
        this.tailNode = prevNode;
        this.size--;
        return node;
      };
      LRUCache2.prototype.detachFromList = function(node) {
        if (this.headerNode === node) {
          this.headerNode = node.next;
        }
        if (this.tailNode === node) {
          this.tailNode = node.prev;
        }
        if (node.prev) {
          node.prev.next = node.next;
        }
        if (node.next) {
          node.next.prev = node.prev;
        }
        node.next = void 0;
        node.prev = void 0;
        this.size--;
      };
      LRUCache2.prototype.get = function(key) {
        if (this.nodeMap[key]) {
          var node = this.nodeMap[key];
          this.detachFromList(node);
          this.prependToList(node);
          return node.value;
        }
      };
      LRUCache2.prototype.remove = function(key) {
        if (this.nodeMap[key]) {
          var node = this.nodeMap[key];
          this.detachFromList(node);
          delete this.nodeMap[key];
        }
      };
      LRUCache2.prototype.put = function(key, value) {
        if (this.nodeMap[key]) {
          this.remove(key);
        } else if (this.size === this.sizeLimit) {
          var tailNode = this.removeFromTail();
          var key_1 = tailNode.key;
          delete this.nodeMap[key_1];
        }
        var newNode = new LinkedListNode(key, value);
        this.nodeMap[key] = newNode;
        this.prependToList(newNode);
      };
      LRUCache2.prototype.empty = function() {
        var keys = Object.keys(this.nodeMap);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var node = this.nodeMap[key];
          this.detachFromList(node);
          delete this.nodeMap[key];
        }
      };
      return LRUCache2;
    }();
    exports.LRUCache = LRUCache;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/vendor/endpoint-cache/index.js
var require_endpoint_cache = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/vendor/endpoint-cache/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LRU_1 = require_LRU();
    var CACHE_SIZE = 1e3;
    var EndpointCache = function() {
      function EndpointCache2(maxSize) {
        if (maxSize === void 0) {
          maxSize = CACHE_SIZE;
        }
        this.maxSize = maxSize;
        this.cache = new LRU_1.LRUCache(maxSize);
      }
      __name(EndpointCache2, "EndpointCache");
      ;
      Object.defineProperty(EndpointCache2.prototype, "size", {
        get: function() {
          return this.cache.length;
        },
        enumerable: true,
        configurable: true
      });
      EndpointCache2.prototype.put = function(key, value) {
        var keyString = typeof key !== "string" ? EndpointCache2.getKeyString(key) : key;
        var endpointRecord = this.populateValue(value);
        this.cache.put(keyString, endpointRecord);
      };
      EndpointCache2.prototype.get = function(key) {
        var keyString = typeof key !== "string" ? EndpointCache2.getKeyString(key) : key;
        var now = Date.now();
        var records = this.cache.get(keyString);
        if (records) {
          for (var i = records.length - 1; i >= 0; i--) {
            var record = records[i];
            if (record.Expire < now) {
              records.splice(i, 1);
            }
          }
          if (records.length === 0) {
            this.cache.remove(keyString);
            return void 0;
          }
        }
        return records;
      };
      EndpointCache2.getKeyString = function(key) {
        var identifiers = [];
        var identifierNames = Object.keys(key).sort();
        for (var i = 0; i < identifierNames.length; i++) {
          var identifierName = identifierNames[i];
          if (key[identifierName] === void 0)
            continue;
          identifiers.push(key[identifierName]);
        }
        return identifiers.join(" ");
      };
      EndpointCache2.prototype.populateValue = function(endpoints) {
        var now = Date.now();
        return endpoints.map(function(endpoint) {
          return {
            Address: endpoint.Address || "",
            Expire: now + (endpoint.CachePeriodInMinutes || 1) * 60 * 1e3
          };
        });
      };
      EndpointCache2.prototype.empty = function() {
        this.cache.empty();
      };
      EndpointCache2.prototype.remove = function(key) {
        var keyString = typeof key !== "string" ? EndpointCache2.getKeyString(key) : key;
        this.cache.remove(keyString);
      };
      return EndpointCache2;
    }();
    exports.EndpointCache = EndpointCache;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/sequential_executor.js
var require_sequential_executor = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/sequential_executor.js"(exports, module) {
    var AWS2 = require_core();
    AWS2.SequentialExecutor = AWS2.util.inherit({
      constructor: /* @__PURE__ */ __name(function SequentialExecutor() {
        this._events = {};
      }, "SequentialExecutor"),
      listeners: /* @__PURE__ */ __name(function listeners(eventName) {
        return this._events[eventName] ? this._events[eventName].slice(0) : [];
      }, "listeners"),
      on: /* @__PURE__ */ __name(function on(eventName, listener, toHead) {
        if (this._events[eventName]) {
          toHead ? this._events[eventName].unshift(listener) : this._events[eventName].push(listener);
        } else {
          this._events[eventName] = [listener];
        }
        return this;
      }, "on"),
      onAsync: /* @__PURE__ */ __name(function onAsync(eventName, listener, toHead) {
        listener._isAsync = true;
        return this.on(eventName, listener, toHead);
      }, "onAsync"),
      removeListener: /* @__PURE__ */ __name(function removeListener(eventName, listener) {
        var listeners = this._events[eventName];
        if (listeners) {
          var length = listeners.length;
          var position = -1;
          for (var i = 0; i < length; ++i) {
            if (listeners[i] === listener) {
              position = i;
            }
          }
          if (position > -1) {
            listeners.splice(position, 1);
          }
        }
        return this;
      }, "removeListener"),
      removeAllListeners: /* @__PURE__ */ __name(function removeAllListeners(eventName) {
        if (eventName) {
          delete this._events[eventName];
        } else {
          this._events = {};
        }
        return this;
      }, "removeAllListeners"),
      emit: /* @__PURE__ */ __name(function emit(eventName, eventArgs, doneCallback) {
        if (!doneCallback)
          doneCallback = /* @__PURE__ */ __name(function() {
          }, "doneCallback");
        var listeners = this.listeners(eventName);
        var count = listeners.length;
        this.callListeners(listeners, eventArgs, doneCallback);
        return count > 0;
      }, "emit"),
      callListeners: /* @__PURE__ */ __name(function callListeners(listeners, args, doneCallback, prevError) {
        var self = this;
        var error = prevError || null;
        function callNextListener(err) {
          if (err) {
            error = AWS2.util.error(error || new Error(), err);
            if (self._haltHandlersOnError) {
              return doneCallback.call(self, error);
            }
          }
          self.callListeners(listeners, args, doneCallback, error);
        }
        __name(callNextListener, "callNextListener");
        while (listeners.length > 0) {
          var listener = listeners.shift();
          if (listener._isAsync) {
            listener.apply(self, args.concat([callNextListener]));
            return;
          } else {
            try {
              listener.apply(self, args);
            } catch (err) {
              error = AWS2.util.error(error || new Error(), err);
            }
            if (error && self._haltHandlersOnError) {
              doneCallback.call(self, error);
              return;
            }
          }
        }
        doneCallback.call(self, error);
      }, "callListeners"),
      addListeners: /* @__PURE__ */ __name(function addListeners(listeners) {
        var self = this;
        if (listeners._events)
          listeners = listeners._events;
        AWS2.util.each(listeners, function(event, callbacks) {
          if (typeof callbacks === "function")
            callbacks = [callbacks];
          AWS2.util.arrayEach(callbacks, function(callback) {
            self.on(event, callback);
          });
        });
        return self;
      }, "addListeners"),
      addNamedListener: /* @__PURE__ */ __name(function addNamedListener(name, eventName, callback, toHead) {
        this[name] = callback;
        this.addListener(eventName, callback, toHead);
        return this;
      }, "addNamedListener"),
      addNamedAsyncListener: /* @__PURE__ */ __name(function addNamedAsyncListener(name, eventName, callback, toHead) {
        callback._isAsync = true;
        return this.addNamedListener(name, eventName, callback, toHead);
      }, "addNamedAsyncListener"),
      addNamedListeners: /* @__PURE__ */ __name(function addNamedListeners(callback) {
        var self = this;
        callback(
          function() {
            self.addNamedListener.apply(self, arguments);
          },
          function() {
            self.addNamedAsyncListener.apply(self, arguments);
          }
        );
        return this;
      }, "addNamedListeners")
    });
    AWS2.SequentialExecutor.prototype.addListener = AWS2.SequentialExecutor.prototype.on;
    module.exports = AWS2.SequentialExecutor;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/region_config_data.json
var require_region_config_data = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/region_config_data.json"(exports, module) {
    module.exports = {
      rules: {
        "*/*": {
          endpoint: "{service}.{region}.amazonaws.com"
        },
        "cn-*/*": {
          endpoint: "{service}.{region}.amazonaws.com.cn"
        },
        "us-iso-*/*": "usIso",
        "us-isob-*/*": "usIsob",
        "*/budgets": "globalSSL",
        "*/cloudfront": "globalSSL",
        "*/sts": "globalSSL",
        "*/importexport": {
          endpoint: "{service}.amazonaws.com",
          signatureVersion: "v2",
          globalEndpoint: true
        },
        "*/route53": "globalSSL",
        "cn-*/route53": {
          endpoint: "{service}.amazonaws.com.cn",
          globalEndpoint: true,
          signingRegion: "cn-northwest-1"
        },
        "us-gov-*/route53": "globalGovCloud",
        "us-iso-*/route53": {
          endpoint: "{service}.c2s.ic.gov",
          globalEndpoint: true,
          signingRegion: "us-iso-east-1"
        },
        "us-isob-*/route53": {
          endpoint: "{service}.sc2s.sgov.gov",
          globalEndpoint: true,
          signingRegion: "us-isob-east-1"
        },
        "*/waf": "globalSSL",
        "*/iam": "globalSSL",
        "cn-*/iam": {
          endpoint: "{service}.cn-north-1.amazonaws.com.cn",
          globalEndpoint: true,
          signingRegion: "cn-north-1"
        },
        "us-gov-*/iam": "globalGovCloud",
        "us-gov-*/sts": {
          endpoint: "{service}.{region}.amazonaws.com"
        },
        "us-gov-west-1/s3": "s3signature",
        "us-west-1/s3": "s3signature",
        "us-west-2/s3": "s3signature",
        "eu-west-1/s3": "s3signature",
        "ap-southeast-1/s3": "s3signature",
        "ap-southeast-2/s3": "s3signature",
        "ap-northeast-1/s3": "s3signature",
        "sa-east-1/s3": "s3signature",
        "us-east-1/s3": {
          endpoint: "{service}.amazonaws.com",
          signatureVersion: "s3"
        },
        "us-east-1/sdb": {
          endpoint: "{service}.amazonaws.com",
          signatureVersion: "v2"
        },
        "*/sdb": {
          endpoint: "{service}.{region}.amazonaws.com",
          signatureVersion: "v2"
        },
        "*/resource-explorer-2": "dualstackByDefault"
      },
      fipsRules: {
        "*/*": "fipsStandard",
        "us-gov-*/*": "fipsStandard",
        "us-iso-*/*": {
          endpoint: "{service}-fips.{region}.c2s.ic.gov"
        },
        "us-iso-*/dms": "usIso",
        "us-isob-*/*": {
          endpoint: "{service}-fips.{region}.sc2s.sgov.gov"
        },
        "us-isob-*/dms": "usIsob",
        "cn-*/*": {
          endpoint: "{service}-fips.{region}.amazonaws.com.cn"
        },
        "*/api.ecr": "fips.api.ecr",
        "*/api.sagemaker": "fips.api.sagemaker",
        "*/batch": "fipsDotPrefix",
        "*/eks": "fipsDotPrefix",
        "*/models.lex": "fips.models.lex",
        "*/runtime.lex": "fips.runtime.lex",
        "*/runtime.sagemaker": {
          endpoint: "runtime-fips.sagemaker.{region}.amazonaws.com"
        },
        "*/iam": "fipsWithoutRegion",
        "*/route53": "fipsWithoutRegion",
        "*/transcribe": "fipsDotPrefix",
        "*/waf": "fipsWithoutRegion",
        "us-gov-*/transcribe": "fipsDotPrefix",
        "us-gov-*/api.ecr": "fips.api.ecr",
        "us-gov-*/api.sagemaker": "fips.api.sagemaker",
        "us-gov-*/models.lex": "fips.models.lex",
        "us-gov-*/runtime.lex": "fips.runtime.lex",
        "us-gov-*/acm-pca": "fipsWithServiceOnly",
        "us-gov-*/batch": "fipsWithServiceOnly",
        "us-gov-*/config": "fipsWithServiceOnly",
        "us-gov-*/eks": "fipsWithServiceOnly",
        "us-gov-*/elasticmapreduce": "fipsWithServiceOnly",
        "us-gov-*/identitystore": "fipsWithServiceOnly",
        "us-gov-*/dynamodb": "fipsWithServiceOnly",
        "us-gov-*/elasticloadbalancing": "fipsWithServiceOnly",
        "us-gov-*/guardduty": "fipsWithServiceOnly",
        "us-gov-*/monitoring": "fipsWithServiceOnly",
        "us-gov-*/resource-groups": "fipsWithServiceOnly",
        "us-gov-*/runtime.sagemaker": "fipsWithServiceOnly",
        "us-gov-*/servicecatalog-appregistry": "fipsWithServiceOnly",
        "us-gov-*/servicequotas": "fipsWithServiceOnly",
        "us-gov-*/ssm": "fipsWithServiceOnly",
        "us-gov-*/sts": "fipsWithServiceOnly",
        "us-gov-*/support": "fipsWithServiceOnly",
        "us-gov-west-1/states": "fipsWithServiceOnly",
        "us-iso-east-1/elasticfilesystem": {
          endpoint: "elasticfilesystem-fips.{region}.c2s.ic.gov"
        },
        "us-gov-west-1/organizations": "fipsWithServiceOnly",
        "us-gov-west-1/route53": {
          endpoint: "route53.us-gov.amazonaws.com"
        }
      },
      dualstackRules: {
        "*/*": {
          endpoint: "{service}.{region}.api.aws"
        },
        "cn-*/*": {
          endpoint: "{service}.{region}.api.amazonwebservices.com.cn"
        },
        "*/s3": "dualstackLegacy",
        "cn-*/s3": "dualstackLegacyCn",
        "*/s3-control": "dualstackLegacy",
        "cn-*/s3-control": "dualstackLegacyCn",
        "ap-south-1/ec2": "dualstackLegacyEc2",
        "eu-west-1/ec2": "dualstackLegacyEc2",
        "sa-east-1/ec2": "dualstackLegacyEc2",
        "us-east-1/ec2": "dualstackLegacyEc2",
        "us-east-2/ec2": "dualstackLegacyEc2",
        "us-west-2/ec2": "dualstackLegacyEc2"
      },
      dualstackFipsRules: {
        "*/*": {
          endpoint: "{service}-fips.{region}.api.aws"
        },
        "cn-*/*": {
          endpoint: "{service}-fips.{region}.api.amazonwebservices.com.cn"
        },
        "*/s3": "dualstackFipsLegacy",
        "cn-*/s3": "dualstackFipsLegacyCn",
        "*/s3-control": "dualstackFipsLegacy",
        "cn-*/s3-control": "dualstackFipsLegacyCn"
      },
      patterns: {
        globalSSL: {
          endpoint: "https://{service}.amazonaws.com",
          globalEndpoint: true,
          signingRegion: "us-east-1"
        },
        globalGovCloud: {
          endpoint: "{service}.us-gov.amazonaws.com",
          globalEndpoint: true,
          signingRegion: "us-gov-west-1"
        },
        s3signature: {
          endpoint: "{service}.{region}.amazonaws.com",
          signatureVersion: "s3"
        },
        usIso: {
          endpoint: "{service}.{region}.c2s.ic.gov"
        },
        usIsob: {
          endpoint: "{service}.{region}.sc2s.sgov.gov"
        },
        fipsStandard: {
          endpoint: "{service}-fips.{region}.amazonaws.com"
        },
        fipsDotPrefix: {
          endpoint: "fips.{service}.{region}.amazonaws.com"
        },
        fipsWithoutRegion: {
          endpoint: "{service}-fips.amazonaws.com"
        },
        "fips.api.ecr": {
          endpoint: "ecr-fips.{region}.amazonaws.com"
        },
        "fips.api.sagemaker": {
          endpoint: "api-fips.sagemaker.{region}.amazonaws.com"
        },
        "fips.models.lex": {
          endpoint: "models-fips.lex.{region}.amazonaws.com"
        },
        "fips.runtime.lex": {
          endpoint: "runtime-fips.lex.{region}.amazonaws.com"
        },
        fipsWithServiceOnly: {
          endpoint: "{service}.{region}.amazonaws.com"
        },
        dualstackLegacy: {
          endpoint: "{service}.dualstack.{region}.amazonaws.com"
        },
        dualstackLegacyCn: {
          endpoint: "{service}.dualstack.{region}.amazonaws.com.cn"
        },
        dualstackFipsLegacy: {
          endpoint: "{service}-fips.dualstack.{region}.amazonaws.com"
        },
        dualstackFipsLegacyCn: {
          endpoint: "{service}-fips.dualstack.{region}.amazonaws.com.cn"
        },
        dualstackLegacyEc2: {
          endpoint: "api.ec2.{region}.aws"
        },
        dualstackByDefault: {
          endpoint: "{service}.{region}.api.aws"
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/region_config.js
var require_region_config = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/region_config.js"(exports, module) {
    var util = require_util3();
    var regionConfig = require_region_config_data();
    function generateRegionPrefix(region) {
      if (!region)
        return null;
      var parts = region.split("-");
      if (parts.length < 3)
        return null;
      return parts.slice(0, parts.length - 2).join("-") + "-*";
    }
    __name(generateRegionPrefix, "generateRegionPrefix");
    function derivedKeys(service) {
      var region = service.config.region;
      var regionPrefix = generateRegionPrefix(region);
      var endpointPrefix = service.api.endpointPrefix;
      return [
        [region, endpointPrefix],
        [regionPrefix, endpointPrefix],
        [region, "*"],
        [regionPrefix, "*"],
        ["*", endpointPrefix],
        ["*", "*"]
      ].map(function(item) {
        return item[0] && item[1] ? item.join("/") : null;
      });
    }
    __name(derivedKeys, "derivedKeys");
    function applyConfig(service, config) {
      util.each(config, function(key, value) {
        if (key === "globalEndpoint")
          return;
        if (service.config[key] === void 0 || service.config[key] === null) {
          service.config[key] = value;
        }
      });
    }
    __name(applyConfig, "applyConfig");
    function configureEndpoint(service) {
      var keys = derivedKeys(service);
      var useFipsEndpoint = service.config.useFipsEndpoint;
      var useDualstackEndpoint = service.config.useDualstackEndpoint;
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!key)
          continue;
        var rules = useFipsEndpoint ? useDualstackEndpoint ? regionConfig.dualstackFipsRules : regionConfig.fipsRules : useDualstackEndpoint ? regionConfig.dualstackRules : regionConfig.rules;
        if (Object.prototype.hasOwnProperty.call(rules, key)) {
          var config = rules[key];
          if (typeof config === "string") {
            config = regionConfig.patterns[config];
          }
          service.isGlobalEndpoint = !!config.globalEndpoint;
          if (config.signingRegion) {
            service.signingRegion = config.signingRegion;
          }
          if (!config.signatureVersion)
            config.signatureVersion = "v4";
          applyConfig(service, config);
          return;
        }
      }
    }
    __name(configureEndpoint, "configureEndpoint");
    function getEndpointSuffix(region) {
      var regionRegexes = {
        "^(us|eu|ap|sa|ca|me)\\-\\w+\\-\\d+$": "amazonaws.com",
        "^cn\\-\\w+\\-\\d+$": "amazonaws.com.cn",
        "^us\\-gov\\-\\w+\\-\\d+$": "amazonaws.com",
        "^us\\-iso\\-\\w+\\-\\d+$": "c2s.ic.gov",
        "^us\\-isob\\-\\w+\\-\\d+$": "sc2s.sgov.gov"
      };
      var defaultSuffix = "amazonaws.com";
      var regexes = Object.keys(regionRegexes);
      for (var i = 0; i < regexes.length; i++) {
        var regionPattern = RegExp(regexes[i]);
        var dnsSuffix = regionRegexes[regexes[i]];
        if (regionPattern.test(region))
          return dnsSuffix;
      }
      return defaultSuffix;
    }
    __name(getEndpointSuffix, "getEndpointSuffix");
    module.exports = {
      configureEndpoint,
      getEndpointSuffix
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/region/utils.js
var require_utils3 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/region/utils.js"(exports, module) {
    function isFipsRegion(region) {
      return typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    }
    __name(isFipsRegion, "isFipsRegion");
    function isGlobalRegion(region) {
      return typeof region === "string" && ["aws-global", "aws-us-gov-global"].includes(region);
    }
    __name(isGlobalRegion, "isGlobalRegion");
    function getRealRegion(region) {
      return ["fips-aws-global", "aws-fips", "aws-global"].includes(region) ? "us-east-1" : ["fips-aws-us-gov-global", "aws-us-gov-global"].includes(region) ? "us-gov-west-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "");
    }
    __name(getRealRegion, "getRealRegion");
    module.exports = {
      isFipsRegion,
      isGlobalRegion,
      getRealRegion
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/service.js
var require_service = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/service.js"(exports, module) {
    var AWS2 = require_core();
    var Api = require_api();
    var regionConfig = require_region_config();
    var inherit = AWS2.util.inherit;
    var clientCount = 0;
    var region_utils = require_utils3();
    AWS2.Service = inherit({
      constructor: /* @__PURE__ */ __name(function Service(config) {
        if (!this.loadServiceClass) {
          throw AWS2.util.error(
            new Error(),
            "Service must be constructed with `new' operator"
          );
        }
        if (config) {
          if (config.region) {
            var region = config.region;
            if (region_utils.isFipsRegion(region)) {
              config.region = region_utils.getRealRegion(region);
              config.useFipsEndpoint = true;
            }
            if (region_utils.isGlobalRegion(region)) {
              config.region = region_utils.getRealRegion(region);
            }
          }
          if (typeof config.useDualstack === "boolean" && typeof config.useDualstackEndpoint !== "boolean") {
            config.useDualstackEndpoint = config.useDualstack;
          }
        }
        var ServiceClass = this.loadServiceClass(config || {});
        if (ServiceClass) {
          var originalConfig = AWS2.util.copy(config);
          var svc = new ServiceClass(config);
          Object.defineProperty(svc, "_originalConfig", {
            get: function() {
              return originalConfig;
            },
            enumerable: false,
            configurable: true
          });
          svc._clientId = ++clientCount;
          return svc;
        }
        this.initialize(config);
      }, "Service"),
      initialize: /* @__PURE__ */ __name(function initialize(config) {
        var svcConfig = AWS2.config[this.serviceIdentifier];
        this.config = new AWS2.Config(AWS2.config);
        if (svcConfig)
          this.config.update(svcConfig, true);
        if (config)
          this.config.update(config, true);
        this.validateService();
        if (!this.config.endpoint)
          regionConfig.configureEndpoint(this);
        this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
        this.setEndpoint(this.config.endpoint);
        AWS2.SequentialExecutor.call(this);
        AWS2.Service.addDefaultMonitoringListeners(this);
        if ((this.config.clientSideMonitoring || AWS2.Service._clientSideMonitoring) && this.publisher) {
          var publisher = this.publisher;
          this.addNamedListener("PUBLISH_API_CALL", "apiCall", /* @__PURE__ */ __name(function PUBLISH_API_CALL(event) {
            process.nextTick(function() {
              publisher.eventHandler(event);
            });
          }, "PUBLISH_API_CALL"));
          this.addNamedListener("PUBLISH_API_ATTEMPT", "apiCallAttempt", /* @__PURE__ */ __name(function PUBLISH_API_ATTEMPT(event) {
            process.nextTick(function() {
              publisher.eventHandler(event);
            });
          }, "PUBLISH_API_ATTEMPT"));
        }
      }, "initialize"),
      validateService: /* @__PURE__ */ __name(function validateService() {
      }, "validateService"),
      loadServiceClass: /* @__PURE__ */ __name(function loadServiceClass(serviceConfig) {
        var config = serviceConfig;
        if (!AWS2.util.isEmpty(this.api)) {
          return null;
        } else if (config.apiConfig) {
          return AWS2.Service.defineServiceApi(this.constructor, config.apiConfig);
        } else if (!this.constructor.services) {
          return null;
        } else {
          config = new AWS2.Config(AWS2.config);
          config.update(serviceConfig, true);
          var version2 = config.apiVersions[this.constructor.serviceIdentifier];
          version2 = version2 || config.apiVersion;
          return this.getLatestServiceClass(version2);
        }
      }, "loadServiceClass"),
      getLatestServiceClass: /* @__PURE__ */ __name(function getLatestServiceClass(version2) {
        version2 = this.getLatestServiceVersion(version2);
        if (this.constructor.services[version2] === null) {
          AWS2.Service.defineServiceApi(this.constructor, version2);
        }
        return this.constructor.services[version2];
      }, "getLatestServiceClass"),
      getLatestServiceVersion: /* @__PURE__ */ __name(function getLatestServiceVersion(version2) {
        if (!this.constructor.services || this.constructor.services.length === 0) {
          throw new Error("No services defined on " + this.constructor.serviceIdentifier);
        }
        if (!version2) {
          version2 = "latest";
        } else if (AWS2.util.isType(version2, Date)) {
          version2 = AWS2.util.date.iso8601(version2).split("T")[0];
        }
        if (Object.hasOwnProperty(this.constructor.services, version2)) {
          return version2;
        }
        var keys = Object.keys(this.constructor.services).sort();
        var selectedVersion = null;
        for (var i = keys.length - 1; i >= 0; i--) {
          if (keys[i][keys[i].length - 1] !== "*") {
            selectedVersion = keys[i];
          }
          if (keys[i].substr(0, 10) <= version2) {
            return selectedVersion;
          }
        }
        throw new Error("Could not find " + this.constructor.serviceIdentifier + " API to satisfy version constraint `" + version2 + "'");
      }, "getLatestServiceVersion"),
      api: {},
      defaultRetryCount: 3,
      customizeRequests: /* @__PURE__ */ __name(function customizeRequests(callback) {
        if (!callback) {
          this.customRequestHandler = null;
        } else if (typeof callback === "function") {
          this.customRequestHandler = callback;
        } else {
          throw new Error("Invalid callback type '" + typeof callback + "' provided in customizeRequests");
        }
      }, "customizeRequests"),
      makeRequest: /* @__PURE__ */ __name(function makeRequest(operation, params, callback) {
        if (typeof params === "function") {
          callback = params;
          params = null;
        }
        params = params || {};
        if (this.config.params) {
          var rules = this.api.operations[operation];
          if (rules) {
            params = AWS2.util.copy(params);
            AWS2.util.each(this.config.params, function(key, value) {
              if (rules.input.members[key]) {
                if (params[key] === void 0 || params[key] === null) {
                  params[key] = value;
                }
              }
            });
          }
        }
        var request = new AWS2.Request(this, operation, params);
        this.addAllRequestListeners(request);
        this.attachMonitoringEmitter(request);
        if (callback)
          request.send(callback);
        return request;
      }, "makeRequest"),
      makeUnauthenticatedRequest: /* @__PURE__ */ __name(function makeUnauthenticatedRequest(operation, params, callback) {
        if (typeof params === "function") {
          callback = params;
          params = {};
        }
        var request = this.makeRequest(operation, params).toUnauthenticated();
        return callback ? request.send(callback) : request;
      }, "makeUnauthenticatedRequest"),
      waitFor: /* @__PURE__ */ __name(function waitFor(state, params, callback) {
        var waiter = new AWS2.ResourceWaiter(this, state);
        return waiter.wait(params, callback);
      }, "waitFor"),
      addAllRequestListeners: /* @__PURE__ */ __name(function addAllRequestListeners(request) {
        var list = [
          AWS2.events,
          AWS2.EventListeners.Core,
          this.serviceInterface(),
          AWS2.EventListeners.CorePost
        ];
        for (var i = 0; i < list.length; i++) {
          if (list[i])
            request.addListeners(list[i]);
        }
        if (!this.config.paramValidation) {
          request.removeListener(
            "validate",
            AWS2.EventListeners.Core.VALIDATE_PARAMETERS
          );
        }
        if (this.config.logger) {
          request.addListeners(AWS2.EventListeners.Logger);
        }
        this.setupRequestListeners(request);
        if (typeof this.constructor.prototype.customRequestHandler === "function") {
          this.constructor.prototype.customRequestHandler(request);
        }
        if (Object.prototype.hasOwnProperty.call(this, "customRequestHandler") && typeof this.customRequestHandler === "function") {
          this.customRequestHandler(request);
        }
      }, "addAllRequestListeners"),
      apiCallEvent: /* @__PURE__ */ __name(function apiCallEvent(request) {
        var api = request.service.api.operations[request.operation];
        var monitoringEvent = {
          Type: "ApiCall",
          Api: api ? api.name : request.operation,
          Version: 1,
          Service: request.service.api.serviceId || request.service.api.endpointPrefix,
          Region: request.httpRequest.region,
          MaxRetriesExceeded: 0,
          UserAgent: request.httpRequest.getUserAgent()
        };
        var response = request.response;
        if (response.httpResponse.statusCode) {
          monitoringEvent.FinalHttpStatusCode = response.httpResponse.statusCode;
        }
        if (response.error) {
          var error = response.error;
          var statusCode = response.httpResponse.statusCode;
          if (statusCode > 299) {
            if (error.code)
              monitoringEvent.FinalAwsException = error.code;
            if (error.message)
              monitoringEvent.FinalAwsExceptionMessage = error.message;
          } else {
            if (error.code || error.name)
              monitoringEvent.FinalSdkException = error.code || error.name;
            if (error.message)
              monitoringEvent.FinalSdkExceptionMessage = error.message;
          }
        }
        return monitoringEvent;
      }, "apiCallEvent"),
      apiAttemptEvent: /* @__PURE__ */ __name(function apiAttemptEvent(request) {
        var api = request.service.api.operations[request.operation];
        var monitoringEvent = {
          Type: "ApiCallAttempt",
          Api: api ? api.name : request.operation,
          Version: 1,
          Service: request.service.api.serviceId || request.service.api.endpointPrefix,
          Fqdn: request.httpRequest.endpoint.hostname,
          UserAgent: request.httpRequest.getUserAgent()
        };
        var response = request.response;
        if (response.httpResponse.statusCode) {
          monitoringEvent.HttpStatusCode = response.httpResponse.statusCode;
        }
        if (!request._unAuthenticated && request.service.config.credentials && request.service.config.credentials.accessKeyId) {
          monitoringEvent.AccessKey = request.service.config.credentials.accessKeyId;
        }
        if (!response.httpResponse.headers)
          return monitoringEvent;
        if (request.httpRequest.headers["x-amz-security-token"]) {
          monitoringEvent.SessionToken = request.httpRequest.headers["x-amz-security-token"];
        }
        if (response.httpResponse.headers["x-amzn-requestid"]) {
          monitoringEvent.XAmznRequestId = response.httpResponse.headers["x-amzn-requestid"];
        }
        if (response.httpResponse.headers["x-amz-request-id"]) {
          monitoringEvent.XAmzRequestId = response.httpResponse.headers["x-amz-request-id"];
        }
        if (response.httpResponse.headers["x-amz-id-2"]) {
          monitoringEvent.XAmzId2 = response.httpResponse.headers["x-amz-id-2"];
        }
        return monitoringEvent;
      }, "apiAttemptEvent"),
      attemptFailEvent: /* @__PURE__ */ __name(function attemptFailEvent(request) {
        var monitoringEvent = this.apiAttemptEvent(request);
        var response = request.response;
        var error = response.error;
        if (response.httpResponse.statusCode > 299) {
          if (error.code)
            monitoringEvent.AwsException = error.code;
          if (error.message)
            monitoringEvent.AwsExceptionMessage = error.message;
        } else {
          if (error.code || error.name)
            monitoringEvent.SdkException = error.code || error.name;
          if (error.message)
            monitoringEvent.SdkExceptionMessage = error.message;
        }
        return monitoringEvent;
      }, "attemptFailEvent"),
      attachMonitoringEmitter: /* @__PURE__ */ __name(function attachMonitoringEmitter(request) {
        var attemptTimestamp;
        var attemptStartRealTime;
        var attemptLatency;
        var callStartRealTime;
        var attemptCount = 0;
        var region;
        var callTimestamp;
        var self = this;
        var addToHead = true;
        request.on("validate", function() {
          callStartRealTime = AWS2.util.realClock.now();
          callTimestamp = Date.now();
        }, addToHead);
        request.on("sign", function() {
          attemptStartRealTime = AWS2.util.realClock.now();
          attemptTimestamp = Date.now();
          region = request.httpRequest.region;
          attemptCount++;
        }, addToHead);
        request.on("validateResponse", function() {
          attemptLatency = Math.round(AWS2.util.realClock.now() - attemptStartRealTime);
        });
        request.addNamedListener("API_CALL_ATTEMPT", "success", /* @__PURE__ */ __name(function API_CALL_ATTEMPT() {
          var apiAttemptEvent = self.apiAttemptEvent(request);
          apiAttemptEvent.Timestamp = attemptTimestamp;
          apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
          apiAttemptEvent.Region = region;
          self.emit("apiCallAttempt", [apiAttemptEvent]);
        }, "API_CALL_ATTEMPT"));
        request.addNamedListener("API_CALL_ATTEMPT_RETRY", "retry", /* @__PURE__ */ __name(function API_CALL_ATTEMPT_RETRY() {
          var apiAttemptEvent = self.attemptFailEvent(request);
          apiAttemptEvent.Timestamp = attemptTimestamp;
          attemptLatency = attemptLatency || Math.round(AWS2.util.realClock.now() - attemptStartRealTime);
          apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
          apiAttemptEvent.Region = region;
          self.emit("apiCallAttempt", [apiAttemptEvent]);
        }, "API_CALL_ATTEMPT_RETRY"));
        request.addNamedListener("API_CALL", "complete", /* @__PURE__ */ __name(function API_CALL() {
          var apiCallEvent = self.apiCallEvent(request);
          apiCallEvent.AttemptCount = attemptCount;
          if (apiCallEvent.AttemptCount <= 0)
            return;
          apiCallEvent.Timestamp = callTimestamp;
          var latency = Math.round(AWS2.util.realClock.now() - callStartRealTime);
          apiCallEvent.Latency = latency >= 0 ? latency : 0;
          var response = request.response;
          if (response.error && response.error.retryable && typeof response.retryCount === "number" && typeof response.maxRetries === "number" && response.retryCount >= response.maxRetries) {
            apiCallEvent.MaxRetriesExceeded = 1;
          }
          self.emit("apiCall", [apiCallEvent]);
        }, "API_CALL"));
      }, "attachMonitoringEmitter"),
      setupRequestListeners: /* @__PURE__ */ __name(function setupRequestListeners(request) {
      }, "setupRequestListeners"),
      getSigningName: /* @__PURE__ */ __name(function getSigningName() {
        return this.api.signingName || this.api.endpointPrefix;
      }, "getSigningName"),
      getSignerClass: /* @__PURE__ */ __name(function getSignerClass(request) {
        var version2;
        var operation = null;
        var authtype = "";
        if (request) {
          var operations = request.service.api.operations || {};
          operation = operations[request.operation] || null;
          authtype = operation ? operation.authtype : "";
        }
        if (this.config.signatureVersion) {
          version2 = this.config.signatureVersion;
        } else if (authtype === "v4" || authtype === "v4-unsigned-body") {
          version2 = "v4";
        } else if (authtype === "bearer") {
          version2 = "bearer";
        } else {
          version2 = this.api.signatureVersion;
        }
        return AWS2.Signers.RequestSigner.getVersion(version2);
      }, "getSignerClass"),
      serviceInterface: /* @__PURE__ */ __name(function serviceInterface() {
        switch (this.api.protocol) {
          case "ec2":
            return AWS2.EventListeners.Query;
          case "query":
            return AWS2.EventListeners.Query;
          case "json":
            return AWS2.EventListeners.Json;
          case "rest-json":
            return AWS2.EventListeners.RestJson;
          case "rest-xml":
            return AWS2.EventListeners.RestXml;
        }
        if (this.api.protocol) {
          throw new Error("Invalid service `protocol' " + this.api.protocol + " in API config");
        }
      }, "serviceInterface"),
      successfulResponse: /* @__PURE__ */ __name(function successfulResponse(resp) {
        return resp.httpResponse.statusCode < 300;
      }, "successfulResponse"),
      numRetries: /* @__PURE__ */ __name(function numRetries() {
        if (this.config.maxRetries !== void 0) {
          return this.config.maxRetries;
        } else {
          return this.defaultRetryCount;
        }
      }, "numRetries"),
      retryDelays: /* @__PURE__ */ __name(function retryDelays(retryCount, err) {
        return AWS2.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions, err);
      }, "retryDelays"),
      retryableError: /* @__PURE__ */ __name(function retryableError(error) {
        if (this.timeoutError(error))
          return true;
        if (this.networkingError(error))
          return true;
        if (this.expiredCredentialsError(error))
          return true;
        if (this.throttledError(error))
          return true;
        if (error.statusCode >= 500)
          return true;
        return false;
      }, "retryableError"),
      networkingError: /* @__PURE__ */ __name(function networkingError(error) {
        return error.code === "NetworkingError";
      }, "networkingError"),
      timeoutError: /* @__PURE__ */ __name(function timeoutError(error) {
        return error.code === "TimeoutError";
      }, "timeoutError"),
      expiredCredentialsError: /* @__PURE__ */ __name(function expiredCredentialsError(error) {
        return error.code === "ExpiredTokenException";
      }, "expiredCredentialsError"),
      clockSkewError: /* @__PURE__ */ __name(function clockSkewError(error) {
        switch (error.code) {
          case "RequestTimeTooSkewed":
          case "RequestExpired":
          case "InvalidSignatureException":
          case "SignatureDoesNotMatch":
          case "AuthFailure":
          case "RequestInTheFuture":
            return true;
          default:
            return false;
        }
      }, "clockSkewError"),
      getSkewCorrectedDate: /* @__PURE__ */ __name(function getSkewCorrectedDate() {
        return new Date(Date.now() + this.config.systemClockOffset);
      }, "getSkewCorrectedDate"),
      applyClockOffset: /* @__PURE__ */ __name(function applyClockOffset(newServerTime) {
        if (newServerTime) {
          this.config.systemClockOffset = newServerTime - Date.now();
        }
      }, "applyClockOffset"),
      isClockSkewed: /* @__PURE__ */ __name(function isClockSkewed(newServerTime) {
        if (newServerTime) {
          return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 3e5;
        }
      }, "isClockSkewed"),
      throttledError: /* @__PURE__ */ __name(function throttledError(error) {
        if (error.statusCode === 429)
          return true;
        switch (error.code) {
          case "ProvisionedThroughputExceededException":
          case "Throttling":
          case "ThrottlingException":
          case "RequestLimitExceeded":
          case "RequestThrottled":
          case "RequestThrottledException":
          case "TooManyRequestsException":
          case "TransactionInProgressException":
          case "EC2ThrottledException":
            return true;
          default:
            return false;
        }
      }, "throttledError"),
      endpointFromTemplate: /* @__PURE__ */ __name(function endpointFromTemplate(endpoint) {
        if (typeof endpoint !== "string")
          return endpoint;
        var e = endpoint;
        e = e.replace(/\{service\}/g, this.api.endpointPrefix);
        e = e.replace(/\{region\}/g, this.config.region);
        e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? "https" : "http");
        return e;
      }, "endpointFromTemplate"),
      setEndpoint: /* @__PURE__ */ __name(function setEndpoint(endpoint) {
        this.endpoint = new AWS2.Endpoint(endpoint, this.config);
      }, "setEndpoint"),
      paginationConfig: /* @__PURE__ */ __name(function paginationConfig(operation, throwException) {
        var paginator = this.api.operations[operation].paginator;
        if (!paginator) {
          if (throwException) {
            var e = new Error();
            throw AWS2.util.error(e, "No pagination configuration for " + operation);
          }
          return null;
        }
        return paginator;
      }, "paginationConfig")
    });
    AWS2.util.update(AWS2.Service, {
      defineMethods: /* @__PURE__ */ __name(function defineMethods(svc) {
        AWS2.util.each(svc.prototype.api.operations, /* @__PURE__ */ __name(function iterator(method) {
          if (svc.prototype[method])
            return;
          var operation = svc.prototype.api.operations[method];
          if (operation.authtype === "none") {
            svc.prototype[method] = function(params, callback) {
              return this.makeUnauthenticatedRequest(method, params, callback);
            };
          } else {
            svc.prototype[method] = function(params, callback) {
              return this.makeRequest(method, params, callback);
            };
          }
        }, "iterator"));
      }, "defineMethods"),
      defineService: /* @__PURE__ */ __name(function defineService(serviceIdentifier, versions, features) {
        AWS2.Service._serviceMap[serviceIdentifier] = true;
        if (!Array.isArray(versions)) {
          features = versions;
          versions = [];
        }
        var svc = inherit(AWS2.Service, features || {});
        if (typeof serviceIdentifier === "string") {
          AWS2.Service.addVersions(svc, versions);
          var identifier = svc.serviceIdentifier || serviceIdentifier;
          svc.serviceIdentifier = identifier;
        } else {
          svc.prototype.api = serviceIdentifier;
          AWS2.Service.defineMethods(svc);
        }
        AWS2.SequentialExecutor.call(this.prototype);
        if (!this.prototype.publisher && AWS2.util.clientSideMonitoring) {
          var Publisher = AWS2.util.clientSideMonitoring.Publisher;
          var configProvider = AWS2.util.clientSideMonitoring.configProvider;
          var publisherConfig = configProvider();
          this.prototype.publisher = new Publisher(publisherConfig);
          if (publisherConfig.enabled) {
            AWS2.Service._clientSideMonitoring = true;
          }
        }
        AWS2.SequentialExecutor.call(svc.prototype);
        AWS2.Service.addDefaultMonitoringListeners(svc.prototype);
        return svc;
      }, "defineService"),
      addVersions: /* @__PURE__ */ __name(function addVersions(svc, versions) {
        if (!Array.isArray(versions))
          versions = [versions];
        svc.services = svc.services || {};
        for (var i = 0; i < versions.length; i++) {
          if (svc.services[versions[i]] === void 0) {
            svc.services[versions[i]] = null;
          }
        }
        svc.apiVersions = Object.keys(svc.services).sort();
      }, "addVersions"),
      defineServiceApi: /* @__PURE__ */ __name(function defineServiceApi(superclass, version2, apiConfig) {
        var svc = inherit(superclass, {
          serviceIdentifier: superclass.serviceIdentifier
        });
        function setApi(api) {
          if (api.isApi) {
            svc.prototype.api = api;
          } else {
            svc.prototype.api = new Api(api, {
              serviceIdentifier: superclass.serviceIdentifier
            });
          }
        }
        __name(setApi, "setApi");
        if (typeof version2 === "string") {
          if (apiConfig) {
            setApi(apiConfig);
          } else {
            try {
              setApi(AWS2.apiLoader(superclass.serviceIdentifier, version2));
            } catch (err) {
              throw AWS2.util.error(err, {
                message: "Could not find API configuration " + superclass.serviceIdentifier + "-" + version2
              });
            }
          }
          if (!Object.prototype.hasOwnProperty.call(superclass.services, version2)) {
            superclass.apiVersions = superclass.apiVersions.concat(version2).sort();
          }
          superclass.services[version2] = svc;
        } else {
          setApi(version2);
        }
        AWS2.Service.defineMethods(svc);
        return svc;
      }, "defineServiceApi"),
      hasService: function(identifier) {
        return Object.prototype.hasOwnProperty.call(AWS2.Service._serviceMap, identifier);
      },
      addDefaultMonitoringListeners: /* @__PURE__ */ __name(function addDefaultMonitoringListeners(attachOn) {
        attachOn.addNamedListener("MONITOR_EVENTS_BUBBLE", "apiCallAttempt", /* @__PURE__ */ __name(function EVENTS_BUBBLE(event) {
          var baseClass = Object.getPrototypeOf(attachOn);
          if (baseClass._events)
            baseClass.emit("apiCallAttempt", [event]);
        }, "EVENTS_BUBBLE"));
        attachOn.addNamedListener("CALL_EVENTS_BUBBLE", "apiCall", /* @__PURE__ */ __name(function CALL_EVENTS_BUBBLE(event) {
          var baseClass = Object.getPrototypeOf(attachOn);
          if (baseClass._events)
            baseClass.emit("apiCall", [event]);
        }, "CALL_EVENTS_BUBBLE"));
      }, "addDefaultMonitoringListeners"),
      _serviceMap: {}
    });
    AWS2.util.mixin(AWS2.Service, AWS2.SequentialExecutor);
    module.exports = AWS2.Service;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials.js
var require_credentials2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials.js"() {
    var AWS2 = require_core();
    AWS2.Credentials = AWS2.util.inherit({
      constructor: /* @__PURE__ */ __name(function Credentials() {
        AWS2.util.hideProperties(this, ["secretAccessKey"]);
        this.expired = false;
        this.expireTime = null;
        this.refreshCallbacks = [];
        if (arguments.length === 1 && typeof arguments[0] === "object") {
          var creds = arguments[0].credentials || arguments[0];
          this.accessKeyId = creds.accessKeyId;
          this.secretAccessKey = creds.secretAccessKey;
          this.sessionToken = creds.sessionToken;
        } else {
          this.accessKeyId = arguments[0];
          this.secretAccessKey = arguments[1];
          this.sessionToken = arguments[2];
        }
      }, "Credentials"),
      expiryWindow: 15,
      needsRefresh: /* @__PURE__ */ __name(function needsRefresh() {
        var currentTime = AWS2.util.date.getDate().getTime();
        var adjustedTime = new Date(currentTime + this.expiryWindow * 1e3);
        if (this.expireTime && adjustedTime > this.expireTime) {
          return true;
        } else {
          return this.expired || !this.accessKeyId || !this.secretAccessKey;
        }
      }, "needsRefresh"),
      get: /* @__PURE__ */ __name(function get(callback) {
        var self = this;
        if (this.needsRefresh()) {
          this.refresh(function(err) {
            if (!err)
              self.expired = false;
            if (callback)
              callback(err);
          });
        } else if (callback) {
          callback();
        }
      }, "get"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.expired = false;
        callback();
      }, "refresh"),
      coalesceRefresh: /* @__PURE__ */ __name(function coalesceRefresh(callback, sync) {
        var self = this;
        if (self.refreshCallbacks.push(callback) === 1) {
          self.load(/* @__PURE__ */ __name(function onLoad(err) {
            AWS2.util.arrayEach(self.refreshCallbacks, function(callback2) {
              if (sync) {
                callback2(err);
              } else {
                AWS2.util.defer(function() {
                  callback2(err);
                });
              }
            });
            self.refreshCallbacks.length = 0;
          }, "onLoad"));
        }
      }, "coalesceRefresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        callback();
      }, "load")
    });
    AWS2.Credentials.addPromisesToClass = /* @__PURE__ */ __name(function addPromisesToClass(PromiseDependency) {
      this.prototype.getPromise = AWS2.util.promisifyMethod("get", PromiseDependency);
      this.prototype.refreshPromise = AWS2.util.promisifyMethod("refresh", PromiseDependency);
    }, "addPromisesToClass");
    AWS2.Credentials.deletePromisesFromClass = /* @__PURE__ */ __name(function deletePromisesFromClass() {
      delete this.prototype.getPromise;
      delete this.prototype.refreshPromise;
    }, "deletePromisesFromClass");
    AWS2.util.addPromises(AWS2.Credentials);
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/credential_provider_chain.js
var require_credential_provider_chain = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/credential_provider_chain.js"() {
    var AWS2 = require_core();
    AWS2.CredentialProviderChain = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function CredentialProviderChain(providers) {
        if (providers) {
          this.providers = providers;
        } else {
          this.providers = AWS2.CredentialProviderChain.defaultProviders.slice(0);
        }
        this.resolveCallbacks = [];
      }, "CredentialProviderChain"),
      resolve: /* @__PURE__ */ __name(function resolve(callback) {
        var self = this;
        if (self.providers.length === 0) {
          callback(new Error("No providers"));
          return self;
        }
        if (self.resolveCallbacks.push(callback) === 1) {
          let resolveNext2 = function(err, creds) {
            if (!err && creds || index === providers.length) {
              AWS2.util.arrayEach(self.resolveCallbacks, function(callback2) {
                callback2(err, creds);
              });
              self.resolveCallbacks.length = 0;
              return;
            }
            var provider = providers[index++];
            if (typeof provider === "function") {
              creds = provider.call();
            } else {
              creds = provider;
            }
            if (creds.get) {
              creds.get(function(getErr) {
                resolveNext2(getErr, getErr ? null : creds);
              });
            } else {
              resolveNext2(null, creds);
            }
          };
          var resolveNext = resolveNext2;
          __name(resolveNext2, "resolveNext");
          var index = 0;
          var providers = self.providers.slice(0);
          resolveNext2();
        }
        return self;
      }, "resolve")
    });
    AWS2.CredentialProviderChain.defaultProviders = [];
    AWS2.CredentialProviderChain.addPromisesToClass = /* @__PURE__ */ __name(function addPromisesToClass(PromiseDependency) {
      this.prototype.resolvePromise = AWS2.util.promisifyMethod("resolve", PromiseDependency);
    }, "addPromisesToClass");
    AWS2.CredentialProviderChain.deletePromisesFromClass = /* @__PURE__ */ __name(function deletePromisesFromClass() {
      delete this.prototype.resolvePromise;
    }, "deletePromisesFromClass");
    AWS2.util.addPromises(AWS2.CredentialProviderChain);
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/config.js
var require_config3 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/config.js"() {
    var AWS2 = require_core();
    require_credentials2();
    require_credential_provider_chain();
    var PromisesDependency;
    AWS2.Config = AWS2.util.inherit({
      constructor: /* @__PURE__ */ __name(function Config(options) {
        if (options === void 0)
          options = {};
        options = this.extractCredentials(options);
        AWS2.util.each.call(this, this.keys, function(key, value) {
          this.set(key, options[key], value);
        });
      }, "Config"),
      getCredentials: /* @__PURE__ */ __name(function getCredentials(callback) {
        var self = this;
        function finish(err) {
          callback(err, err ? null : self.credentials);
        }
        __name(finish, "finish");
        function credError(msg, err) {
          return new AWS2.util.error(err || new Error(), {
            code: "CredentialsError",
            message: msg,
            name: "CredentialsError"
          });
        }
        __name(credError, "credError");
        function getAsyncCredentials() {
          self.credentials.get(function(err) {
            if (err) {
              var msg = "Could not load credentials from " + self.credentials.constructor.name;
              err = credError(msg, err);
            }
            finish(err);
          });
        }
        __name(getAsyncCredentials, "getAsyncCredentials");
        function getStaticCredentials() {
          var err = null;
          if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
            err = credError("Missing credentials");
          }
          finish(err);
        }
        __name(getStaticCredentials, "getStaticCredentials");
        if (self.credentials) {
          if (typeof self.credentials.get === "function") {
            getAsyncCredentials();
          } else {
            getStaticCredentials();
          }
        } else if (self.credentialProvider) {
          self.credentialProvider.resolve(function(err, creds) {
            if (err) {
              err = credError("Could not load credentials from any providers", err);
            }
            self.credentials = creds;
            finish(err);
          });
        } else {
          finish(credError("No credentials to load"));
        }
      }, "getCredentials"),
      getToken: /* @__PURE__ */ __name(function getToken(callback) {
        var self = this;
        function finish(err) {
          callback(err, err ? null : self.token);
        }
        __name(finish, "finish");
        function tokenError(msg, err) {
          return new AWS2.util.error(err || new Error(), {
            code: "TokenError",
            message: msg,
            name: "TokenError"
          });
        }
        __name(tokenError, "tokenError");
        function getAsyncToken() {
          self.token.get(function(err) {
            if (err) {
              var msg = "Could not load token from " + self.token.constructor.name;
              err = tokenError(msg, err);
            }
            finish(err);
          });
        }
        __name(getAsyncToken, "getAsyncToken");
        function getStaticToken() {
          var err = null;
          if (!self.token.token) {
            err = tokenError("Missing token");
          }
          finish(err);
        }
        __name(getStaticToken, "getStaticToken");
        if (self.token) {
          if (typeof self.token.get === "function") {
            getAsyncToken();
          } else {
            getStaticToken();
          }
        } else if (self.tokenProvider) {
          self.tokenProvider.resolve(function(err, token) {
            if (err) {
              err = tokenError("Could not load token from any providers", err);
            }
            self.token = token;
            finish(err);
          });
        } else {
          finish(tokenError("No token to load"));
        }
      }, "getToken"),
      update: /* @__PURE__ */ __name(function update(options, allowUnknownKeys) {
        allowUnknownKeys = allowUnknownKeys || false;
        options = this.extractCredentials(options);
        AWS2.util.each.call(this, options, function(key, value) {
          if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) || AWS2.Service.hasService(key)) {
            this.set(key, value);
          }
        });
      }, "update"),
      loadFromPath: /* @__PURE__ */ __name(function loadFromPath(path) {
        this.clear();
        var options = JSON.parse(AWS2.util.readFileSync(path));
        var fileSystemCreds = new AWS2.FileSystemCredentials(path);
        var chain = new AWS2.CredentialProviderChain();
        chain.providers.unshift(fileSystemCreds);
        chain.resolve(function(err, creds) {
          if (err)
            throw err;
          else
            options.credentials = creds;
        });
        this.constructor(options);
        return this;
      }, "loadFromPath"),
      clear: /* @__PURE__ */ __name(function clear() {
        AWS2.util.each.call(this, this.keys, function(key) {
          delete this[key];
        });
        this.set("credentials", void 0);
        this.set("credentialProvider", void 0);
      }, "clear"),
      set: /* @__PURE__ */ __name(function set(property, value, defaultValue) {
        if (value === void 0) {
          if (defaultValue === void 0) {
            defaultValue = this.keys[property];
          }
          if (typeof defaultValue === "function") {
            this[property] = defaultValue.call(this);
          } else {
            this[property] = defaultValue;
          }
        } else if (property === "httpOptions" && this[property]) {
          this[property] = AWS2.util.merge(this[property], value);
        } else {
          this[property] = value;
        }
      }, "set"),
      keys: {
        credentials: null,
        credentialProvider: null,
        region: null,
        logger: null,
        apiVersions: {},
        apiVersion: null,
        endpoint: void 0,
        httpOptions: {
          timeout: 12e4
        },
        maxRetries: void 0,
        maxRedirects: 10,
        paramValidation: true,
        sslEnabled: true,
        s3ForcePathStyle: false,
        s3BucketEndpoint: false,
        s3DisableBodySigning: true,
        s3UsEast1RegionalEndpoint: "legacy",
        s3UseArnRegion: void 0,
        computeChecksums: true,
        convertResponseTypes: true,
        correctClockSkew: false,
        customUserAgent: null,
        dynamoDbCrc32: true,
        systemClockOffset: 0,
        signatureVersion: null,
        signatureCache: true,
        retryDelayOptions: {},
        useAccelerateEndpoint: false,
        clientSideMonitoring: false,
        endpointDiscoveryEnabled: void 0,
        endpointCacheSize: 1e3,
        hostPrefixEnabled: true,
        stsRegionalEndpoints: "legacy",
        useFipsEndpoint: false,
        useDualstackEndpoint: false,
        token: null
      },
      extractCredentials: /* @__PURE__ */ __name(function extractCredentials(options) {
        if (options.accessKeyId && options.secretAccessKey) {
          options = AWS2.util.copy(options);
          options.credentials = new AWS2.Credentials(options);
        }
        return options;
      }, "extractCredentials"),
      setPromisesDependency: /* @__PURE__ */ __name(function setPromisesDependency(dep) {
        PromisesDependency = dep;
        if (dep === null && typeof Promise === "function") {
          PromisesDependency = Promise;
        }
        var constructors = [AWS2.Request, AWS2.Credentials, AWS2.CredentialProviderChain];
        if (AWS2.S3) {
          constructors.push(AWS2.S3);
          if (AWS2.S3.ManagedUpload) {
            constructors.push(AWS2.S3.ManagedUpload);
          }
        }
        AWS2.util.addPromises(constructors, PromisesDependency);
      }, "setPromisesDependency"),
      getPromisesDependency: /* @__PURE__ */ __name(function getPromisesDependency() {
        return PromisesDependency;
      }, "getPromisesDependency")
    });
    AWS2.config = new AWS2.Config();
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/http.js
var require_http4 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/http.js"() {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    AWS2.Endpoint = inherit({
      constructor: /* @__PURE__ */ __name(function Endpoint(endpoint, config) {
        AWS2.util.hideProperties(this, ["slashes", "auth", "hash", "search", "query"]);
        if (typeof endpoint === "undefined" || endpoint === null) {
          throw new Error("Invalid endpoint: " + endpoint);
        } else if (typeof endpoint !== "string") {
          return AWS2.util.copy(endpoint);
        }
        if (!endpoint.match(/^http/)) {
          var useSSL = config && config.sslEnabled !== void 0 ? config.sslEnabled : AWS2.config.sslEnabled;
          endpoint = (useSSL ? "https" : "http") + "://" + endpoint;
        }
        AWS2.util.update(this, AWS2.util.urlParse(endpoint));
        if (this.port) {
          this.port = parseInt(this.port, 10);
        } else {
          this.port = this.protocol === "https:" ? 443 : 80;
        }
      }, "Endpoint")
    });
    AWS2.HttpRequest = inherit({
      constructor: /* @__PURE__ */ __name(function HttpRequest(endpoint, region) {
        endpoint = new AWS2.Endpoint(endpoint);
        this.method = "POST";
        this.path = endpoint.path || "/";
        this.headers = {};
        this.body = "";
        this.endpoint = endpoint;
        this.region = region;
        this._userAgent = "";
        this.setUserAgent();
      }, "HttpRequest"),
      setUserAgent: /* @__PURE__ */ __name(function setUserAgent() {
        this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS2.util.userAgent();
      }, "setUserAgent"),
      getUserAgentHeaderName: /* @__PURE__ */ __name(function getUserAgentHeaderName() {
        var prefix = AWS2.util.isBrowser() ? "X-Amz-" : "";
        return prefix + "User-Agent";
      }, "getUserAgentHeaderName"),
      appendToUserAgent: /* @__PURE__ */ __name(function appendToUserAgent(agentPartial) {
        if (typeof agentPartial === "string" && agentPartial) {
          this._userAgent += " " + agentPartial;
        }
        this.headers[this.getUserAgentHeaderName()] = this._userAgent;
      }, "appendToUserAgent"),
      getUserAgent: /* @__PURE__ */ __name(function getUserAgent() {
        return this._userAgent;
      }, "getUserAgent"),
      pathname: /* @__PURE__ */ __name(function pathname() {
        return this.path.split("?", 1)[0];
      }, "pathname"),
      search: /* @__PURE__ */ __name(function search() {
        var query = this.path.split("?", 2)[1];
        if (query) {
          query = AWS2.util.queryStringParse(query);
          return AWS2.util.queryParamsToString(query);
        }
        return "";
      }, "search"),
      updateEndpoint: /* @__PURE__ */ __name(function updateEndpoint(endpointStr) {
        var newEndpoint = new AWS2.Endpoint(endpointStr);
        this.endpoint = newEndpoint;
        this.path = newEndpoint.path || "/";
        if (this.headers["Host"]) {
          this.headers["Host"] = newEndpoint.host;
        }
      }, "updateEndpoint")
    });
    AWS2.HttpResponse = inherit({
      constructor: /* @__PURE__ */ __name(function HttpResponse() {
        this.statusCode = void 0;
        this.headers = {};
        this.body = void 0;
        this.streaming = false;
        this.stream = null;
      }, "HttpResponse"),
      createUnbufferedStream: /* @__PURE__ */ __name(function createUnbufferedStream() {
        this.streaming = true;
        return this.stream;
      }, "createUnbufferedStream")
    });
    AWS2.HttpClient = inherit({});
    AWS2.HttpClient.getInstance = /* @__PURE__ */ __name(function getInstance() {
      if (this.singleton === void 0) {
        this.singleton = new this();
      }
      return this.singleton;
    }, "getInstance");
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/discover_endpoint.js
var require_discover_endpoint = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/discover_endpoint.js"(exports, module) {
    var AWS2 = require_core();
    var util = require_util3();
    var endpointDiscoveryEnabledEnvs = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
    function getCacheKey(request) {
      var service = request.service;
      var api = service.api || {};
      var operations = api.operations;
      var identifiers = {};
      if (service.config.region) {
        identifiers.region = service.config.region;
      }
      if (api.serviceId) {
        identifiers.serviceId = api.serviceId;
      }
      if (service.config.credentials.accessKeyId) {
        identifiers.accessKeyId = service.config.credentials.accessKeyId;
      }
      return identifiers;
    }
    __name(getCacheKey, "getCacheKey");
    function marshallCustomIdentifiersHelper(result, params, shape) {
      if (!shape || params === void 0 || params === null)
        return;
      if (shape.type === "structure" && shape.required && shape.required.length > 0) {
        util.arrayEach(shape.required, function(name) {
          var memberShape = shape.members[name];
          if (memberShape.endpointDiscoveryId === true) {
            var locationName = memberShape.isLocationName ? memberShape.name : name;
            result[locationName] = String(params[name]);
          } else {
            marshallCustomIdentifiersHelper(result, params[name], memberShape);
          }
        });
      }
    }
    __name(marshallCustomIdentifiersHelper, "marshallCustomIdentifiersHelper");
    function marshallCustomIdentifiers(request, shape) {
      var identifiers = {};
      marshallCustomIdentifiersHelper(identifiers, request.params, shape);
      return identifiers;
    }
    __name(marshallCustomIdentifiers, "marshallCustomIdentifiers");
    function optionalDiscoverEndpoint(request) {
      var service = request.service;
      var api = service.api;
      var operationModel = api.operations ? api.operations[request.operation] : void 0;
      var inputShape = operationModel ? operationModel.input : void 0;
      var identifiers = marshallCustomIdentifiers(request, inputShape);
      var cacheKey = getCacheKey(request);
      if (Object.keys(identifiers).length > 0) {
        cacheKey = util.update(cacheKey, identifiers);
        if (operationModel)
          cacheKey.operation = operationModel.name;
      }
      var endpoints = AWS2.endpointCache.get(cacheKey);
      if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
        return;
      } else if (endpoints && endpoints.length > 0) {
        request.httpRequest.updateEndpoint(endpoints[0].Address);
      } else {
        var endpointRequest = service.makeRequest(api.endpointOperation, {
          Operation: operationModel.name,
          Identifiers: identifiers
        });
        addApiVersionHeader(endpointRequest);
        endpointRequest.removeListener("validate", AWS2.EventListeners.Core.VALIDATE_PARAMETERS);
        endpointRequest.removeListener("retry", AWS2.EventListeners.Core.RETRY_CHECK);
        AWS2.endpointCache.put(cacheKey, [{
          Address: "",
          CachePeriodInMinutes: 1
        }]);
        endpointRequest.send(function(err, data) {
          if (data && data.Endpoints) {
            AWS2.endpointCache.put(cacheKey, data.Endpoints);
          } else if (err) {
            AWS2.endpointCache.put(cacheKey, [{
              Address: "",
              CachePeriodInMinutes: 1
            }]);
          }
        });
      }
    }
    __name(optionalDiscoverEndpoint, "optionalDiscoverEndpoint");
    var requestQueue = {};
    function requiredDiscoverEndpoint(request, done) {
      var service = request.service;
      var api = service.api;
      var operationModel = api.operations ? api.operations[request.operation] : void 0;
      var inputShape = operationModel ? operationModel.input : void 0;
      var identifiers = marshallCustomIdentifiers(request, inputShape);
      var cacheKey = getCacheKey(request);
      if (Object.keys(identifiers).length > 0) {
        cacheKey = util.update(cacheKey, identifiers);
        if (operationModel)
          cacheKey.operation = operationModel.name;
      }
      var cacheKeyStr = AWS2.EndpointCache.getKeyString(cacheKey);
      var endpoints = AWS2.endpointCache.get(cacheKeyStr);
      if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
        if (!requestQueue[cacheKeyStr])
          requestQueue[cacheKeyStr] = [];
        requestQueue[cacheKeyStr].push({ request, callback: done });
        return;
      } else if (endpoints && endpoints.length > 0) {
        request.httpRequest.updateEndpoint(endpoints[0].Address);
        done();
      } else {
        var endpointRequest = service.makeRequest(api.endpointOperation, {
          Operation: operationModel.name,
          Identifiers: identifiers
        });
        endpointRequest.removeListener("validate", AWS2.EventListeners.Core.VALIDATE_PARAMETERS);
        addApiVersionHeader(endpointRequest);
        AWS2.endpointCache.put(cacheKeyStr, [{
          Address: "",
          CachePeriodInMinutes: 60
        }]);
        endpointRequest.send(function(err, data) {
          if (err) {
            request.response.error = util.error(err, { retryable: false });
            AWS2.endpointCache.remove(cacheKey);
            if (requestQueue[cacheKeyStr]) {
              var pendingRequests = requestQueue[cacheKeyStr];
              util.arrayEach(pendingRequests, function(requestContext) {
                requestContext.request.response.error = util.error(err, { retryable: false });
                requestContext.callback();
              });
              delete requestQueue[cacheKeyStr];
            }
          } else if (data) {
            AWS2.endpointCache.put(cacheKeyStr, data.Endpoints);
            request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
            if (requestQueue[cacheKeyStr]) {
              var pendingRequests = requestQueue[cacheKeyStr];
              util.arrayEach(pendingRequests, function(requestContext) {
                requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
                requestContext.callback();
              });
              delete requestQueue[cacheKeyStr];
            }
          }
          done();
        });
      }
    }
    __name(requiredDiscoverEndpoint, "requiredDiscoverEndpoint");
    function addApiVersionHeader(endpointRequest) {
      var api = endpointRequest.service.api;
      var apiVersion = api.apiVersion;
      if (apiVersion && !endpointRequest.httpRequest.headers["x-amz-api-version"]) {
        endpointRequest.httpRequest.headers["x-amz-api-version"] = apiVersion;
      }
    }
    __name(addApiVersionHeader, "addApiVersionHeader");
    function invalidateCachedEndpoints(response) {
      var error = response.error;
      var httpResponse = response.httpResponse;
      if (error && (error.code === "InvalidEndpointException" || httpResponse.statusCode === 421)) {
        var request = response.request;
        var operations = request.service.api.operations || {};
        var inputShape = operations[request.operation] ? operations[request.operation].input : void 0;
        var identifiers = marshallCustomIdentifiers(request, inputShape);
        var cacheKey = getCacheKey(request);
        if (Object.keys(identifiers).length > 0) {
          cacheKey = util.update(cacheKey, identifiers);
          if (operations[request.operation])
            cacheKey.operation = operations[request.operation].name;
        }
        AWS2.endpointCache.remove(cacheKey);
      }
    }
    __name(invalidateCachedEndpoints, "invalidateCachedEndpoints");
    function hasCustomEndpoint(client) {
      if (client._originalConfig && client._originalConfig.endpoint && client._originalConfig.endpointDiscoveryEnabled === true) {
        throw util.error(new Error(), {
          code: "ConfigurationException",
          message: "Custom endpoint is supplied; endpointDiscoveryEnabled must not be true."
        });
      }
      ;
      var svcConfig = AWS2.config[client.serviceIdentifier] || {};
      return Boolean(AWS2.config.endpoint || svcConfig.endpoint || client._originalConfig && client._originalConfig.endpoint);
    }
    __name(hasCustomEndpoint, "hasCustomEndpoint");
    function isFalsy(value) {
      return ["false", "0"].indexOf(value) >= 0;
    }
    __name(isFalsy, "isFalsy");
    function resolveEndpointDiscoveryConfig(request) {
      var service = request.service || {};
      if (service.config.endpointDiscoveryEnabled !== void 0) {
        return service.config.endpointDiscoveryEnabled;
      }
      if (util.isBrowser())
        return void 0;
      for (var i = 0; i < endpointDiscoveryEnabledEnvs.length; i++) {
        var env = endpointDiscoveryEnabledEnvs[i];
        if (Object.prototype.hasOwnProperty.call(process.env, env)) {
          if (process.env[env] === "" || process.env[env] === void 0) {
            throw util.error(new Error(), {
              code: "ConfigurationException",
              message: "environmental variable " + env + " cannot be set to nothing"
            });
          }
          return !isFalsy(process.env[env]);
        }
      }
      var configFile = {};
      try {
        configFile = AWS2.util.iniLoader ? AWS2.util.iniLoader.loadFrom({
          isConfig: true,
          filename: process.env[AWS2.util.sharedConfigFileEnv]
        }) : {};
      } catch (e) {
      }
      var sharedFileConfig = configFile[process.env.AWS_PROFILE || AWS2.util.defaultProfile] || {};
      if (Object.prototype.hasOwnProperty.call(sharedFileConfig, "endpoint_discovery_enabled")) {
        if (sharedFileConfig.endpoint_discovery_enabled === void 0) {
          throw util.error(new Error(), {
            code: "ConfigurationException",
            message: "config file entry 'endpoint_discovery_enabled' cannot be set to nothing"
          });
        }
        return !isFalsy(sharedFileConfig.endpoint_discovery_enabled);
      }
      return void 0;
    }
    __name(resolveEndpointDiscoveryConfig, "resolveEndpointDiscoveryConfig");
    function discoverEndpoint(request, done) {
      var service = request.service || {};
      if (hasCustomEndpoint(service) || request.isPresigned())
        return done();
      var operations = service.api.operations || {};
      var operationModel = operations[request.operation];
      var isEndpointDiscoveryRequired = operationModel ? operationModel.endpointDiscoveryRequired : "NULL";
      var isEnabled = resolveEndpointDiscoveryConfig(request);
      var hasRequiredEndpointDiscovery = service.api.hasRequiredEndpointDiscovery;
      if (isEnabled || hasRequiredEndpointDiscovery) {
        request.httpRequest.appendToUserAgent("endpoint-discovery");
      }
      switch (isEndpointDiscoveryRequired) {
        case "OPTIONAL":
          if (isEnabled || hasRequiredEndpointDiscovery) {
            optionalDiscoverEndpoint(request);
            request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS", "extractError", invalidateCachedEndpoints);
          }
          done();
          break;
        case "REQUIRED":
          if (isEnabled === false) {
            request.response.error = util.error(new Error(), {
              code: "ConfigurationException",
              message: "Endpoint Discovery is disabled but " + service.api.className + "." + request.operation + "() requires it. Please check your configurations."
            });
            done();
            break;
          }
          request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS", "extractError", invalidateCachedEndpoints);
          requiredDiscoverEndpoint(request, done);
          break;
        case "NULL":
        default:
          done();
          break;
      }
    }
    __name(discoverEndpoint, "discoverEndpoint");
    module.exports = {
      discoverEndpoint,
      requiredDiscoverEndpoint,
      optionalDiscoverEndpoint,
      marshallCustomIdentifiers,
      getCacheKey,
      invalidateCachedEndpoint: invalidateCachedEndpoints
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event_listeners.js
var require_event_listeners = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event_listeners.js"() {
    var AWS2 = require_core();
    var SequentialExecutor = require_sequential_executor();
    var DISCOVER_ENDPOINT = require_discover_endpoint().discoverEndpoint;
    AWS2.EventListeners = {
      Core: {}
    };
    function getOperationAuthtype(req) {
      if (!req.service.api.operations) {
        return "";
      }
      var operation = req.service.api.operations[req.operation];
      return operation ? operation.authtype : "";
    }
    __name(getOperationAuthtype, "getOperationAuthtype");
    AWS2.EventListeners = {
      Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
        addAsync(
          "VALIDATE_CREDENTIALS",
          "validate",
          /* @__PURE__ */ __name(function VALIDATE_CREDENTIALS(req, done) {
            if (!req.service.api.signatureVersion && !req.service.config.signatureVersion)
              return done();
            req.service.config.getCredentials(function(err) {
              if (err) {
                req.response.error = AWS2.util.error(
                  err,
                  { code: "CredentialsError", message: "Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1" }
                );
              }
              done();
            });
          }, "VALIDATE_CREDENTIALS")
        );
        add("VALIDATE_REGION", "validate", /* @__PURE__ */ __name(function VALIDATE_REGION(req) {
          if (!req.service.isGlobalEndpoint) {
            var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
            if (!req.service.config.region) {
              req.response.error = AWS2.util.error(
                new Error(),
                { code: "ConfigError", message: "Missing region in config" }
              );
            } else if (!dnsHostRegex.test(req.service.config.region)) {
              req.response.error = AWS2.util.error(
                new Error(),
                { code: "ConfigError", message: "Invalid region in config" }
              );
            }
          }
        }, "VALIDATE_REGION"));
        add("BUILD_IDEMPOTENCY_TOKENS", "validate", /* @__PURE__ */ __name(function BUILD_IDEMPOTENCY_TOKENS(req) {
          if (!req.service.api.operations) {
            return;
          }
          var operation = req.service.api.operations[req.operation];
          if (!operation) {
            return;
          }
          var idempotentMembers = operation.idempotentMembers;
          if (!idempotentMembers.length) {
            return;
          }
          var params = AWS2.util.copy(req.params);
          for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
            if (!params[idempotentMembers[i]]) {
              params[idempotentMembers[i]] = AWS2.util.uuid.v4();
            }
          }
          req.params = params;
        }, "BUILD_IDEMPOTENCY_TOKENS"));
        add("VALIDATE_PARAMETERS", "validate", /* @__PURE__ */ __name(function VALIDATE_PARAMETERS(req) {
          if (!req.service.api.operations) {
            return;
          }
          var rules = req.service.api.operations[req.operation].input;
          var validation = req.service.config.paramValidation;
          new AWS2.ParamValidator(validation).validate(rules, req.params);
        }, "VALIDATE_PARAMETERS"));
        add("COMPUTE_CHECKSUM", "afterBuild", /* @__PURE__ */ __name(function COMPUTE_CHECKSUM(req) {
          if (!req.service.api.operations) {
            return;
          }
          var operation = req.service.api.operations[req.operation];
          if (!operation) {
            return;
          }
          var body = req.httpRequest.body;
          var isNonStreamingPayload = body && (AWS2.util.Buffer.isBuffer(body) || typeof body === "string");
          var headers = req.httpRequest.headers;
          if (operation.httpChecksumRequired && req.service.config.computeChecksums && isNonStreamingPayload && !headers["Content-MD5"]) {
            var md52 = AWS2.util.crypto.md5(body, "base64");
            headers["Content-MD5"] = md52;
          }
        }, "COMPUTE_CHECKSUM"));
        addAsync("COMPUTE_SHA256", "afterBuild", /* @__PURE__ */ __name(function COMPUTE_SHA256(req, done) {
          req.haltHandlersOnError();
          if (!req.service.api.operations) {
            return;
          }
          var operation = req.service.api.operations[req.operation];
          var authtype = operation ? operation.authtype : "";
          if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion)
            return done();
          if (req.service.getSignerClass(req) === AWS2.Signers.V4) {
            var body = req.httpRequest.body || "";
            if (authtype.indexOf("unsigned-body") >= 0) {
              req.httpRequest.headers["X-Amz-Content-Sha256"] = "UNSIGNED-PAYLOAD";
              return done();
            }
            AWS2.util.computeSha256(body, function(err, sha) {
              if (err) {
                done(err);
              } else {
                req.httpRequest.headers["X-Amz-Content-Sha256"] = sha;
                done();
              }
            });
          } else {
            done();
          }
        }, "COMPUTE_SHA256"));
        add("SET_CONTENT_LENGTH", "afterBuild", /* @__PURE__ */ __name(function SET_CONTENT_LENGTH(req) {
          var authtype = getOperationAuthtype(req);
          var payloadMember = AWS2.util.getRequestPayloadShape(req);
          if (req.httpRequest.headers["Content-Length"] === void 0) {
            try {
              var length = AWS2.util.string.byteLength(req.httpRequest.body);
              req.httpRequest.headers["Content-Length"] = length;
            } catch (err) {
              if (payloadMember && payloadMember.isStreaming) {
                if (payloadMember.requiresLength) {
                  throw err;
                } else if (authtype.indexOf("unsigned-body") >= 0) {
                  req.httpRequest.headers["Transfer-Encoding"] = "chunked";
                  return;
                } else {
                  throw err;
                }
              }
              throw err;
            }
          }
        }, "SET_CONTENT_LENGTH"));
        add("SET_HTTP_HOST", "afterBuild", /* @__PURE__ */ __name(function SET_HTTP_HOST(req) {
          req.httpRequest.headers["Host"] = req.httpRequest.endpoint.host;
        }, "SET_HTTP_HOST"));
        add("SET_TRACE_ID", "afterBuild", /* @__PURE__ */ __name(function SET_TRACE_ID(req) {
          var traceIdHeaderName = "X-Amzn-Trace-Id";
          if (AWS2.util.isNode() && !Object.hasOwnProperty.call(req.httpRequest.headers, traceIdHeaderName)) {
            var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
            var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
            var functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
            var traceId = process.env[ENV_TRACE_ID];
            if (typeof functionName === "string" && functionName.length > 0 && typeof traceId === "string" && traceId.length > 0) {
              req.httpRequest.headers[traceIdHeaderName] = traceId;
            }
          }
        }, "SET_TRACE_ID"));
        add("RESTART", "restart", /* @__PURE__ */ __name(function RESTART() {
          var err = this.response.error;
          if (!err || !err.retryable)
            return;
          this.httpRequest = new AWS2.HttpRequest(
            this.service.endpoint,
            this.service.region
          );
          if (this.response.retryCount < this.service.config.maxRetries) {
            this.response.retryCount++;
          } else {
            this.response.error = null;
          }
        }, "RESTART"));
        var addToHead = true;
        addAsync("DISCOVER_ENDPOINT", "sign", DISCOVER_ENDPOINT, addToHead);
        addAsync("SIGN", "sign", /* @__PURE__ */ __name(function SIGN(req, done) {
          var service = req.service;
          var operations = req.service.api.operations || {};
          var operation = operations[req.operation];
          var authtype = operation ? operation.authtype : "";
          if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion)
            return done();
          if (authtype === "bearer" || service.config.signatureVersion === "bearer") {
            service.config.getToken(function(err, token) {
              if (err) {
                req.response.error = err;
                return done();
              }
              try {
                var SignerClass = service.getSignerClass(req);
                var signer = new SignerClass(req.httpRequest);
                signer.addAuthorization(token);
              } catch (e) {
                req.response.error = e;
              }
              done();
            });
          } else {
            service.config.getCredentials(function(err, credentials) {
              if (err) {
                req.response.error = err;
                return done();
              }
              try {
                var date = service.getSkewCorrectedDate();
                var SignerClass = service.getSignerClass(req);
                var signer = new SignerClass(
                  req.httpRequest,
                  service.getSigningName(req),
                  {
                    signatureCache: service.config.signatureCache,
                    operation,
                    signatureVersion: service.api.signatureVersion
                  }
                );
                signer.setServiceClientId(service._clientId);
                delete req.httpRequest.headers["Authorization"];
                delete req.httpRequest.headers["Date"];
                delete req.httpRequest.headers["X-Amz-Date"];
                signer.addAuthorization(credentials, date);
                req.signedAt = date;
              } catch (e) {
                req.response.error = e;
              }
              done();
            });
          }
        }, "SIGN"));
        add("VALIDATE_RESPONSE", "validateResponse", /* @__PURE__ */ __name(function VALIDATE_RESPONSE(resp) {
          if (this.service.successfulResponse(resp, this)) {
            resp.data = {};
            resp.error = null;
          } else {
            resp.data = null;
            resp.error = AWS2.util.error(
              new Error(),
              { code: "UnknownError", message: "An unknown error occurred." }
            );
          }
        }, "VALIDATE_RESPONSE"));
        add("ERROR", "error", /* @__PURE__ */ __name(function ERROR(err, resp) {
          var awsQueryCompatible = resp.request.service.api.awsQueryCompatible;
          if (awsQueryCompatible) {
            var headers = resp.httpResponse.headers;
            var queryErrorCode = headers ? headers["x-amzn-query-error"] : void 0;
            if (queryErrorCode && queryErrorCode.includes(";")) {
              resp.error.code = queryErrorCode.split(";")[0];
            }
          }
        }, "ERROR"), true);
        addAsync("SEND", "send", /* @__PURE__ */ __name(function SEND(resp, done) {
          resp.httpResponse._abortCallback = done;
          resp.error = null;
          resp.data = null;
          function callback(httpResp) {
            resp.httpResponse.stream = httpResp;
            var stream = resp.request.httpRequest.stream;
            var service = resp.request.service;
            var api = service.api;
            var operationName = resp.request.operation;
            var operation = api.operations[operationName] || {};
            httpResp.on("headers", /* @__PURE__ */ __name(function onHeaders(statusCode, headers, statusMessage) {
              resp.request.emit(
                "httpHeaders",
                [statusCode, headers, resp, statusMessage]
              );
              if (!resp.httpResponse.streaming) {
                if (AWS2.HttpClient.streamsApiVersion === 2) {
                  if (operation.hasEventOutput && service.successfulResponse(resp)) {
                    resp.request.emit("httpDone");
                    done();
                    return;
                  }
                  httpResp.on("readable", /* @__PURE__ */ __name(function onReadable() {
                    var data = httpResp.read();
                    if (data !== null) {
                      resp.request.emit("httpData", [data, resp]);
                    }
                  }, "onReadable"));
                } else {
                  httpResp.on("data", /* @__PURE__ */ __name(function onData(data) {
                    resp.request.emit("httpData", [data, resp]);
                  }, "onData"));
                }
              }
            }, "onHeaders"));
            httpResp.on("end", /* @__PURE__ */ __name(function onEnd() {
              if (!stream || !stream.didCallback) {
                if (AWS2.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {
                  return;
                }
                resp.request.emit("httpDone");
                done();
              }
            }, "onEnd"));
          }
          __name(callback, "callback");
          function progress(httpResp) {
            httpResp.on("sendProgress", /* @__PURE__ */ __name(function onSendProgress(value) {
              resp.request.emit("httpUploadProgress", [value, resp]);
            }, "onSendProgress"));
            httpResp.on("receiveProgress", /* @__PURE__ */ __name(function onReceiveProgress(value) {
              resp.request.emit("httpDownloadProgress", [value, resp]);
            }, "onReceiveProgress"));
          }
          __name(progress, "progress");
          function error(err) {
            if (err.code !== "RequestAbortedError") {
              var errCode = err.code === "TimeoutError" ? err.code : "NetworkingError";
              err = AWS2.util.error(err, {
                code: errCode,
                region: resp.request.httpRequest.region,
                hostname: resp.request.httpRequest.endpoint.hostname,
                retryable: true
              });
            }
            resp.error = err;
            resp.request.emit("httpError", [resp.error, resp], function() {
              done();
            });
          }
          __name(error, "error");
          function executeSend() {
            var http = AWS2.HttpClient.getInstance();
            var httpOptions = resp.request.service.config.httpOptions || {};
            try {
              var stream = http.handleRequest(
                resp.request.httpRequest,
                httpOptions,
                callback,
                error
              );
              progress(stream);
            } catch (err) {
              error(err);
            }
          }
          __name(executeSend, "executeSend");
          var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1e3;
          if (timeDiff >= 60 * 10) {
            this.emit("sign", [this], function(err) {
              if (err)
                done(err);
              else
                executeSend();
            });
          } else {
            executeSend();
          }
        }, "SEND"));
        add(
          "HTTP_HEADERS",
          "httpHeaders",
          /* @__PURE__ */ __name(function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
            resp.httpResponse.statusCode = statusCode;
            resp.httpResponse.statusMessage = statusMessage;
            resp.httpResponse.headers = headers;
            resp.httpResponse.body = AWS2.util.buffer.toBuffer("");
            resp.httpResponse.buffers = [];
            resp.httpResponse.numBytes = 0;
            var dateHeader = headers.date || headers.Date;
            var service = resp.request.service;
            if (dateHeader) {
              var serverTime = Date.parse(dateHeader);
              if (service.config.correctClockSkew && service.isClockSkewed(serverTime)) {
                service.applyClockOffset(serverTime);
              }
            }
          }, "HTTP_HEADERS")
        );
        add("HTTP_DATA", "httpData", /* @__PURE__ */ __name(function HTTP_DATA(chunk, resp) {
          if (chunk) {
            if (AWS2.util.isNode()) {
              resp.httpResponse.numBytes += chunk.length;
              var total = resp.httpResponse.headers["content-length"];
              var progress = { loaded: resp.httpResponse.numBytes, total };
              resp.request.emit("httpDownloadProgress", [progress, resp]);
            }
            resp.httpResponse.buffers.push(AWS2.util.buffer.toBuffer(chunk));
          }
        }, "HTTP_DATA"));
        add("HTTP_DONE", "httpDone", /* @__PURE__ */ __name(function HTTP_DONE(resp) {
          if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
            var body = AWS2.util.buffer.concat(resp.httpResponse.buffers);
            resp.httpResponse.body = body;
          }
          delete resp.httpResponse.numBytes;
          delete resp.httpResponse.buffers;
        }, "HTTP_DONE"));
        add("FINALIZE_ERROR", "retry", /* @__PURE__ */ __name(function FINALIZE_ERROR(resp) {
          if (resp.httpResponse.statusCode) {
            resp.error.statusCode = resp.httpResponse.statusCode;
            if (resp.error.retryable === void 0) {
              resp.error.retryable = this.service.retryableError(resp.error, this);
            }
          }
        }, "FINALIZE_ERROR"));
        add("INVALIDATE_CREDENTIALS", "retry", /* @__PURE__ */ __name(function INVALIDATE_CREDENTIALS(resp) {
          if (!resp.error)
            return;
          switch (resp.error.code) {
            case "RequestExpired":
            case "ExpiredTokenException":
            case "ExpiredToken":
              resp.error.retryable = true;
              resp.request.service.config.credentials.expired = true;
          }
        }, "INVALIDATE_CREDENTIALS"));
        add("EXPIRED_SIGNATURE", "retry", /* @__PURE__ */ __name(function EXPIRED_SIGNATURE(resp) {
          var err = resp.error;
          if (!err)
            return;
          if (typeof err.code === "string" && typeof err.message === "string") {
            if (err.code.match(/Signature/) && err.message.match(/expired/)) {
              resp.error.retryable = true;
            }
          }
        }, "EXPIRED_SIGNATURE"));
        add("CLOCK_SKEWED", "retry", /* @__PURE__ */ __name(function CLOCK_SKEWED(resp) {
          if (!resp.error)
            return;
          if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew) {
            resp.error.retryable = true;
          }
        }, "CLOCK_SKEWED"));
        add("REDIRECT", "retry", /* @__PURE__ */ __name(function REDIRECT(resp) {
          if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers["location"]) {
            this.httpRequest.endpoint = new AWS2.Endpoint(resp.httpResponse.headers["location"]);
            this.httpRequest.headers["Host"] = this.httpRequest.endpoint.host;
            resp.error.redirect = true;
            resp.error.retryable = true;
          }
        }, "REDIRECT"));
        add("RETRY_CHECK", "retry", /* @__PURE__ */ __name(function RETRY_CHECK(resp) {
          if (resp.error) {
            if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
              resp.error.retryDelay = 0;
            } else if (resp.retryCount < resp.maxRetries) {
              resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;
            }
          }
        }, "RETRY_CHECK"));
        addAsync("RESET_RETRY_STATE", "afterRetry", /* @__PURE__ */ __name(function RESET_RETRY_STATE(resp, done) {
          var delay, willRetry = false;
          if (resp.error) {
            delay = resp.error.retryDelay || 0;
            if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
              resp.retryCount++;
              willRetry = true;
            } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
              resp.redirectCount++;
              willRetry = true;
            }
          }
          if (willRetry && delay >= 0) {
            resp.error = null;
            setTimeout(done, delay);
          } else {
            done();
          }
        }, "RESET_RETRY_STATE"));
      }),
      CorePost: new SequentialExecutor().addNamedListeners(function(add) {
        add("EXTRACT_REQUEST_ID", "extractData", AWS2.util.extractRequestId);
        add("EXTRACT_REQUEST_ID", "extractError", AWS2.util.extractRequestId);
        add("ENOTFOUND_ERROR", "httpError", /* @__PURE__ */ __name(function ENOTFOUND_ERROR(err) {
          function isDNSError(err2) {
            return err2.errno === "ENOTFOUND" || typeof err2.errno === "number" && typeof AWS2.util.getSystemErrorName === "function" && ["EAI_NONAME", "EAI_NODATA"].indexOf(AWS2.util.getSystemErrorName(err2.errno) >= 0);
          }
          __name(isDNSError, "isDNSError");
          if (err.code === "NetworkingError" && isDNSError(err)) {
            var message = "Inaccessible host: `" + err.hostname + "' at port `" + err.port + "'. This service may not be available in the `" + err.region + "' region.";
            this.response.error = AWS2.util.error(new Error(message), {
              code: "UnknownEndpoint",
              region: err.region,
              hostname: err.hostname,
              retryable: true,
              originalError: err
            });
          }
        }, "ENOTFOUND_ERROR"));
      }),
      Logger: new SequentialExecutor().addNamedListeners(function(add) {
        add("LOG_REQUEST", "complete", /* @__PURE__ */ __name(function LOG_REQUEST(resp) {
          var req = resp.request;
          var logger = req.service.config.logger;
          if (!logger)
            return;
          function filterSensitiveLog(inputShape, shape) {
            if (!shape) {
              return shape;
            }
            if (inputShape.isSensitive) {
              return "***SensitiveInformation***";
            }
            switch (inputShape.type) {
              case "structure":
                var struct = {};
                AWS2.util.each(shape, function(subShapeName, subShape) {
                  if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
                    struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
                  } else {
                    struct[subShapeName] = subShape;
                  }
                });
                return struct;
              case "list":
                var list = [];
                AWS2.util.arrayEach(shape, function(subShape, index) {
                  list.push(filterSensitiveLog(inputShape.member, subShape));
                });
                return list;
              case "map":
                var map = {};
                AWS2.util.each(shape, function(key, value) {
                  map[key] = filterSensitiveLog(inputShape.value, value);
                });
                return map;
              default:
                return shape;
            }
          }
          __name(filterSensitiveLog, "filterSensitiveLog");
          function buildMessage() {
            var time = resp.request.service.getSkewCorrectedDate().getTime();
            var delta = (time - req.startTime.getTime()) / 1e3;
            var ansi = logger.isTTY ? true : false;
            var status = resp.httpResponse.statusCode;
            var censoredParams = req.params;
            if (req.service.api.operations && req.service.api.operations[req.operation] && req.service.api.operations[req.operation].input) {
              var inputShape = req.service.api.operations[req.operation].input;
              censoredParams = filterSensitiveLog(inputShape, req.params);
            }
            var params = __require("util").inspect(censoredParams, true, null);
            var message = "";
            if (ansi)
              message += "\x1B[33m";
            message += "[AWS " + req.service.serviceIdentifier + " " + status;
            message += " " + delta.toString() + "s " + resp.retryCount + " retries]";
            if (ansi)
              message += "\x1B[0;1m";
            message += " " + AWS2.util.string.lowerFirst(req.operation);
            message += "(" + params + ")";
            if (ansi)
              message += "\x1B[0m";
            return message;
          }
          __name(buildMessage, "buildMessage");
          var line = buildMessage();
          if (typeof logger.log === "function") {
            logger.log(line);
          } else if (typeof logger.write === "function") {
            logger.write(line + "\n");
          }
        }, "LOG_REQUEST"));
      }),
      Json: new SequentialExecutor().addNamedListeners(function(add) {
        var svc = require_json();
        add("BUILD", "build", svc.buildRequest);
        add("EXTRACT_DATA", "extractData", svc.extractData);
        add("EXTRACT_ERROR", "extractError", svc.extractError);
      }),
      Rest: new SequentialExecutor().addNamedListeners(function(add) {
        var svc = require_rest();
        add("BUILD", "build", svc.buildRequest);
        add("EXTRACT_DATA", "extractData", svc.extractData);
        add("EXTRACT_ERROR", "extractError", svc.extractError);
      }),
      RestJson: new SequentialExecutor().addNamedListeners(function(add) {
        var svc = require_rest_json();
        add("BUILD", "build", svc.buildRequest);
        add("EXTRACT_DATA", "extractData", svc.extractData);
        add("EXTRACT_ERROR", "extractError", svc.extractError);
        add("UNSET_CONTENT_LENGTH", "afterBuild", svc.unsetContentLength);
      }),
      RestXml: new SequentialExecutor().addNamedListeners(function(add) {
        var svc = require_rest_xml();
        add("BUILD", "build", svc.buildRequest);
        add("EXTRACT_DATA", "extractData", svc.extractData);
        add("EXTRACT_ERROR", "extractError", svc.extractError);
      }),
      Query: new SequentialExecutor().addNamedListeners(function(add) {
        var svc = require_query();
        add("BUILD", "build", svc.buildRequest);
        add("EXTRACT_DATA", "extractData", svc.extractData);
        add("EXTRACT_ERROR", "extractError", svc.extractError);
      })
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/state_machine.js
var require_state_machine = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/state_machine.js"(exports, module) {
    function AcceptorStateMachine(states, state) {
      this.currentState = state || null;
      this.states = states || {};
    }
    __name(AcceptorStateMachine, "AcceptorStateMachine");
    AcceptorStateMachine.prototype.runTo = /* @__PURE__ */ __name(function runTo(finalState, done, bindObject, inputError) {
      if (typeof finalState === "function") {
        inputError = bindObject;
        bindObject = done;
        done = finalState;
        finalState = null;
      }
      var self = this;
      var state = self.states[self.currentState];
      state.fn.call(bindObject || self, inputError, function(err) {
        if (err) {
          if (state.fail)
            self.currentState = state.fail;
          else
            return done ? done.call(bindObject, err) : null;
        } else {
          if (state.accept)
            self.currentState = state.accept;
          else
            return done ? done.call(bindObject) : null;
        }
        if (self.currentState === finalState) {
          return done ? done.call(bindObject, err) : null;
        }
        self.runTo(finalState, done, bindObject, err);
      });
    }, "runTo");
    AcceptorStateMachine.prototype.addState = /* @__PURE__ */ __name(function addState(name, acceptState, failState, fn) {
      if (typeof acceptState === "function") {
        fn = acceptState;
        acceptState = null;
        failState = null;
      } else if (typeof failState === "function") {
        fn = failState;
        failState = null;
      }
      if (!this.currentState)
        this.currentState = name;
      this.states[name] = { accept: acceptState, fail: failState, fn };
      return this;
    }, "addState");
    module.exports = AcceptorStateMachine;
  }
});

// ../../node_modules/.pnpm/jmespath@0.16.0/node_modules/jmespath/jmespath.js
var require_jmespath = __commonJS({
  "../../node_modules/.pnpm/jmespath@0.16.0/node_modules/jmespath/jmespath.js"(exports) {
    (function(exports2) {
      "use strict";
      function isArray(obj) {
        if (obj !== null) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        } else {
          return false;
        }
      }
      __name(isArray, "isArray");
      function isObject(obj) {
        if (obj !== null) {
          return Object.prototype.toString.call(obj) === "[object Object]";
        } else {
          return false;
        }
      }
      __name(isObject, "isObject");
      function strictDeepEqual(first, second) {
        if (first === second) {
          return true;
        }
        var firstType = Object.prototype.toString.call(first);
        if (firstType !== Object.prototype.toString.call(second)) {
          return false;
        }
        if (isArray(first) === true) {
          if (first.length !== second.length) {
            return false;
          }
          for (var i = 0; i < first.length; i++) {
            if (strictDeepEqual(first[i], second[i]) === false) {
              return false;
            }
          }
          return true;
        }
        if (isObject(first) === true) {
          var keysSeen = {};
          for (var key in first) {
            if (hasOwnProperty.call(first, key)) {
              if (strictDeepEqual(first[key], second[key]) === false) {
                return false;
              }
              keysSeen[key] = true;
            }
          }
          for (var key2 in second) {
            if (hasOwnProperty.call(second, key2)) {
              if (keysSeen[key2] !== true) {
                return false;
              }
            }
          }
          return true;
        }
        return false;
      }
      __name(strictDeepEqual, "strictDeepEqual");
      function isFalse(obj) {
        if (obj === "" || obj === false || obj === null) {
          return true;
        } else if (isArray(obj) && obj.length === 0) {
          return true;
        } else if (isObject(obj)) {
          for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      }
      __name(isFalse, "isFalse");
      function objValues(obj) {
        var keys = Object.keys(obj);
        var values = [];
        for (var i = 0; i < keys.length; i++) {
          values.push(obj[keys[i]]);
        }
        return values;
      }
      __name(objValues, "objValues");
      function merge(a, b) {
        var merged = {};
        for (var key in a) {
          merged[key] = a[key];
        }
        for (var key2 in b) {
          merged[key2] = b[key2];
        }
        return merged;
      }
      __name(merge, "merge");
      var trimLeft;
      if (typeof String.prototype.trimLeft === "function") {
        trimLeft = /* @__PURE__ */ __name(function(str) {
          return str.trimLeft();
        }, "trimLeft");
      } else {
        trimLeft = /* @__PURE__ */ __name(function(str) {
          return str.match(/^\s*(.*)/)[1];
        }, "trimLeft");
      }
      var TYPE_NUMBER = 0;
      var TYPE_ANY = 1;
      var TYPE_STRING = 2;
      var TYPE_ARRAY = 3;
      var TYPE_OBJECT = 4;
      var TYPE_BOOLEAN = 5;
      var TYPE_EXPREF = 6;
      var TYPE_NULL = 7;
      var TYPE_ARRAY_NUMBER = 8;
      var TYPE_ARRAY_STRING = 9;
      var TYPE_NAME_TABLE = {
        0: "number",
        1: "any",
        2: "string",
        3: "array",
        4: "object",
        5: "boolean",
        6: "expression",
        7: "null",
        8: "Array<number>",
        9: "Array<string>"
      };
      var TOK_EOF = "EOF";
      var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
      var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
      var TOK_RBRACKET = "Rbracket";
      var TOK_RPAREN = "Rparen";
      var TOK_COMMA = "Comma";
      var TOK_COLON = "Colon";
      var TOK_RBRACE = "Rbrace";
      var TOK_NUMBER = "Number";
      var TOK_CURRENT = "Current";
      var TOK_EXPREF = "Expref";
      var TOK_PIPE = "Pipe";
      var TOK_OR = "Or";
      var TOK_AND = "And";
      var TOK_EQ = "EQ";
      var TOK_GT = "GT";
      var TOK_LT = "LT";
      var TOK_GTE = "GTE";
      var TOK_LTE = "LTE";
      var TOK_NE = "NE";
      var TOK_FLATTEN = "Flatten";
      var TOK_STAR = "Star";
      var TOK_FILTER = "Filter";
      var TOK_DOT = "Dot";
      var TOK_NOT = "Not";
      var TOK_LBRACE = "Lbrace";
      var TOK_LBRACKET = "Lbracket";
      var TOK_LPAREN = "Lparen";
      var TOK_LITERAL = "Literal";
      var basicTokens = {
        ".": TOK_DOT,
        "*": TOK_STAR,
        ",": TOK_COMMA,
        ":": TOK_COLON,
        "{": TOK_LBRACE,
        "}": TOK_RBRACE,
        "]": TOK_RBRACKET,
        "(": TOK_LPAREN,
        ")": TOK_RPAREN,
        "@": TOK_CURRENT
      };
      var operatorStartToken = {
        "<": true,
        ">": true,
        "=": true,
        "!": true
      };
      var skipChars = {
        " ": true,
        "	": true,
        "\n": true
      };
      function isAlpha(ch) {
        return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch === "_";
      }
      __name(isAlpha, "isAlpha");
      function isNum(ch) {
        return ch >= "0" && ch <= "9" || ch === "-";
      }
      __name(isNum, "isNum");
      function isAlphaNum(ch) {
        return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch === "_";
      }
      __name(isAlphaNum, "isAlphaNum");
      function Lexer() {
      }
      __name(Lexer, "Lexer");
      Lexer.prototype = {
        tokenize: function(stream) {
          var tokens = [];
          this._current = 0;
          var start;
          var identifier;
          var token;
          while (this._current < stream.length) {
            if (isAlpha(stream[this._current])) {
              start = this._current;
              identifier = this._consumeUnquotedIdentifier(stream);
              tokens.push({
                type: TOK_UNQUOTEDIDENTIFIER,
                value: identifier,
                start
              });
            } else if (basicTokens[stream[this._current]] !== void 0) {
              tokens.push({
                type: basicTokens[stream[this._current]],
                value: stream[this._current],
                start: this._current
              });
              this._current++;
            } else if (isNum(stream[this._current])) {
              token = this._consumeNumber(stream);
              tokens.push(token);
            } else if (stream[this._current] === "[") {
              token = this._consumeLBracket(stream);
              tokens.push(token);
            } else if (stream[this._current] === '"') {
              start = this._current;
              identifier = this._consumeQuotedIdentifier(stream);
              tokens.push({
                type: TOK_QUOTEDIDENTIFIER,
                value: identifier,
                start
              });
            } else if (stream[this._current] === "'") {
              start = this._current;
              identifier = this._consumeRawStringLiteral(stream);
              tokens.push({
                type: TOK_LITERAL,
                value: identifier,
                start
              });
            } else if (stream[this._current] === "`") {
              start = this._current;
              var literal = this._consumeLiteral(stream);
              tokens.push({
                type: TOK_LITERAL,
                value: literal,
                start
              });
            } else if (operatorStartToken[stream[this._current]] !== void 0) {
              tokens.push(this._consumeOperator(stream));
            } else if (skipChars[stream[this._current]] !== void 0) {
              this._current++;
            } else if (stream[this._current] === "&") {
              start = this._current;
              this._current++;
              if (stream[this._current] === "&") {
                this._current++;
                tokens.push({ type: TOK_AND, value: "&&", start });
              } else {
                tokens.push({ type: TOK_EXPREF, value: "&", start });
              }
            } else if (stream[this._current] === "|") {
              start = this._current;
              this._current++;
              if (stream[this._current] === "|") {
                this._current++;
                tokens.push({ type: TOK_OR, value: "||", start });
              } else {
                tokens.push({ type: TOK_PIPE, value: "|", start });
              }
            } else {
              var error = new Error("Unknown character:" + stream[this._current]);
              error.name = "LexerError";
              throw error;
            }
          }
          return tokens;
        },
        _consumeUnquotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          while (this._current < stream.length && isAlphaNum(stream[this._current])) {
            this._current++;
          }
          return stream.slice(start, this._current);
        },
        _consumeQuotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== '"' && this._current < maxLength) {
            var current = this._current;
            if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === '"')) {
              current += 2;
            } else {
              current++;
            }
            this._current = current;
          }
          this._current++;
          return JSON.parse(stream.slice(start, this._current));
        },
        _consumeRawStringLiteral: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== "'" && this._current < maxLength) {
            var current = this._current;
            if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === "'")) {
              current += 2;
            } else {
              current++;
            }
            this._current = current;
          }
          this._current++;
          var literal = stream.slice(start + 1, this._current - 1);
          return literal.replace("\\'", "'");
        },
        _consumeNumber: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (isNum(stream[this._current]) && this._current < maxLength) {
            this._current++;
          }
          var value = parseInt(stream.slice(start, this._current));
          return { type: TOK_NUMBER, value, start };
        },
        _consumeLBracket: function(stream) {
          var start = this._current;
          this._current++;
          if (stream[this._current] === "?") {
            this._current++;
            return { type: TOK_FILTER, value: "[?", start };
          } else if (stream[this._current] === "]") {
            this._current++;
            return { type: TOK_FLATTEN, value: "[]", start };
          } else {
            return { type: TOK_LBRACKET, value: "[", start };
          }
        },
        _consumeOperator: function(stream) {
          var start = this._current;
          var startingChar = stream[start];
          this._current++;
          if (startingChar === "!") {
            if (stream[this._current] === "=") {
              this._current++;
              return { type: TOK_NE, value: "!=", start };
            } else {
              return { type: TOK_NOT, value: "!", start };
            }
          } else if (startingChar === "<") {
            if (stream[this._current] === "=") {
              this._current++;
              return { type: TOK_LTE, value: "<=", start };
            } else {
              return { type: TOK_LT, value: "<", start };
            }
          } else if (startingChar === ">") {
            if (stream[this._current] === "=") {
              this._current++;
              return { type: TOK_GTE, value: ">=", start };
            } else {
              return { type: TOK_GT, value: ">", start };
            }
          } else if (startingChar === "=") {
            if (stream[this._current] === "=") {
              this._current++;
              return { type: TOK_EQ, value: "==", start };
            }
          }
        },
        _consumeLiteral: function(stream) {
          this._current++;
          var start = this._current;
          var maxLength = stream.length;
          var literal;
          while (stream[this._current] !== "`" && this._current < maxLength) {
            var current = this._current;
            if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === "`")) {
              current += 2;
            } else {
              current++;
            }
            this._current = current;
          }
          var literalString = trimLeft(stream.slice(start, this._current));
          literalString = literalString.replace("\\`", "`");
          if (this._looksLikeJSON(literalString)) {
            literal = JSON.parse(literalString);
          } else {
            literal = JSON.parse('"' + literalString + '"');
          }
          this._current++;
          return literal;
        },
        _looksLikeJSON: function(literalString) {
          var startingChars = '[{"';
          var jsonLiterals = ["true", "false", "null"];
          var numberLooking = "-0123456789";
          if (literalString === "") {
            return false;
          } else if (startingChars.indexOf(literalString[0]) >= 0) {
            return true;
          } else if (jsonLiterals.indexOf(literalString) >= 0) {
            return true;
          } else if (numberLooking.indexOf(literalString[0]) >= 0) {
            try {
              JSON.parse(literalString);
              return true;
            } catch (ex) {
              return false;
            }
          } else {
            return false;
          }
        }
      };
      var bindingPower = {};
      bindingPower[TOK_EOF] = 0;
      bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_RBRACKET] = 0;
      bindingPower[TOK_RPAREN] = 0;
      bindingPower[TOK_COMMA] = 0;
      bindingPower[TOK_RBRACE] = 0;
      bindingPower[TOK_NUMBER] = 0;
      bindingPower[TOK_CURRENT] = 0;
      bindingPower[TOK_EXPREF] = 0;
      bindingPower[TOK_PIPE] = 1;
      bindingPower[TOK_OR] = 2;
      bindingPower[TOK_AND] = 3;
      bindingPower[TOK_EQ] = 5;
      bindingPower[TOK_GT] = 5;
      bindingPower[TOK_LT] = 5;
      bindingPower[TOK_GTE] = 5;
      bindingPower[TOK_LTE] = 5;
      bindingPower[TOK_NE] = 5;
      bindingPower[TOK_FLATTEN] = 9;
      bindingPower[TOK_STAR] = 20;
      bindingPower[TOK_FILTER] = 21;
      bindingPower[TOK_DOT] = 40;
      bindingPower[TOK_NOT] = 45;
      bindingPower[TOK_LBRACE] = 50;
      bindingPower[TOK_LBRACKET] = 55;
      bindingPower[TOK_LPAREN] = 60;
      function Parser() {
      }
      __name(Parser, "Parser");
      Parser.prototype = {
        parse: function(expression) {
          this._loadTokens(expression);
          this.index = 0;
          var ast = this.expression(0);
          if (this._lookahead(0) !== TOK_EOF) {
            var t = this._lookaheadToken(0);
            var error = new Error(
              "Unexpected token type: " + t.type + ", value: " + t.value
            );
            error.name = "ParserError";
            throw error;
          }
          return ast;
        },
        _loadTokens: function(expression) {
          var lexer = new Lexer();
          var tokens = lexer.tokenize(expression);
          tokens.push({ type: TOK_EOF, value: "", start: expression.length });
          this.tokens = tokens;
        },
        expression: function(rbp) {
          var leftToken = this._lookaheadToken(0);
          this._advance();
          var left = this.nud(leftToken);
          var currentToken = this._lookahead(0);
          while (rbp < bindingPower[currentToken]) {
            this._advance();
            left = this.led(currentToken, left);
            currentToken = this._lookahead(0);
          }
          return left;
        },
        _lookahead: function(number) {
          return this.tokens[this.index + number].type;
        },
        _lookaheadToken: function(number) {
          return this.tokens[this.index + number];
        },
        _advance: function() {
          this.index++;
        },
        nud: function(token) {
          var left;
          var right;
          var expression;
          switch (token.type) {
            case TOK_LITERAL:
              return { type: "Literal", value: token.value };
            case TOK_UNQUOTEDIDENTIFIER:
              return { type: "Field", name: token.value };
            case TOK_QUOTEDIDENTIFIER:
              var node = { type: "Field", name: token.value };
              if (this._lookahead(0) === TOK_LPAREN) {
                throw new Error("Quoted identifier not allowed for function names.");
              }
              return node;
            case TOK_NOT:
              right = this.expression(bindingPower.Not);
              return { type: "NotExpression", children: [right] };
            case TOK_STAR:
              left = { type: "Identity" };
              right = null;
              if (this._lookahead(0) === TOK_RBRACKET) {
                right = { type: "Identity" };
              } else {
                right = this._parseProjectionRHS(bindingPower.Star);
              }
              return { type: "ValueProjection", children: [left, right] };
            case TOK_FILTER:
              return this.led(token.type, { type: "Identity" });
            case TOK_LBRACE:
              return this._parseMultiselectHash();
            case TOK_FLATTEN:
              left = { type: TOK_FLATTEN, children: [{ type: "Identity" }] };
              right = this._parseProjectionRHS(bindingPower.Flatten);
              return { type: "Projection", children: [left, right] };
            case TOK_LBRACKET:
              if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice({ type: "Identity" }, right);
              } else if (this._lookahead(0) === TOK_STAR && this._lookahead(1) === TOK_RBRACKET) {
                this._advance();
                this._advance();
                right = this._parseProjectionRHS(bindingPower.Star);
                return {
                  type: "Projection",
                  children: [{ type: "Identity" }, right]
                };
              }
              return this._parseMultiselectList();
            case TOK_CURRENT:
              return { type: TOK_CURRENT };
            case TOK_EXPREF:
              expression = this.expression(bindingPower.Expref);
              return { type: "ExpressionReference", children: [expression] };
            case TOK_LPAREN:
              var args = [];
              while (this._lookahead(0) !== TOK_RPAREN) {
                if (this._lookahead(0) === TOK_CURRENT) {
                  expression = { type: TOK_CURRENT };
                  this._advance();
                } else {
                  expression = this.expression(0);
                }
                args.push(expression);
              }
              this._match(TOK_RPAREN);
              return args[0];
            default:
              this._errorToken(token);
          }
        },
        led: function(tokenName, left) {
          var right;
          switch (tokenName) {
            case TOK_DOT:
              var rbp = bindingPower.Dot;
              if (this._lookahead(0) !== TOK_STAR) {
                right = this._parseDotRHS(rbp);
                return { type: "Subexpression", children: [left, right] };
              }
              this._advance();
              right = this._parseProjectionRHS(rbp);
              return { type: "ValueProjection", children: [left, right] };
            case TOK_PIPE:
              right = this.expression(bindingPower.Pipe);
              return { type: TOK_PIPE, children: [left, right] };
            case TOK_OR:
              right = this.expression(bindingPower.Or);
              return { type: "OrExpression", children: [left, right] };
            case TOK_AND:
              right = this.expression(bindingPower.And);
              return { type: "AndExpression", children: [left, right] };
            case TOK_LPAREN:
              var name = left.name;
              var args = [];
              var expression, node;
              while (this._lookahead(0) !== TOK_RPAREN) {
                if (this._lookahead(0) === TOK_CURRENT) {
                  expression = { type: TOK_CURRENT };
                  this._advance();
                } else {
                  expression = this.expression(0);
                }
                if (this._lookahead(0) === TOK_COMMA) {
                  this._match(TOK_COMMA);
                }
                args.push(expression);
              }
              this._match(TOK_RPAREN);
              node = { type: "Function", name, children: args };
              return node;
            case TOK_FILTER:
              var condition = this.expression(0);
              this._match(TOK_RBRACKET);
              if (this._lookahead(0) === TOK_FLATTEN) {
                right = { type: "Identity" };
              } else {
                right = this._parseProjectionRHS(bindingPower.Filter);
              }
              return { type: "FilterProjection", children: [left, right, condition] };
            case TOK_FLATTEN:
              var leftNode = { type: TOK_FLATTEN, children: [left] };
              var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
              return { type: "Projection", children: [leftNode, rightNode] };
            case TOK_EQ:
            case TOK_NE:
            case TOK_GT:
            case TOK_GTE:
            case TOK_LT:
            case TOK_LTE:
              return this._parseComparator(left, tokenName);
            case TOK_LBRACKET:
              var token = this._lookaheadToken(0);
              if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice(left, right);
              }
              this._match(TOK_STAR);
              this._match(TOK_RBRACKET);
              right = this._parseProjectionRHS(bindingPower.Star);
              return { type: "Projection", children: [left, right] };
            default:
              this._errorToken(this._lookaheadToken(0));
          }
        },
        _match: function(tokenType) {
          if (this._lookahead(0) === tokenType) {
            this._advance();
          } else {
            var t = this._lookaheadToken(0);
            var error = new Error("Expected " + tokenType + ", got: " + t.type);
            error.name = "ParserError";
            throw error;
          }
        },
        _errorToken: function(token) {
          var error = new Error("Invalid token (" + token.type + '): "' + token.value + '"');
          error.name = "ParserError";
          throw error;
        },
        _parseIndexExpression: function() {
          if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
            return this._parseSliceExpression();
          } else {
            var node = {
              type: "Index",
              value: this._lookaheadToken(0).value
            };
            this._advance();
            this._match(TOK_RBRACKET);
            return node;
          }
        },
        _projectIfSlice: function(left, right) {
          var indexExpr = { type: "IndexExpression", children: [left, right] };
          if (right.type === "Slice") {
            return {
              type: "Projection",
              children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
            };
          } else {
            return indexExpr;
          }
        },
        _parseSliceExpression: function() {
          var parts = [null, null, null];
          var index = 0;
          var currentToken = this._lookahead(0);
          while (currentToken !== TOK_RBRACKET && index < 3) {
            if (currentToken === TOK_COLON) {
              index++;
              this._advance();
            } else if (currentToken === TOK_NUMBER) {
              parts[index] = this._lookaheadToken(0).value;
              this._advance();
            } else {
              var t = this._lookahead(0);
              var error = new Error("Syntax error, unexpected token: " + t.value + "(" + t.type + ")");
              error.name = "Parsererror";
              throw error;
            }
            currentToken = this._lookahead(0);
          }
          this._match(TOK_RBRACKET);
          return {
            type: "Slice",
            children: parts
          };
        },
        _parseComparator: function(left, comparator) {
          var right = this.expression(bindingPower[comparator]);
          return { type: "Comparator", name: comparator, children: [left, right] };
        },
        _parseDotRHS: function(rbp) {
          var lookahead = this._lookahead(0);
          var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
          if (exprTokens.indexOf(lookahead) >= 0) {
            return this.expression(rbp);
          } else if (lookahead === TOK_LBRACKET) {
            this._match(TOK_LBRACKET);
            return this._parseMultiselectList();
          } else if (lookahead === TOK_LBRACE) {
            this._match(TOK_LBRACE);
            return this._parseMultiselectHash();
          }
        },
        _parseProjectionRHS: function(rbp) {
          var right;
          if (bindingPower[this._lookahead(0)] < 10) {
            right = { type: "Identity" };
          } else if (this._lookahead(0) === TOK_LBRACKET) {
            right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_FILTER) {
            right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_DOT) {
            this._match(TOK_DOT);
            right = this._parseDotRHS(rbp);
          } else {
            var t = this._lookaheadToken(0);
            var error = new Error("Sytanx error, unexpected token: " + t.value + "(" + t.type + ")");
            error.name = "ParserError";
            throw error;
          }
          return right;
        },
        _parseMultiselectList: function() {
          var expressions = [];
          while (this._lookahead(0) !== TOK_RBRACKET) {
            var expression = this.expression(0);
            expressions.push(expression);
            if (this._lookahead(0) === TOK_COMMA) {
              this._match(TOK_COMMA);
              if (this._lookahead(0) === TOK_RBRACKET) {
                throw new Error("Unexpected token Rbracket");
              }
            }
          }
          this._match(TOK_RBRACKET);
          return { type: "MultiSelectList", children: expressions };
        },
        _parseMultiselectHash: function() {
          var pairs = [];
          var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
          var keyToken, keyName, value, node;
          for (; ; ) {
            keyToken = this._lookaheadToken(0);
            if (identifierTypes.indexOf(keyToken.type) < 0) {
              throw new Error("Expecting an identifier token, got: " + keyToken.type);
            }
            keyName = keyToken.value;
            this._advance();
            this._match(TOK_COLON);
            value = this.expression(0);
            node = { type: "KeyValuePair", name: keyName, value };
            pairs.push(node);
            if (this._lookahead(0) === TOK_COMMA) {
              this._match(TOK_COMMA);
            } else if (this._lookahead(0) === TOK_RBRACE) {
              this._match(TOK_RBRACE);
              break;
            }
          }
          return { type: "MultiSelectHash", children: pairs };
        }
      };
      function TreeInterpreter(runtime) {
        this.runtime = runtime;
      }
      __name(TreeInterpreter, "TreeInterpreter");
      TreeInterpreter.prototype = {
        search: function(node, value) {
          return this.visit(node, value);
        },
        visit: function(node, value) {
          var matched, current, result, first, second, field, left, right, collected, i;
          switch (node.type) {
            case "Field":
              if (value !== null && isObject(value)) {
                field = value[node.name];
                if (field === void 0) {
                  return null;
                } else {
                  return field;
                }
              }
              return null;
            case "Subexpression":
              result = this.visit(node.children[0], value);
              for (i = 1; i < node.children.length; i++) {
                result = this.visit(node.children[1], result);
                if (result === null) {
                  return null;
                }
              }
              return result;
            case "IndexExpression":
              left = this.visit(node.children[0], value);
              right = this.visit(node.children[1], left);
              return right;
            case "Index":
              if (!isArray(value)) {
                return null;
              }
              var index = node.value;
              if (index < 0) {
                index = value.length + index;
              }
              result = value[index];
              if (result === void 0) {
                result = null;
              }
              return result;
            case "Slice":
              if (!isArray(value)) {
                return null;
              }
              var sliceParams = node.children.slice(0);
              var computed = this.computeSliceParams(value.length, sliceParams);
              var start = computed[0];
              var stop = computed[1];
              var step = computed[2];
              result = [];
              if (step > 0) {
                for (i = start; i < stop; i += step) {
                  result.push(value[i]);
                }
              } else {
                for (i = start; i > stop; i += step) {
                  result.push(value[i]);
                }
              }
              return result;
            case "Projection":
              var base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              collected = [];
              for (i = 0; i < base.length; i++) {
                current = this.visit(node.children[1], base[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "ValueProjection":
              base = this.visit(node.children[0], value);
              if (!isObject(base)) {
                return null;
              }
              collected = [];
              var values = objValues(base);
              for (i = 0; i < values.length; i++) {
                current = this.visit(node.children[1], values[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "FilterProjection":
              base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              var filtered = [];
              var finalResults = [];
              for (i = 0; i < base.length; i++) {
                matched = this.visit(node.children[2], base[i]);
                if (!isFalse(matched)) {
                  filtered.push(base[i]);
                }
              }
              for (var j = 0; j < filtered.length; j++) {
                current = this.visit(node.children[1], filtered[j]);
                if (current !== null) {
                  finalResults.push(current);
                }
              }
              return finalResults;
            case "Comparator":
              first = this.visit(node.children[0], value);
              second = this.visit(node.children[1], value);
              switch (node.name) {
                case TOK_EQ:
                  result = strictDeepEqual(first, second);
                  break;
                case TOK_NE:
                  result = !strictDeepEqual(first, second);
                  break;
                case TOK_GT:
                  result = first > second;
                  break;
                case TOK_GTE:
                  result = first >= second;
                  break;
                case TOK_LT:
                  result = first < second;
                  break;
                case TOK_LTE:
                  result = first <= second;
                  break;
                default:
                  throw new Error("Unknown comparator: " + node.name);
              }
              return result;
            case TOK_FLATTEN:
              var original = this.visit(node.children[0], value);
              if (!isArray(original)) {
                return null;
              }
              var merged = [];
              for (i = 0; i < original.length; i++) {
                current = original[i];
                if (isArray(current)) {
                  merged.push.apply(merged, current);
                } else {
                  merged.push(current);
                }
              }
              return merged;
            case "Identity":
              return value;
            case "MultiSelectList":
              if (value === null) {
                return null;
              }
              collected = [];
              for (i = 0; i < node.children.length; i++) {
                collected.push(this.visit(node.children[i], value));
              }
              return collected;
            case "MultiSelectHash":
              if (value === null) {
                return null;
              }
              collected = {};
              var child;
              for (i = 0; i < node.children.length; i++) {
                child = node.children[i];
                collected[child.name] = this.visit(child.value, value);
              }
              return collected;
            case "OrExpression":
              matched = this.visit(node.children[0], value);
              if (isFalse(matched)) {
                matched = this.visit(node.children[1], value);
              }
              return matched;
            case "AndExpression":
              first = this.visit(node.children[0], value);
              if (isFalse(first) === true) {
                return first;
              }
              return this.visit(node.children[1], value);
            case "NotExpression":
              first = this.visit(node.children[0], value);
              return isFalse(first);
            case "Literal":
              return node.value;
            case TOK_PIPE:
              left = this.visit(node.children[0], value);
              return this.visit(node.children[1], left);
            case TOK_CURRENT:
              return value;
            case "Function":
              var resolvedArgs = [];
              for (i = 0; i < node.children.length; i++) {
                resolvedArgs.push(this.visit(node.children[i], value));
              }
              return this.runtime.callFunction(node.name, resolvedArgs);
            case "ExpressionReference":
              var refNode = node.children[0];
              refNode.jmespathType = TOK_EXPREF;
              return refNode;
            default:
              throw new Error("Unknown node type: " + node.type);
          }
        },
        computeSliceParams: function(arrayLength, sliceParams) {
          var start = sliceParams[0];
          var stop = sliceParams[1];
          var step = sliceParams[2];
          var computed = [null, null, null];
          if (step === null) {
            step = 1;
          } else if (step === 0) {
            var error = new Error("Invalid slice, step cannot be 0");
            error.name = "RuntimeError";
            throw error;
          }
          var stepValueNegative = step < 0 ? true : false;
          if (start === null) {
            start = stepValueNegative ? arrayLength - 1 : 0;
          } else {
            start = this.capSliceRange(arrayLength, start, step);
          }
          if (stop === null) {
            stop = stepValueNegative ? -1 : arrayLength;
          } else {
            stop = this.capSliceRange(arrayLength, stop, step);
          }
          computed[0] = start;
          computed[1] = stop;
          computed[2] = step;
          return computed;
        },
        capSliceRange: function(arrayLength, actualValue, step) {
          if (actualValue < 0) {
            actualValue += arrayLength;
            if (actualValue < 0) {
              actualValue = step < 0 ? -1 : 0;
            }
          } else if (actualValue >= arrayLength) {
            actualValue = step < 0 ? arrayLength - 1 : arrayLength;
          }
          return actualValue;
        }
      };
      function Runtime(interpreter) {
        this._interpreter = interpreter;
        this.functionTable = {
          abs: { _func: this._functionAbs, _signature: [{ types: [TYPE_NUMBER] }] },
          avg: { _func: this._functionAvg, _signature: [{ types: [TYPE_ARRAY_NUMBER] }] },
          ceil: { _func: this._functionCeil, _signature: [{ types: [TYPE_NUMBER] }] },
          contains: {
            _func: this._functionContains,
            _signature: [
              { types: [TYPE_STRING, TYPE_ARRAY] },
              { types: [TYPE_ANY] }
            ]
          },
          "ends_with": {
            _func: this._functionEndsWith,
            _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }]
          },
          floor: { _func: this._functionFloor, _signature: [{ types: [TYPE_NUMBER] }] },
          length: {
            _func: this._functionLength,
            _signature: [{ types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT] }]
          },
          map: {
            _func: this._functionMap,
            _signature: [{ types: [TYPE_EXPREF] }, { types: [TYPE_ARRAY] }]
          },
          max: {
            _func: this._functionMax,
            _signature: [{ types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }]
          },
          "merge": {
            _func: this._functionMerge,
            _signature: [{ types: [TYPE_OBJECT], variadic: true }]
          },
          "max_by": {
            _func: this._functionMaxBy,
            _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }]
          },
          sum: { _func: this._functionSum, _signature: [{ types: [TYPE_ARRAY_NUMBER] }] },
          "starts_with": {
            _func: this._functionStartsWith,
            _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }]
          },
          min: {
            _func: this._functionMin,
            _signature: [{ types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING] }]
          },
          "min_by": {
            _func: this._functionMinBy,
            _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }]
          },
          type: { _func: this._functionType, _signature: [{ types: [TYPE_ANY] }] },
          keys: { _func: this._functionKeys, _signature: [{ types: [TYPE_OBJECT] }] },
          values: { _func: this._functionValues, _signature: [{ types: [TYPE_OBJECT] }] },
          sort: { _func: this._functionSort, _signature: [{ types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER] }] },
          "sort_by": {
            _func: this._functionSortBy,
            _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }]
          },
          join: {
            _func: this._functionJoin,
            _signature: [
              { types: [TYPE_STRING] },
              { types: [TYPE_ARRAY_STRING] }
            ]
          },
          reverse: {
            _func: this._functionReverse,
            _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] }]
          },
          "to_array": { _func: this._functionToArray, _signature: [{ types: [TYPE_ANY] }] },
          "to_string": { _func: this._functionToString, _signature: [{ types: [TYPE_ANY] }] },
          "to_number": { _func: this._functionToNumber, _signature: [{ types: [TYPE_ANY] }] },
          "not_null": {
            _func: this._functionNotNull,
            _signature: [{ types: [TYPE_ANY], variadic: true }]
          }
        };
      }
      __name(Runtime, "Runtime");
      Runtime.prototype = {
        callFunction: function(name, resolvedArgs) {
          var functionEntry = this.functionTable[name];
          if (functionEntry === void 0) {
            throw new Error("Unknown function: " + name + "()");
          }
          this._validateArgs(name, resolvedArgs, functionEntry._signature);
          return functionEntry._func.call(this, resolvedArgs);
        },
        _validateArgs: function(name, args, signature) {
          var pluralized;
          if (signature[signature.length - 1].variadic) {
            if (args.length < signature.length) {
              pluralized = signature.length === 1 ? " argument" : " arguments";
              throw new Error("ArgumentError: " + name + "() takes at least" + signature.length + pluralized + " but received " + args.length);
            }
          } else if (args.length !== signature.length) {
            pluralized = signature.length === 1 ? " argument" : " arguments";
            throw new Error("ArgumentError: " + name + "() takes " + signature.length + pluralized + " but received " + args.length);
          }
          var currentSpec;
          var actualType;
          var typeMatched;
          for (var i = 0; i < signature.length; i++) {
            typeMatched = false;
            currentSpec = signature[i].types;
            actualType = this._getTypeName(args[i]);
            for (var j = 0; j < currentSpec.length; j++) {
              if (this._typeMatches(actualType, currentSpec[j], args[i])) {
                typeMatched = true;
                break;
              }
            }
            if (!typeMatched) {
              var expected = currentSpec.map(function(typeIdentifier) {
                return TYPE_NAME_TABLE[typeIdentifier];
              }).join(",");
              throw new Error("TypeError: " + name + "() expected argument " + (i + 1) + " to be type " + expected + " but received type " + TYPE_NAME_TABLE[actualType] + " instead.");
            }
          }
        },
        _typeMatches: function(actual, expected, argValue) {
          if (expected === TYPE_ANY) {
            return true;
          }
          if (expected === TYPE_ARRAY_STRING || expected === TYPE_ARRAY_NUMBER || expected === TYPE_ARRAY) {
            if (expected === TYPE_ARRAY) {
              return actual === TYPE_ARRAY;
            } else if (actual === TYPE_ARRAY) {
              var subtype;
              if (expected === TYPE_ARRAY_NUMBER) {
                subtype = TYPE_NUMBER;
              } else if (expected === TYPE_ARRAY_STRING) {
                subtype = TYPE_STRING;
              }
              for (var i = 0; i < argValue.length; i++) {
                if (!this._typeMatches(
                  this._getTypeName(argValue[i]),
                  subtype,
                  argValue[i]
                )) {
                  return false;
                }
              }
              return true;
            }
          } else {
            return actual === expected;
          }
        },
        _getTypeName: function(obj) {
          switch (Object.prototype.toString.call(obj)) {
            case "[object String]":
              return TYPE_STRING;
            case "[object Number]":
              return TYPE_NUMBER;
            case "[object Array]":
              return TYPE_ARRAY;
            case "[object Boolean]":
              return TYPE_BOOLEAN;
            case "[object Null]":
              return TYPE_NULL;
            case "[object Object]":
              if (obj.jmespathType === TOK_EXPREF) {
                return TYPE_EXPREF;
              } else {
                return TYPE_OBJECT;
              }
          }
        },
        _functionStartsWith: function(resolvedArgs) {
          return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
        },
        _functionEndsWith: function(resolvedArgs) {
          var searchStr = resolvedArgs[0];
          var suffix = resolvedArgs[1];
          return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
        },
        _functionReverse: function(resolvedArgs) {
          var typeName = this._getTypeName(resolvedArgs[0]);
          if (typeName === TYPE_STRING) {
            var originalStr = resolvedArgs[0];
            var reversedStr = "";
            for (var i = originalStr.length - 1; i >= 0; i--) {
              reversedStr += originalStr[i];
            }
            return reversedStr;
          } else {
            var reversedArray = resolvedArgs[0].slice(0);
            reversedArray.reverse();
            return reversedArray;
          }
        },
        _functionAbs: function(resolvedArgs) {
          return Math.abs(resolvedArgs[0]);
        },
        _functionCeil: function(resolvedArgs) {
          return Math.ceil(resolvedArgs[0]);
        },
        _functionAvg: function(resolvedArgs) {
          var sum = 0;
          var inputArray = resolvedArgs[0];
          for (var i = 0; i < inputArray.length; i++) {
            sum += inputArray[i];
          }
          return sum / inputArray.length;
        },
        _functionContains: function(resolvedArgs) {
          return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
        },
        _functionFloor: function(resolvedArgs) {
          return Math.floor(resolvedArgs[0]);
        },
        _functionLength: function(resolvedArgs) {
          if (!isObject(resolvedArgs[0])) {
            return resolvedArgs[0].length;
          } else {
            return Object.keys(resolvedArgs[0]).length;
          }
        },
        _functionMap: function(resolvedArgs) {
          var mapped = [];
          var interpreter = this._interpreter;
          var exprefNode = resolvedArgs[0];
          var elements = resolvedArgs[1];
          for (var i = 0; i < elements.length; i++) {
            mapped.push(interpreter.visit(exprefNode, elements[i]));
          }
          return mapped;
        },
        _functionMerge: function(resolvedArgs) {
          var merged = {};
          for (var i = 0; i < resolvedArgs.length; i++) {
            var current = resolvedArgs[i];
            for (var key in current) {
              merged[key] = current[key];
            }
          }
          return merged;
        },
        _functionMax: function(resolvedArgs) {
          if (resolvedArgs[0].length > 0) {
            var typeName = this._getTypeName(resolvedArgs[0][0]);
            if (typeName === TYPE_NUMBER) {
              return Math.max.apply(Math, resolvedArgs[0]);
            } else {
              var elements = resolvedArgs[0];
              var maxElement = elements[0];
              for (var i = 1; i < elements.length; i++) {
                if (maxElement.localeCompare(elements[i]) < 0) {
                  maxElement = elements[i];
                }
              }
              return maxElement;
            }
          } else {
            return null;
          }
        },
        _functionMin: function(resolvedArgs) {
          if (resolvedArgs[0].length > 0) {
            var typeName = this._getTypeName(resolvedArgs[0][0]);
            if (typeName === TYPE_NUMBER) {
              return Math.min.apply(Math, resolvedArgs[0]);
            } else {
              var elements = resolvedArgs[0];
              var minElement = elements[0];
              for (var i = 1; i < elements.length; i++) {
                if (elements[i].localeCompare(minElement) < 0) {
                  minElement = elements[i];
                }
              }
              return minElement;
            }
          } else {
            return null;
          }
        },
        _functionSum: function(resolvedArgs) {
          var sum = 0;
          var listToSum = resolvedArgs[0];
          for (var i = 0; i < listToSum.length; i++) {
            sum += listToSum[i];
          }
          return sum;
        },
        _functionType: function(resolvedArgs) {
          switch (this._getTypeName(resolvedArgs[0])) {
            case TYPE_NUMBER:
              return "number";
            case TYPE_STRING:
              return "string";
            case TYPE_ARRAY:
              return "array";
            case TYPE_OBJECT:
              return "object";
            case TYPE_BOOLEAN:
              return "boolean";
            case TYPE_EXPREF:
              return "expref";
            case TYPE_NULL:
              return "null";
          }
        },
        _functionKeys: function(resolvedArgs) {
          return Object.keys(resolvedArgs[0]);
        },
        _functionValues: function(resolvedArgs) {
          var obj = resolvedArgs[0];
          var keys = Object.keys(obj);
          var values = [];
          for (var i = 0; i < keys.length; i++) {
            values.push(obj[keys[i]]);
          }
          return values;
        },
        _functionJoin: function(resolvedArgs) {
          var joinChar = resolvedArgs[0];
          var listJoin = resolvedArgs[1];
          return listJoin.join(joinChar);
        },
        _functionToArray: function(resolvedArgs) {
          if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
            return resolvedArgs[0];
          } else {
            return [resolvedArgs[0]];
          }
        },
        _functionToString: function(resolvedArgs) {
          if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
            return resolvedArgs[0];
          } else {
            return JSON.stringify(resolvedArgs[0]);
          }
        },
        _functionToNumber: function(resolvedArgs) {
          var typeName = this._getTypeName(resolvedArgs[0]);
          var convertedValue;
          if (typeName === TYPE_NUMBER) {
            return resolvedArgs[0];
          } else if (typeName === TYPE_STRING) {
            convertedValue = +resolvedArgs[0];
            if (!isNaN(convertedValue)) {
              return convertedValue;
            }
          }
          return null;
        },
        _functionNotNull: function(resolvedArgs) {
          for (var i = 0; i < resolvedArgs.length; i++) {
            if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
              return resolvedArgs[i];
            }
          }
          return null;
        },
        _functionSort: function(resolvedArgs) {
          var sortedArray = resolvedArgs[0].slice(0);
          sortedArray.sort();
          return sortedArray;
        },
        _functionSortBy: function(resolvedArgs) {
          var sortedArray = resolvedArgs[0].slice(0);
          if (sortedArray.length === 0) {
            return sortedArray;
          }
          var interpreter = this._interpreter;
          var exprefNode = resolvedArgs[1];
          var requiredType = this._getTypeName(
            interpreter.visit(exprefNode, sortedArray[0])
          );
          if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
            throw new Error("TypeError");
          }
          var that = this;
          var decorated = [];
          for (var i = 0; i < sortedArray.length; i++) {
            decorated.push([i, sortedArray[i]]);
          }
          decorated.sort(function(a, b) {
            var exprA = interpreter.visit(exprefNode, a[1]);
            var exprB = interpreter.visit(exprefNode, b[1]);
            if (that._getTypeName(exprA) !== requiredType) {
              throw new Error(
                "TypeError: expected " + requiredType + ", received " + that._getTypeName(exprA)
              );
            } else if (that._getTypeName(exprB) !== requiredType) {
              throw new Error(
                "TypeError: expected " + requiredType + ", received " + that._getTypeName(exprB)
              );
            }
            if (exprA > exprB) {
              return 1;
            } else if (exprA < exprB) {
              return -1;
            } else {
              return a[0] - b[0];
            }
          });
          for (var j = 0; j < decorated.length; j++) {
            sortedArray[j] = decorated[j][1];
          }
          return sortedArray;
        },
        _functionMaxBy: function(resolvedArgs) {
          var exprefNode = resolvedArgs[1];
          var resolvedArray = resolvedArgs[0];
          var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
          var maxNumber = -Infinity;
          var maxRecord;
          var current;
          for (var i = 0; i < resolvedArray.length; i++) {
            current = keyFunction(resolvedArray[i]);
            if (current > maxNumber) {
              maxNumber = current;
              maxRecord = resolvedArray[i];
            }
          }
          return maxRecord;
        },
        _functionMinBy: function(resolvedArgs) {
          var exprefNode = resolvedArgs[1];
          var resolvedArray = resolvedArgs[0];
          var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
          var minNumber = Infinity;
          var minRecord;
          var current;
          for (var i = 0; i < resolvedArray.length; i++) {
            current = keyFunction(resolvedArray[i]);
            if (current < minNumber) {
              minNumber = current;
              minRecord = resolvedArray[i];
            }
          }
          return minRecord;
        },
        createKeyFunction: function(exprefNode, allowedTypes) {
          var that = this;
          var interpreter = this._interpreter;
          var keyFunc = /* @__PURE__ */ __name(function(x) {
            var current = interpreter.visit(exprefNode, x);
            if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
              var msg = "TypeError: expected one of " + allowedTypes + ", received " + that._getTypeName(current);
              throw new Error(msg);
            }
            return current;
          }, "keyFunc");
          return keyFunc;
        }
      };
      function compile(stream) {
        var parser = new Parser();
        var ast = parser.parse(stream);
        return ast;
      }
      __name(compile, "compile");
      function tokenize(stream) {
        var lexer = new Lexer();
        return lexer.tokenize(stream);
      }
      __name(tokenize, "tokenize");
      function search(data, expression) {
        var parser = new Parser();
        var runtime = new Runtime();
        var interpreter = new TreeInterpreter(runtime);
        runtime._interpreter = interpreter;
        var node = parser.parse(expression);
        return interpreter.search(node, data);
      }
      __name(search, "search");
      exports2.tokenize = tokenize;
      exports2.compile = compile;
      exports2.search = search;
      exports2.strictDeepEqual = strictDeepEqual;
    })(typeof exports === "undefined" ? exports.jmespath = {} : exports);
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/request.js
var require_request = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/request.js"() {
    var AWS2 = require_core();
    var AcceptorStateMachine = require_state_machine();
    var inherit = AWS2.util.inherit;
    var domain = AWS2.util.domain;
    var jmespath = require_jmespath();
    var hardErrorStates = { success: 1, error: 1, complete: 1 };
    function isTerminalState(machine) {
      return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
    }
    __name(isTerminalState, "isTerminalState");
    var fsm = new AcceptorStateMachine();
    fsm.setupStates = function() {
      var transition = /* @__PURE__ */ __name(function(_, done) {
        var self = this;
        self._haltHandlersOnError = false;
        self.emit(self._asm.currentState, function(err) {
          if (err) {
            if (isTerminalState(self)) {
              if (domain && self.domain instanceof domain.Domain) {
                err.domainEmitter = self;
                err.domain = self.domain;
                err.domainThrown = false;
                self.domain.emit("error", err);
              } else {
                throw err;
              }
            } else {
              self.response.error = err;
              done(err);
            }
          } else {
            done(self.response.error);
          }
        });
      }, "transition");
      this.addState("validate", "build", "error", transition);
      this.addState("build", "afterBuild", "restart", transition);
      this.addState("afterBuild", "sign", "restart", transition);
      this.addState("sign", "send", "retry", transition);
      this.addState("retry", "afterRetry", "afterRetry", transition);
      this.addState("afterRetry", "sign", "error", transition);
      this.addState("send", "validateResponse", "retry", transition);
      this.addState("validateResponse", "extractData", "extractError", transition);
      this.addState("extractError", "extractData", "retry", transition);
      this.addState("extractData", "success", "retry", transition);
      this.addState("restart", "build", "error", transition);
      this.addState("success", "complete", "complete", transition);
      this.addState("error", "complete", "complete", transition);
      this.addState("complete", null, null, transition);
    };
    fsm.setupStates();
    AWS2.Request = inherit({
      constructor: /* @__PURE__ */ __name(function Request(service, operation, params) {
        var endpoint = service.endpoint;
        var region = service.config.region;
        var customUserAgent = service.config.customUserAgent;
        if (service.signingRegion) {
          region = service.signingRegion;
        } else if (service.isGlobalEndpoint) {
          region = "us-east-1";
        }
        this.domain = domain && domain.active;
        this.service = service;
        this.operation = operation;
        this.params = params || {};
        this.httpRequest = new AWS2.HttpRequest(endpoint, region);
        this.httpRequest.appendToUserAgent(customUserAgent);
        this.startTime = service.getSkewCorrectedDate();
        this.response = new AWS2.Response(this);
        this._asm = new AcceptorStateMachine(fsm.states, "validate");
        this._haltHandlersOnError = false;
        AWS2.SequentialExecutor.call(this);
        this.emit = this.emitEvent;
      }, "Request"),
      send: /* @__PURE__ */ __name(function send(callback) {
        if (callback) {
          this.httpRequest.appendToUserAgent("callback");
          this.on("complete", function(resp) {
            callback.call(resp, resp.error, resp.data);
          });
        }
        this.runTo();
        return this.response;
      }, "send"),
      build: /* @__PURE__ */ __name(function build(callback) {
        return this.runTo("send", callback);
      }, "build"),
      runTo: /* @__PURE__ */ __name(function runTo(state, done) {
        this._asm.runTo(state, done, this);
        return this;
      }, "runTo"),
      abort: /* @__PURE__ */ __name(function abort() {
        this.removeAllListeners("validateResponse");
        this.removeAllListeners("extractError");
        this.on("validateResponse", /* @__PURE__ */ __name(function addAbortedError(resp) {
          resp.error = AWS2.util.error(new Error("Request aborted by user"), {
            code: "RequestAbortedError",
            retryable: false
          });
        }, "addAbortedError"));
        if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) {
          this.httpRequest.stream.abort();
          if (this.httpRequest._abortCallback) {
            this.httpRequest._abortCallback();
          } else {
            this.removeAllListeners("send");
          }
        }
        return this;
      }, "abort"),
      eachPage: /* @__PURE__ */ __name(function eachPage(callback) {
        callback = AWS2.util.fn.makeAsync(callback, 3);
        function wrappedCallback(response) {
          callback.call(response, response.error, response.data, function(result) {
            if (result === false)
              return;
            if (response.hasNextPage()) {
              response.nextPage().on("complete", wrappedCallback).send();
            } else {
              callback.call(response, null, null, AWS2.util.fn.noop);
            }
          });
        }
        __name(wrappedCallback, "wrappedCallback");
        this.on("complete", wrappedCallback).send();
      }, "eachPage"),
      eachItem: /* @__PURE__ */ __name(function eachItem(callback) {
        var self = this;
        function wrappedCallback(err, data) {
          if (err)
            return callback(err, null);
          if (data === null)
            return callback(null, null);
          var config = self.service.paginationConfig(self.operation);
          var resultKey = config.resultKey;
          if (Array.isArray(resultKey))
            resultKey = resultKey[0];
          var items = jmespath.search(data, resultKey);
          var continueIteration = true;
          AWS2.util.arrayEach(items, function(item) {
            continueIteration = callback(null, item);
            if (continueIteration === false) {
              return AWS2.util.abort;
            }
          });
          return continueIteration;
        }
        __name(wrappedCallback, "wrappedCallback");
        this.eachPage(wrappedCallback);
      }, "eachItem"),
      isPageable: /* @__PURE__ */ __name(function isPageable() {
        return this.service.paginationConfig(this.operation) ? true : false;
      }, "isPageable"),
      createReadStream: /* @__PURE__ */ __name(function createReadStream() {
        var streams = AWS2.util.stream;
        var req = this;
        var stream = null;
        if (AWS2.HttpClient.streamsApiVersion === 2) {
          stream = new streams.PassThrough();
          process.nextTick(function() {
            req.send();
          });
        } else {
          stream = new streams.Stream();
          stream.readable = true;
          stream.sent = false;
          stream.on("newListener", function(event) {
            if (!stream.sent && event === "data") {
              stream.sent = true;
              process.nextTick(function() {
                req.send();
              });
            }
          });
        }
        this.on("error", function(err) {
          stream.emit("error", err);
        });
        this.on("httpHeaders", /* @__PURE__ */ __name(function streamHeaders(statusCode, headers, resp) {
          if (statusCode < 300) {
            req.removeListener("httpData", AWS2.EventListeners.Core.HTTP_DATA);
            req.removeListener("httpError", AWS2.EventListeners.Core.HTTP_ERROR);
            req.on("httpError", /* @__PURE__ */ __name(function streamHttpError(error) {
              resp.error = error;
              resp.error.retryable = false;
            }, "streamHttpError"));
            var shouldCheckContentLength = false;
            var expectedLen;
            if (req.httpRequest.method !== "HEAD") {
              expectedLen = parseInt(headers["content-length"], 10);
            }
            if (expectedLen !== void 0 && !isNaN(expectedLen) && expectedLen >= 0) {
              shouldCheckContentLength = true;
              var receivedLen = 0;
            }
            var checkContentLengthAndEmit = /* @__PURE__ */ __name(function checkContentLengthAndEmit2() {
              if (shouldCheckContentLength && receivedLen !== expectedLen) {
                stream.emit("error", AWS2.util.error(
                  new Error("Stream content length mismatch. Received " + receivedLen + " of " + expectedLen + " bytes."),
                  { code: "StreamContentLengthMismatch" }
                ));
              } else if (AWS2.HttpClient.streamsApiVersion === 2) {
                stream.end();
              } else {
                stream.emit("end");
              }
            }, "checkContentLengthAndEmit");
            var httpStream = resp.httpResponse.createUnbufferedStream();
            if (AWS2.HttpClient.streamsApiVersion === 2) {
              if (shouldCheckContentLength) {
                var lengthAccumulator = new streams.PassThrough();
                lengthAccumulator._write = function(chunk) {
                  if (chunk && chunk.length) {
                    receivedLen += chunk.length;
                  }
                  return streams.PassThrough.prototype._write.apply(this, arguments);
                };
                lengthAccumulator.on("end", checkContentLengthAndEmit);
                stream.on("error", function(err) {
                  shouldCheckContentLength = false;
                  httpStream.unpipe(lengthAccumulator);
                  lengthAccumulator.emit("end");
                  lengthAccumulator.end();
                });
                httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });
              } else {
                httpStream.pipe(stream);
              }
            } else {
              if (shouldCheckContentLength) {
                httpStream.on("data", function(arg) {
                  if (arg && arg.length) {
                    receivedLen += arg.length;
                  }
                });
              }
              httpStream.on("data", function(arg) {
                stream.emit("data", arg);
              });
              httpStream.on("end", checkContentLengthAndEmit);
            }
            httpStream.on("error", function(err) {
              shouldCheckContentLength = false;
              stream.emit("error", err);
            });
          }
        }, "streamHeaders"));
        return stream;
      }, "createReadStream"),
      emitEvent: /* @__PURE__ */ __name(function emit(eventName, args, done) {
        if (typeof args === "function") {
          done = args;
          args = null;
        }
        if (!done)
          done = /* @__PURE__ */ __name(function() {
          }, "done");
        if (!args)
          args = this.eventParameters(eventName, this.response);
        var origEmit = AWS2.SequentialExecutor.prototype.emit;
        origEmit.call(this, eventName, args, function(err) {
          if (err)
            this.response.error = err;
          done.call(this, err);
        });
      }, "emit"),
      eventParameters: /* @__PURE__ */ __name(function eventParameters(eventName) {
        switch (eventName) {
          case "restart":
          case "validate":
          case "sign":
          case "build":
          case "afterValidate":
          case "afterBuild":
            return [this];
          case "error":
            return [this.response.error, this.response];
          default:
            return [this.response];
        }
      }, "eventParameters"),
      presign: /* @__PURE__ */ __name(function presign(expires, callback) {
        if (!callback && typeof expires === "function") {
          callback = expires;
          expires = null;
        }
        return new AWS2.Signers.Presign().sign(this.toGet(), expires, callback);
      }, "presign"),
      isPresigned: /* @__PURE__ */ __name(function isPresigned() {
        return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, "presigned-expires");
      }, "isPresigned"),
      toUnauthenticated: /* @__PURE__ */ __name(function toUnauthenticated() {
        this._unAuthenticated = true;
        this.removeListener("validate", AWS2.EventListeners.Core.VALIDATE_CREDENTIALS);
        this.removeListener("sign", AWS2.EventListeners.Core.SIGN);
        return this;
      }, "toUnauthenticated"),
      toGet: /* @__PURE__ */ __name(function toGet() {
        if (this.service.api.protocol === "query" || this.service.api.protocol === "ec2") {
          this.removeListener("build", this.buildAsGet);
          this.addListener("build", this.buildAsGet);
        }
        return this;
      }, "toGet"),
      buildAsGet: /* @__PURE__ */ __name(function buildAsGet(request) {
        request.httpRequest.method = "GET";
        request.httpRequest.path = request.service.endpoint.path + "?" + request.httpRequest.body;
        request.httpRequest.body = "";
        delete request.httpRequest.headers["Content-Length"];
        delete request.httpRequest.headers["Content-Type"];
      }, "buildAsGet"),
      haltHandlersOnError: /* @__PURE__ */ __name(function haltHandlersOnError() {
        this._haltHandlersOnError = true;
      }, "haltHandlersOnError")
    });
    AWS2.Request.addPromisesToClass = /* @__PURE__ */ __name(function addPromisesToClass(PromiseDependency) {
      this.prototype.promise = /* @__PURE__ */ __name(function promise() {
        var self = this;
        this.httpRequest.appendToUserAgent("promise");
        return new PromiseDependency(function(resolve, reject) {
          self.on("complete", function(resp) {
            if (resp.error) {
              reject(resp.error);
            } else {
              resolve(Object.defineProperty(
                resp.data || {},
                "$response",
                { value: resp }
              ));
            }
          });
          self.runTo();
        });
      }, "promise");
    }, "addPromisesToClass");
    AWS2.Request.deletePromisesFromClass = /* @__PURE__ */ __name(function deletePromisesFromClass() {
      delete this.prototype.promise;
    }, "deletePromisesFromClass");
    AWS2.util.addPromises(AWS2.Request);
    AWS2.util.mixin(AWS2.Request, AWS2.SequentialExecutor);
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/response.js
var require_response2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/response.js"() {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    var jmespath = require_jmespath();
    AWS2.Response = inherit({
      constructor: /* @__PURE__ */ __name(function Response(request) {
        this.request = request;
        this.data = null;
        this.error = null;
        this.retryCount = 0;
        this.redirectCount = 0;
        this.httpResponse = new AWS2.HttpResponse();
        if (request) {
          this.maxRetries = request.service.numRetries();
          this.maxRedirects = request.service.config.maxRedirects;
        }
      }, "Response"),
      nextPage: /* @__PURE__ */ __name(function nextPage(callback) {
        var config;
        var service = this.request.service;
        var operation = this.request.operation;
        try {
          config = service.paginationConfig(operation, true);
        } catch (e) {
          this.error = e;
        }
        if (!this.hasNextPage()) {
          if (callback)
            callback(this.error, null);
          else if (this.error)
            throw this.error;
          return null;
        }
        var params = AWS2.util.copy(this.request.params);
        if (!this.nextPageTokens) {
          return callback ? callback(null, null) : null;
        } else {
          var inputTokens = config.inputToken;
          if (typeof inputTokens === "string")
            inputTokens = [inputTokens];
          for (var i = 0; i < inputTokens.length; i++) {
            params[inputTokens[i]] = this.nextPageTokens[i];
          }
          return service.makeRequest(this.request.operation, params, callback);
        }
      }, "nextPage"),
      hasNextPage: /* @__PURE__ */ __name(function hasNextPage() {
        this.cacheNextPageTokens();
        if (this.nextPageTokens)
          return true;
        if (this.nextPageTokens === void 0)
          return void 0;
        else
          return false;
      }, "hasNextPage"),
      cacheNextPageTokens: /* @__PURE__ */ __name(function cacheNextPageTokens() {
        if (Object.prototype.hasOwnProperty.call(this, "nextPageTokens"))
          return this.nextPageTokens;
        this.nextPageTokens = void 0;
        var config = this.request.service.paginationConfig(this.request.operation);
        if (!config)
          return this.nextPageTokens;
        this.nextPageTokens = null;
        if (config.moreResults) {
          if (!jmespath.search(this.data, config.moreResults)) {
            return this.nextPageTokens;
          }
        }
        var exprs = config.outputToken;
        if (typeof exprs === "string")
          exprs = [exprs];
        AWS2.util.arrayEach.call(this, exprs, function(expr) {
          var output = jmespath.search(this.data, expr);
          if (output) {
            this.nextPageTokens = this.nextPageTokens || [];
            this.nextPageTokens.push(output);
          }
        });
        return this.nextPageTokens;
      }, "cacheNextPageTokens")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/resource_waiter.js
var require_resource_waiter2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/resource_waiter.js"() {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    var jmespath = require_jmespath();
    function CHECK_ACCEPTORS(resp) {
      var waiter = resp.request._waiter;
      var acceptors = waiter.config.acceptors;
      var acceptorMatched = false;
      var state = "retry";
      acceptors.forEach(function(acceptor) {
        if (!acceptorMatched) {
          var matcher = waiter.matchers[acceptor.matcher];
          if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
            acceptorMatched = true;
            state = acceptor.state;
          }
        }
      });
      if (!acceptorMatched && resp.error)
        state = "failure";
      if (state === "success") {
        waiter.setSuccess(resp);
      } else {
        waiter.setError(resp, state === "retry");
      }
    }
    __name(CHECK_ACCEPTORS, "CHECK_ACCEPTORS");
    AWS2.ResourceWaiter = inherit({
      constructor: /* @__PURE__ */ __name(function constructor(service, state) {
        this.service = service;
        this.state = state;
        this.loadWaiterConfig(this.state);
      }, "constructor"),
      service: null,
      state: null,
      config: null,
      matchers: {
        path: function(resp, expected, argument) {
          try {
            var result = jmespath.search(resp.data, argument);
          } catch (err) {
            return false;
          }
          return jmespath.strictDeepEqual(result, expected);
        },
        pathAll: function(resp, expected, argument) {
          try {
            var results = jmespath.search(resp.data, argument);
          } catch (err) {
            return false;
          }
          if (!Array.isArray(results))
            results = [results];
          var numResults = results.length;
          if (!numResults)
            return false;
          for (var ind = 0; ind < numResults; ind++) {
            if (!jmespath.strictDeepEqual(results[ind], expected)) {
              return false;
            }
          }
          return true;
        },
        pathAny: function(resp, expected, argument) {
          try {
            var results = jmespath.search(resp.data, argument);
          } catch (err) {
            return false;
          }
          if (!Array.isArray(results))
            results = [results];
          var numResults = results.length;
          for (var ind = 0; ind < numResults; ind++) {
            if (jmespath.strictDeepEqual(results[ind], expected)) {
              return true;
            }
          }
          return false;
        },
        status: function(resp, expected) {
          var statusCode = resp.httpResponse.statusCode;
          return typeof statusCode === "number" && statusCode === expected;
        },
        error: function(resp, expected) {
          if (typeof expected === "string" && resp.error) {
            return expected === resp.error.code;
          }
          return expected === !!resp.error;
        }
      },
      listeners: new AWS2.SequentialExecutor().addNamedListeners(function(add) {
        add("RETRY_CHECK", "retry", function(resp) {
          var waiter = resp.request._waiter;
          if (resp.error && resp.error.code === "ResourceNotReady") {
            resp.error.retryDelay = (waiter.config.delay || 0) * 1e3;
          }
        });
        add("CHECK_OUTPUT", "extractData", CHECK_ACCEPTORS);
        add("CHECK_ERROR", "extractError", CHECK_ACCEPTORS);
      }),
      wait: /* @__PURE__ */ __name(function wait(params, callback) {
        if (typeof params === "function") {
          callback = params;
          params = void 0;
        }
        if (params && params.$waiter) {
          params = AWS2.util.copy(params);
          if (typeof params.$waiter.delay === "number") {
            this.config.delay = params.$waiter.delay;
          }
          if (typeof params.$waiter.maxAttempts === "number") {
            this.config.maxAttempts = params.$waiter.maxAttempts;
          }
          delete params.$waiter;
        }
        var request = this.service.makeRequest(this.config.operation, params);
        request._waiter = this;
        request.response.maxRetries = this.config.maxAttempts;
        request.addListeners(this.listeners);
        if (callback)
          request.send(callback);
        return request;
      }, "wait"),
      setSuccess: /* @__PURE__ */ __name(function setSuccess(resp) {
        resp.error = null;
        resp.data = resp.data || {};
        resp.request.removeAllListeners("extractData");
      }, "setSuccess"),
      setError: /* @__PURE__ */ __name(function setError(resp, retryable) {
        resp.data = null;
        resp.error = AWS2.util.error(resp.error || new Error(), {
          code: "ResourceNotReady",
          message: "Resource is not in the state " + this.state,
          retryable
        });
      }, "setError"),
      loadWaiterConfig: /* @__PURE__ */ __name(function loadWaiterConfig(state) {
        if (!this.service.api.waiters[state]) {
          throw new AWS2.util.error(new Error(), {
            code: "StateNotFoundError",
            message: "State " + state + " not found."
          });
        }
        this.config = AWS2.util.copy(this.service.api.waiters[state]);
      }, "loadWaiterConfig")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v2.js
var require_v2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v2.js"(exports, module) {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    AWS2.Signers.V2 = inherit(AWS2.Signers.RequestSigner, {
      addAuthorization: /* @__PURE__ */ __name(function addAuthorization(credentials, date) {
        if (!date)
          date = AWS2.util.date.getDate();
        var r = this.request;
        r.params.Timestamp = AWS2.util.date.iso8601(date);
        r.params.SignatureVersion = "2";
        r.params.SignatureMethod = "HmacSHA256";
        r.params.AWSAccessKeyId = credentials.accessKeyId;
        if (credentials.sessionToken) {
          r.params.SecurityToken = credentials.sessionToken;
        }
        delete r.params.Signature;
        r.params.Signature = this.signature(credentials);
        r.body = AWS2.util.queryParamsToString(r.params);
        r.headers["Content-Length"] = r.body.length;
      }, "addAuthorization"),
      signature: /* @__PURE__ */ __name(function signature(credentials) {
        return AWS2.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), "base64");
      }, "signature"),
      stringToSign: /* @__PURE__ */ __name(function stringToSign() {
        var parts = [];
        parts.push(this.request.method);
        parts.push(this.request.endpoint.host.toLowerCase());
        parts.push(this.request.pathname());
        parts.push(AWS2.util.queryParamsToString(this.request.params));
        return parts.join("\n");
      }, "stringToSign")
    });
    module.exports = AWS2.Signers.V2;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v3.js
var require_v3 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v3.js"(exports, module) {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    AWS2.Signers.V3 = inherit(AWS2.Signers.RequestSigner, {
      addAuthorization: /* @__PURE__ */ __name(function addAuthorization(credentials, date) {
        var datetime = AWS2.util.date.rfc822(date);
        this.request.headers["X-Amz-Date"] = datetime;
        if (credentials.sessionToken) {
          this.request.headers["x-amz-security-token"] = credentials.sessionToken;
        }
        this.request.headers["X-Amzn-Authorization"] = this.authorization(credentials, datetime);
      }, "addAuthorization"),
      authorization: /* @__PURE__ */ __name(function authorization(credentials) {
        return "AWS3 AWSAccessKeyId=" + credentials.accessKeyId + ",Algorithm=HmacSHA256,SignedHeaders=" + this.signedHeaders() + ",Signature=" + this.signature(credentials);
      }, "authorization"),
      signedHeaders: /* @__PURE__ */ __name(function signedHeaders() {
        var headers = [];
        AWS2.util.arrayEach(this.headersToSign(), /* @__PURE__ */ __name(function iterator(h) {
          headers.push(h.toLowerCase());
        }, "iterator"));
        return headers.sort().join(";");
      }, "signedHeaders"),
      canonicalHeaders: /* @__PURE__ */ __name(function canonicalHeaders() {
        var headers = this.request.headers;
        var parts = [];
        AWS2.util.arrayEach(this.headersToSign(), /* @__PURE__ */ __name(function iterator(h) {
          parts.push(h.toLowerCase().trim() + ":" + String(headers[h]).trim());
        }, "iterator"));
        return parts.sort().join("\n") + "\n";
      }, "canonicalHeaders"),
      headersToSign: /* @__PURE__ */ __name(function headersToSign() {
        var headers = [];
        AWS2.util.each(this.request.headers, /* @__PURE__ */ __name(function iterator(k) {
          if (k === "Host" || k === "Content-Encoding" || k.match(/^X-Amz/i)) {
            headers.push(k);
          }
        }, "iterator"));
        return headers;
      }, "headersToSign"),
      signature: /* @__PURE__ */ __name(function signature(credentials) {
        return AWS2.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), "base64");
      }, "signature"),
      stringToSign: /* @__PURE__ */ __name(function stringToSign() {
        var parts = [];
        parts.push(this.request.method);
        parts.push("/");
        parts.push("");
        parts.push(this.canonicalHeaders());
        parts.push(this.request.body);
        return AWS2.util.crypto.sha256(parts.join("\n"));
      }, "stringToSign")
    });
    module.exports = AWS2.Signers.V3;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v3https.js
var require_v3https = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v3https.js"(exports, module) {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    require_v3();
    AWS2.Signers.V3Https = inherit(AWS2.Signers.V3, {
      authorization: /* @__PURE__ */ __name(function authorization(credentials) {
        return "AWS3-HTTPS AWSAccessKeyId=" + credentials.accessKeyId + ",Algorithm=HmacSHA256,Signature=" + this.signature(credentials);
      }, "authorization"),
      stringToSign: /* @__PURE__ */ __name(function stringToSign() {
        return this.request.headers["X-Amz-Date"];
      }, "stringToSign")
    });
    module.exports = AWS2.Signers.V3Https;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v4_credentials.js
var require_v4_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v4_credentials.js"(exports, module) {
    var AWS2 = require_core();
    var cachedSecret = {};
    var cacheQueue = [];
    var maxCacheEntries = 50;
    var v4Identifier = "aws4_request";
    module.exports = {
      createScope: /* @__PURE__ */ __name(function createScope(date, region, serviceName) {
        return [
          date.substr(0, 8),
          region,
          serviceName,
          v4Identifier
        ].join("/");
      }, "createScope"),
      getSigningKey: /* @__PURE__ */ __name(function getSigningKey(credentials, date, region, service, shouldCache) {
        var credsIdentifier = AWS2.util.crypto.hmac(credentials.secretAccessKey, credentials.accessKeyId, "base64");
        var cacheKey = [credsIdentifier, date, region, service].join("_");
        shouldCache = shouldCache !== false;
        if (shouldCache && cacheKey in cachedSecret) {
          return cachedSecret[cacheKey];
        }
        var kDate = AWS2.util.crypto.hmac(
          "AWS4" + credentials.secretAccessKey,
          date,
          "buffer"
        );
        var kRegion = AWS2.util.crypto.hmac(kDate, region, "buffer");
        var kService = AWS2.util.crypto.hmac(kRegion, service, "buffer");
        var signingKey = AWS2.util.crypto.hmac(kService, v4Identifier, "buffer");
        if (shouldCache) {
          cachedSecret[cacheKey] = signingKey;
          cacheQueue.push(cacheKey);
          if (cacheQueue.length > maxCacheEntries) {
            delete cachedSecret[cacheQueue.shift()];
          }
        }
        return signingKey;
      }, "getSigningKey"),
      emptyCache: /* @__PURE__ */ __name(function emptyCache() {
        cachedSecret = {};
        cacheQueue = [];
      }, "emptyCache")
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v4.js
var require_v4 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/v4.js"(exports, module) {
    var AWS2 = require_core();
    var v4Credentials = require_v4_credentials();
    var inherit = AWS2.util.inherit;
    var expiresHeader = "presigned-expires";
    AWS2.Signers.V4 = inherit(AWS2.Signers.RequestSigner, {
      constructor: /* @__PURE__ */ __name(function V4(request, serviceName, options) {
        AWS2.Signers.RequestSigner.call(this, request);
        this.serviceName = serviceName;
        options = options || {};
        this.signatureCache = typeof options.signatureCache === "boolean" ? options.signatureCache : true;
        this.operation = options.operation;
        this.signatureVersion = options.signatureVersion;
      }, "V4"),
      algorithm: "AWS4-HMAC-SHA256",
      addAuthorization: /* @__PURE__ */ __name(function addAuthorization(credentials, date) {
        var datetime = AWS2.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, "");
        if (this.isPresigned()) {
          this.updateForPresigned(credentials, datetime);
        } else {
          this.addHeaders(credentials, datetime);
        }
        this.request.headers["Authorization"] = this.authorization(credentials, datetime);
      }, "addAuthorization"),
      addHeaders: /* @__PURE__ */ __name(function addHeaders(credentials, datetime) {
        this.request.headers["X-Amz-Date"] = datetime;
        if (credentials.sessionToken) {
          this.request.headers["x-amz-security-token"] = credentials.sessionToken;
        }
      }, "addHeaders"),
      updateForPresigned: /* @__PURE__ */ __name(function updateForPresigned(credentials, datetime) {
        var credString = this.credentialString(datetime);
        var qs = {
          "X-Amz-Date": datetime,
          "X-Amz-Algorithm": this.algorithm,
          "X-Amz-Credential": credentials.accessKeyId + "/" + credString,
          "X-Amz-Expires": this.request.headers[expiresHeader],
          "X-Amz-SignedHeaders": this.signedHeaders()
        };
        if (credentials.sessionToken) {
          qs["X-Amz-Security-Token"] = credentials.sessionToken;
        }
        if (this.request.headers["Content-Type"]) {
          qs["Content-Type"] = this.request.headers["Content-Type"];
        }
        if (this.request.headers["Content-MD5"]) {
          qs["Content-MD5"] = this.request.headers["Content-MD5"];
        }
        if (this.request.headers["Cache-Control"]) {
          qs["Cache-Control"] = this.request.headers["Cache-Control"];
        }
        AWS2.util.each.call(this, this.request.headers, function(key, value) {
          if (key === expiresHeader)
            return;
          if (this.isSignableHeader(key)) {
            var lowerKey = key.toLowerCase();
            if (lowerKey.indexOf("x-amz-meta-") === 0) {
              qs[lowerKey] = value;
            } else if (lowerKey.indexOf("x-amz-") === 0) {
              qs[key] = value;
            }
          }
        });
        var sep = this.request.path.indexOf("?") >= 0 ? "&" : "?";
        this.request.path += sep + AWS2.util.queryParamsToString(qs);
      }, "updateForPresigned"),
      authorization: /* @__PURE__ */ __name(function authorization(credentials, datetime) {
        var parts = [];
        var credString = this.credentialString(datetime);
        parts.push(this.algorithm + " Credential=" + credentials.accessKeyId + "/" + credString);
        parts.push("SignedHeaders=" + this.signedHeaders());
        parts.push("Signature=" + this.signature(credentials, datetime));
        return parts.join(", ");
      }, "authorization"),
      signature: /* @__PURE__ */ __name(function signature(credentials, datetime) {
        var signingKey = v4Credentials.getSigningKey(
          credentials,
          datetime.substr(0, 8),
          this.request.region,
          this.serviceName,
          this.signatureCache
        );
        return AWS2.util.crypto.hmac(signingKey, this.stringToSign(datetime), "hex");
      }, "signature"),
      stringToSign: /* @__PURE__ */ __name(function stringToSign(datetime) {
        var parts = [];
        parts.push("AWS4-HMAC-SHA256");
        parts.push(datetime);
        parts.push(this.credentialString(datetime));
        parts.push(this.hexEncodedHash(this.canonicalString()));
        return parts.join("\n");
      }, "stringToSign"),
      canonicalString: /* @__PURE__ */ __name(function canonicalString() {
        var parts = [], pathname = this.request.pathname();
        if (this.serviceName !== "s3" && this.signatureVersion !== "s3v4")
          pathname = AWS2.util.uriEscapePath(pathname);
        parts.push(this.request.method);
        parts.push(pathname);
        parts.push(this.request.search());
        parts.push(this.canonicalHeaders() + "\n");
        parts.push(this.signedHeaders());
        parts.push(this.hexEncodedBodyHash());
        return parts.join("\n");
      }, "canonicalString"),
      canonicalHeaders: /* @__PURE__ */ __name(function canonicalHeaders() {
        var headers = [];
        AWS2.util.each.call(this, this.request.headers, function(key, item) {
          headers.push([key, item]);
        });
        headers.sort(function(a, b) {
          return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
        });
        var parts = [];
        AWS2.util.arrayEach.call(this, headers, function(item) {
          var key = item[0].toLowerCase();
          if (this.isSignableHeader(key)) {
            var value = item[1];
            if (typeof value === "undefined" || value === null || typeof value.toString !== "function") {
              throw AWS2.util.error(new Error("Header " + key + " contains invalid value"), {
                code: "InvalidHeader"
              });
            }
            parts.push(key + ":" + this.canonicalHeaderValues(value.toString()));
          }
        });
        return parts.join("\n");
      }, "canonicalHeaders"),
      canonicalHeaderValues: /* @__PURE__ */ __name(function canonicalHeaderValues(values) {
        return values.replace(/\s+/g, " ").replace(/^\s+|\s+$/g, "");
      }, "canonicalHeaderValues"),
      signedHeaders: /* @__PURE__ */ __name(function signedHeaders() {
        var keys = [];
        AWS2.util.each.call(this, this.request.headers, function(key) {
          key = key.toLowerCase();
          if (this.isSignableHeader(key))
            keys.push(key);
        });
        return keys.sort().join(";");
      }, "signedHeaders"),
      credentialString: /* @__PURE__ */ __name(function credentialString(datetime) {
        return v4Credentials.createScope(
          datetime.substr(0, 8),
          this.request.region,
          this.serviceName
        );
      }, "credentialString"),
      hexEncodedHash: /* @__PURE__ */ __name(function hash(string) {
        return AWS2.util.crypto.sha256(string, "hex");
      }, "hash"),
      hexEncodedBodyHash: /* @__PURE__ */ __name(function hexEncodedBodyHash() {
        var request = this.request;
        if (this.isPresigned() && ["s3", "s3-object-lambda"].indexOf(this.serviceName) > -1 && !request.body) {
          return "UNSIGNED-PAYLOAD";
        } else if (request.headers["X-Amz-Content-Sha256"]) {
          return request.headers["X-Amz-Content-Sha256"];
        } else {
          return this.hexEncodedHash(this.request.body || "");
        }
      }, "hexEncodedBodyHash"),
      unsignableHeaders: [
        "authorization",
        "content-type",
        "content-length",
        "user-agent",
        expiresHeader,
        "expect",
        "x-amzn-trace-id"
      ],
      isSignableHeader: /* @__PURE__ */ __name(function isSignableHeader(key) {
        if (key.toLowerCase().indexOf("x-amz-") === 0)
          return true;
        return this.unsignableHeaders.indexOf(key) < 0;
      }, "isSignableHeader"),
      isPresigned: /* @__PURE__ */ __name(function isPresigned() {
        return this.request.headers[expiresHeader] ? true : false;
      }, "isPresigned")
    });
    module.exports = AWS2.Signers.V4;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/s3.js
var require_s32 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/s3.js"(exports, module) {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    AWS2.Signers.S3 = inherit(AWS2.Signers.RequestSigner, {
      subResources: {
        "acl": 1,
        "accelerate": 1,
        "analytics": 1,
        "cors": 1,
        "lifecycle": 1,
        "delete": 1,
        "inventory": 1,
        "location": 1,
        "logging": 1,
        "metrics": 1,
        "notification": 1,
        "partNumber": 1,
        "policy": 1,
        "requestPayment": 1,
        "replication": 1,
        "restore": 1,
        "tagging": 1,
        "torrent": 1,
        "uploadId": 1,
        "uploads": 1,
        "versionId": 1,
        "versioning": 1,
        "versions": 1,
        "website": 1
      },
      responseHeaders: {
        "response-content-type": 1,
        "response-content-language": 1,
        "response-expires": 1,
        "response-cache-control": 1,
        "response-content-disposition": 1,
        "response-content-encoding": 1
      },
      addAuthorization: /* @__PURE__ */ __name(function addAuthorization(credentials, date) {
        if (!this.request.headers["presigned-expires"]) {
          this.request.headers["X-Amz-Date"] = AWS2.util.date.rfc822(date);
        }
        if (credentials.sessionToken) {
          this.request.headers["x-amz-security-token"] = credentials.sessionToken;
        }
        var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
        var auth = "AWS " + credentials.accessKeyId + ":" + signature;
        this.request.headers["Authorization"] = auth;
      }, "addAuthorization"),
      stringToSign: /* @__PURE__ */ __name(function stringToSign() {
        var r = this.request;
        var parts = [];
        parts.push(r.method);
        parts.push(r.headers["Content-MD5"] || "");
        parts.push(r.headers["Content-Type"] || "");
        parts.push(r.headers["presigned-expires"] || "");
        var headers = this.canonicalizedAmzHeaders();
        if (headers)
          parts.push(headers);
        parts.push(this.canonicalizedResource());
        return parts.join("\n");
      }, "stringToSign"),
      canonicalizedAmzHeaders: /* @__PURE__ */ __name(function canonicalizedAmzHeaders() {
        var amzHeaders = [];
        AWS2.util.each(this.request.headers, function(name) {
          if (name.match(/^x-amz-/i))
            amzHeaders.push(name);
        });
        amzHeaders.sort(function(a, b) {
          return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
        });
        var parts = [];
        AWS2.util.arrayEach.call(this, amzHeaders, function(name) {
          parts.push(name.toLowerCase() + ":" + String(this.request.headers[name]));
        });
        return parts.join("\n");
      }, "canonicalizedAmzHeaders"),
      canonicalizedResource: /* @__PURE__ */ __name(function canonicalizedResource() {
        var r = this.request;
        var parts = r.path.split("?");
        var path = parts[0];
        var querystring = parts[1];
        var resource = "";
        if (r.virtualHostedBucket)
          resource += "/" + r.virtualHostedBucket;
        resource += path;
        if (querystring) {
          var resources = [];
          AWS2.util.arrayEach.call(this, querystring.split("&"), function(param) {
            var name = param.split("=")[0];
            var value = param.split("=")[1];
            if (this.subResources[name] || this.responseHeaders[name]) {
              var subresource = { name };
              if (value !== void 0) {
                if (this.subResources[name]) {
                  subresource.value = value;
                } else {
                  subresource.value = decodeURIComponent(value);
                }
              }
              resources.push(subresource);
            }
          });
          resources.sort(function(a, b) {
            return a.name < b.name ? -1 : 1;
          });
          if (resources.length) {
            querystring = [];
            AWS2.util.arrayEach(resources, function(res) {
              if (res.value === void 0) {
                querystring.push(res.name);
              } else {
                querystring.push(res.name + "=" + res.value);
              }
            });
            resource += "?" + querystring.join("&");
          }
        }
        return resource;
      }, "canonicalizedResource"),
      sign: /* @__PURE__ */ __name(function sign(secret, string) {
        return AWS2.util.crypto.hmac(secret, string, "base64", "sha1");
      }, "sign")
    });
    module.exports = AWS2.Signers.S3;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/presign.js
var require_presign = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/presign.js"(exports, module) {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    var expiresHeader = "presigned-expires";
    function signedUrlBuilder(request) {
      var expires = request.httpRequest.headers[expiresHeader];
      var signerClass = request.service.getSignerClass(request);
      delete request.httpRequest.headers["User-Agent"];
      delete request.httpRequest.headers["X-Amz-User-Agent"];
      if (signerClass === AWS2.Signers.V4) {
        if (expires > 604800) {
          var message = "Presigning does not support expiry time greater than a week with SigV4 signing.";
          throw AWS2.util.error(new Error(), {
            code: "InvalidExpiryTime",
            message,
            retryable: false
          });
        }
        request.httpRequest.headers[expiresHeader] = expires;
      } else if (signerClass === AWS2.Signers.S3) {
        var now = request.service ? request.service.getSkewCorrectedDate() : AWS2.util.date.getDate();
        request.httpRequest.headers[expiresHeader] = parseInt(
          AWS2.util.date.unixTimestamp(now) + expires,
          10
        ).toString();
      } else {
        throw AWS2.util.error(new Error(), {
          message: "Presigning only supports S3 or SigV4 signing.",
          code: "UnsupportedSigner",
          retryable: false
        });
      }
    }
    __name(signedUrlBuilder, "signedUrlBuilder");
    function signedUrlSigner(request) {
      var endpoint = request.httpRequest.endpoint;
      var parsedUrl = AWS2.util.urlParse(request.httpRequest.path);
      var queryParams = {};
      if (parsedUrl.search) {
        queryParams = AWS2.util.queryStringParse(parsedUrl.search.substr(1));
      }
      var auth = request.httpRequest.headers["Authorization"].split(" ");
      if (auth[0] === "AWS") {
        auth = auth[1].split(":");
        queryParams["Signature"] = auth.pop();
        queryParams["AWSAccessKeyId"] = auth.join(":");
        AWS2.util.each(request.httpRequest.headers, function(key, value) {
          if (key === expiresHeader)
            key = "Expires";
          if (key.indexOf("x-amz-meta-") === 0) {
            delete queryParams[key];
            key = key.toLowerCase();
          }
          queryParams[key] = value;
        });
        delete request.httpRequest.headers[expiresHeader];
        delete queryParams["Authorization"];
        delete queryParams["Host"];
      } else if (auth[0] === "AWS4-HMAC-SHA256") {
        auth.shift();
        var rest = auth.join(" ");
        var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
        queryParams["X-Amz-Signature"] = signature;
        delete queryParams["Expires"];
      }
      endpoint.pathname = parsedUrl.pathname;
      endpoint.search = AWS2.util.queryParamsToString(queryParams);
    }
    __name(signedUrlSigner, "signedUrlSigner");
    AWS2.Signers.Presign = inherit({
      sign: /* @__PURE__ */ __name(function sign(request, expireTime, callback) {
        request.httpRequest.headers[expiresHeader] = expireTime || 3600;
        request.on("build", signedUrlBuilder);
        request.on("sign", signedUrlSigner);
        request.removeListener(
          "afterBuild",
          AWS2.EventListeners.Core.SET_CONTENT_LENGTH
        );
        request.removeListener(
          "afterBuild",
          AWS2.EventListeners.Core.COMPUTE_SHA256
        );
        request.emit("beforePresign", [request]);
        if (callback) {
          request.build(function() {
            if (this.response.error)
              callback(this.response.error);
            else {
              callback(null, AWS2.util.urlFormat(request.httpRequest.endpoint));
            }
          });
        } else {
          request.build();
          if (request.response.error)
            throw request.response.error;
          return AWS2.util.urlFormat(request.httpRequest.endpoint);
        }
      }, "sign")
    });
    module.exports = AWS2.Signers.Presign;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/bearer.js
var require_bearer = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/bearer.js"() {
    var AWS2 = require_core();
    AWS2.Signers.Bearer = AWS2.util.inherit(AWS2.Signers.RequestSigner, {
      constructor: /* @__PURE__ */ __name(function Bearer(request) {
        AWS2.Signers.RequestSigner.call(this, request);
      }, "Bearer"),
      addAuthorization: /* @__PURE__ */ __name(function addAuthorization(token) {
        this.request.httpRequest.headers["Authorization"] = "Bearer " + token.token;
      }, "addAuthorization")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/request_signer.js
var require_request_signer = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/signers/request_signer.js"() {
    var AWS2 = require_core();
    var inherit = AWS2.util.inherit;
    AWS2.Signers.RequestSigner = inherit({
      constructor: /* @__PURE__ */ __name(function RequestSigner(request) {
        this.request = request;
      }, "RequestSigner"),
      setServiceClientId: /* @__PURE__ */ __name(function setServiceClientId(id) {
        this.serviceClientId = id;
      }, "setServiceClientId"),
      getServiceClientId: /* @__PURE__ */ __name(function getServiceClientId() {
        return this.serviceClientId;
      }, "getServiceClientId")
    });
    AWS2.Signers.RequestSigner.getVersion = /* @__PURE__ */ __name(function getVersion(version2) {
      switch (version2) {
        case "v2":
          return AWS2.Signers.V2;
        case "v3":
          return AWS2.Signers.V3;
        case "s3v4":
          return AWS2.Signers.V4;
        case "v4":
          return AWS2.Signers.V4;
        case "s3":
          return AWS2.Signers.S3;
        case "v3https":
          return AWS2.Signers.V3Https;
        case "bearer":
          return AWS2.Signers.Bearer;
      }
      throw new Error("Unknown signing version " + version2);
    }, "getVersion");
    require_v2();
    require_v3();
    require_v3https();
    require_v4();
    require_s32();
    require_presign();
    require_bearer();
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/param_validator.js
var require_param_validator = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/param_validator.js"() {
    var AWS2 = require_core();
    AWS2.ParamValidator = AWS2.util.inherit({
      constructor: /* @__PURE__ */ __name(function ParamValidator(validation) {
        if (validation === true || validation === void 0) {
          validation = { "min": true };
        }
        this.validation = validation;
      }, "ParamValidator"),
      validate: /* @__PURE__ */ __name(function validate2(shape, params, context) {
        this.errors = [];
        this.validateMember(shape, params || {}, context || "params");
        if (this.errors.length > 1) {
          var msg = this.errors.join("\n* ");
          msg = "There were " + this.errors.length + " validation errors:\n* " + msg;
          throw AWS2.util.error(
            new Error(msg),
            { code: "MultipleValidationErrors", errors: this.errors }
          );
        } else if (this.errors.length === 1) {
          throw this.errors[0];
        } else {
          return true;
        }
      }, "validate"),
      fail: /* @__PURE__ */ __name(function fail(code, message) {
        this.errors.push(AWS2.util.error(new Error(message), { code }));
      }, "fail"),
      validateStructure: /* @__PURE__ */ __name(function validateStructure(shape, params, context) {
        if (shape.isDocument)
          return true;
        this.validateType(params, context, ["object"], "structure");
        var paramName;
        for (var i = 0; shape.required && i < shape.required.length; i++) {
          paramName = shape.required[i];
          var value = params[paramName];
          if (value === void 0 || value === null) {
            this.fail(
              "MissingRequiredParameter",
              "Missing required key '" + paramName + "' in " + context
            );
          }
        }
        for (paramName in params) {
          if (!Object.prototype.hasOwnProperty.call(params, paramName))
            continue;
          var paramValue = params[paramName], memberShape = shape.members[paramName];
          if (memberShape !== void 0) {
            var memberContext = [context, paramName].join(".");
            this.validateMember(memberShape, paramValue, memberContext);
          } else if (paramValue !== void 0 && paramValue !== null) {
            this.fail(
              "UnexpectedParameter",
              "Unexpected key '" + paramName + "' found in " + context
            );
          }
        }
        return true;
      }, "validateStructure"),
      validateMember: /* @__PURE__ */ __name(function validateMember(shape, param, context) {
        switch (shape.type) {
          case "structure":
            return this.validateStructure(shape, param, context);
          case "list":
            return this.validateList(shape, param, context);
          case "map":
            return this.validateMap(shape, param, context);
          default:
            return this.validateScalar(shape, param, context);
        }
      }, "validateMember"),
      validateList: /* @__PURE__ */ __name(function validateList(shape, params, context) {
        if (this.validateType(params, context, [Array])) {
          this.validateRange(shape, params.length, context, "list member count");
          for (var i = 0; i < params.length; i++) {
            this.validateMember(shape.member, params[i], context + "[" + i + "]");
          }
        }
      }, "validateList"),
      validateMap: /* @__PURE__ */ __name(function validateMap(shape, params, context) {
        if (this.validateType(params, context, ["object"], "map")) {
          var mapCount = 0;
          for (var param in params) {
            if (!Object.prototype.hasOwnProperty.call(params, param))
              continue;
            this.validateMember(
              shape.key,
              param,
              context + "[key='" + param + "']"
            );
            this.validateMember(
              shape.value,
              params[param],
              context + "['" + param + "']"
            );
            mapCount++;
          }
          this.validateRange(shape, mapCount, context, "map member count");
        }
      }, "validateMap"),
      validateScalar: /* @__PURE__ */ __name(function validateScalar(shape, value, context) {
        switch (shape.type) {
          case null:
          case void 0:
          case "string":
            return this.validateString(shape, value, context);
          case "base64":
          case "binary":
            return this.validatePayload(value, context);
          case "integer":
          case "float":
            return this.validateNumber(shape, value, context);
          case "boolean":
            return this.validateType(value, context, ["boolean"]);
          case "timestamp":
            return this.validateType(
              value,
              context,
              [
                Date,
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/,
                "number"
              ],
              "Date object, ISO-8601 string, or a UNIX timestamp"
            );
          default:
            return this.fail("UnkownType", "Unhandled type " + shape.type + " for " + context);
        }
      }, "validateScalar"),
      validateString: /* @__PURE__ */ __name(function validateString(shape, value, context) {
        var validTypes = ["string"];
        if (shape.isJsonValue) {
          validTypes = validTypes.concat(["number", "object", "boolean"]);
        }
        if (value !== null && this.validateType(value, context, validTypes)) {
          this.validateEnum(shape, value, context);
          this.validateRange(shape, value.length, context, "string length");
          this.validatePattern(shape, value, context);
          this.validateUri(shape, value, context);
        }
      }, "validateString"),
      validateUri: /* @__PURE__ */ __name(function validateUri(shape, value, context) {
        if (shape["location"] === "uri") {
          if (value.length === 0) {
            this.fail("UriParameterError", 'Expected uri parameter to have length >= 1, but found "' + value + '" for ' + context);
          }
        }
      }, "validateUri"),
      validatePattern: /* @__PURE__ */ __name(function validatePattern(shape, value, context) {
        if (this.validation["pattern"] && shape["pattern"] !== void 0) {
          if (!new RegExp(shape["pattern"]).test(value)) {
            this.fail("PatternMatchError", 'Provided value "' + value + '" does not match regex pattern /' + shape["pattern"] + "/ for " + context);
          }
        }
      }, "validatePattern"),
      validateRange: /* @__PURE__ */ __name(function validateRange(shape, value, context, descriptor) {
        if (this.validation["min"]) {
          if (shape["min"] !== void 0 && value < shape["min"]) {
            this.fail("MinRangeError", "Expected " + descriptor + " >= " + shape["min"] + ", but found " + value + " for " + context);
          }
        }
        if (this.validation["max"]) {
          if (shape["max"] !== void 0 && value > shape["max"]) {
            this.fail("MaxRangeError", "Expected " + descriptor + " <= " + shape["max"] + ", but found " + value + " for " + context);
          }
        }
      }, "validateRange"),
      validateEnum: /* @__PURE__ */ __name(function validateRange(shape, value, context) {
        if (this.validation["enum"] && shape["enum"] !== void 0) {
          if (shape["enum"].indexOf(value) === -1) {
            this.fail("EnumError", "Found string value of " + value + ", but expected " + shape["enum"].join("|") + " for " + context);
          }
        }
      }, "validateRange"),
      validateType: /* @__PURE__ */ __name(function validateType(value, context, acceptedTypes, type) {
        if (value === null || value === void 0)
          return false;
        var foundInvalidType = false;
        for (var i = 0; i < acceptedTypes.length; i++) {
          if (typeof acceptedTypes[i] === "string") {
            if (typeof value === acceptedTypes[i])
              return true;
          } else if (acceptedTypes[i] instanceof RegExp) {
            if ((value || "").toString().match(acceptedTypes[i]))
              return true;
          } else {
            if (value instanceof acceptedTypes[i])
              return true;
            if (AWS2.util.isType(value, acceptedTypes[i]))
              return true;
            if (!type && !foundInvalidType)
              acceptedTypes = acceptedTypes.slice();
            acceptedTypes[i] = AWS2.util.typeName(acceptedTypes[i]);
          }
          foundInvalidType = true;
        }
        var acceptedType = type;
        if (!acceptedType) {
          acceptedType = acceptedTypes.join(", ").replace(/,([^,]+)$/, ", or$1");
        }
        var vowel = acceptedType.match(/^[aeiou]/i) ? "n" : "";
        this.fail("InvalidParameterType", "Expected " + context + " to be a" + vowel + " " + acceptedType);
        return false;
      }, "validateType"),
      validateNumber: /* @__PURE__ */ __name(function validateNumber(shape, value, context) {
        if (value === null || value === void 0)
          return;
        if (typeof value === "string") {
          var castedValue = parseFloat(value);
          if (castedValue.toString() === value)
            value = castedValue;
        }
        if (this.validateType(value, context, ["number"])) {
          this.validateRange(shape, value, context, "numeric value");
        }
      }, "validateNumber"),
      validatePayload: /* @__PURE__ */ __name(function validatePayload(value, context) {
        if (value === null || value === void 0)
          return;
        if (typeof value === "string")
          return;
        if (value && typeof value.byteLength === "number")
          return;
        if (AWS2.util.isNode()) {
          var Stream = AWS2.util.stream.Stream;
          if (AWS2.util.Buffer.isBuffer(value) || value instanceof Stream)
            return;
        } else {
          if (typeof Blob !== void 0 && value instanceof Blob)
            return;
        }
        var types = ["Buffer", "Stream", "File", "Blob", "ArrayBuffer", "DataView"];
        if (value) {
          for (var i = 0; i < types.length; i++) {
            if (AWS2.util.isType(value, types[i]))
              return;
            if (AWS2.util.typeName(value.constructor) === types[i])
              return;
          }
        }
        this.fail("InvalidParameterType", "Expected " + context + " to be a string, Buffer, Stream, Blob, or typed array object");
      }, "validatePayload")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/core.js
var require_core = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/core.js"(exports, module) {
    var AWS2 = { util: require_util3() };
    var _hidden = {};
    _hidden.toString();
    module.exports = AWS2;
    AWS2.util.update(AWS2, {
      VERSION: "2.1252.0",
      Signers: {},
      Protocol: {
        Json: require_json(),
        Query: require_query(),
        Rest: require_rest(),
        RestJson: require_rest_json(),
        RestXml: require_rest_xml()
      },
      XML: {
        Builder: require_builder2(),
        Parser: null
      },
      JSON: {
        Builder: require_builder(),
        Parser: require_parser()
      },
      Model: {
        Api: require_api(),
        Operation: require_operation(),
        Shape: require_shape(),
        Paginator: require_paginator(),
        ResourceWaiter: require_resource_waiter()
      },
      apiLoader: require_api_loader(),
      EndpointCache: require_endpoint_cache().EndpointCache
    });
    require_sequential_executor();
    require_service();
    require_config3();
    require_http4();
    require_event_listeners();
    require_request();
    require_response2();
    require_resource_waiter2();
    require_request_signer();
    require_param_validator();
    AWS2.events = new AWS2.SequentialExecutor();
    AWS2.util.memoizedProperty(AWS2, "endpointCache", function() {
      return new AWS2.EndpointCache(AWS2.config.endpointCacheSize);
    }, true);
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng2;
    var _crypto = _interopRequireDefault(__require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    function rng2() {
      return _crypto.default.randomBytes(16);
    }
    __name(rng2, "rng");
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/bytesToUuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var byteToHex2 = [];
    for (i = 0; i < 256; ++i) {
      byteToHex2[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex2;
      return [bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], "-", bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]], bth[buf[i2++]]].join("");
    }
    __name(bytesToUuid, "bytesToUuid");
    var _default = bytesToUuid;
    exports.default = _default;
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _bytesToUuid = _interopRequireDefault(require_bytesToUuid());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    var _nodeId2;
    var _clockseq2;
    var _lastMSecs2 = 0;
    var _lastNSecs2 = 0;
    function v12(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];
      options = options || {};
      var node = options.node || _nodeId2;
      var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq2;
      if (node == null || clockseq == null) {
        var seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId2 = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq2 = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
      var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs2 + 1;
      var dt = msecs - _lastMSecs2 + (nsecs - _lastNSecs2) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs2) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs2 = msecs;
      _lastNSecs2 = nsecs;
      _clockseq2 = clockseq;
      msecs += 122192928e5;
      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      var tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf ? buf : (0, _bytesToUuid.default)(b);
    }
    __name(v12, "v1");
    var _default = v12;
    exports.default = _default;
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;
    var _bytesToUuid = _interopRequireDefault(require_bytesToUuid());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    function uuidToBytes(uuid) {
      var bytes = [];
      uuid.replace(/[a-fA-F0-9]{2}/g, function(hex) {
        bytes.push(parseInt(hex, 16));
      });
      return bytes;
    }
    __name(uuidToBytes, "uuidToBytes");
    function stringToBytes2(str) {
      str = unescape(encodeURIComponent(str));
      var bytes = new Array(str.length);
      for (var i = 0; i < str.length; i++) {
        bytes[i] = str.charCodeAt(i);
      }
      return bytes;
    }
    __name(stringToBytes2, "stringToBytes");
    var DNS2 = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS2;
    var URL3 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL3;
    function _default(name, version2, hashfunc) {
      var generateUUID = /* @__PURE__ */ __name(function(value, namespace, buf, offset) {
        var off = buf && offset || 0;
        if (typeof value == "string")
          value = stringToBytes2(value);
        if (typeof namespace == "string")
          namespace = uuidToBytes(namespace);
        if (!Array.isArray(value))
          throw TypeError("value must be an array of bytes");
        if (!Array.isArray(namespace) || namespace.length !== 16)
          throw TypeError("namespace must be uuid string or an Array of 16 byte values");
        var bytes = hashfunc(namespace.concat(value));
        bytes[6] = bytes[6] & 15 | version2;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          for (var idx = 0; idx < 16; ++idx) {
            buf[off + idx] = bytes[idx];
          }
        }
        return buf || (0, _bytesToUuid.default)(bytes);
      }, "generateUUID");
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS2;
      generateUUID.URL = URL3;
      return generateUUID;
    }
    __name(_default, "_default");
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(__require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    function md52(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    __name(md52, "md5");
    var _default = md52;
    exports.default = _default;
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v3.js
var require_v32 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    var v32 = (0, _v.default)("v3", 48, _md.default);
    var _default = v32;
    exports.default = _default;
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v4.js
var require_v42 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _bytesToUuid = _interopRequireDefault(require_bytesToUuid());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    function v42(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || (0, _bytesToUuid.default)(rnds);
    }
    __name(v42, "v4");
    var _default = v42;
    exports.default = _default;
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(__require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    function sha12(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    __name(sha12, "sha1");
    var _default = sha12;
    exports.default = _default;
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
    var v52 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v52;
    exports.default = _default;
  }
});

// ../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/index.js
var require_dist2 = __commonJS({
  "../../node_modules/.pnpm/uuid@8.0.0/node_modules/uuid/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v32());
    var _v3 = _interopRequireDefault(require_v42());
    var _v4 = _interopRequireDefault(require_v5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    __name(_interopRequireDefault, "_interopRequireDefault");
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/util.js
var require_util3 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/util.js"(exports, module) {
    var AWS2;
    var util = {
      environment: "nodejs",
      engine: /* @__PURE__ */ __name(function engine() {
        if (util.isBrowser() && typeof navigator !== "undefined") {
          return navigator.userAgent;
        } else {
          var engine2 = process.platform + "/" + process.version;
          if (process.env.AWS_EXECUTION_ENV) {
            engine2 += " exec-env/" + process.env.AWS_EXECUTION_ENV;
          }
          return engine2;
        }
      }, "engine"),
      userAgent: /* @__PURE__ */ __name(function userAgent() {
        var name = util.environment;
        var agent = "aws-sdk-" + name + "/" + require_core().VERSION;
        if (name === "nodejs")
          agent += " " + util.engine();
        return agent;
      }, "userAgent"),
      uriEscape: /* @__PURE__ */ __name(function uriEscape(string) {
        var output = encodeURIComponent(string);
        output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);
        output = output.replace(/[*]/g, function(ch) {
          return "%" + ch.charCodeAt(0).toString(16).toUpperCase();
        });
        return output;
      }, "uriEscape"),
      uriEscapePath: /* @__PURE__ */ __name(function uriEscapePath(string) {
        var parts = [];
        util.arrayEach(string.split("/"), function(part) {
          parts.push(util.uriEscape(part));
        });
        return parts.join("/");
      }, "uriEscapePath"),
      urlParse: /* @__PURE__ */ __name(function urlParse(url2) {
        return util.url.parse(url2);
      }, "urlParse"),
      urlFormat: /* @__PURE__ */ __name(function urlFormat(url2) {
        return util.url.format(url2);
      }, "urlFormat"),
      queryStringParse: /* @__PURE__ */ __name(function queryStringParse(qs) {
        return util.querystring.parse(qs);
      }, "queryStringParse"),
      queryParamsToString: /* @__PURE__ */ __name(function queryParamsToString(params) {
        var items = [];
        var escape2 = util.uriEscape;
        var sortedKeys = Object.keys(params).sort();
        util.arrayEach(sortedKeys, function(name) {
          var value = params[name];
          var ename = escape2(name);
          var result = ename + "=";
          if (Array.isArray(value)) {
            var vals = [];
            util.arrayEach(value, function(item) {
              vals.push(escape2(item));
            });
            result = ename + "=" + vals.sort().join("&" + ename + "=");
          } else if (value !== void 0 && value !== null) {
            result = ename + "=" + escape2(value);
          }
          items.push(result);
        });
        return items.join("&");
      }, "queryParamsToString"),
      readFileSync: /* @__PURE__ */ __name(function readFileSync(path) {
        if (util.isBrowser())
          return null;
        return __require("fs").readFileSync(path, "utf-8");
      }, "readFileSync"),
      base64: {
        encode: /* @__PURE__ */ __name(function encode64(string) {
          if (typeof string === "number") {
            throw util.error(new Error("Cannot base64 encode number " + string));
          }
          if (string === null || typeof string === "undefined") {
            return string;
          }
          var buf = util.buffer.toBuffer(string);
          return buf.toString("base64");
        }, "encode64"),
        decode: /* @__PURE__ */ __name(function decode64(string) {
          if (typeof string === "number") {
            throw util.error(new Error("Cannot base64 decode number " + string));
          }
          if (string === null || typeof string === "undefined") {
            return string;
          }
          return util.buffer.toBuffer(string, "base64");
        }, "decode64")
      },
      buffer: {
        toBuffer: function(data, encoding) {
          return typeof util.Buffer.from === "function" && util.Buffer.from !== Uint8Array.from ? util.Buffer.from(data, encoding) : new util.Buffer(data, encoding);
        },
        alloc: function(size, fill, encoding) {
          if (typeof size !== "number") {
            throw new Error("size passed to alloc must be a number.");
          }
          if (typeof util.Buffer.alloc === "function") {
            return util.Buffer.alloc(size, fill, encoding);
          } else {
            var buf = new util.Buffer(size);
            if (fill !== void 0 && typeof buf.fill === "function") {
              buf.fill(fill, void 0, void 0, encoding);
            }
            return buf;
          }
        },
        toStream: /* @__PURE__ */ __name(function toStream(buffer) {
          if (!util.Buffer.isBuffer(buffer))
            buffer = util.buffer.toBuffer(buffer);
          var readable = new util.stream.Readable();
          var pos = 0;
          readable._read = function(size) {
            if (pos >= buffer.length)
              return readable.push(null);
            var end = pos + size;
            if (end > buffer.length)
              end = buffer.length;
            readable.push(buffer.slice(pos, end));
            pos = end;
          };
          return readable;
        }, "toStream"),
        concat: function(buffers) {
          var length = 0, offset = 0, buffer = null, i;
          for (i = 0; i < buffers.length; i++) {
            length += buffers[i].length;
          }
          buffer = util.buffer.alloc(length);
          for (i = 0; i < buffers.length; i++) {
            buffers[i].copy(buffer, offset);
            offset += buffers[i].length;
          }
          return buffer;
        }
      },
      string: {
        byteLength: /* @__PURE__ */ __name(function byteLength(string) {
          if (string === null || string === void 0)
            return 0;
          if (typeof string === "string")
            string = util.buffer.toBuffer(string);
          if (typeof string.byteLength === "number") {
            return string.byteLength;
          } else if (typeof string.length === "number") {
            return string.length;
          } else if (typeof string.size === "number") {
            return string.size;
          } else if (typeof string.path === "string") {
            return __require("fs").lstatSync(string.path).size;
          } else {
            throw util.error(
              new Error("Cannot determine length of " + string),
              { object: string }
            );
          }
        }, "byteLength"),
        upperFirst: /* @__PURE__ */ __name(function upperFirst(string) {
          return string[0].toUpperCase() + string.substr(1);
        }, "upperFirst"),
        lowerFirst: /* @__PURE__ */ __name(function lowerFirst(string) {
          return string[0].toLowerCase() + string.substr(1);
        }, "lowerFirst")
      },
      ini: {
        parse: /* @__PURE__ */ __name(function string(ini) {
          var currentSection, map = {};
          util.arrayEach(ini.split(/\r?\n/), function(line) {
            line = line.split(/(^|\s)[;#]/)[0].trim();
            var isSection = line[0] === "[" && line[line.length - 1] === "]";
            if (isSection) {
              currentSection = line.substring(1, line.length - 1);
              if (currentSection === "__proto__" || currentSection.split(/\s/)[1] === "__proto__") {
                throw util.error(
                  new Error("Cannot load profile name '" + currentSection + "' from shared ini file.")
                );
              }
            } else if (currentSection) {
              var indexOfEqualsSign = line.indexOf("=");
              var start = 0;
              var end = line.length - 1;
              var isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
              if (isAssignment) {
                var name = line.substring(0, indexOfEqualsSign).trim();
                var value = line.substring(indexOfEqualsSign + 1).trim();
                map[currentSection] = map[currentSection] || {};
                map[currentSection][name] = value;
              }
            }
          });
          return map;
        }, "string")
      },
      fn: {
        noop: function() {
        },
        callback: function(err) {
          if (err)
            throw err;
        },
        makeAsync: /* @__PURE__ */ __name(function makeAsync(fn, expectedArgs) {
          if (expectedArgs && expectedArgs <= fn.length) {
            return fn;
          }
          return function() {
            var args = Array.prototype.slice.call(arguments, 0);
            var callback = args.pop();
            var result = fn.apply(null, args);
            callback(result);
          };
        }, "makeAsync")
      },
      date: {
        getDate: /* @__PURE__ */ __name(function getDate() {
          if (!AWS2)
            AWS2 = require_core();
          if (AWS2.config.systemClockOffset) {
            return new Date(new Date().getTime() + AWS2.config.systemClockOffset);
          } else {
            return new Date();
          }
        }, "getDate"),
        iso8601: /* @__PURE__ */ __name(function iso8601(date) {
          if (date === void 0) {
            date = util.date.getDate();
          }
          return date.toISOString().replace(/\.\d{3}Z$/, "Z");
        }, "iso8601"),
        rfc822: /* @__PURE__ */ __name(function rfc822(date) {
          if (date === void 0) {
            date = util.date.getDate();
          }
          return date.toUTCString();
        }, "rfc822"),
        unixTimestamp: /* @__PURE__ */ __name(function unixTimestamp(date) {
          if (date === void 0) {
            date = util.date.getDate();
          }
          return date.getTime() / 1e3;
        }, "unixTimestamp"),
        from: /* @__PURE__ */ __name(function format(date) {
          if (typeof date === "number") {
            return new Date(date * 1e3);
          } else {
            return new Date(date);
          }
        }, "format"),
        format: /* @__PURE__ */ __name(function format(date, formatter) {
          if (!formatter)
            formatter = "iso8601";
          return util.date[formatter](util.date.from(date));
        }, "format"),
        parseTimestamp: /* @__PURE__ */ __name(function parseTimestamp(value) {
          if (typeof value === "number") {
            return new Date(value * 1e3);
          } else if (value.match(/^\d+$/)) {
            return new Date(value * 1e3);
          } else if (value.match(/^\d{4}/)) {
            return new Date(value);
          } else if (value.match(/^\w{3},/)) {
            return new Date(value);
          } else {
            throw util.error(
              new Error("unhandled timestamp format: " + value),
              { code: "TimestampParserError" }
            );
          }
        }, "parseTimestamp")
      },
      crypto: {
        crc32Table: [
          0,
          1996959894,
          3993919788,
          2567524794,
          124634137,
          1886057615,
          3915621685,
          2657392035,
          249268274,
          2044508324,
          3772115230,
          2547177864,
          162941995,
          2125561021,
          3887607047,
          2428444049,
          498536548,
          1789927666,
          4089016648,
          2227061214,
          450548861,
          1843258603,
          4107580753,
          2211677639,
          325883990,
          1684777152,
          4251122042,
          2321926636,
          335633487,
          1661365465,
          4195302755,
          2366115317,
          997073096,
          1281953886,
          3579855332,
          2724688242,
          1006888145,
          1258607687,
          3524101629,
          2768942443,
          901097722,
          1119000684,
          3686517206,
          2898065728,
          853044451,
          1172266101,
          3705015759,
          2882616665,
          651767980,
          1373503546,
          3369554304,
          3218104598,
          565507253,
          1454621731,
          3485111705,
          3099436303,
          671266974,
          1594198024,
          3322730930,
          2970347812,
          795835527,
          1483230225,
          3244367275,
          3060149565,
          1994146192,
          31158534,
          2563907772,
          4023717930,
          1907459465,
          112637215,
          2680153253,
          3904427059,
          2013776290,
          251722036,
          2517215374,
          3775830040,
          2137656763,
          141376813,
          2439277719,
          3865271297,
          1802195444,
          476864866,
          2238001368,
          4066508878,
          1812370925,
          453092731,
          2181625025,
          4111451223,
          1706088902,
          314042704,
          2344532202,
          4240017532,
          1658658271,
          366619977,
          2362670323,
          4224994405,
          1303535960,
          984961486,
          2747007092,
          3569037538,
          1256170817,
          1037604311,
          2765210733,
          3554079995,
          1131014506,
          879679996,
          2909243462,
          3663771856,
          1141124467,
          855842277,
          2852801631,
          3708648649,
          1342533948,
          654459306,
          3188396048,
          3373015174,
          1466479909,
          544179635,
          3110523913,
          3462522015,
          1591671054,
          702138776,
          2966460450,
          3352799412,
          1504918807,
          783551873,
          3082640443,
          3233442989,
          3988292384,
          2596254646,
          62317068,
          1957810842,
          3939845945,
          2647816111,
          81470997,
          1943803523,
          3814918930,
          2489596804,
          225274430,
          2053790376,
          3826175755,
          2466906013,
          167816743,
          2097651377,
          4027552580,
          2265490386,
          503444072,
          1762050814,
          4150417245,
          2154129355,
          426522225,
          1852507879,
          4275313526,
          2312317920,
          282753626,
          1742555852,
          4189708143,
          2394877945,
          397917763,
          1622183637,
          3604390888,
          2714866558,
          953729732,
          1340076626,
          3518719985,
          2797360999,
          1068828381,
          1219638859,
          3624741850,
          2936675148,
          906185462,
          1090812512,
          3747672003,
          2825379669,
          829329135,
          1181335161,
          3412177804,
          3160834842,
          628085408,
          1382605366,
          3423369109,
          3138078467,
          570562233,
          1426400815,
          3317316542,
          2998733608,
          733239954,
          1555261956,
          3268935591,
          3050360625,
          752459403,
          1541320221,
          2607071920,
          3965973030,
          1969922972,
          40735498,
          2617837225,
          3943577151,
          1913087877,
          83908371,
          2512341634,
          3803740692,
          2075208622,
          213261112,
          2463272603,
          3855990285,
          2094854071,
          198958881,
          2262029012,
          4057260610,
          1759359992,
          534414190,
          2176718541,
          4139329115,
          1873836001,
          414664567,
          2282248934,
          4279200368,
          1711684554,
          285281116,
          2405801727,
          4167216745,
          1634467795,
          376229701,
          2685067896,
          3608007406,
          1308918612,
          956543938,
          2808555105,
          3495958263,
          1231636301,
          1047427035,
          2932959818,
          3654703836,
          1088359270,
          936918e3,
          2847714899,
          3736837829,
          1202900863,
          817233897,
          3183342108,
          3401237130,
          1404277552,
          615818150,
          3134207493,
          3453421203,
          1423857449,
          601450431,
          3009837614,
          3294710456,
          1567103746,
          711928724,
          3020668471,
          3272380065,
          1510334235,
          755167117
        ],
        crc32: /* @__PURE__ */ __name(function crc32(data) {
          var tbl = util.crypto.crc32Table;
          var crc = 0 ^ -1;
          if (typeof data === "string") {
            data = util.buffer.toBuffer(data);
          }
          for (var i = 0; i < data.length; i++) {
            var code = data.readUInt8(i);
            crc = crc >>> 8 ^ tbl[(crc ^ code) & 255];
          }
          return (crc ^ -1) >>> 0;
        }, "crc32"),
        hmac: /* @__PURE__ */ __name(function hmac(key, string, digest, fn) {
          if (!digest)
            digest = "binary";
          if (digest === "buffer") {
            digest = void 0;
          }
          if (!fn)
            fn = "sha256";
          if (typeof string === "string")
            string = util.buffer.toBuffer(string);
          return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
        }, "hmac"),
        md5: /* @__PURE__ */ __name(function md52(data, digest, callback) {
          return util.crypto.hash("md5", data, digest, callback);
        }, "md5"),
        sha256: /* @__PURE__ */ __name(function sha256(data, digest, callback) {
          return util.crypto.hash("sha256", data, digest, callback);
        }, "sha256"),
        hash: function(algorithm, data, digest, callback) {
          var hash = util.crypto.createHash(algorithm);
          if (!digest) {
            digest = "binary";
          }
          if (digest === "buffer") {
            digest = void 0;
          }
          if (typeof data === "string")
            data = util.buffer.toBuffer(data);
          var sliceFn = util.arraySliceFn(data);
          var isBuffer = util.Buffer.isBuffer(data);
          if (util.isBrowser() && typeof ArrayBuffer !== "undefined" && data && data.buffer instanceof ArrayBuffer)
            isBuffer = true;
          if (callback && typeof data === "object" && typeof data.on === "function" && !isBuffer) {
            data.on("data", function(chunk) {
              hash.update(chunk);
            });
            data.on("error", function(err) {
              callback(err);
            });
            data.on("end", function() {
              callback(null, hash.digest(digest));
            });
          } else if (callback && sliceFn && !isBuffer && typeof FileReader !== "undefined") {
            var index = 0, size = 1024 * 512;
            var reader = new FileReader();
            reader.onerror = function() {
              callback(new Error("Failed to read data."));
            };
            reader.onload = function() {
              var buf = new util.Buffer(new Uint8Array(reader.result));
              hash.update(buf);
              index += buf.length;
              reader._continueReading();
            };
            reader._continueReading = function() {
              if (index >= data.size) {
                callback(null, hash.digest(digest));
                return;
              }
              var back = index + size;
              if (back > data.size)
                back = data.size;
              reader.readAsArrayBuffer(sliceFn.call(data, index, back));
            };
            reader._continueReading();
          } else {
            if (util.isBrowser() && typeof data === "object" && !isBuffer) {
              data = new util.Buffer(new Uint8Array(data));
            }
            var out = hash.update(data).digest(digest);
            if (callback)
              callback(null, out);
            return out;
          }
        },
        toHex: /* @__PURE__ */ __name(function toHex(data) {
          var out = [];
          for (var i = 0; i < data.length; i++) {
            out.push(("0" + data.charCodeAt(i).toString(16)).substr(-2, 2));
          }
          return out.join("");
        }, "toHex"),
        createHash: /* @__PURE__ */ __name(function createHash(algorithm) {
          return util.crypto.lib.createHash(algorithm);
        }, "createHash")
      },
      abort: {},
      each: /* @__PURE__ */ __name(function each(object, iterFunction) {
        for (var key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            var ret = iterFunction.call(this, key, object[key]);
            if (ret === util.abort)
              break;
          }
        }
      }, "each"),
      arrayEach: /* @__PURE__ */ __name(function arrayEach(array, iterFunction) {
        for (var idx in array) {
          if (Object.prototype.hasOwnProperty.call(array, idx)) {
            var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
            if (ret === util.abort)
              break;
          }
        }
      }, "arrayEach"),
      update: /* @__PURE__ */ __name(function update(obj1, obj2) {
        util.each(obj2, /* @__PURE__ */ __name(function iterator(key, item) {
          obj1[key] = item;
        }, "iterator"));
        return obj1;
      }, "update"),
      merge: /* @__PURE__ */ __name(function merge(obj1, obj2) {
        return util.update(util.copy(obj1), obj2);
      }, "merge"),
      copy: /* @__PURE__ */ __name(function copy(object) {
        if (object === null || object === void 0)
          return object;
        var dupe = {};
        for (var key in object) {
          dupe[key] = object[key];
        }
        return dupe;
      }, "copy"),
      isEmpty: /* @__PURE__ */ __name(function isEmpty(obj) {
        for (var prop in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, prop)) {
            return false;
          }
        }
        return true;
      }, "isEmpty"),
      arraySliceFn: /* @__PURE__ */ __name(function arraySliceFn(obj) {
        var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
        return typeof fn === "function" ? fn : null;
      }, "arraySliceFn"),
      isType: /* @__PURE__ */ __name(function isType(obj, type) {
        if (typeof type === "function")
          type = util.typeName(type);
        return Object.prototype.toString.call(obj) === "[object " + type + "]";
      }, "isType"),
      typeName: /* @__PURE__ */ __name(function typeName(type) {
        if (Object.prototype.hasOwnProperty.call(type, "name"))
          return type.name;
        var str = type.toString();
        var match = str.match(/^\s*function (.+)\(/);
        return match ? match[1] : str;
      }, "typeName"),
      error: /* @__PURE__ */ __name(function error(err, options) {
        var originalError = null;
        if (typeof err.message === "string" && err.message !== "") {
          if (typeof options === "string" || options && options.message) {
            originalError = util.copy(err);
            originalError.message = err.message;
          }
        }
        err.message = err.message || null;
        if (typeof options === "string") {
          err.message = options;
        } else if (typeof options === "object" && options !== null) {
          util.update(err, options);
          if (options.message)
            err.message = options.message;
          if (options.code || options.name)
            err.code = options.code || options.name;
          if (options.stack)
            err.stack = options.stack;
        }
        if (typeof Object.defineProperty === "function") {
          Object.defineProperty(err, "name", { writable: true, enumerable: false });
          Object.defineProperty(err, "message", { enumerable: true });
        }
        err.name = String(options && options.name || err.name || err.code || "Error");
        err.time = new Date();
        if (originalError)
          err.originalError = originalError;
        return err;
      }, "error"),
      inherit: /* @__PURE__ */ __name(function inherit(klass, features) {
        var newObject = null;
        if (features === void 0) {
          features = klass;
          klass = Object;
          newObject = {};
        } else {
          var ctor = /* @__PURE__ */ __name(function ConstructorWrapper() {
          }, "ConstructorWrapper");
          ctor.prototype = klass.prototype;
          newObject = new ctor();
        }
        if (features.constructor === Object) {
          features.constructor = function() {
            if (klass !== Object) {
              return klass.apply(this, arguments);
            }
          };
        }
        features.constructor.prototype = newObject;
        util.update(features.constructor.prototype, features);
        features.constructor.__super__ = klass;
        return features.constructor;
      }, "inherit"),
      mixin: /* @__PURE__ */ __name(function mixin() {
        var klass = arguments[0];
        for (var i = 1; i < arguments.length; i++) {
          for (var prop in arguments[i].prototype) {
            var fn = arguments[i].prototype[prop];
            if (prop !== "constructor") {
              klass.prototype[prop] = fn;
            }
          }
        }
        return klass;
      }, "mixin"),
      hideProperties: /* @__PURE__ */ __name(function hideProperties(obj, props) {
        if (typeof Object.defineProperty !== "function")
          return;
        util.arrayEach(props, function(key) {
          Object.defineProperty(obj, key, {
            enumerable: false,
            writable: true,
            configurable: true
          });
        });
      }, "hideProperties"),
      property: /* @__PURE__ */ __name(function property(obj, name, value, enumerable, isValue) {
        var opts = {
          configurable: true,
          enumerable: enumerable !== void 0 ? enumerable : true
        };
        if (typeof value === "function" && !isValue) {
          opts.get = value;
        } else {
          opts.value = value;
          opts.writable = true;
        }
        Object.defineProperty(obj, name, opts);
      }, "property"),
      memoizedProperty: /* @__PURE__ */ __name(function memoizedProperty(obj, name, get, enumerable) {
        var cachedValue = null;
        util.property(obj, name, function() {
          if (cachedValue === null) {
            cachedValue = get();
          }
          return cachedValue;
        }, enumerable);
      }, "memoizedProperty"),
      hoistPayloadMember: /* @__PURE__ */ __name(function hoistPayloadMember(resp) {
        var req = resp.request;
        var operationName = req.operation;
        var operation = req.service.api.operations[operationName];
        var output = operation.output;
        if (output.payload && !operation.hasEventOutput) {
          var payloadMember = output.members[output.payload];
          var responsePayload = resp.data[output.payload];
          if (payloadMember.type === "structure") {
            util.each(responsePayload, function(key, value) {
              util.property(resp.data, key, value, false);
            });
          }
        }
      }, "hoistPayloadMember"),
      computeSha256: /* @__PURE__ */ __name(function computeSha256(body, done) {
        if (util.isNode()) {
          var Stream = util.stream.Stream;
          var fs = __require("fs");
          if (typeof Stream === "function" && body instanceof Stream) {
            if (typeof body.path === "string") {
              var settings = {};
              if (typeof body.start === "number") {
                settings.start = body.start;
              }
              if (typeof body.end === "number") {
                settings.end = body.end;
              }
              body = fs.createReadStream(body.path, settings);
            } else {
              return done(new Error("Non-file stream objects are not supported with SigV4"));
            }
          }
        }
        util.crypto.sha256(body, "hex", function(err, sha) {
          if (err)
            done(err);
          else
            done(null, sha);
        });
      }, "computeSha256"),
      isClockSkewed: /* @__PURE__ */ __name(function isClockSkewed(serverTime) {
        if (serverTime) {
          util.property(
            AWS2.config,
            "isClockSkewed",
            Math.abs(new Date().getTime() - serverTime) >= 3e5,
            false
          );
          return AWS2.config.isClockSkewed;
        }
      }, "isClockSkewed"),
      applyClockOffset: /* @__PURE__ */ __name(function applyClockOffset(serverTime) {
        if (serverTime)
          AWS2.config.systemClockOffset = serverTime - new Date().getTime();
      }, "applyClockOffset"),
      extractRequestId: /* @__PURE__ */ __name(function extractRequestId(resp) {
        var requestId = resp.httpResponse.headers["x-amz-request-id"] || resp.httpResponse.headers["x-amzn-requestid"];
        if (!requestId && resp.data && resp.data.ResponseMetadata) {
          requestId = resp.data.ResponseMetadata.RequestId;
        }
        if (requestId) {
          resp.requestId = requestId;
        }
        if (resp.error) {
          resp.error.requestId = requestId;
        }
      }, "extractRequestId"),
      addPromises: /* @__PURE__ */ __name(function addPromises(constructors, PromiseDependency) {
        var deletePromises = false;
        if (PromiseDependency === void 0 && AWS2 && AWS2.config) {
          PromiseDependency = AWS2.config.getPromisesDependency();
        }
        if (PromiseDependency === void 0 && typeof Promise !== "undefined") {
          PromiseDependency = Promise;
        }
        if (typeof PromiseDependency !== "function")
          deletePromises = true;
        if (!Array.isArray(constructors))
          constructors = [constructors];
        for (var ind = 0; ind < constructors.length; ind++) {
          var constructor = constructors[ind];
          if (deletePromises) {
            if (constructor.deletePromisesFromClass) {
              constructor.deletePromisesFromClass();
            }
          } else if (constructor.addPromisesToClass) {
            constructor.addPromisesToClass(PromiseDependency);
          }
        }
      }, "addPromises"),
      promisifyMethod: /* @__PURE__ */ __name(function promisifyMethod(methodName, PromiseDependency) {
        return /* @__PURE__ */ __name(function promise() {
          var self = this;
          var args = Array.prototype.slice.call(arguments);
          return new PromiseDependency(function(resolve, reject) {
            args.push(function(err, data) {
              if (err) {
                reject(err);
              } else {
                resolve(data);
              }
            });
            self[methodName].apply(self, args);
          });
        }, "promise");
      }, "promisifyMethod"),
      isDualstackAvailable: /* @__PURE__ */ __name(function isDualstackAvailable(service) {
        if (!service)
          return false;
        var metadata = require_metadata();
        if (typeof service !== "string")
          service = service.serviceIdentifier;
        if (typeof service !== "string" || !metadata.hasOwnProperty(service))
          return false;
        return !!metadata[service].dualstackAvailable;
      }, "isDualstackAvailable"),
      calculateRetryDelay: /* @__PURE__ */ __name(function calculateRetryDelay(retryCount, retryDelayOptions, err) {
        if (!retryDelayOptions)
          retryDelayOptions = {};
        var customBackoff = retryDelayOptions.customBackoff || null;
        if (typeof customBackoff === "function") {
          return customBackoff(retryCount, err);
        }
        var base = typeof retryDelayOptions.base === "number" ? retryDelayOptions.base : 100;
        var delay = Math.random() * (Math.pow(2, retryCount) * base);
        return delay;
      }, "calculateRetryDelay"),
      handleRequestWithRetries: /* @__PURE__ */ __name(function handleRequestWithRetries(httpRequest2, options, cb) {
        if (!options)
          options = {};
        var http = AWS2.HttpClient.getInstance();
        var httpOptions = options.httpOptions || {};
        var retryCount = 0;
        var errCallback = /* @__PURE__ */ __name(function(err) {
          var maxRetries = options.maxRetries || 0;
          if (err && err.code === "TimeoutError")
            err.retryable = true;
          if (err && err.retryable && retryCount < maxRetries) {
            var delay = util.calculateRetryDelay(retryCount, options.retryDelayOptions, err);
            if (delay >= 0) {
              retryCount++;
              setTimeout(sendRequest, delay + (err.retryAfter || 0));
              return;
            }
          }
          cb(err);
        }, "errCallback");
        var sendRequest = /* @__PURE__ */ __name(function() {
          var data = "";
          http.handleRequest(httpRequest2, httpOptions, function(httpResponse) {
            httpResponse.on("data", function(chunk) {
              data += chunk.toString();
            });
            httpResponse.on("end", function() {
              var statusCode = httpResponse.statusCode;
              if (statusCode < 300) {
                cb(null, data);
              } else {
                var retryAfter = parseInt(httpResponse.headers["retry-after"], 10) * 1e3 || 0;
                var err = util.error(
                  new Error(),
                  {
                    statusCode,
                    retryable: statusCode >= 500 || statusCode === 429
                  }
                );
                if (retryAfter && err.retryable)
                  err.retryAfter = retryAfter;
                errCallback(err);
              }
            });
          }, errCallback);
        }, "sendRequest");
        AWS2.util.defer(sendRequest);
      }, "handleRequestWithRetries"),
      uuid: {
        v4: /* @__PURE__ */ __name(function uuidV4() {
          return require_dist2().v4();
        }, "uuidV4")
      },
      convertPayloadToString: /* @__PURE__ */ __name(function convertPayloadToString(resp) {
        var req = resp.request;
        var operation = req.operation;
        var rules = req.service.api.operations[operation].output || {};
        if (rules.payload && resp.data[rules.payload]) {
          resp.data[rules.payload] = resp.data[rules.payload].toString();
        }
      }, "convertPayloadToString"),
      defer: /* @__PURE__ */ __name(function defer(callback) {
        if (typeof process === "object" && typeof process.nextTick === "function") {
          process.nextTick(callback);
        } else if (typeof setImmediate === "function") {
          setImmediate(callback);
        } else {
          setTimeout(callback, 0);
        }
      }, "defer"),
      getRequestPayloadShape: /* @__PURE__ */ __name(function getRequestPayloadShape(req) {
        var operations = req.service.api.operations;
        if (!operations)
          return void 0;
        var operation = (operations || {})[req.operation];
        if (!operation || !operation.input || !operation.input.payload)
          return void 0;
        return operation.input.members[operation.input.payload];
      }, "getRequestPayloadShape"),
      getProfilesFromSharedConfig: /* @__PURE__ */ __name(function getProfilesFromSharedConfig(iniLoader, filename) {
        var profiles = {};
        var profilesFromConfig = {};
        if (process.env[util.configOptInEnv]) {
          var profilesFromConfig = iniLoader.loadFrom({
            isConfig: true,
            filename: process.env[util.sharedConfigFileEnv]
          });
        }
        var profilesFromCreds = {};
        try {
          var profilesFromCreds = iniLoader.loadFrom({
            filename: filename || process.env[util.configOptInEnv] && process.env[util.sharedCredentialsFileEnv]
          });
        } catch (error) {
          if (!process.env[util.configOptInEnv])
            throw error;
        }
        for (var i = 0, profileNames = Object.keys(profilesFromConfig); i < profileNames.length; i++) {
          profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromConfig[profileNames[i]]);
        }
        for (var i = 0, profileNames = Object.keys(profilesFromCreds); i < profileNames.length; i++) {
          profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromCreds[profileNames[i]]);
        }
        return profiles;
        function objectAssign(target, source) {
          for (var i2 = 0, keys = Object.keys(source); i2 < keys.length; i2++) {
            target[keys[i2]] = source[keys[i2]];
          }
          return target;
        }
        __name(objectAssign, "objectAssign");
      }, "getProfilesFromSharedConfig"),
      ARN: {
        validate: /* @__PURE__ */ __name(function validateARN(str) {
          return str && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
        }, "validateARN"),
        parse: /* @__PURE__ */ __name(function parseARN(arn) {
          var matched = arn.split(":");
          return {
            partition: matched[1],
            service: matched[2],
            region: matched[3],
            accountId: matched[4],
            resource: matched.slice(5).join(":")
          };
        }, "parseARN"),
        build: /* @__PURE__ */ __name(function buildARN(arnObject) {
          if (arnObject.service === void 0 || arnObject.region === void 0 || arnObject.accountId === void 0 || arnObject.resource === void 0)
            throw util.error(new Error("Input ARN object is invalid"));
          return "arn:" + (arnObject.partition || "aws") + ":" + arnObject.service + ":" + arnObject.region + ":" + arnObject.accountId + ":" + arnObject.resource;
        }, "buildARN")
      },
      defaultProfile: "default",
      configOptInEnv: "AWS_SDK_LOAD_CONFIG",
      sharedCredentialsFileEnv: "AWS_SHARED_CREDENTIALS_FILE",
      sharedConfigFileEnv: "AWS_CONFIG_FILE",
      imdsDisabledEnv: "AWS_EC2_METADATA_DISABLED"
    };
    module.exports = util;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/event-message-chunker-stream.js
var require_event_message_chunker_stream = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/event-message-chunker-stream.js"(exports, module) {
    var util = require_core().util;
    var Transform = __require("stream").Transform;
    var allocBuffer = util.buffer.alloc;
    function EventMessageChunkerStream(options) {
      Transform.call(this, options);
      this.currentMessageTotalLength = 0;
      this.currentMessagePendingLength = 0;
      this.currentMessage = null;
      this.messageLengthBuffer = null;
    }
    __name(EventMessageChunkerStream, "EventMessageChunkerStream");
    EventMessageChunkerStream.prototype = Object.create(Transform.prototype);
    EventMessageChunkerStream.prototype._transform = function(chunk, encoding, callback) {
      var chunkLength = chunk.length;
      var currentOffset = 0;
      while (currentOffset < chunkLength) {
        if (!this.currentMessage) {
          var bytesRemaining = chunkLength - currentOffset;
          if (!this.messageLengthBuffer) {
            this.messageLengthBuffer = allocBuffer(4);
          }
          var numBytesForTotal = Math.min(
            4 - this.currentMessagePendingLength,
            bytesRemaining
          );
          chunk.copy(
            this.messageLengthBuffer,
            this.currentMessagePendingLength,
            currentOffset,
            currentOffset + numBytesForTotal
          );
          this.currentMessagePendingLength += numBytesForTotal;
          currentOffset += numBytesForTotal;
          if (this.currentMessagePendingLength < 4) {
            break;
          }
          this.allocateMessage(this.messageLengthBuffer.readUInt32BE(0));
          this.messageLengthBuffer = null;
        }
        var numBytesToWrite = Math.min(
          this.currentMessageTotalLength - this.currentMessagePendingLength,
          chunkLength - currentOffset
        );
        chunk.copy(
          this.currentMessage,
          this.currentMessagePendingLength,
          currentOffset,
          currentOffset + numBytesToWrite
        );
        this.currentMessagePendingLength += numBytesToWrite;
        currentOffset += numBytesToWrite;
        if (this.currentMessageTotalLength && this.currentMessageTotalLength === this.currentMessagePendingLength) {
          this.push(this.currentMessage);
          this.currentMessage = null;
          this.currentMessageTotalLength = 0;
          this.currentMessagePendingLength = 0;
        }
      }
      callback();
    };
    EventMessageChunkerStream.prototype._flush = function(callback) {
      if (this.currentMessageTotalLength) {
        if (this.currentMessageTotalLength === this.currentMessagePendingLength) {
          callback(null, this.currentMessage);
        } else {
          callback(new Error("Truncated event message received."));
        }
      } else {
        callback();
      }
    };
    EventMessageChunkerStream.prototype.allocateMessage = function(size) {
      if (typeof size !== "number") {
        throw new Error("Attempted to allocate an event message where size was not a number: " + size);
      }
      this.currentMessageTotalLength = size;
      this.currentMessagePendingLength = 4;
      this.currentMessage = allocBuffer(size);
      this.currentMessage.writeUInt32BE(size, 0);
    };
    module.exports = {
      EventMessageChunkerStream
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/int64.js
var require_int64 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/int64.js"(exports, module) {
    var util = require_core().util;
    var toBuffer = util.buffer.toBuffer;
    function Int64(bytes) {
      if (bytes.length !== 8) {
        throw new Error("Int64 buffers must be exactly 8 bytes");
      }
      if (!util.Buffer.isBuffer(bytes))
        bytes = toBuffer(bytes);
      this.bytes = bytes;
    }
    __name(Int64, "Int64");
    Int64.fromNumber = function(number) {
      if (number > 9223372036854776e3 || number < -9223372036854776e3) {
        throw new Error(
          number + " is too large (or, if negative, too small) to represent as an Int64"
        );
      }
      var bytes = new Uint8Array(8);
      for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
        bytes[i] = remaining;
      }
      if (number < 0) {
        negate(bytes);
      }
      return new Int64(bytes);
    };
    Int64.prototype.valueOf = function() {
      var bytes = this.bytes.slice(0);
      var negative = bytes[0] & 128;
      if (negative) {
        negate(bytes);
      }
      return parseInt(bytes.toString("hex"), 16) * (negative ? -1 : 1);
    };
    Int64.prototype.toString = function() {
      return String(this.valueOf());
    };
    function negate(bytes) {
      for (var i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (var i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0) {
          break;
        }
      }
    }
    __name(negate, "negate");
    module.exports = {
      Int64
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/split-message.js
var require_split_message = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/split-message.js"(exports, module) {
    var util = require_core().util;
    var toBuffer = util.buffer.toBuffer;
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage(message) {
      if (!util.Buffer.isBuffer(message))
        message = toBuffer(message);
      if (message.length < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      if (message.length !== message.readUInt32BE(0)) {
        throw new Error("Reported message length does not match received message length");
      }
      var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);
      if (expectedPreludeChecksum !== util.crypto.crc32(
        message.slice(0, PRELUDE_LENGTH)
      )) {
        throw new Error(
          "The prelude checksum specified in the message (" + expectedPreludeChecksum + ") does not match the calculated CRC32 checksum."
        );
      }
      var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);
      if (expectedMessageChecksum !== util.crypto.crc32(
        message.slice(0, message.length - CHECKSUM_LENGTH)
      )) {
        throw new Error(
          "The message checksum did not match the expected value of " + expectedMessageChecksum
        );
      }
      var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;
      var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);
      return {
        headers: message.slice(headersStart, headersEnd),
        body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH)
      };
    }
    __name(splitMessage, "splitMessage");
    module.exports = {
      splitMessage
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/parse-message.js
var require_parse_message = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/parse-message.js"(exports, module) {
    var Int64 = require_int64().Int64;
    var splitMessage = require_split_message().splitMessage;
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    function parseHeaders(headers) {
      var out = {};
      var position = 0;
      while (position < headers.length) {
        var nameLength = headers.readUInt8(position++);
        var name = headers.slice(position, position + nameLength).toString();
        position += nameLength;
        switch (headers.readUInt8(position++)) {
          case 0:
            out[name] = {
              type: BOOLEAN_TAG,
              value: true
            };
            break;
          case 1:
            out[name] = {
              type: BOOLEAN_TAG,
              value: false
            };
            break;
          case 2:
            out[name] = {
              type: BYTE_TAG,
              value: headers.readInt8(position++)
            };
            break;
          case 3:
            out[name] = {
              type: SHORT_TAG,
              value: headers.readInt16BE(position)
            };
            position += 2;
            break;
          case 4:
            out[name] = {
              type: INT_TAG,
              value: headers.readInt32BE(position)
            };
            position += 4;
            break;
          case 5:
            out[name] = {
              type: LONG_TAG,
              value: new Int64(headers.slice(position, position + 8))
            };
            position += 8;
            break;
          case 6:
            var binaryLength = headers.readUInt16BE(position);
            position += 2;
            out[name] = {
              type: BINARY_TAG,
              value: headers.slice(position, position + binaryLength)
            };
            position += binaryLength;
            break;
          case 7:
            var stringLength = headers.readUInt16BE(position);
            position += 2;
            out[name] = {
              type: STRING_TAG,
              value: headers.slice(
                position,
                position + stringLength
              ).toString()
            };
            position += stringLength;
            break;
          case 8:
            out[name] = {
              type: TIMESTAMP_TAG,
              value: new Date(
                new Int64(headers.slice(position, position + 8)).valueOf()
              )
            };
            position += 8;
            break;
          case 9:
            var uuidChars = headers.slice(position, position + 16).toString("hex");
            position += 16;
            out[name] = {
              type: UUID_TAG,
              value: uuidChars.substr(0, 8) + "-" + uuidChars.substr(8, 4) + "-" + uuidChars.substr(12, 4) + "-" + uuidChars.substr(16, 4) + "-" + uuidChars.substr(20)
            };
            break;
          default:
            throw new Error("Unrecognized header type tag");
        }
      }
      return out;
    }
    __name(parseHeaders, "parseHeaders");
    function parseMessage(message) {
      var parsed = splitMessage(message);
      return { headers: parseHeaders(parsed.headers), body: parsed.body };
    }
    __name(parseMessage, "parseMessage");
    module.exports = {
      parseMessage
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/parse-event.js
var require_parse_event = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/parse-event.js"(exports, module) {
    var parseMessage = require_parse_message().parseMessage;
    function parseEvent(parser, message, shape) {
      var parsedMessage = parseMessage(message);
      var messageType = parsedMessage.headers[":message-type"];
      if (messageType) {
        if (messageType.value === "error") {
          throw parseError(parsedMessage);
        } else if (messageType.value !== "event") {
          return;
        }
      }
      var eventType = parsedMessage.headers[":event-type"];
      var eventModel = shape.members[eventType.value];
      if (!eventModel) {
        return;
      }
      var result = {};
      var eventPayloadMemberName = eventModel.eventPayloadMemberName;
      if (eventPayloadMemberName) {
        var payloadShape = eventModel.members[eventPayloadMemberName];
        if (payloadShape.type === "binary") {
          result[eventPayloadMemberName] = parsedMessage.body;
        } else {
          result[eventPayloadMemberName] = parser.parse(parsedMessage.body.toString(), payloadShape);
        }
      }
      var eventHeaderNames = eventModel.eventHeaderMemberNames;
      for (var i = 0; i < eventHeaderNames.length; i++) {
        var name = eventHeaderNames[i];
        if (parsedMessage.headers[name]) {
          result[name] = eventModel.members[name].toType(parsedMessage.headers[name].value);
        }
      }
      var output = {};
      output[eventType.value] = result;
      return output;
    }
    __name(parseEvent, "parseEvent");
    function parseError(message) {
      var errorCode = message.headers[":error-code"];
      var errorMessage = message.headers[":error-message"];
      var error = new Error(errorMessage.value || errorMessage);
      error.code = error.name = errorCode.value || errorCode;
      return error;
    }
    __name(parseError, "parseError");
    module.exports = {
      parseEvent
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/event-message-unmarshaller-stream.js
var require_event_message_unmarshaller_stream = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/event-message-unmarshaller-stream.js"(exports, module) {
    var Transform = __require("stream").Transform;
    var parseEvent = require_parse_event().parseEvent;
    function EventUnmarshallerStream(options) {
      options = options || {};
      options.readableObjectMode = true;
      Transform.call(this, options);
      this._readableState.objectMode = true;
      this.parser = options.parser;
      this.eventStreamModel = options.eventStreamModel;
    }
    __name(EventUnmarshallerStream, "EventUnmarshallerStream");
    EventUnmarshallerStream.prototype = Object.create(Transform.prototype);
    EventUnmarshallerStream.prototype._transform = function(chunk, encoding, callback) {
      try {
        var event = parseEvent(this.parser, chunk, this.eventStreamModel);
        this.push(event);
        return callback();
      } catch (err) {
        callback(err);
      }
    };
    module.exports = {
      EventUnmarshallerStream
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/streaming-create-event-stream.js
var require_streaming_create_event_stream = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/streaming-create-event-stream.js"(exports, module) {
    var EventMessageChunkerStream = require_event_message_chunker_stream().EventMessageChunkerStream;
    var EventUnmarshallerStream = require_event_message_unmarshaller_stream().EventUnmarshallerStream;
    function createEventStream(stream, parser, model) {
      var eventStream = new EventUnmarshallerStream({
        parser,
        eventStreamModel: model
      });
      var eventMessageChunker = new EventMessageChunkerStream();
      stream.pipe(
        eventMessageChunker
      ).pipe(eventStream);
      stream.on("error", function(err) {
        eventMessageChunker.emit("error", err);
      });
      eventMessageChunker.on("error", function(err) {
        eventStream.emit("error", err);
      });
      return eventStream;
    }
    __name(createEventStream, "createEventStream");
    module.exports = {
      createEventStream
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/event-message-chunker.js
var require_event_message_chunker = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/event-message-chunker.js"(exports, module) {
    function eventMessageChunker(buffer) {
      var messages = [];
      var offset = 0;
      while (offset < buffer.length) {
        var totalLength = buffer.readInt32BE(offset);
        var message = buffer.slice(offset, totalLength + offset);
        offset += totalLength;
        messages.push(message);
      }
      return messages;
    }
    __name(eventMessageChunker, "eventMessageChunker");
    module.exports = {
      eventMessageChunker
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/buffered-create-event-stream.js
var require_buffered_create_event_stream = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/event-stream/buffered-create-event-stream.js"(exports, module) {
    var eventMessageChunker = require_event_message_chunker().eventMessageChunker;
    var parseEvent = require_parse_event().parseEvent;
    function createEventStream(body, parser, model) {
      var eventMessages = eventMessageChunker(body);
      var events = [];
      for (var i = 0; i < eventMessages.length; i++) {
        events.push(parseEvent(parser, eventMessages[i], model));
      }
      return events;
    }
    __name(createEventStream, "createEventStream");
    module.exports = {
      createEventStream
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/realclock/nodeClock.js
var require_nodeClock = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/realclock/nodeClock.js"(exports, module) {
    module.exports = {
      now: /* @__PURE__ */ __name(function now() {
        var second = process.hrtime();
        return second[0] * 1e3 + second[1] / 1e6;
      }, "now")
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/publisher/index.js
var require_publisher = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/publisher/index.js"(exports, module) {
    var util = require_core().util;
    var dgram = __require("dgram");
    var stringToBuffer = util.buffer.toBuffer;
    var MAX_MESSAGE_SIZE = 1024 * 8;
    function Publisher(options) {
      options = options || {};
      this.enabled = options.enabled || false;
      this.port = options.port || 31e3;
      this.clientId = options.clientId || "";
      this.address = options.host || "127.0.0.1";
      if (this.clientId.length > 255) {
        this.clientId = this.clientId.substr(0, 255);
      }
      this.messagesInFlight = 0;
    }
    __name(Publisher, "Publisher");
    Publisher.prototype.fieldsToTrim = {
      UserAgent: 256,
      SdkException: 128,
      SdkExceptionMessage: 512,
      AwsException: 128,
      AwsExceptionMessage: 512,
      FinalSdkException: 128,
      FinalSdkExceptionMessage: 512,
      FinalAwsException: 128,
      FinalAwsExceptionMessage: 512
    };
    Publisher.prototype.trimFields = function(event) {
      var trimmableFields = Object.keys(this.fieldsToTrim);
      for (var i = 0, iLen = trimmableFields.length; i < iLen; i++) {
        var field = trimmableFields[i];
        if (event.hasOwnProperty(field)) {
          var maxLength = this.fieldsToTrim[field];
          var value = event[field];
          if (value && value.length > maxLength) {
            event[field] = value.substr(0, maxLength);
          }
        }
      }
      return event;
    };
    Publisher.prototype.eventHandler = function(event) {
      event.ClientId = this.clientId;
      this.trimFields(event);
      var message = stringToBuffer(JSON.stringify(event));
      if (!this.enabled || message.length > MAX_MESSAGE_SIZE) {
        return;
      }
      this.publishDatagram(message);
    };
    Publisher.prototype.publishDatagram = function(message) {
      var self = this;
      var client = this.getClient();
      this.messagesInFlight++;
      this.client.send(message, 0, message.length, this.port, this.address, function(err, bytes) {
        if (--self.messagesInFlight <= 0) {
          self.destroyClient();
        }
      });
    };
    Publisher.prototype.getClient = function() {
      if (!this.client) {
        this.client = dgram.createSocket("udp4");
      }
      return this.client;
    };
    Publisher.prototype.destroyClient = function() {
      if (this.client) {
        this.client.close();
        this.client = void 0;
      }
    };
    module.exports = {
      Publisher
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/publisher/configuration.js
var require_configuration = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/publisher/configuration.js"(exports, module) {
    var AWS2 = require_core();
    function resolveMonitoringConfig() {
      var config = {
        port: void 0,
        clientId: void 0,
        enabled: void 0,
        host: void 0
      };
      if (fromEnvironment(config) || fromConfigFile(config))
        return toJSType(config);
      return toJSType(config);
    }
    __name(resolveMonitoringConfig, "resolveMonitoringConfig");
    function fromEnvironment(config) {
      config.port = config.port || process.env.AWS_CSM_PORT;
      config.enabled = config.enabled || process.env.AWS_CSM_ENABLED;
      config.clientId = config.clientId || process.env.AWS_CSM_CLIENT_ID;
      config.host = config.host || process.env.AWS_CSM_HOST;
      return config.port && config.enabled && config.clientId && config.host || ["false", "0"].indexOf(config.enabled) >= 0;
    }
    __name(fromEnvironment, "fromEnvironment");
    function fromConfigFile(config) {
      var sharedFileConfig;
      try {
        var configFile = AWS2.util.iniLoader.loadFrom({
          isConfig: true,
          filename: process.env[AWS2.util.sharedConfigFileEnv]
        });
        var sharedFileConfig = configFile[process.env.AWS_PROFILE || AWS2.util.defaultProfile];
      } catch (err) {
        return false;
      }
      if (!sharedFileConfig)
        return config;
      config.port = config.port || sharedFileConfig.csm_port;
      config.enabled = config.enabled || sharedFileConfig.csm_enabled;
      config.clientId = config.clientId || sharedFileConfig.csm_client_id;
      config.host = config.host || sharedFileConfig.csm_host;
      return config.port && config.enabled && config.clientId && config.host;
    }
    __name(fromConfigFile, "fromConfigFile");
    function toJSType(config) {
      var falsyNotations = ["false", "0", void 0];
      if (!config.enabled || falsyNotations.indexOf(config.enabled.toLowerCase()) >= 0) {
        config.enabled = false;
      } else {
        config.enabled = true;
      }
      config.port = config.port ? parseInt(config.port, 10) : void 0;
      return config;
    }
    __name(toJSType, "toJSType");
    module.exports = resolveMonitoringConfig;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/shared-ini/ini-loader.js
var require_ini_loader = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/shared-ini/ini-loader.js"(exports, module) {
    var AWS2 = require_core();
    var os = __require("os");
    var path = __require("path");
    function parseFile(filename) {
      return AWS2.util.ini.parse(AWS2.util.readFileSync(filename));
    }
    __name(parseFile, "parseFile");
    function getProfiles(fileContent) {
      var tmpContent = {};
      Object.keys(fileContent).forEach(function(sectionName) {
        if (/^sso-session\s/.test(sectionName))
          return;
        Object.defineProperty(tmpContent, sectionName.replace(/^profile\s/, ""), {
          value: fileContent[sectionName],
          enumerable: true
        });
      });
      return tmpContent;
    }
    __name(getProfiles, "getProfiles");
    function getSsoSessions(fileContent) {
      var tmpContent = {};
      Object.keys(fileContent).forEach(function(sectionName) {
        if (!/^sso-session\s/.test(sectionName))
          return;
        Object.defineProperty(tmpContent, sectionName.replace(/^sso-session\s/, ""), {
          value: fileContent[sectionName],
          enumerable: true
        });
      });
      return tmpContent;
    }
    __name(getSsoSessions, "getSsoSessions");
    AWS2.IniLoader = AWS2.util.inherit({
      constructor: /* @__PURE__ */ __name(function IniLoader2() {
        this.resolvedProfiles = {};
        this.resolvedSsoSessions = {};
      }, "IniLoader"),
      clearCachedFiles: /* @__PURE__ */ __name(function clearCachedFiles() {
        this.resolvedProfiles = {};
        this.resolvedSsoSessions = {};
      }, "clearCachedFiles"),
      loadFrom: /* @__PURE__ */ __name(function loadFrom(options) {
        options = options || {};
        var isConfig = options.isConfig === true;
        var filename = options.filename || this.getDefaultFilePath(isConfig);
        if (!this.resolvedProfiles[filename]) {
          var fileContent = parseFile(filename);
          if (isConfig) {
            Object.defineProperty(this.resolvedProfiles, filename, {
              value: getProfiles(fileContent)
            });
          } else {
            Object.defineProperty(this.resolvedProfiles, filename, { value: fileContent });
          }
        }
        return this.resolvedProfiles[filename];
      }, "loadFrom"),
      loadSsoSessionsFrom: /* @__PURE__ */ __name(function loadSsoSessionsFrom(options) {
        options = options || {};
        var filename = options.filename || this.getDefaultFilePath(true);
        if (!this.resolvedSsoSessions[filename]) {
          var fileContent = parseFile(filename);
          Object.defineProperty(this.resolvedSsoSessions, filename, {
            value: getSsoSessions(fileContent)
          });
        }
        return this.resolvedSsoSessions[filename];
      }, "loadSsoSessionsFrom"),
      getDefaultFilePath: /* @__PURE__ */ __name(function getDefaultFilePath(isConfig) {
        return path.join(
          this.getHomeDir(),
          ".aws",
          isConfig ? "config" : "credentials"
        );
      }, "getDefaultFilePath"),
      getHomeDir: /* @__PURE__ */ __name(function getHomeDir() {
        var env = process.env;
        var home = env.HOME || env.USERPROFILE || (env.HOMEPATH ? (env.HOMEDRIVE || "C:/") + env.HOMEPATH : null);
        if (home) {
          return home;
        }
        if (typeof os.homedir === "function") {
          return os.homedir();
        }
        throw AWS2.util.error(
          new Error("Cannot load credentials, HOME path not set")
        );
      }, "getHomeDir")
    });
    var IniLoader = AWS2.IniLoader;
    module.exports = {
      IniLoader
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/shared-ini/index.js
var require_shared_ini = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/shared-ini/index.js"(exports, module) {
    var IniLoader = require_ini_loader().IniLoader;
    module.exports.iniLoader = new IniLoader();
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/config_regional_endpoint.js
var require_config_regional_endpoint = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/config_regional_endpoint.js"(exports, module) {
    var AWS2 = require_core();
    function validateRegionalEndpointsFlagValue(configValue, errorOptions) {
      if (typeof configValue !== "string")
        return void 0;
      else if (["legacy", "regional"].indexOf(configValue.toLowerCase()) >= 0) {
        return configValue.toLowerCase();
      } else {
        throw AWS2.util.error(new Error(), errorOptions);
      }
    }
    __name(validateRegionalEndpointsFlagValue, "validateRegionalEndpointsFlagValue");
    function resolveRegionalEndpointsFlag(originalConfig, options) {
      originalConfig = originalConfig || {};
      var resolved;
      if (originalConfig[options.clientConfig]) {
        resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {
          code: "InvalidConfiguration",
          message: 'invalid "' + options.clientConfig + '" configuration. Expect "legacy"  or "regional". Got "' + originalConfig[options.clientConfig] + '".'
        });
        if (resolved)
          return resolved;
      }
      if (!AWS2.util.isNode())
        return resolved;
      if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {
        var envFlag = process.env[options.env];
        resolved = validateRegionalEndpointsFlagValue(envFlag, {
          code: "InvalidEnvironmentalVariable",
          message: "invalid " + options.env + ' environmental variable. Expect "legacy"  or "regional". Got "' + process.env[options.env] + '".'
        });
        if (resolved)
          return resolved;
      }
      var profile = {};
      try {
        var profiles = AWS2.util.getProfilesFromSharedConfig(AWS2.util.iniLoader);
        profile = profiles[process.env.AWS_PROFILE || AWS2.util.defaultProfile];
      } catch (e) {
      }
      ;
      if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {
        var fileFlag = profile[options.sharedConfig];
        resolved = validateRegionalEndpointsFlagValue(fileFlag, {
          code: "InvalidConfiguration",
          message: "invalid " + options.sharedConfig + ' profile config. Expect "legacy"  or "regional". Got "' + profile[options.sharedConfig] + '".'
        });
        if (resolved)
          return resolved;
      }
      return resolved;
    }
    __name(resolveRegionalEndpointsFlag, "resolveRegionalEndpointsFlag");
    module.exports = resolveRegionalEndpointsFlag;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/services/sts.js
var require_sts = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/services/sts.js"() {
    var AWS2 = require_core();
    var resolveRegionalEndpointsFlag = require_config_regional_endpoint();
    var ENV_REGIONAL_ENDPOINT_ENABLED = "AWS_STS_REGIONAL_ENDPOINTS";
    var CONFIG_REGIONAL_ENDPOINT_ENABLED = "sts_regional_endpoints";
    AWS2.util.update(AWS2.STS.prototype, {
      credentialsFrom: /* @__PURE__ */ __name(function credentialsFrom(data, credentials) {
        if (!data)
          return null;
        if (!credentials)
          credentials = new AWS2.TemporaryCredentials();
        credentials.expired = false;
        credentials.accessKeyId = data.Credentials.AccessKeyId;
        credentials.secretAccessKey = data.Credentials.SecretAccessKey;
        credentials.sessionToken = data.Credentials.SessionToken;
        credentials.expireTime = data.Credentials.Expiration;
        return credentials;
      }, "credentialsFrom"),
      assumeRoleWithWebIdentity: /* @__PURE__ */ __name(function assumeRoleWithWebIdentity(params, callback) {
        return this.makeUnauthenticatedRequest("assumeRoleWithWebIdentity", params, callback);
      }, "assumeRoleWithWebIdentity"),
      assumeRoleWithSAML: /* @__PURE__ */ __name(function assumeRoleWithSAML(params, callback) {
        return this.makeUnauthenticatedRequest("assumeRoleWithSAML", params, callback);
      }, "assumeRoleWithSAML"),
      setupRequestListeners: /* @__PURE__ */ __name(function setupRequestListeners(request) {
        request.addListener("validate", this.optInRegionalEndpoint, true);
      }, "setupRequestListeners"),
      optInRegionalEndpoint: /* @__PURE__ */ __name(function optInRegionalEndpoint(req) {
        var service = req.service;
        var config = service.config;
        config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {
          env: ENV_REGIONAL_ENDPOINT_ENABLED,
          sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,
          clientConfig: "stsRegionalEndpoints"
        });
        if (config.stsRegionalEndpoints === "regional" && service.isGlobalEndpoint) {
          if (!config.region) {
            throw AWS2.util.error(
              new Error(),
              { code: "ConfigError", message: "Missing region in config" }
            );
          }
          var insertPoint = config.endpoint.indexOf(".amazonaws.com");
          var regionalEndpoint = config.endpoint.substring(0, insertPoint) + "." + config.region + config.endpoint.substring(insertPoint);
          req.httpRequest.updateEndpoint(regionalEndpoint);
          req.httpRequest.region = config.region;
        }
      }, "optInRegionalEndpoint")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/sts-2011-06-15.min.json
var require_sts_2011_06_15_min = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/sts-2011-06-15.min.json"(exports, module) {
    module.exports = {
      version: "2.0",
      metadata: {
        apiVersion: "2011-06-15",
        endpointPrefix: "sts",
        globalEndpoint: "sts.amazonaws.com",
        protocol: "query",
        serviceAbbreviation: "AWS STS",
        serviceFullName: "AWS Security Token Service",
        serviceId: "STS",
        signatureVersion: "v4",
        uid: "sts-2011-06-15",
        xmlNamespace: "https://sts.amazonaws.com/doc/2011-06-15/"
      },
      operations: {
        AssumeRole: {
          input: {
            type: "structure",
            required: [
              "RoleArn",
              "RoleSessionName"
            ],
            members: {
              RoleArn: {},
              RoleSessionName: {},
              PolicyArns: {
                shape: "S4"
              },
              Policy: {},
              DurationSeconds: {
                type: "integer"
              },
              Tags: {
                shape: "S8"
              },
              TransitiveTagKeys: {
                type: "list",
                member: {}
              },
              ExternalId: {},
              SerialNumber: {},
              TokenCode: {},
              SourceIdentity: {}
            }
          },
          output: {
            resultWrapper: "AssumeRoleResult",
            type: "structure",
            members: {
              Credentials: {
                shape: "Si"
              },
              AssumedRoleUser: {
                shape: "Sn"
              },
              PackedPolicySize: {
                type: "integer"
              },
              SourceIdentity: {}
            }
          }
        },
        AssumeRoleWithSAML: {
          input: {
            type: "structure",
            required: [
              "RoleArn",
              "PrincipalArn",
              "SAMLAssertion"
            ],
            members: {
              RoleArn: {},
              PrincipalArn: {},
              SAMLAssertion: {},
              PolicyArns: {
                shape: "S4"
              },
              Policy: {},
              DurationSeconds: {
                type: "integer"
              }
            }
          },
          output: {
            resultWrapper: "AssumeRoleWithSAMLResult",
            type: "structure",
            members: {
              Credentials: {
                shape: "Si"
              },
              AssumedRoleUser: {
                shape: "Sn"
              },
              PackedPolicySize: {
                type: "integer"
              },
              Subject: {},
              SubjectType: {},
              Issuer: {},
              Audience: {},
              NameQualifier: {},
              SourceIdentity: {}
            }
          }
        },
        AssumeRoleWithWebIdentity: {
          input: {
            type: "structure",
            required: [
              "RoleArn",
              "RoleSessionName",
              "WebIdentityToken"
            ],
            members: {
              RoleArn: {},
              RoleSessionName: {},
              WebIdentityToken: {},
              ProviderId: {},
              PolicyArns: {
                shape: "S4"
              },
              Policy: {},
              DurationSeconds: {
                type: "integer"
              }
            }
          },
          output: {
            resultWrapper: "AssumeRoleWithWebIdentityResult",
            type: "structure",
            members: {
              Credentials: {
                shape: "Si"
              },
              SubjectFromWebIdentityToken: {},
              AssumedRoleUser: {
                shape: "Sn"
              },
              PackedPolicySize: {
                type: "integer"
              },
              Provider: {},
              Audience: {},
              SourceIdentity: {}
            }
          }
        },
        DecodeAuthorizationMessage: {
          input: {
            type: "structure",
            required: [
              "EncodedMessage"
            ],
            members: {
              EncodedMessage: {}
            }
          },
          output: {
            resultWrapper: "DecodeAuthorizationMessageResult",
            type: "structure",
            members: {
              DecodedMessage: {}
            }
          }
        },
        GetAccessKeyInfo: {
          input: {
            type: "structure",
            required: [
              "AccessKeyId"
            ],
            members: {
              AccessKeyId: {}
            }
          },
          output: {
            resultWrapper: "GetAccessKeyInfoResult",
            type: "structure",
            members: {
              Account: {}
            }
          }
        },
        GetCallerIdentity: {
          input: {
            type: "structure",
            members: {}
          },
          output: {
            resultWrapper: "GetCallerIdentityResult",
            type: "structure",
            members: {
              UserId: {},
              Account: {},
              Arn: {}
            }
          }
        },
        GetFederationToken: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              Policy: {},
              PolicyArns: {
                shape: "S4"
              },
              DurationSeconds: {
                type: "integer"
              },
              Tags: {
                shape: "S8"
              }
            }
          },
          output: {
            resultWrapper: "GetFederationTokenResult",
            type: "structure",
            members: {
              Credentials: {
                shape: "Si"
              },
              FederatedUser: {
                type: "structure",
                required: [
                  "FederatedUserId",
                  "Arn"
                ],
                members: {
                  FederatedUserId: {},
                  Arn: {}
                }
              },
              PackedPolicySize: {
                type: "integer"
              }
            }
          }
        },
        GetSessionToken: {
          input: {
            type: "structure",
            members: {
              DurationSeconds: {
                type: "integer"
              },
              SerialNumber: {},
              TokenCode: {}
            }
          },
          output: {
            resultWrapper: "GetSessionTokenResult",
            type: "structure",
            members: {
              Credentials: {
                shape: "Si"
              }
            }
          }
        }
      },
      shapes: {
        S4: {
          type: "list",
          member: {
            type: "structure",
            members: {
              arn: {}
            }
          }
        },
        S8: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Key",
              "Value"
            ],
            members: {
              Key: {},
              Value: {}
            }
          }
        },
        Si: {
          type: "structure",
          required: [
            "AccessKeyId",
            "SecretAccessKey",
            "SessionToken",
            "Expiration"
          ],
          members: {
            AccessKeyId: {},
            SecretAccessKey: {},
            SessionToken: {},
            Expiration: {
              type: "timestamp"
            }
          }
        },
        Sn: {
          type: "structure",
          required: [
            "AssumedRoleId",
            "Arn"
          ],
          members: {
            AssumedRoleId: {},
            Arn: {}
          }
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/sts-2011-06-15.paginators.json
var require_sts_2011_06_15_paginators = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/sts-2011-06-15.paginators.json"(exports, module) {
    module.exports = {
      pagination: {}
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/clients/sts.js
var require_sts2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/clients/sts.js"(exports, module) {
    require_node_loader();
    var AWS2 = require_core();
    var Service = AWS2.Service;
    var apiLoader = AWS2.apiLoader;
    apiLoader.services["sts"] = {};
    AWS2.STS = Service.defineService("sts", ["2011-06-15"]);
    require_sts();
    Object.defineProperty(apiLoader.services["sts"], "2011-06-15", {
      get: /* @__PURE__ */ __name(function get() {
        var model = require_sts_2011_06_15_min();
        model.paginators = require_sts_2011_06_15_paginators().pagination;
        return model;
      }, "get"),
      enumerable: true,
      configurable: true
    });
    module.exports = AWS2.STS;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/temporary_credentials.js
var require_temporary_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/temporary_credentials.js"() {
    var AWS2 = require_core();
    var STS = require_sts2();
    AWS2.TemporaryCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function TemporaryCredentials(params, masterCredentials) {
        AWS2.Credentials.call(this);
        this.loadMasterCredentials(masterCredentials);
        this.expired = true;
        this.params = params || {};
        if (this.params.RoleArn) {
          this.params.RoleSessionName = this.params.RoleSessionName || "temporary-credentials";
        }
      }, "TemporaryCredentials"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        self.createClients();
        self.masterCredentials.get(function() {
          self.service.config.credentials = self.masterCredentials;
          var operation = self.params.RoleArn ? self.service.assumeRole : self.service.getSessionToken;
          operation.call(self.service, function(err, data) {
            if (!err) {
              self.service.credentialsFrom(data, self);
            }
            callback(err);
          });
        });
      }, "load"),
      loadMasterCredentials: /* @__PURE__ */ __name(function loadMasterCredentials(masterCredentials) {
        this.masterCredentials = masterCredentials || AWS2.config.credentials;
        while (this.masterCredentials.masterCredentials) {
          this.masterCredentials = this.masterCredentials.masterCredentials;
        }
        if (typeof this.masterCredentials.get !== "function") {
          this.masterCredentials = new AWS2.Credentials(this.masterCredentials);
        }
      }, "loadMasterCredentials"),
      createClients: function() {
        this.service = this.service || new STS({ params: this.params });
      }
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/chainable_temporary_credentials.js
var require_chainable_temporary_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/chainable_temporary_credentials.js"() {
    var AWS2 = require_core();
    var STS = require_sts2();
    AWS2.ChainableTemporaryCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function ChainableTemporaryCredentials(options) {
        AWS2.Credentials.call(this);
        options = options || {};
        this.errorCode = "ChainableTemporaryCredentialsProviderFailure";
        this.expired = true;
        this.tokenCodeFn = null;
        var params = AWS2.util.copy(options.params) || {};
        if (params.RoleArn) {
          params.RoleSessionName = params.RoleSessionName || "temporary-credentials";
        }
        if (params.SerialNumber) {
          if (!options.tokenCodeFn || typeof options.tokenCodeFn !== "function") {
            throw new AWS2.util.error(
              new Error("tokenCodeFn must be a function when params.SerialNumber is given"),
              { code: this.errorCode }
            );
          } else {
            this.tokenCodeFn = options.tokenCodeFn;
          }
        }
        var config = AWS2.util.merge(
          {
            params,
            credentials: options.masterCredentials || AWS2.config.credentials
          },
          options.stsConfig || {}
        );
        this.service = new STS(config);
      }, "ChainableTemporaryCredentials"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        var operation = self.service.config.params.RoleArn ? "assumeRole" : "getSessionToken";
        this.getTokenCode(function(err, tokenCode) {
          var params = {};
          if (err) {
            callback(err);
            return;
          }
          if (tokenCode) {
            params.TokenCode = tokenCode;
          }
          self.service[operation](params, function(err2, data) {
            if (!err2) {
              self.service.credentialsFrom(data, self);
            }
            callback(err2);
          });
        });
      }, "load"),
      getTokenCode: /* @__PURE__ */ __name(function getTokenCode(callback) {
        var self = this;
        if (this.tokenCodeFn) {
          this.tokenCodeFn(this.service.config.params.SerialNumber, function(err, token) {
            if (err) {
              var message = err;
              if (err instanceof Error) {
                message = err.message;
              }
              callback(
                AWS2.util.error(
                  new Error("Error fetching MFA token: " + message),
                  { code: self.errorCode }
                )
              );
              return;
            }
            callback(null, token);
          });
        } else {
          callback(null);
        }
      }, "getTokenCode")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/web_identity_credentials.js
var require_web_identity_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/web_identity_credentials.js"() {
    var AWS2 = require_core();
    var STS = require_sts2();
    AWS2.WebIdentityCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function WebIdentityCredentials(params, clientConfig) {
        AWS2.Credentials.call(this);
        this.expired = true;
        this.params = params;
        this.params.RoleSessionName = this.params.RoleSessionName || "web-identity";
        this.data = null;
        this._clientConfig = AWS2.util.copy(clientConfig || {});
      }, "WebIdentityCredentials"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        self.createClients();
        self.service.assumeRoleWithWebIdentity(function(err, data) {
          self.data = null;
          if (!err) {
            self.data = data;
            self.service.credentialsFrom(data, self);
          }
          callback(err);
        });
      }, "load"),
      createClients: function() {
        if (!this.service) {
          var stsConfig = AWS2.util.merge({}, this._clientConfig);
          stsConfig.params = this.params;
          this.service = new STS(stsConfig);
        }
      }
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/cognito-identity-2014-06-30.min.json
var require_cognito_identity_2014_06_30_min = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/cognito-identity-2014-06-30.min.json"(exports, module) {
    module.exports = {
      version: "2.0",
      metadata: {
        apiVersion: "2014-06-30",
        endpointPrefix: "cognito-identity",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Cognito Identity",
        serviceId: "Cognito Identity",
        signatureVersion: "v4",
        targetPrefix: "AWSCognitoIdentityService",
        uid: "cognito-identity-2014-06-30"
      },
      operations: {
        CreateIdentityPool: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolName",
              "AllowUnauthenticatedIdentities"
            ],
            members: {
              IdentityPoolName: {},
              AllowUnauthenticatedIdentities: {
                type: "boolean"
              },
              AllowClassicFlow: {
                type: "boolean"
              },
              SupportedLoginProviders: {
                shape: "S5"
              },
              DeveloperProviderName: {},
              OpenIdConnectProviderARNs: {
                shape: "S9"
              },
              CognitoIdentityProviders: {
                shape: "Sb"
              },
              SamlProviderARNs: {
                shape: "Sg"
              },
              IdentityPoolTags: {
                shape: "Sh"
              }
            }
          },
          output: {
            shape: "Sk"
          }
        },
        DeleteIdentities: {
          input: {
            type: "structure",
            required: [
              "IdentityIdsToDelete"
            ],
            members: {
              IdentityIdsToDelete: {
                type: "list",
                member: {}
              }
            }
          },
          output: {
            type: "structure",
            members: {
              UnprocessedIdentityIds: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    IdentityId: {},
                    ErrorCode: {}
                  }
                }
              }
            }
          }
        },
        DeleteIdentityPool: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId"
            ],
            members: {
              IdentityPoolId: {}
            }
          }
        },
        DescribeIdentity: {
          input: {
            type: "structure",
            required: [
              "IdentityId"
            ],
            members: {
              IdentityId: {}
            }
          },
          output: {
            shape: "Sv"
          }
        },
        DescribeIdentityPool: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId"
            ],
            members: {
              IdentityPoolId: {}
            }
          },
          output: {
            shape: "Sk"
          }
        },
        GetCredentialsForIdentity: {
          input: {
            type: "structure",
            required: [
              "IdentityId"
            ],
            members: {
              IdentityId: {},
              Logins: {
                shape: "S10"
              },
              CustomRoleArn: {}
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityId: {},
              Credentials: {
                type: "structure",
                members: {
                  AccessKeyId: {},
                  SecretKey: {},
                  SessionToken: {},
                  Expiration: {
                    type: "timestamp"
                  }
                }
              }
            }
          },
          authtype: "none"
        },
        GetId: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId"
            ],
            members: {
              AccountId: {},
              IdentityPoolId: {},
              Logins: {
                shape: "S10"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityId: {}
            }
          },
          authtype: "none"
        },
        GetIdentityPoolRoles: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId"
            ],
            members: {
              IdentityPoolId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityPoolId: {},
              Roles: {
                shape: "S1c"
              },
              RoleMappings: {
                shape: "S1e"
              }
            }
          }
        },
        GetOpenIdToken: {
          input: {
            type: "structure",
            required: [
              "IdentityId"
            ],
            members: {
              IdentityId: {},
              Logins: {
                shape: "S10"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityId: {},
              Token: {}
            }
          },
          authtype: "none"
        },
        GetOpenIdTokenForDeveloperIdentity: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId",
              "Logins"
            ],
            members: {
              IdentityPoolId: {},
              IdentityId: {},
              Logins: {
                shape: "S10"
              },
              PrincipalTags: {
                shape: "S1s"
              },
              TokenDuration: {
                type: "long"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityId: {},
              Token: {}
            }
          }
        },
        GetPrincipalTagAttributeMap: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId",
              "IdentityProviderName"
            ],
            members: {
              IdentityPoolId: {},
              IdentityProviderName: {}
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityPoolId: {},
              IdentityProviderName: {},
              UseDefaults: {
                type: "boolean"
              },
              PrincipalTags: {
                shape: "S1s"
              }
            }
          }
        },
        ListIdentities: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId",
              "MaxResults"
            ],
            members: {
              IdentityPoolId: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {},
              HideDisabled: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityPoolId: {},
              Identities: {
                type: "list",
                member: {
                  shape: "Sv"
                }
              },
              NextToken: {}
            }
          }
        },
        ListIdentityPools: {
          input: {
            type: "structure",
            required: [
              "MaxResults"
            ],
            members: {
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityPools: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    IdentityPoolId: {},
                    IdentityPoolName: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListTagsForResource: {
          input: {
            type: "structure",
            required: [
              "ResourceArn"
            ],
            members: {
              ResourceArn: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Tags: {
                shape: "Sh"
              }
            }
          }
        },
        LookupDeveloperIdentity: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId"
            ],
            members: {
              IdentityPoolId: {},
              IdentityId: {},
              DeveloperUserIdentifier: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityId: {},
              DeveloperUserIdentifierList: {
                type: "list",
                member: {}
              },
              NextToken: {}
            }
          }
        },
        MergeDeveloperIdentities: {
          input: {
            type: "structure",
            required: [
              "SourceUserIdentifier",
              "DestinationUserIdentifier",
              "DeveloperProviderName",
              "IdentityPoolId"
            ],
            members: {
              SourceUserIdentifier: {},
              DestinationUserIdentifier: {},
              DeveloperProviderName: {},
              IdentityPoolId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityId: {}
            }
          }
        },
        SetIdentityPoolRoles: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId",
              "Roles"
            ],
            members: {
              IdentityPoolId: {},
              Roles: {
                shape: "S1c"
              },
              RoleMappings: {
                shape: "S1e"
              }
            }
          }
        },
        SetPrincipalTagAttributeMap: {
          input: {
            type: "structure",
            required: [
              "IdentityPoolId",
              "IdentityProviderName"
            ],
            members: {
              IdentityPoolId: {},
              IdentityProviderName: {},
              UseDefaults: {
                type: "boolean"
              },
              PrincipalTags: {
                shape: "S1s"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              IdentityPoolId: {},
              IdentityProviderName: {},
              UseDefaults: {
                type: "boolean"
              },
              PrincipalTags: {
                shape: "S1s"
              }
            }
          }
        },
        TagResource: {
          input: {
            type: "structure",
            required: [
              "ResourceArn",
              "Tags"
            ],
            members: {
              ResourceArn: {},
              Tags: {
                shape: "Sh"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        UnlinkDeveloperIdentity: {
          input: {
            type: "structure",
            required: [
              "IdentityId",
              "IdentityPoolId",
              "DeveloperProviderName",
              "DeveloperUserIdentifier"
            ],
            members: {
              IdentityId: {},
              IdentityPoolId: {},
              DeveloperProviderName: {},
              DeveloperUserIdentifier: {}
            }
          }
        },
        UnlinkIdentity: {
          input: {
            type: "structure",
            required: [
              "IdentityId",
              "Logins",
              "LoginsToRemove"
            ],
            members: {
              IdentityId: {},
              Logins: {
                shape: "S10"
              },
              LoginsToRemove: {
                shape: "Sw"
              }
            }
          },
          authtype: "none"
        },
        UntagResource: {
          input: {
            type: "structure",
            required: [
              "ResourceArn",
              "TagKeys"
            ],
            members: {
              ResourceArn: {},
              TagKeys: {
                type: "list",
                member: {}
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        UpdateIdentityPool: {
          input: {
            shape: "Sk"
          },
          output: {
            shape: "Sk"
          }
        }
      },
      shapes: {
        S5: {
          type: "map",
          key: {},
          value: {}
        },
        S9: {
          type: "list",
          member: {}
        },
        Sb: {
          type: "list",
          member: {
            type: "structure",
            members: {
              ProviderName: {},
              ClientId: {},
              ServerSideTokenCheck: {
                type: "boolean"
              }
            }
          }
        },
        Sg: {
          type: "list",
          member: {}
        },
        Sh: {
          type: "map",
          key: {},
          value: {}
        },
        Sk: {
          type: "structure",
          required: [
            "IdentityPoolId",
            "IdentityPoolName",
            "AllowUnauthenticatedIdentities"
          ],
          members: {
            IdentityPoolId: {},
            IdentityPoolName: {},
            AllowUnauthenticatedIdentities: {
              type: "boolean"
            },
            AllowClassicFlow: {
              type: "boolean"
            },
            SupportedLoginProviders: {
              shape: "S5"
            },
            DeveloperProviderName: {},
            OpenIdConnectProviderARNs: {
              shape: "S9"
            },
            CognitoIdentityProviders: {
              shape: "Sb"
            },
            SamlProviderARNs: {
              shape: "Sg"
            },
            IdentityPoolTags: {
              shape: "Sh"
            }
          }
        },
        Sv: {
          type: "structure",
          members: {
            IdentityId: {},
            Logins: {
              shape: "Sw"
            },
            CreationDate: {
              type: "timestamp"
            },
            LastModifiedDate: {
              type: "timestamp"
            }
          }
        },
        Sw: {
          type: "list",
          member: {}
        },
        S10: {
          type: "map",
          key: {},
          value: {}
        },
        S1c: {
          type: "map",
          key: {},
          value: {}
        },
        S1e: {
          type: "map",
          key: {},
          value: {
            type: "structure",
            required: [
              "Type"
            ],
            members: {
              Type: {},
              AmbiguousRoleResolution: {},
              RulesConfiguration: {
                type: "structure",
                required: [
                  "Rules"
                ],
                members: {
                  Rules: {
                    type: "list",
                    member: {
                      type: "structure",
                      required: [
                        "Claim",
                        "MatchType",
                        "Value",
                        "RoleARN"
                      ],
                      members: {
                        Claim: {},
                        MatchType: {},
                        Value: {},
                        RoleARN: {}
                      }
                    }
                  }
                }
              }
            }
          }
        },
        S1s: {
          type: "map",
          key: {},
          value: {}
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/cognito-identity-2014-06-30.paginators.json
var require_cognito_identity_2014_06_30_paginators = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/cognito-identity-2014-06-30.paginators.json"(exports, module) {
    module.exports = {
      pagination: {
        ListIdentityPools: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "IdentityPools"
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/clients/cognitoidentity.js
var require_cognitoidentity = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/clients/cognitoidentity.js"(exports, module) {
    require_node_loader();
    var AWS2 = require_core();
    var Service = AWS2.Service;
    var apiLoader = AWS2.apiLoader;
    apiLoader.services["cognitoidentity"] = {};
    AWS2.CognitoIdentity = Service.defineService("cognitoidentity", ["2014-06-30"]);
    Object.defineProperty(apiLoader.services["cognitoidentity"], "2014-06-30", {
      get: /* @__PURE__ */ __name(function get() {
        var model = require_cognito_identity_2014_06_30_min();
        model.paginators = require_cognito_identity_2014_06_30_paginators().pagination;
        return model;
      }, "get"),
      enumerable: true,
      configurable: true
    });
    module.exports = AWS2.CognitoIdentity;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/cognito_identity_credentials.js
var require_cognito_identity_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/cognito_identity_credentials.js"() {
    var AWS2 = require_core();
    var CognitoIdentity = require_cognitoidentity();
    var STS = require_sts2();
    AWS2.CognitoIdentityCredentials = AWS2.util.inherit(AWS2.Credentials, {
      localStorageKey: {
        id: "aws.cognito.identity-id.",
        providers: "aws.cognito.identity-providers."
      },
      constructor: /* @__PURE__ */ __name(function CognitoIdentityCredentials(params, clientConfig) {
        AWS2.Credentials.call(this);
        this.expired = true;
        this.params = params;
        this.data = null;
        this._identityId = null;
        this._clientConfig = AWS2.util.copy(clientConfig || {});
        this.loadCachedId();
        var self = this;
        Object.defineProperty(this, "identityId", {
          get: function() {
            self.loadCachedId();
            return self._identityId || self.params.IdentityId;
          },
          set: function(identityId) {
            self._identityId = identityId;
          }
        });
      }, "CognitoIdentityCredentials"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        self.createClients();
        self.data = null;
        self._identityId = null;
        self.getId(function(err) {
          if (!err) {
            if (!self.params.RoleArn) {
              self.getCredentialsForIdentity(callback);
            } else {
              self.getCredentialsFromSTS(callback);
            }
          } else {
            self.clearIdOnNotAuthorized(err);
            callback(err);
          }
        });
      }, "load"),
      clearCachedId: /* @__PURE__ */ __name(function clearCache() {
        this._identityId = null;
        delete this.params.IdentityId;
        var poolId = this.params.IdentityPoolId;
        var loginId = this.params.LoginId || "";
        delete this.storage[this.localStorageKey.id + poolId + loginId];
        delete this.storage[this.localStorageKey.providers + poolId + loginId];
      }, "clearCache"),
      clearIdOnNotAuthorized: /* @__PURE__ */ __name(function clearIdOnNotAuthorized(err) {
        var self = this;
        if (err.code == "NotAuthorizedException") {
          self.clearCachedId();
        }
      }, "clearIdOnNotAuthorized"),
      getId: /* @__PURE__ */ __name(function getId(callback) {
        var self = this;
        if (typeof self.params.IdentityId === "string") {
          return callback(null, self.params.IdentityId);
        }
        self.cognito.getId(function(err, data) {
          if (!err && data.IdentityId) {
            self.params.IdentityId = data.IdentityId;
            callback(null, data.IdentityId);
          } else {
            callback(err);
          }
        });
      }, "getId"),
      loadCredentials: /* @__PURE__ */ __name(function loadCredentials(data, credentials) {
        if (!data || !credentials)
          return;
        credentials.expired = false;
        credentials.accessKeyId = data.Credentials.AccessKeyId;
        credentials.secretAccessKey = data.Credentials.SecretKey;
        credentials.sessionToken = data.Credentials.SessionToken;
        credentials.expireTime = data.Credentials.Expiration;
      }, "loadCredentials"),
      getCredentialsForIdentity: /* @__PURE__ */ __name(function getCredentialsForIdentity(callback) {
        var self = this;
        self.cognito.getCredentialsForIdentity(function(err, data) {
          if (!err) {
            self.cacheId(data);
            self.data = data;
            self.loadCredentials(self.data, self);
          } else {
            self.clearIdOnNotAuthorized(err);
          }
          callback(err);
        });
      }, "getCredentialsForIdentity"),
      getCredentialsFromSTS: /* @__PURE__ */ __name(function getCredentialsFromSTS(callback) {
        var self = this;
        self.cognito.getOpenIdToken(function(err, data) {
          if (!err) {
            self.cacheId(data);
            self.params.WebIdentityToken = data.Token;
            self.webIdentityCredentials.refresh(function(webErr) {
              if (!webErr) {
                self.data = self.webIdentityCredentials.data;
                self.sts.credentialsFrom(self.data, self);
              }
              callback(webErr);
            });
          } else {
            self.clearIdOnNotAuthorized(err);
            callback(err);
          }
        });
      }, "getCredentialsFromSTS"),
      loadCachedId: /* @__PURE__ */ __name(function loadCachedId() {
        var self = this;
        if (AWS2.util.isBrowser() && !self.params.IdentityId) {
          var id = self.getStorage("id");
          if (id && self.params.Logins) {
            var actualProviders = Object.keys(self.params.Logins);
            var cachedProviders = (self.getStorage("providers") || "").split(",");
            var intersect = cachedProviders.filter(function(n) {
              return actualProviders.indexOf(n) !== -1;
            });
            if (intersect.length !== 0) {
              self.params.IdentityId = id;
            }
          } else if (id) {
            self.params.IdentityId = id;
          }
        }
      }, "loadCachedId"),
      createClients: function() {
        var clientConfig = this._clientConfig;
        this.webIdentityCredentials = this.webIdentityCredentials || new AWS2.WebIdentityCredentials(this.params, clientConfig);
        if (!this.cognito) {
          var cognitoConfig = AWS2.util.merge({}, clientConfig);
          cognitoConfig.params = this.params;
          this.cognito = new CognitoIdentity(cognitoConfig);
        }
        this.sts = this.sts || new STS(clientConfig);
      },
      cacheId: /* @__PURE__ */ __name(function cacheId(data) {
        this._identityId = data.IdentityId;
        this.params.IdentityId = this._identityId;
        if (AWS2.util.isBrowser()) {
          this.setStorage("id", data.IdentityId);
          if (this.params.Logins) {
            this.setStorage("providers", Object.keys(this.params.Logins).join(","));
          }
        }
      }, "cacheId"),
      getStorage: /* @__PURE__ */ __name(function getStorage(key) {
        return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || "")];
      }, "getStorage"),
      setStorage: /* @__PURE__ */ __name(function setStorage(key, val) {
        try {
          this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || "")] = val;
        } catch (_) {
        }
      }, "setStorage"),
      storage: function() {
        try {
          var storage = AWS2.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === "object" ? window.localStorage : {};
          storage["aws.test-storage"] = "foobar";
          delete storage["aws.test-storage"];
          return storage;
        } catch (_) {
          return {};
        }
      }()
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/saml_credentials.js
var require_saml_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/saml_credentials.js"() {
    var AWS2 = require_core();
    var STS = require_sts2();
    AWS2.SAMLCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function SAMLCredentials(params) {
        AWS2.Credentials.call(this);
        this.expired = true;
        this.params = params;
      }, "SAMLCredentials"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        self.createClients();
        self.service.assumeRoleWithSAML(function(err, data) {
          if (!err) {
            self.service.credentialsFrom(data, self);
          }
          callback(err);
        });
      }, "load"),
      createClients: function() {
        this.service = this.service || new STS({ params: this.params });
      }
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/process_credentials.js
var require_process_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/process_credentials.js"() {
    var AWS2 = require_core();
    var proc = __require("child_process");
    var iniLoader = AWS2.util.iniLoader;
    AWS2.ProcessCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function ProcessCredentials(options) {
        AWS2.Credentials.call(this);
        options = options || {};
        this.filename = options.filename;
        this.profile = options.profile || process.env.AWS_PROFILE || AWS2.util.defaultProfile;
        this.get(options.callback || AWS2.util.fn.noop);
      }, "ProcessCredentials"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        try {
          var profiles = AWS2.util.getProfilesFromSharedConfig(iniLoader, this.filename);
          var profile = profiles[this.profile] || {};
          if (Object.keys(profile).length === 0) {
            throw AWS2.util.error(
              new Error("Profile " + this.profile + " not found"),
              { code: "ProcessCredentialsProviderFailure" }
            );
          }
          if (profile["credential_process"]) {
            this.loadViaCredentialProcess(profile, function(err, data) {
              if (err) {
                callback(err, null);
              } else {
                self.expired = false;
                self.accessKeyId = data.AccessKeyId;
                self.secretAccessKey = data.SecretAccessKey;
                self.sessionToken = data.SessionToken;
                if (data.Expiration) {
                  self.expireTime = new Date(data.Expiration);
                }
                callback(null);
              }
            });
          } else {
            throw AWS2.util.error(
              new Error("Profile " + this.profile + " did not include credential process"),
              { code: "ProcessCredentialsProviderFailure" }
            );
          }
        } catch (err) {
          callback(err);
        }
      }, "load"),
      loadViaCredentialProcess: /* @__PURE__ */ __name(function loadViaCredentialProcess(profile, callback) {
        proc.exec(profile["credential_process"], { env: process.env }, function(err, stdOut, stdErr) {
          if (err) {
            callback(AWS2.util.error(
              new Error("credential_process returned error"),
              { code: "ProcessCredentialsProviderFailure" }
            ), null);
          } else {
            try {
              var credData = JSON.parse(stdOut);
              if (credData.Expiration) {
                var currentTime = AWS2.util.date.getDate();
                var expireTime = new Date(credData.Expiration);
                if (expireTime < currentTime) {
                  throw Error("credential_process returned expired credentials");
                }
              }
              if (credData.Version !== 1) {
                throw Error("credential_process does not return Version == 1");
              }
              callback(null, credData);
            } catch (err2) {
              callback(AWS2.util.error(
                new Error(err2.message),
                { code: "ProcessCredentialsProviderFailure" }
              ), null);
            }
          }
        });
      }, "loadViaCredentialProcess"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        iniLoader.clearCachedFiles();
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh")
    });
  }
});

// ../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/defaults.js
var require_defaults = __commonJS({
  "../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/defaults.js"(exports) {
    (function() {
      exports.defaults = {
        "0.1": {
          explicitCharkey: false,
          trim: true,
          normalize: true,
          normalizeTags: false,
          attrkey: "@",
          charkey: "#",
          explicitArray: false,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: false,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          childkey: "@@",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          emptyTag: ""
        },
        "0.2": {
          explicitCharkey: false,
          trim: false,
          normalize: false,
          normalizeTags: false,
          attrkey: "$",
          charkey: "_",
          explicitArray: true,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: true,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          preserveChildrenOrder: false,
          childkey: "$$",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          rootName: "root",
          xmldec: {
            "version": "1.0",
            "encoding": "UTF-8",
            "standalone": true
          },
          doctype: null,
          renderOpts: {
            "pretty": true,
            "indent": "  ",
            "newline": "\n"
          },
          headless: false,
          chunkSize: 1e4,
          emptyTag: "",
          cdata: false
        }
      };
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/Utility.js
var require_Utility = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/Utility.js"(exports, module) {
    (function() {
      var assign, isArray, isEmpty, isFunction, isObject, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;
      assign = /* @__PURE__ */ __name(function() {
        var i, key, len, source, sources, target;
        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (isFunction(Object.assign)) {
          Object.assign.apply(null, arguments);
        } else {
          for (i = 0, len = sources.length; i < len; i++) {
            source = sources[i];
            if (source != null) {
              for (key in source) {
                if (!hasProp.call(source, key))
                  continue;
                target[key] = source[key];
              }
            }
          }
        }
        return target;
      }, "assign");
      isFunction = /* @__PURE__ */ __name(function(val) {
        return !!val && Object.prototype.toString.call(val) === "[object Function]";
      }, "isFunction");
      isObject = /* @__PURE__ */ __name(function(val) {
        var ref;
        return !!val && ((ref = typeof val) === "function" || ref === "object");
      }, "isObject");
      isArray = /* @__PURE__ */ __name(function(val) {
        if (isFunction(Array.isArray)) {
          return Array.isArray(val);
        } else {
          return Object.prototype.toString.call(val) === "[object Array]";
        }
      }, "isArray");
      isEmpty = /* @__PURE__ */ __name(function(val) {
        var key;
        if (isArray(val)) {
          return !val.length;
        } else {
          for (key in val) {
            if (!hasProp.call(val, key))
              continue;
            return false;
          }
          return true;
        }
      }, "isEmpty");
      isPlainObject = /* @__PURE__ */ __name(function(val) {
        var ctor, proto;
        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
      }, "isPlainObject");
      module.exports.assign = assign;
      module.exports.isFunction = isFunction;
      module.exports.isObject = isObject;
      module.exports.isArray = isArray;
      module.exports.isEmpty = isEmpty;
      module.exports.isPlainObject = isPlainObject;
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLAttribute.js
var require_XMLAttribute = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLAttribute.js"(exports, module) {
    (function() {
      var XMLAttribute;
      module.exports = XMLAttribute = function() {
        function XMLAttribute2(parent, name, value) {
          this.options = parent.options;
          this.stringify = parent.stringify;
          if (name == null) {
            throw new Error("Missing attribute name of element " + parent.name);
          }
          if (value == null) {
            throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
          }
          this.name = this.stringify.attName(name);
          this.value = this.stringify.attValue(value);
        }
        __name(XMLAttribute2, "XMLAttribute");
        XMLAttribute2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLAttribute2.prototype.toString = function(options) {
          return this.options.writer.set(options).attribute(this);
        };
        return XMLAttribute2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLElement.js
var require_XMLElement = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLElement.js"(exports, module) {
    (function() {
      var XMLAttribute, XMLElement, XMLNode, isFunction, isObject, ref, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction;
      XMLNode = require_XMLNode();
      XMLAttribute = require_XMLAttribute();
      module.exports = XMLElement = function(superClass) {
        extend(XMLElement2, superClass);
        function XMLElement2(parent, name, attributes) {
          XMLElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing element name");
          }
          this.name = this.stringify.eleName(name);
          this.attributes = {};
          if (attributes != null) {
            this.attribute(attributes);
          }
          if (parent.isDocument) {
            this.isRoot = true;
            this.documentObject = parent;
            parent.rootObject = this;
          }
        }
        __name(XMLElement2, "XMLElement");
        XMLElement2.prototype.clone = function() {
          var att, attName, clonedSelf, ref1;
          clonedSelf = Object.create(this);
          if (clonedSelf.isRoot) {
            clonedSelf.documentObject = null;
          }
          clonedSelf.attributes = {};
          ref1 = this.attributes;
          for (attName in ref1) {
            if (!hasProp.call(ref1, attName))
              continue;
            att = ref1[attName];
            clonedSelf.attributes[attName] = att.clone();
          }
          clonedSelf.children = [];
          this.children.forEach(function(child) {
            var clonedChild;
            clonedChild = child.clone();
            clonedChild.parent = clonedSelf;
            return clonedSelf.children.push(clonedChild);
          });
          return clonedSelf;
        };
        XMLElement2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (name != null) {
            name = name.valueOf();
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (!this.options.skipNullAttributes || value != null) {
              this.attributes[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLElement2.prototype.removeAttribute = function(name) {
          var attName, i, len;
          if (name == null) {
            throw new Error("Missing attribute name");
          }
          name = name.valueOf();
          if (Array.isArray(name)) {
            for (i = 0, len = name.length; i < len; i++) {
              attName = name[i];
              delete this.attributes[attName];
            }
          } else {
            delete this.attributes[name];
          }
          return this;
        };
        XMLElement2.prototype.toString = function(options) {
          return this.options.writer.set(options).element(this);
        };
        XMLElement2.prototype.att = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.a = function(name, value) {
          return this.attribute(name, value);
        };
        return XMLElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLCData.js
var require_XMLCData = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLCData.js"(exports, module) {
    (function() {
      var XMLCData, XMLNode, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLCData = function(superClass) {
        extend(XMLCData2, superClass);
        function XMLCData2(parent, text) {
          XMLCData2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing CDATA text");
          }
          this.text = this.stringify.cdata(text);
        }
        __name(XMLCData2, "XMLCData");
        XMLCData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCData2.prototype.toString = function(options) {
          return this.options.writer.set(options).cdata(this);
        };
        return XMLCData2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLComment.js
var require_XMLComment = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLComment.js"(exports, module) {
    (function() {
      var XMLComment, XMLNode, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLComment = function(superClass) {
        extend(XMLComment2, superClass);
        function XMLComment2(parent, text) {
          XMLComment2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing comment text");
          }
          this.text = this.stringify.comment(text);
        }
        __name(XMLComment2, "XMLComment");
        XMLComment2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLComment2.prototype.toString = function(options) {
          return this.options.writer.set(options).comment(this);
        };
        return XMLComment2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDeclaration.js
var require_XMLDeclaration = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDeclaration.js"(exports, module) {
    (function() {
      var XMLDeclaration, XMLNode, isObject, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      module.exports = XMLDeclaration = function(superClass) {
        extend(XMLDeclaration2, superClass);
        function XMLDeclaration2(parent, version2, encoding, standalone) {
          var ref;
          XMLDeclaration2.__super__.constructor.call(this, parent);
          if (isObject(version2)) {
            ref = version2, version2 = ref.version, encoding = ref.encoding, standalone = ref.standalone;
          }
          if (!version2) {
            version2 = "1.0";
          }
          this.version = this.stringify.xmlVersion(version2);
          if (encoding != null) {
            this.encoding = this.stringify.xmlEncoding(encoding);
          }
          if (standalone != null) {
            this.standalone = this.stringify.xmlStandalone(standalone);
          }
        }
        __name(XMLDeclaration2, "XMLDeclaration");
        XMLDeclaration2.prototype.toString = function(options) {
          return this.options.writer.set(options).declaration(this);
        };
        return XMLDeclaration2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDAttList.js
var require_XMLDTDAttList = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDAttList.js"(exports, module) {
    (function() {
      var XMLDTDAttList, XMLNode, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLDTDAttList = function(superClass) {
        extend(XMLDTDAttList2, superClass);
        function XMLDTDAttList2(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          XMLDTDAttList2.__super__.constructor.call(this, parent);
          if (elementName == null) {
            throw new Error("Missing DTD element name");
          }
          if (attributeName == null) {
            throw new Error("Missing DTD attribute name");
          }
          if (!attributeType) {
            throw new Error("Missing DTD attribute type");
          }
          if (!defaultValueType) {
            throw new Error("Missing DTD attribute default");
          }
          if (defaultValueType.indexOf("#") !== 0) {
            defaultValueType = "#" + defaultValueType;
          }
          if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
            throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
          }
          if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
            throw new Error("Default value only applies to #FIXED or #DEFAULT");
          }
          this.elementName = this.stringify.eleName(elementName);
          this.attributeName = this.stringify.attName(attributeName);
          this.attributeType = this.stringify.dtdAttType(attributeType);
          this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
          this.defaultValueType = defaultValueType;
        }
        __name(XMLDTDAttList2, "XMLDTDAttList");
        XMLDTDAttList2.prototype.toString = function(options) {
          return this.options.writer.set(options).dtdAttList(this);
        };
        return XMLDTDAttList2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDEntity.js
var require_XMLDTDEntity = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDEntity.js"(exports, module) {
    (function() {
      var XMLDTDEntity, XMLNode, isObject, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      module.exports = XMLDTDEntity = function(superClass) {
        extend(XMLDTDEntity2, superClass);
        function XMLDTDEntity2(parent, pe, name, value) {
          XMLDTDEntity2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing entity name");
          }
          if (value == null) {
            throw new Error("Missing entity value");
          }
          this.pe = !!pe;
          this.name = this.stringify.eleName(name);
          if (!isObject(value)) {
            this.value = this.stringify.dtdEntityValue(value);
          } else {
            if (!value.pubID && !value.sysID) {
              throw new Error("Public and/or system identifiers are required for an external entity");
            }
            if (value.pubID && !value.sysID) {
              throw new Error("System identifier is required for a public external entity");
            }
            if (value.pubID != null) {
              this.pubID = this.stringify.dtdPubID(value.pubID);
            }
            if (value.sysID != null) {
              this.sysID = this.stringify.dtdSysID(value.sysID);
            }
            if (value.nData != null) {
              this.nData = this.stringify.dtdNData(value.nData);
            }
            if (this.pe && this.nData) {
              throw new Error("Notation declaration is not allowed in a parameter entity");
            }
          }
        }
        __name(XMLDTDEntity2, "XMLDTDEntity");
        XMLDTDEntity2.prototype.toString = function(options) {
          return this.options.writer.set(options).dtdEntity(this);
        };
        return XMLDTDEntity2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDElement.js
var require_XMLDTDElement = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDElement.js"(exports, module) {
    (function() {
      var XMLDTDElement, XMLNode, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLDTDElement = function(superClass) {
        extend(XMLDTDElement2, superClass);
        function XMLDTDElement2(parent, name, value) {
          XMLDTDElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD element name");
          }
          if (!value) {
            value = "(#PCDATA)";
          }
          if (Array.isArray(value)) {
            value = "(" + value.join(",") + ")";
          }
          this.name = this.stringify.eleName(name);
          this.value = this.stringify.dtdElementValue(value);
        }
        __name(XMLDTDElement2, "XMLDTDElement");
        XMLDTDElement2.prototype.toString = function(options) {
          return this.options.writer.set(options).dtdElement(this);
        };
        return XMLDTDElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDNotation.js
var require_XMLDTDNotation = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDTDNotation.js"(exports, module) {
    (function() {
      var XMLDTDNotation, XMLNode, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLDTDNotation = function(superClass) {
        extend(XMLDTDNotation2, superClass);
        function XMLDTDNotation2(parent, name, value) {
          XMLDTDNotation2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing notation name");
          }
          if (!value.pubID && !value.sysID) {
            throw new Error("Public or system identifiers are required for an external entity");
          }
          this.name = this.stringify.eleName(name);
          if (value.pubID != null) {
            this.pubID = this.stringify.dtdPubID(value.pubID);
          }
          if (value.sysID != null) {
            this.sysID = this.stringify.dtdSysID(value.sysID);
          }
        }
        __name(XMLDTDNotation2, "XMLDTDNotation");
        XMLDTDNotation2.prototype.toString = function(options) {
          return this.options.writer.set(options).dtdNotation(this);
        };
        return XMLDTDNotation2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDocType.js
var require_XMLDocType = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDocType.js"(exports, module) {
    (function() {
      var XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNode, isObject, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      module.exports = XMLDocType = function(superClass) {
        extend(XMLDocType2, superClass);
        function XMLDocType2(parent, pubID, sysID) {
          var ref, ref1;
          XMLDocType2.__super__.constructor.call(this, parent);
          this.documentObject = parent;
          if (isObject(pubID)) {
            ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
          }
          if (sysID == null) {
            ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
          }
          if (pubID != null) {
            this.pubID = this.stringify.dtdPubID(pubID);
          }
          if (sysID != null) {
            this.sysID = this.stringify.dtdSysID(sysID);
          }
        }
        __name(XMLDocType2, "XMLDocType");
        XMLDocType2.prototype.element = function(name, value) {
          var child;
          child = new XMLDTDElement(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var child;
          child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.entity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, false, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.pEntity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, true, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.notation = function(name, value) {
          var child;
          child = new XMLDTDNotation(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.toString = function(options) {
          return this.options.writer.set(options).docType(this);
        };
        XMLDocType2.prototype.ele = function(name, value) {
          return this.element(name, value);
        };
        XMLDocType2.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
        };
        XMLDocType2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocType2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocType2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        XMLDocType2.prototype.up = function() {
          return this.root() || this.documentObject;
        };
        return XMLDocType2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLRaw.js
var require_XMLRaw = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLRaw.js"(exports, module) {
    (function() {
      var XMLNode, XMLRaw, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLRaw = function(superClass) {
        extend(XMLRaw2, superClass);
        function XMLRaw2(parent, text) {
          XMLRaw2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing raw text");
          }
          this.value = this.stringify.raw(text);
        }
        __name(XMLRaw2, "XMLRaw");
        XMLRaw2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLRaw2.prototype.toString = function(options) {
          return this.options.writer.set(options).raw(this);
        };
        return XMLRaw2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLText.js
var require_XMLText = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLText.js"(exports, module) {
    (function() {
      var XMLNode, XMLText, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLText = function(superClass) {
        extend(XMLText2, superClass);
        function XMLText2(parent, text) {
          XMLText2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing element text");
          }
          this.value = this.stringify.eleText(text);
        }
        __name(XMLText2, "XMLText");
        XMLText2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLText2.prototype.toString = function(options) {
          return this.options.writer.set(options).text(this);
        };
        return XMLText2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js
var require_XMLProcessingInstruction = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"(exports, module) {
    (function() {
      var XMLNode, XMLProcessingInstruction, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLProcessingInstruction = function(superClass) {
        extend(XMLProcessingInstruction2, superClass);
        function XMLProcessingInstruction2(parent, target, value) {
          XMLProcessingInstruction2.__super__.constructor.call(this, parent);
          if (target == null) {
            throw new Error("Missing instruction target");
          }
          this.target = this.stringify.insTarget(target);
          if (value) {
            this.value = this.stringify.insValue(value);
          }
        }
        __name(XMLProcessingInstruction2, "XMLProcessingInstruction");
        XMLProcessingInstruction2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLProcessingInstruction2.prototype.toString = function(options) {
          return this.options.writer.set(options).processingInstruction(this);
        };
        return XMLProcessingInstruction2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLNode.js
var require_XMLNode = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLNode.js"(exports, module) {
    (function() {
      var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLProcessingInstruction, XMLRaw, XMLText, isEmpty, isFunction, isObject, ref, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, isEmpty = ref.isEmpty;
      XMLElement = null;
      XMLCData = null;
      XMLComment = null;
      XMLDeclaration = null;
      XMLDocType = null;
      XMLRaw = null;
      XMLText = null;
      XMLProcessingInstruction = null;
      module.exports = XMLNode = function() {
        function XMLNode2(parent) {
          this.parent = parent;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          this.children = [];
          if (!XMLElement) {
            XMLElement = require_XMLElement();
            XMLCData = require_XMLCData();
            XMLComment = require_XMLComment();
            XMLDeclaration = require_XMLDeclaration();
            XMLDocType = require_XMLDocType();
            XMLRaw = require_XMLRaw();
            XMLText = require_XMLText();
            XMLProcessingInstruction = require_XMLProcessingInstruction();
          }
        }
        __name(XMLNode2, "XMLNode");
        XMLNode2.prototype.element = function(name, attributes, text) {
          var childNode, item, j, k, key, lastChild, len, len1, ref1, val;
          lastChild = null;
          if (attributes == null) {
            attributes = {};
          }
          attributes = attributes.valueOf();
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          if (name != null) {
            name = name.valueOf();
          }
          if (Array.isArray(name)) {
            for (j = 0, len = name.length; j < len; j++) {
              item = name[j];
              lastChild = this.element(item);
            }
          } else if (isFunction(name)) {
            lastChild = this.element(name.apply());
          } else if (isObject(name)) {
            for (key in name) {
              if (!hasProp.call(name, key))
                continue;
              val = name[key];
              if (isFunction(val)) {
                val = val.apply();
              }
              if (isObject(val) && isEmpty(val)) {
                val = null;
              }
              if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
              } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                for (k = 0, len1 = val.length; k < len1; k++) {
                  item = val[k];
                  childNode = {};
                  childNode[key] = item;
                  lastChild = this.element(childNode);
                }
              } else if (isObject(val)) {
                lastChild = this.element(key);
                lastChild.element(val);
              } else {
                lastChild = this.element(key, val);
              }
            }
          } else {
            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
              lastChild = this.text(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
              lastChild = this.cdata(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
              lastChild = this.comment(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
              lastChild = this.raw(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
              lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
            } else {
              lastChild = this.node(name, attributes, text);
            }
          }
          if (lastChild == null) {
            throw new Error("Could not create any elements with: " + name);
          }
          return lastChild;
        };
        XMLNode2.prototype.insertBefore = function(name, attributes, text) {
          var child, i, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level");
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode2.prototype.insertAfter = function(name, attributes, text) {
          var child, i, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level");
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode2.prototype.remove = function() {
          var i, ref1;
          if (this.isRoot) {
            throw new Error("Cannot remove the root element");
          }
          i = this.parent.children.indexOf(this);
          [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref1 = [])), ref1;
          return this.parent;
        };
        XMLNode2.prototype.node = function(name, attributes, text) {
          var child, ref1;
          if (name != null) {
            name = name.valueOf();
          }
          attributes || (attributes = {});
          attributes = attributes.valueOf();
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          child = new XMLElement(this, name, attributes);
          if (text != null) {
            child.text(text);
          }
          this.children.push(child);
          return child;
        };
        XMLNode2.prototype.text = function(value) {
          var child;
          child = new XMLText(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.cdata = function(value) {
          var child;
          child = new XMLCData(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.comment = function(value) {
          var child;
          child = new XMLComment(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.commentBefore = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.commentAfter = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.raw = function(value) {
          var child;
          child = new XMLRaw(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.instruction = function(target, value) {
          var insTarget, insValue, instruction, j, len;
          if (target != null) {
            target = target.valueOf();
          }
          if (value != null) {
            value = value.valueOf();
          }
          if (Array.isArray(target)) {
            for (j = 0, len = target.length; j < len; j++) {
              insTarget = target[j];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            instruction = new XMLProcessingInstruction(this, target, value);
            this.children.push(instruction);
          }
          return this;
        };
        XMLNode2.prototype.instructionBefore = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.instructionAfter = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.declaration = function(version2, encoding, standalone) {
          var doc, xmldec;
          doc = this.document();
          xmldec = new XMLDeclaration(doc, version2, encoding, standalone);
          if (doc.children[0] instanceof XMLDeclaration) {
            doc.children[0] = xmldec;
          } else {
            doc.children.unshift(xmldec);
          }
          return doc.root() || doc;
        };
        XMLNode2.prototype.doctype = function(pubID, sysID) {
          var child, doc, doctype, i, j, k, len, len1, ref1, ref2;
          doc = this.document();
          doctype = new XMLDocType(doc, pubID, sysID);
          ref1 = doc.children;
          for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            child = ref1[i];
            if (child instanceof XMLDocType) {
              doc.children[i] = doctype;
              return doctype;
            }
          }
          ref2 = doc.children;
          for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
            child = ref2[i];
            if (child.isRoot) {
              doc.children.splice(i, 0, doctype);
              return doctype;
            }
          }
          doc.children.push(doctype);
          return doctype;
        };
        XMLNode2.prototype.up = function() {
          if (this.isRoot) {
            throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
          }
          return this.parent;
        };
        XMLNode2.prototype.root = function() {
          var node;
          node = this;
          while (node) {
            if (node.isDocument) {
              return node.rootObject;
            } else if (node.isRoot) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.document = function() {
          var node;
          node = this;
          while (node) {
            if (node.isDocument) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.end = function(options) {
          return this.document().end(options);
        };
        XMLNode2.prototype.prev = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i < 1) {
            throw new Error("Already at the first node");
          }
          return this.parent.children[i - 1];
        };
        XMLNode2.prototype.next = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i === -1 || i === this.parent.children.length - 1) {
            throw new Error("Already at the last node");
          }
          return this.parent.children[i + 1];
        };
        XMLNode2.prototype.importDocument = function(doc) {
          var clonedRoot;
          clonedRoot = doc.root().clone();
          clonedRoot.parent = this;
          clonedRoot.isRoot = false;
          this.children.push(clonedRoot);
          return this;
        };
        XMLNode2.prototype.ele = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.doc = function() {
          return this.document();
        };
        XMLNode2.prototype.dec = function(version2, encoding, standalone) {
          return this.declaration(version2, encoding, standalone);
        };
        XMLNode2.prototype.dtd = function(pubID, sysID) {
          return this.doctype(pubID, sysID);
        };
        XMLNode2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLNode2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.u = function() {
          return this.up();
        };
        XMLNode2.prototype.importXMLBuilder = function(doc) {
          return this.importDocument(doc);
        };
        return XMLNode2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLStringifier.js
var require_XMLStringifier = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLStringifier.js"(exports, module) {
    (function() {
      var XMLStringifier, bind = /* @__PURE__ */ __name(function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      }, "bind"), hasProp = {}.hasOwnProperty;
      module.exports = XMLStringifier = function() {
        function XMLStringifier2(options) {
          this.assertLegalChar = bind(this.assertLegalChar, this);
          var key, ref, value;
          options || (options = {});
          this.noDoubleEncoding = options.noDoubleEncoding;
          ref = options.stringify || {};
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this[key] = value;
          }
        }
        __name(XMLStringifier2, "XMLStringifier");
        XMLStringifier2.prototype.eleName = function(val) {
          val = "" + val || "";
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.eleText = function(val) {
          val = "" + val || "";
          return this.assertLegalChar(this.elEscape(val));
        };
        XMLStringifier2.prototype.cdata = function(val) {
          val = "" + val || "";
          val = val.replace("]]>", "]]]]><![CDATA[>");
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.comment = function(val) {
          val = "" + val || "";
          if (val.match(/--/)) {
            throw new Error("Comment text cannot contain double-hypen: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.raw = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.attName = function(val) {
          return val = "" + val || "";
        };
        XMLStringifier2.prototype.attValue = function(val) {
          val = "" + val || "";
          return this.attEscape(val);
        };
        XMLStringifier2.prototype.insTarget = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.insValue = function(val) {
          val = "" + val || "";
          if (val.match(/\?>/)) {
            throw new Error("Invalid processing instruction value: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlVersion = function(val) {
          val = "" + val || "";
          if (!val.match(/1\.[0-9]+/)) {
            throw new Error("Invalid version number: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlEncoding = function(val) {
          val = "" + val || "";
          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
            throw new Error("Invalid encoding: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlStandalone = function(val) {
          if (val) {
            return "yes";
          } else {
            return "no";
          }
        };
        XMLStringifier2.prototype.dtdPubID = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdSysID = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdElementValue = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdAttType = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdAttDefault = function(val) {
          if (val != null) {
            return "" + val || "";
          } else {
            return val;
          }
        };
        XMLStringifier2.prototype.dtdEntityValue = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdNData = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.convertAttKey = "@";
        XMLStringifier2.prototype.convertPIKey = "?";
        XMLStringifier2.prototype.convertTextKey = "#text";
        XMLStringifier2.prototype.convertCDataKey = "#cdata";
        XMLStringifier2.prototype.convertCommentKey = "#comment";
        XMLStringifier2.prototype.convertRawKey = "#raw";
        XMLStringifier2.prototype.assertLegalChar = function(str) {
          var res;
          res = str.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
          if (res) {
            throw new Error("Invalid character in string: " + str + " at index " + res.index);
          }
          return str;
        };
        XMLStringifier2.prototype.elEscape = function(str) {
          var ampregex;
          ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
        };
        XMLStringifier2.prototype.attEscape = function(str) {
          var ampregex;
          ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
        };
        return XMLStringifier2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLWriterBase.js
var require_XMLWriterBase = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLWriterBase.js"(exports, module) {
    (function() {
      var XMLWriterBase, hasProp = {}.hasOwnProperty;
      module.exports = XMLWriterBase = function() {
        function XMLWriterBase2(options) {
          var key, ref, ref1, ref2, ref3, ref4, ref5, ref6, value;
          options || (options = {});
          this.pretty = options.pretty || false;
          this.allowEmpty = (ref = options.allowEmpty) != null ? ref : false;
          if (this.pretty) {
            this.indent = (ref1 = options.indent) != null ? ref1 : "  ";
            this.newline = (ref2 = options.newline) != null ? ref2 : "\n";
            this.offset = (ref3 = options.offset) != null ? ref3 : 0;
            this.dontprettytextnodes = (ref4 = options.dontprettytextnodes) != null ? ref4 : 0;
          } else {
            this.indent = "";
            this.newline = "";
            this.offset = 0;
            this.dontprettytextnodes = 0;
          }
          this.spacebeforeslash = (ref5 = options.spacebeforeslash) != null ? ref5 : "";
          if (this.spacebeforeslash === true) {
            this.spacebeforeslash = " ";
          }
          this.newlinedefault = this.newline;
          this.prettydefault = this.pretty;
          ref6 = options.writer || {};
          for (key in ref6) {
            if (!hasProp.call(ref6, key))
              continue;
            value = ref6[key];
            this[key] = value;
          }
        }
        __name(XMLWriterBase2, "XMLWriterBase");
        XMLWriterBase2.prototype.set = function(options) {
          var key, ref, value;
          options || (options = {});
          if ("pretty" in options) {
            this.pretty = options.pretty;
          }
          if ("allowEmpty" in options) {
            this.allowEmpty = options.allowEmpty;
          }
          if (this.pretty) {
            this.indent = "indent" in options ? options.indent : "  ";
            this.newline = "newline" in options ? options.newline : "\n";
            this.offset = "offset" in options ? options.offset : 0;
            this.dontprettytextnodes = "dontprettytextnodes" in options ? options.dontprettytextnodes : 0;
          } else {
            this.indent = "";
            this.newline = "";
            this.offset = 0;
            this.dontprettytextnodes = 0;
          }
          this.spacebeforeslash = "spacebeforeslash" in options ? options.spacebeforeslash : "";
          if (this.spacebeforeslash === true) {
            this.spacebeforeslash = " ";
          }
          this.newlinedefault = this.newline;
          this.prettydefault = this.pretty;
          ref = options.writer || {};
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this[key] = value;
          }
          return this;
        };
        XMLWriterBase2.prototype.space = function(level) {
          var indent;
          if (this.pretty) {
            indent = (level || 0) + this.offset + 1;
            if (indent > 0) {
              return new Array(indent).join(this.indent);
            } else {
              return "";
            }
          } else {
            return "";
          }
        };
        return XMLWriterBase2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLStringWriter.js
var require_XMLStringWriter = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLStringWriter.js"(exports, module) {
    (function() {
      var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLElement = require_XMLElement();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLWriterBase = require_XMLWriterBase();
      module.exports = XMLStringWriter = function(superClass) {
        extend(XMLStringWriter2, superClass);
        function XMLStringWriter2(options) {
          XMLStringWriter2.__super__.constructor.call(this, options);
        }
        __name(XMLStringWriter2, "XMLStringWriter");
        XMLStringWriter2.prototype.document = function(doc) {
          var child, i, len, r, ref;
          this.textispresent = false;
          r = "";
          ref = doc.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            r += function() {
              switch (false) {
                case !(child instanceof XMLDeclaration):
                  return this.declaration(child);
                case !(child instanceof XMLDocType):
                  return this.docType(child);
                case !(child instanceof XMLComment):
                  return this.comment(child);
                case !(child instanceof XMLProcessingInstruction):
                  return this.processingInstruction(child);
                default:
                  return this.element(child, 0);
              }
            }.call(this);
          }
          if (this.pretty && r.slice(-this.newline.length) === this.newline) {
            r = r.slice(0, -this.newline.length);
          }
          return r;
        };
        XMLStringWriter2.prototype.attribute = function(att) {
          return " " + att.name + '="' + att.value + '"';
        };
        XMLStringWriter2.prototype.cdata = function(node, level) {
          return this.space(level) + "<![CDATA[" + node.text + "]]>" + this.newline;
        };
        XMLStringWriter2.prototype.comment = function(node, level) {
          return this.space(level) + "<!-- " + node.text + " -->" + this.newline;
        };
        XMLStringWriter2.prototype.declaration = function(node, level) {
          var r;
          r = this.space(level);
          r += '<?xml version="' + node.version + '"';
          if (node.encoding != null) {
            r += ' encoding="' + node.encoding + '"';
          }
          if (node.standalone != null) {
            r += ' standalone="' + node.standalone + '"';
          }
          r += this.spacebeforeslash + "?>";
          r += this.newline;
          return r;
        };
        XMLStringWriter2.prototype.docType = function(node, level) {
          var child, i, len, r, ref;
          level || (level = 0);
          r = this.space(level);
          r += "<!DOCTYPE " + node.root().name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          if (node.children.length > 0) {
            r += " [";
            r += this.newline;
            ref = node.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              r += function() {
                switch (false) {
                  case !(child instanceof XMLDTDAttList):
                    return this.dtdAttList(child, level + 1);
                  case !(child instanceof XMLDTDElement):
                    return this.dtdElement(child, level + 1);
                  case !(child instanceof XMLDTDEntity):
                    return this.dtdEntity(child, level + 1);
                  case !(child instanceof XMLDTDNotation):
                    return this.dtdNotation(child, level + 1);
                  case !(child instanceof XMLCData):
                    return this.cdata(child, level + 1);
                  case !(child instanceof XMLComment):
                    return this.comment(child, level + 1);
                  case !(child instanceof XMLProcessingInstruction):
                    return this.processingInstruction(child, level + 1);
                  default:
                    throw new Error("Unknown DTD node type: " + child.constructor.name);
                }
              }.call(this);
            }
            r += "]";
          }
          r += this.spacebeforeslash + ">";
          r += this.newline;
          return r;
        };
        XMLStringWriter2.prototype.element = function(node, level) {
          var att, child, i, j, len, len1, name, r, ref, ref1, ref2, space, textispresentwasset;
          level || (level = 0);
          textispresentwasset = false;
          if (this.textispresent) {
            this.newline = "";
            this.pretty = false;
          } else {
            this.newline = this.newlinedefault;
            this.pretty = this.prettydefault;
          }
          space = this.space(level);
          r = "";
          r += space + "<" + node.name;
          ref = node.attributes;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            r += this.attribute(att);
          }
          if (node.children.length === 0 || node.children.every(function(e) {
            return e.value === "";
          })) {
            if (this.allowEmpty) {
              r += "></" + node.name + ">" + this.newline;
            } else {
              r += this.spacebeforeslash + "/>" + this.newline;
            }
          } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
            r += ">";
            r += node.children[0].value;
            r += "</" + node.name + ">" + this.newline;
          } else {
            if (this.dontprettytextnodes) {
              ref1 = node.children;
              for (i = 0, len = ref1.length; i < len; i++) {
                child = ref1[i];
                if (child.value != null) {
                  this.textispresent++;
                  textispresentwasset = true;
                  break;
                }
              }
            }
            if (this.textispresent) {
              this.newline = "";
              this.pretty = false;
              space = this.space(level);
            }
            r += ">" + this.newline;
            ref2 = node.children;
            for (j = 0, len1 = ref2.length; j < len1; j++) {
              child = ref2[j];
              r += function() {
                switch (false) {
                  case !(child instanceof XMLCData):
                    return this.cdata(child, level + 1);
                  case !(child instanceof XMLComment):
                    return this.comment(child, level + 1);
                  case !(child instanceof XMLElement):
                    return this.element(child, level + 1);
                  case !(child instanceof XMLRaw):
                    return this.raw(child, level + 1);
                  case !(child instanceof XMLText):
                    return this.text(child, level + 1);
                  case !(child instanceof XMLProcessingInstruction):
                    return this.processingInstruction(child, level + 1);
                  default:
                    throw new Error("Unknown XML node type: " + child.constructor.name);
                }
              }.call(this);
            }
            if (textispresentwasset) {
              this.textispresent--;
            }
            if (!this.textispresent) {
              this.newline = this.newlinedefault;
              this.pretty = this.prettydefault;
            }
            r += space + "</" + node.name + ">" + this.newline;
          }
          return r;
        };
        XMLStringWriter2.prototype.processingInstruction = function(node, level) {
          var r;
          r = this.space(level) + "<?" + node.target;
          if (node.value) {
            r += " " + node.value;
          }
          r += this.spacebeforeslash + "?>" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.raw = function(node, level) {
          return this.space(level) + node.value + this.newline;
        };
        XMLStringWriter2.prototype.text = function(node, level) {
          return this.space(level) + node.value + this.newline;
        };
        XMLStringWriter2.prototype.dtdAttList = function(node, level) {
          var r;
          r = this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType;
          if (node.defaultValueType !== "#DEFAULT") {
            r += " " + node.defaultValueType;
          }
          if (node.defaultValue) {
            r += ' "' + node.defaultValue + '"';
          }
          r += this.spacebeforeslash + ">" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.dtdElement = function(node, level) {
          return this.space(level) + "<!ELEMENT " + node.name + " " + node.value + this.spacebeforeslash + ">" + this.newline;
        };
        XMLStringWriter2.prototype.dtdEntity = function(node, level) {
          var r;
          r = this.space(level) + "<!ENTITY";
          if (node.pe) {
            r += " %";
          }
          r += " " + node.name;
          if (node.value) {
            r += ' "' + node.value + '"';
          } else {
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.nData) {
              r += " NDATA " + node.nData;
            }
          }
          r += this.spacebeforeslash + ">" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.dtdNotation = function(node, level) {
          var r;
          r = this.space(level) + "<!NOTATION " + node.name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.pubID) {
            r += ' PUBLIC "' + node.pubID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          r += this.spacebeforeslash + ">" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.openNode = function(node, level) {
          var att, name, r, ref;
          level || (level = 0);
          if (node instanceof XMLElement) {
            r = this.space(level) + "<" + node.name;
            ref = node.attributes;
            for (name in ref) {
              if (!hasProp.call(ref, name))
                continue;
              att = ref[name];
              r += this.attribute(att);
            }
            r += (node.children ? ">" : "/>") + this.newline;
            return r;
          } else {
            r = this.space(level) + "<!DOCTYPE " + node.rootNodeName;
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            r += (node.children ? " [" : ">") + this.newline;
            return r;
          }
        };
        XMLStringWriter2.prototype.closeNode = function(node, level) {
          level || (level = 0);
          switch (false) {
            case !(node instanceof XMLElement):
              return this.space(level) + "</" + node.name + ">" + this.newline;
            case !(node instanceof XMLDocType):
              return this.space(level) + "]>" + this.newline;
          }
        };
        return XMLStringWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDocument.js
var require_XMLDocument = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDocument.js"(exports, module) {
    (function() {
      var XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      isPlainObject = require_Utility().isPlainObject;
      XMLNode = require_XMLNode();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      module.exports = XMLDocument = function(superClass) {
        extend(XMLDocument2, superClass);
        function XMLDocument2(options) {
          XMLDocument2.__super__.constructor.call(this, null);
          options || (options = {});
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.stringify = new XMLStringifier(options);
          this.isDocument = true;
        }
        __name(XMLDocument2, "XMLDocument");
        XMLDocument2.prototype.end = function(writer) {
          var writerOptions;
          if (!writer) {
            writer = this.options.writer;
          } else if (isPlainObject(writer)) {
            writerOptions = writer;
            writer = this.options.writer.set(writerOptions);
          }
          return writer.document(this);
        };
        XMLDocument2.prototype.toString = function(options) {
          return this.options.writer.set(options).document(this);
        };
        return XMLDocument2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDocumentCB.js
var require_XMLDocumentCB = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLDocumentCB.js"(exports, module) {
    (function() {
      var XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject;
      XMLElement = require_XMLElement();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLAttribute = require_XMLAttribute();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      module.exports = XMLDocumentCB = function() {
        function XMLDocumentCB2(options, onData, onEnd) {
          var writerOptions;
          options || (options = {});
          if (!options.writer) {
            options.writer = new XMLStringWriter(options);
          } else if (isPlainObject(options.writer)) {
            writerOptions = options.writer;
            options.writer = new XMLStringWriter(writerOptions);
          }
          this.options = options;
          this.writer = options.writer;
          this.stringify = new XMLStringifier(options);
          this.onDataCallback = onData || function() {
          };
          this.onEndCallback = onEnd || function() {
          };
          this.currentNode = null;
          this.currentLevel = -1;
          this.openTags = {};
          this.documentStarted = false;
          this.documentCompleted = false;
          this.root = null;
        }
        __name(XMLDocumentCB2, "XMLDocumentCB");
        XMLDocumentCB2.prototype.node = function(name, attributes, text) {
          var ref1;
          if (name == null) {
            throw new Error("Missing node name");
          }
          if (this.root && this.currentLevel === -1) {
            throw new Error("Document can only have one root node");
          }
          this.openCurrent();
          name = name.valueOf();
          if (attributes == null) {
            attributes = {};
          }
          attributes = attributes.valueOf();
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          this.currentNode = new XMLElement(this, name, attributes);
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          if (text != null) {
            this.text(text);
          }
          return this;
        };
        XMLDocumentCB2.prototype.element = function(name, attributes, text) {
          if (this.currentNode && this.currentNode instanceof XMLDocType) {
            return this.dtdElement.apply(this, arguments);
          } else {
            return this.node(name, attributes, text);
          }
        };
        XMLDocumentCB2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (!this.currentNode || this.currentNode.children) {
            throw new Error("att() can only be used immediately after an ele() call in callback mode");
          }
          if (name != null) {
            name = name.valueOf();
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (!this.options.skipNullAttributes || value != null) {
              this.currentNode.attributes[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.text = function(value) {
          var node;
          this.openCurrent();
          node = new XMLText(this, value);
          this.onData(this.writer.text(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.cdata = function(value) {
          var node;
          this.openCurrent();
          node = new XMLCData(this, value);
          this.onData(this.writer.cdata(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.comment = function(value) {
          var node;
          this.openCurrent();
          node = new XMLComment(this, value);
          this.onData(this.writer.comment(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.raw = function(value) {
          var node;
          this.openCurrent();
          node = new XMLRaw(this, value);
          this.onData(this.writer.raw(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.instruction = function(target, value) {
          var i, insTarget, insValue, len, node;
          this.openCurrent();
          if (target != null) {
            target = target.valueOf();
          }
          if (value != null) {
            value = value.valueOf();
          }
          if (Array.isArray(target)) {
            for (i = 0, len = target.length; i < len; i++) {
              insTarget = target[i];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            node = new XMLProcessingInstruction(this, target, value);
            this.onData(this.writer.processingInstruction(node, this.currentLevel + 1));
          }
          return this;
        };
        XMLDocumentCB2.prototype.declaration = function(version2, encoding, standalone) {
          var node;
          this.openCurrent();
          if (this.documentStarted) {
            throw new Error("declaration() must be the first node");
          }
          node = new XMLDeclaration(this, version2, encoding, standalone);
          this.onData(this.writer.declaration(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.doctype = function(root, pubID, sysID) {
          this.openCurrent();
          if (root == null) {
            throw new Error("Missing root node name");
          }
          if (this.root) {
            throw new Error("dtd() must come before the root node");
          }
          this.currentNode = new XMLDocType(this, pubID, sysID);
          this.currentNode.rootNodeName = root;
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          return this;
        };
        XMLDocumentCB2.prototype.dtdElement = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDElement(this, name, value);
          this.onData(this.writer.dtdElement(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var node;
          this.openCurrent();
          node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.onData(this.writer.dtdAttList(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.entity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, false, name, value);
          this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.pEntity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, true, name, value);
          this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.notation = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDNotation(this, name, value);
          this.onData(this.writer.dtdNotation(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.up = function() {
          if (this.currentLevel < 0) {
            throw new Error("The document node has no parent");
          }
          if (this.currentNode) {
            if (this.currentNode.children) {
              this.closeNode(this.currentNode);
            } else {
              this.openNode(this.currentNode);
            }
            this.currentNode = null;
          } else {
            this.closeNode(this.openTags[this.currentLevel]);
          }
          delete this.openTags[this.currentLevel];
          this.currentLevel--;
          return this;
        };
        XMLDocumentCB2.prototype.end = function() {
          while (this.currentLevel >= 0) {
            this.up();
          }
          return this.onEnd();
        };
        XMLDocumentCB2.prototype.openCurrent = function() {
          if (this.currentNode) {
            this.currentNode.children = true;
            return this.openNode(this.currentNode);
          }
        };
        XMLDocumentCB2.prototype.openNode = function(node) {
          if (!node.isOpen) {
            if (!this.root && this.currentLevel === 0 && node instanceof XMLElement) {
              this.root = node;
            }
            this.onData(this.writer.openNode(node, this.currentLevel));
            return node.isOpen = true;
          }
        };
        XMLDocumentCB2.prototype.closeNode = function(node) {
          if (!node.isClosed) {
            this.onData(this.writer.closeNode(node, this.currentLevel));
            return node.isClosed = true;
          }
        };
        XMLDocumentCB2.prototype.onData = function(chunk) {
          this.documentStarted = true;
          return this.onDataCallback(chunk);
        };
        XMLDocumentCB2.prototype.onEnd = function() {
          this.documentCompleted = true;
          return this.onEndCallback();
        };
        XMLDocumentCB2.prototype.ele = function() {
          return this.element.apply(this, arguments);
        };
        XMLDocumentCB2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.dec = function(version2, encoding, standalone) {
          return this.declaration(version2, encoding, standalone);
        };
        XMLDocumentCB2.prototype.dtd = function(root, pubID, sysID) {
          return this.doctype(root, pubID, sysID);
        };
        XMLDocumentCB2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLDocumentCB2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLDocumentCB2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.att = function() {
          if (this.currentNode && this.currentNode instanceof XMLDocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.a = function() {
          if (this.currentNode && this.currentNode instanceof XMLDocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocumentCB2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocumentCB2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        return XMLDocumentCB2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLStreamWriter.js
var require_XMLStreamWriter = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/XMLStreamWriter.js"(exports, module) {
    (function() {
      var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLElement = require_XMLElement();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLWriterBase = require_XMLWriterBase();
      module.exports = XMLStreamWriter = function(superClass) {
        extend(XMLStreamWriter2, superClass);
        function XMLStreamWriter2(stream, options) {
          XMLStreamWriter2.__super__.constructor.call(this, options);
          this.stream = stream;
        }
        __name(XMLStreamWriter2, "XMLStreamWriter");
        XMLStreamWriter2.prototype.document = function(doc) {
          var child, i, j, len, len1, ref, ref1, results;
          ref = doc.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            child.isLastRootNode = false;
          }
          doc.children[doc.children.length - 1].isLastRootNode = true;
          ref1 = doc.children;
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            child = ref1[j];
            switch (false) {
              case !(child instanceof XMLDeclaration):
                results.push(this.declaration(child));
                break;
              case !(child instanceof XMLDocType):
                results.push(this.docType(child));
                break;
              case !(child instanceof XMLComment):
                results.push(this.comment(child));
                break;
              case !(child instanceof XMLProcessingInstruction):
                results.push(this.processingInstruction(child));
                break;
              default:
                results.push(this.element(child));
            }
          }
          return results;
        };
        XMLStreamWriter2.prototype.attribute = function(att) {
          return this.stream.write(" " + att.name + '="' + att.value + '"');
        };
        XMLStreamWriter2.prototype.cdata = function(node, level) {
          return this.stream.write(this.space(level) + "<![CDATA[" + node.text + "]]>" + this.endline(node));
        };
        XMLStreamWriter2.prototype.comment = function(node, level) {
          return this.stream.write(this.space(level) + "<!-- " + node.text + " -->" + this.endline(node));
        };
        XMLStreamWriter2.prototype.declaration = function(node, level) {
          this.stream.write(this.space(level));
          this.stream.write('<?xml version="' + node.version + '"');
          if (node.encoding != null) {
            this.stream.write(' encoding="' + node.encoding + '"');
          }
          if (node.standalone != null) {
            this.stream.write(' standalone="' + node.standalone + '"');
          }
          this.stream.write(this.spacebeforeslash + "?>");
          return this.stream.write(this.endline(node));
        };
        XMLStreamWriter2.prototype.docType = function(node, level) {
          var child, i, len, ref;
          level || (level = 0);
          this.stream.write(this.space(level));
          this.stream.write("<!DOCTYPE " + node.root().name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          if (node.children.length > 0) {
            this.stream.write(" [");
            this.stream.write(this.endline(node));
            ref = node.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              switch (false) {
                case !(child instanceof XMLDTDAttList):
                  this.dtdAttList(child, level + 1);
                  break;
                case !(child instanceof XMLDTDElement):
                  this.dtdElement(child, level + 1);
                  break;
                case !(child instanceof XMLDTDEntity):
                  this.dtdEntity(child, level + 1);
                  break;
                case !(child instanceof XMLDTDNotation):
                  this.dtdNotation(child, level + 1);
                  break;
                case !(child instanceof XMLCData):
                  this.cdata(child, level + 1);
                  break;
                case !(child instanceof XMLComment):
                  this.comment(child, level + 1);
                  break;
                case !(child instanceof XMLProcessingInstruction):
                  this.processingInstruction(child, level + 1);
                  break;
                default:
                  throw new Error("Unknown DTD node type: " + child.constructor.name);
              }
            }
            this.stream.write("]");
          }
          this.stream.write(this.spacebeforeslash + ">");
          return this.stream.write(this.endline(node));
        };
        XMLStreamWriter2.prototype.element = function(node, level) {
          var att, child, i, len, name, ref, ref1, space;
          level || (level = 0);
          space = this.space(level);
          this.stream.write(space + "<" + node.name);
          ref = node.attributes;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            this.attribute(att);
          }
          if (node.children.length === 0 || node.children.every(function(e) {
            return e.value === "";
          })) {
            if (this.allowEmpty) {
              this.stream.write("></" + node.name + ">");
            } else {
              this.stream.write(this.spacebeforeslash + "/>");
            }
          } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
            this.stream.write(">");
            this.stream.write(node.children[0].value);
            this.stream.write("</" + node.name + ">");
          } else {
            this.stream.write(">" + this.newline);
            ref1 = node.children;
            for (i = 0, len = ref1.length; i < len; i++) {
              child = ref1[i];
              switch (false) {
                case !(child instanceof XMLCData):
                  this.cdata(child, level + 1);
                  break;
                case !(child instanceof XMLComment):
                  this.comment(child, level + 1);
                  break;
                case !(child instanceof XMLElement):
                  this.element(child, level + 1);
                  break;
                case !(child instanceof XMLRaw):
                  this.raw(child, level + 1);
                  break;
                case !(child instanceof XMLText):
                  this.text(child, level + 1);
                  break;
                case !(child instanceof XMLProcessingInstruction):
                  this.processingInstruction(child, level + 1);
                  break;
                default:
                  throw new Error("Unknown XML node type: " + child.constructor.name);
              }
            }
            this.stream.write(space + "</" + node.name + ">");
          }
          return this.stream.write(this.endline(node));
        };
        XMLStreamWriter2.prototype.processingInstruction = function(node, level) {
          this.stream.write(this.space(level) + "<?" + node.target);
          if (node.value) {
            this.stream.write(" " + node.value);
          }
          return this.stream.write(this.spacebeforeslash + "?>" + this.endline(node));
        };
        XMLStreamWriter2.prototype.raw = function(node, level) {
          return this.stream.write(this.space(level) + node.value + this.endline(node));
        };
        XMLStreamWriter2.prototype.text = function(node, level) {
          return this.stream.write(this.space(level) + node.value + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdAttList = function(node, level) {
          this.stream.write(this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType);
          if (node.defaultValueType !== "#DEFAULT") {
            this.stream.write(" " + node.defaultValueType);
          }
          if (node.defaultValue) {
            this.stream.write(' "' + node.defaultValue + '"');
          }
          return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdElement = function(node, level) {
          this.stream.write(this.space(level) + "<!ELEMENT " + node.name + " " + node.value);
          return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdEntity = function(node, level) {
          this.stream.write(this.space(level) + "<!ENTITY");
          if (node.pe) {
            this.stream.write(" %");
          }
          this.stream.write(" " + node.name);
          if (node.value) {
            this.stream.write(' "' + node.value + '"');
          } else {
            if (node.pubID && node.sysID) {
              this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
            } else if (node.sysID) {
              this.stream.write(' SYSTEM "' + node.sysID + '"');
            }
            if (node.nData) {
              this.stream.write(" NDATA " + node.nData);
            }
          }
          return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdNotation = function(node, level) {
          this.stream.write(this.space(level) + "<!NOTATION " + node.name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.pubID) {
            this.stream.write(' PUBLIC "' + node.pubID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          return this.stream.write(this.spacebeforeslash + ">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.endline = function(node) {
          if (!node.isLastRootNode) {
            return this.newline;
          } else {
            return "";
          }
        };
        return XMLStreamWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/index.js
var require_lib2 = __commonJS({
  "../../node_modules/.pnpm/xmlbuilder@9.0.7/node_modules/xmlbuilder/lib/index.js"(exports, module) {
    (function() {
      var XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;
      ref = require_Utility(), assign = ref.assign, isFunction = ref.isFunction;
      XMLDocument = require_XMLDocument();
      XMLDocumentCB = require_XMLDocumentCB();
      XMLStringWriter = require_XMLStringWriter();
      XMLStreamWriter = require_XMLStreamWriter();
      module.exports.create = function(name, xmldec, doctype, options) {
        var doc, root;
        if (name == null) {
          throw new Error("Root element needs a name");
        }
        options = assign({}, xmldec, doctype, options);
        doc = new XMLDocument(options);
        root = doc.element(name);
        if (!options.headless) {
          doc.declaration(options);
          if (options.pubID != null || options.sysID != null) {
            doc.doctype(options);
          }
        }
        return root;
      };
      module.exports.begin = function(options, onData, onEnd) {
        var ref1;
        if (isFunction(options)) {
          ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
          options = {};
        }
        if (onData) {
          return new XMLDocumentCB(options, onData, onEnd);
        } else {
          return new XMLDocument(options);
        }
      };
      module.exports.stringWriter = function(options) {
        return new XMLStringWriter(options);
      };
      module.exports.streamWriter = function(stream, options) {
        return new XMLStreamWriter(stream, options);
      };
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/builder.js
var require_builder3 = __commonJS({
  "../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/builder.js"(exports) {
    (function() {
      "use strict";
      var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;
      builder = require_lib2();
      defaults = require_defaults().defaults;
      requiresCDATA = /* @__PURE__ */ __name(function(entry) {
        return typeof entry === "string" && (entry.indexOf("&") >= 0 || entry.indexOf(">") >= 0 || entry.indexOf("<") >= 0);
      }, "requiresCDATA");
      wrapCDATA = /* @__PURE__ */ __name(function(entry) {
        return "<![CDATA[" + escapeCDATA(entry) + "]]>";
      }, "wrapCDATA");
      escapeCDATA = /* @__PURE__ */ __name(function(entry) {
        return entry.replace("]]>", "]]]]><![CDATA[>");
      }, "escapeCDATA");
      exports.Builder = function() {
        function Builder(opts) {
          var key, ref, value;
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key))
              continue;
            value = opts[key];
            this.options[key] = value;
          }
        }
        __name(Builder, "Builder");
        Builder.prototype.buildObject = function(rootObj) {
          var attrkey, charkey, render, rootElement, rootName;
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults["0.2"].rootName) {
            rootName = Object.keys(rootObj)[0];
            rootObj = rootObj[rootName];
          } else {
            rootName = this.options.rootName;
          }
          render = function(_this) {
            return function(element, obj) {
              var attr, child, entry, index, key, value;
              if (typeof obj !== "object") {
                if (_this.options.cdata && requiresCDATA(obj)) {
                  element.raw(wrapCDATA(obj));
                } else {
                  element.txt(obj);
                }
              } else if (Array.isArray(obj)) {
                for (index in obj) {
                  if (!hasProp.call(obj, index))
                    continue;
                  child = obj[index];
                  for (key in child) {
                    entry = child[key];
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else {
                for (key in obj) {
                  if (!hasProp.call(obj, key))
                    continue;
                  child = obj[key];
                  if (key === attrkey) {
                    if (typeof child === "object") {
                      for (attr in child) {
                        value = child[attr];
                        element = element.att(attr, value);
                      }
                    }
                  } else if (key === charkey) {
                    if (_this.options.cdata && requiresCDATA(child)) {
                      element = element.raw(wrapCDATA(child));
                    } else {
                      element = element.txt(child);
                    }
                  } else if (Array.isArray(child)) {
                    for (index in child) {
                      if (!hasProp.call(child, index))
                        continue;
                      entry = child[index];
                      if (typeof entry === "string") {
                        if (_this.options.cdata && requiresCDATA(entry)) {
                          element = element.ele(key).raw(wrapCDATA(entry)).up();
                        } else {
                          element = element.ele(key, entry).up();
                        }
                      } else {
                        element = render(element.ele(key), entry).up();
                      }
                    }
                  } else if (typeof child === "object") {
                    element = render(element.ele(key), child).up();
                  } else {
                    if (typeof child === "string" && _this.options.cdata && requiresCDATA(child)) {
                      element = element.ele(key).raw(wrapCDATA(child)).up();
                    } else {
                      if (child == null) {
                        child = "";
                      }
                      element = element.ele(key, child.toString()).up();
                    }
                  }
                }
              }
              return element;
            };
          }(this);
          rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
            headless: this.options.headless,
            allowSurrogateChars: this.options.allowSurrogateChars
          });
          return render(rootElement, rootObj).end(this.options.renderOpts);
        };
        return Builder;
      }();
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/sax@1.2.4/node_modules/sax/lib/sax.js
var require_sax = __commonJS({
  "../../node_modules/.pnpm/sax@1.2.4/node_modules/sax/lib/sax.js"(exports) {
    (function(sax) {
      sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
      };
      sax.SAXParser = SAXParser;
      sax.SAXStream = SAXStream;
      sax.createStream = createStream;
      sax.MAX_BUFFER_LENGTH = 64 * 1024;
      var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ];
      function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt);
        }
        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = "";
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];
        if (parser.opt.xmlns) {
          parser.ns = Object.create(rootNS);
        }
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) {
          parser.position = parser.line = parser.column = 0;
        }
        emit(parser, "onready");
      }
      __name(SAXParser, "SAXParser");
      if (!Object.create) {
        Object.create = function(o) {
          function F() {
          }
          __name(F, "F");
          F.prototype = o;
          var newf = new F();
          return newf;
        };
      }
      if (!Object.keys) {
        Object.keys = function(o) {
          var a = [];
          for (var i in o)
            if (o.hasOwnProperty(i))
              a.push(i);
          return a;
        };
      }
      function checkBufferLength(parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i = 0, l = buffers.length; i < l; i++) {
          var len = parser[buffers[i]].length;
          if (len > maxAllowed) {
            switch (buffers[i]) {
              case "textNode":
                closeText(parser);
                break;
              case "cdata":
                emitNode(parser, "oncdata", parser.cdata);
                parser.cdata = "";
                break;
              case "script":
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
                break;
              default:
                error(parser, "Max buffer length exceeded: " + buffers[i]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m + parser.position;
      }
      __name(checkBufferLength, "checkBufferLength");
      function clearBuffers(parser) {
        for (var i = 0, l = buffers.length; i < l; i++) {
          parser[buffers[i]] = "";
        }
      }
      __name(clearBuffers, "clearBuffers");
      function flushBuffers(parser) {
        closeText(parser);
        if (parser.cdata !== "") {
          emitNode(parser, "oncdata", parser.cdata);
          parser.cdata = "";
        }
        if (parser.script !== "") {
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
      }
      __name(flushBuffers, "flushBuffers");
      SAXParser.prototype = {
        end: function() {
          end(this);
        },
        write,
        resume: function() {
          this.error = null;
          return this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          flushBuffers(this);
        }
      };
      var Stream;
      try {
        Stream = __require("stream").Stream;
      } catch (ex) {
        Stream = /* @__PURE__ */ __name(function() {
        }, "Stream");
      }
      var streamWraps = sax.EVENTS.filter(function(ev) {
        return ev !== "error" && ev !== "end";
      });
      function createStream(strict, opt) {
        return new SAXStream(strict, opt);
      }
      __name(createStream, "createStream");
      function SAXStream(strict, opt) {
        if (!(this instanceof SAXStream)) {
          return new SAXStream(strict, opt);
        }
        Stream.apply(this);
        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;
        var me = this;
        this._parser.onend = function() {
          me.emit("end");
        };
        this._parser.onerror = function(er) {
          me.emit("error", er);
          me._parser.error = null;
        };
        this._decoder = null;
        streamWraps.forEach(function(ev) {
          Object.defineProperty(me, "on" + ev, {
            get: function() {
              return me._parser["on" + ev];
            },
            set: function(h) {
              if (!h) {
                me.removeAllListeners(ev);
                me._parser["on" + ev] = h;
                return h;
              }
              me.on(ev, h);
            },
            enumerable: true,
            configurable: false
          });
        });
      }
      __name(SAXStream, "SAXStream");
      SAXStream.prototype = Object.create(Stream.prototype, {
        constructor: {
          value: SAXStream
        }
      });
      SAXStream.prototype.write = function(data) {
        if (typeof Buffer === "function" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(data)) {
          if (!this._decoder) {
            var SD = __require("string_decoder").StringDecoder;
            this._decoder = new SD("utf8");
          }
          data = this._decoder.write(data);
        }
        this._parser.write(data.toString());
        this.emit("data", data);
        return true;
      };
      SAXStream.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
          this.write(chunk);
        }
        this._parser.end();
        return true;
      };
      SAXStream.prototype.on = function(ev, handler2) {
        var me = this;
        if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
          me._parser["on" + ev] = function() {
            var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me.emit.apply(me, args);
          };
        }
        return Stream.prototype.on.call(me, ev, handler2);
      };
      var CDATA = "[CDATA[";
      var DOCTYPE = "DOCTYPE";
      var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
      var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function isWhitespace(c) {
        return c === " " || c === "\n" || c === "\r" || c === "	";
      }
      __name(isWhitespace, "isWhitespace");
      function isQuote(c) {
        return c === '"' || c === "'";
      }
      __name(isQuote, "isQuote");
      function isAttribEnd(c) {
        return c === ">" || isWhitespace(c);
      }
      __name(isAttribEnd, "isAttribEnd");
      function isMatch(regex, c) {
        return regex.test(c);
      }
      __name(isMatch, "isMatch");
      function notMatch(regex, c) {
        return !isMatch(regex, c);
      }
      __name(notMatch, "notMatch");
      var S = 0;
      sax.STATE = {
        BEGIN: S++,
        BEGIN_WHITESPACE: S++,
        TEXT: S++,
        TEXT_ENTITY: S++,
        OPEN_WAKA: S++,
        SGML_DECL: S++,
        SGML_DECL_QUOTED: S++,
        DOCTYPE: S++,
        DOCTYPE_QUOTED: S++,
        DOCTYPE_DTD: S++,
        DOCTYPE_DTD_QUOTED: S++,
        COMMENT_STARTING: S++,
        COMMENT: S++,
        COMMENT_ENDING: S++,
        COMMENT_ENDED: S++,
        CDATA: S++,
        CDATA_ENDING: S++,
        CDATA_ENDING_2: S++,
        PROC_INST: S++,
        PROC_INST_BODY: S++,
        PROC_INST_ENDING: S++,
        OPEN_TAG: S++,
        OPEN_TAG_SLASH: S++,
        ATTRIB: S++,
        ATTRIB_NAME: S++,
        ATTRIB_NAME_SAW_WHITE: S++,
        ATTRIB_VALUE: S++,
        ATTRIB_VALUE_QUOTED: S++,
        ATTRIB_VALUE_CLOSED: S++,
        ATTRIB_VALUE_UNQUOTED: S++,
        ATTRIB_VALUE_ENTITY_Q: S++,
        ATTRIB_VALUE_ENTITY_U: S++,
        CLOSE_TAG: S++,
        CLOSE_TAG_SAW_WHITE: S++,
        SCRIPT: S++,
        SCRIPT_ENDING: S++
      };
      sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
      };
      sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
      };
      Object.keys(sax.ENTITIES).forEach(function(key) {
        var e = sax.ENTITIES[key];
        var s2 = typeof e === "number" ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s2;
      });
      for (var s in sax.STATE) {
        sax.STATE[sax.STATE[s]] = s;
      }
      S = sax.STATE;
      function emit(parser, event, data) {
        parser[event] && parser[event](data);
      }
      __name(emit, "emit");
      function emitNode(parser, nodeType, data) {
        if (parser.textNode)
          closeText(parser);
        emit(parser, nodeType, data);
      }
      __name(emitNode, "emitNode");
      function closeText(parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode)
          emit(parser, "ontext", parser.textNode);
        parser.textNode = "";
      }
      __name(closeText, "closeText");
      function textopts(opt, text) {
        if (opt.trim)
          text = text.trim();
        if (opt.normalize)
          text = text.replace(/\s+/g, " ");
        return text;
      }
      __name(textopts, "textopts");
      function error(parser, er) {
        closeText(parser);
        if (parser.trackPosition) {
          er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
        }
        er = new Error(er);
        parser.error = er;
        emit(parser, "onerror", er);
        return parser;
      }
      __name(error, "error");
      function end(parser) {
        if (parser.sawRoot && !parser.closedRoot)
          strictFail(parser, "Unclosed root tag");
        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
          error(parser, "Unexpected end");
        }
        closeText(parser);
        parser.c = "";
        parser.closed = true;
        emit(parser, "onend");
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser;
      }
      __name(end, "end");
      function strictFail(parser, message) {
        if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
          throw new Error("bad call to strictFail");
        }
        if (parser.strict) {
          error(parser, message);
        }
      }
      __name(strictFail, "strictFail");
      function newTag(parser) {
        if (!parser.strict)
          parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = { name: parser.tagName, attributes: {} };
        if (parser.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser.attribList.length = 0;
        emitNode(parser, "onopentagstart", tag);
      }
      __name(newTag, "newTag");
      function qname(name, attribute) {
        var i = name.indexOf(":");
        var qualName = i < 0 ? ["", name] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        if (attribute && name === "xmlns") {
          prefix = "xmlns";
          local = "";
        }
        return { prefix, local };
      }
      __name(qname, "qname");
      function attrib(parser) {
        if (!parser.strict) {
          parser.attribName = parser.attribName[parser.looseCase]();
        }
        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
          parser.attribName = parser.attribValue = "";
          return;
        }
        if (parser.opt.xmlns) {
          var qn = qname(parser.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;
          if (prefix === "xmlns") {
            if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
              strictFail(
                parser,
                "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
              strictFail(
                parser,
                "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else {
              var tag = parser.tag;
              var parent = parser.tags[parser.tags.length - 1] || parser;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser.attribValue;
            }
          }
          parser.attribList.push([parser.attribName, parser.attribValue]);
        } else {
          parser.tag.attributes[parser.attribName] = parser.attribValue;
          emitNode(parser, "onattribute", {
            name: parser.attribName,
            value: parser.attribValue
          });
        }
        parser.attribName = parser.attribValue = "";
      }
      __name(attrib, "attrib");
      function openTag(parser, selfClosing) {
        if (parser.opt.xmlns) {
          var tag = parser.tag;
          var qn = qname(parser.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || "";
          if (tag.prefix && !tag.uri) {
            strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
            tag.uri = qn.prefix;
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              emitNode(parser, "onopennamespace", {
                prefix: p,
                uri: tag.ns[p]
              });
            });
          }
          for (var i = 0, l = parser.attribList.length; i < l; i++) {
            var nv = parser.attribList[i];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
            var a = {
              name,
              value,
              prefix,
              local,
              uri
            };
            if (prefix && prefix !== "xmlns" && !uri) {
              strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
              a.uri = prefix;
            }
            parser.tag.attributes[name] = a;
            emitNode(parser, "onattribute", a);
          }
          parser.attribList.length = 0;
        }
        parser.tag.isSelfClosing = !!selfClosing;
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, "onopentag", parser.tag);
        if (!selfClosing) {
          if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
            parser.state = S.SCRIPT;
          } else {
            parser.state = S.TEXT;
          }
          parser.tag = null;
          parser.tagName = "";
        }
        parser.attribName = parser.attribValue = "";
        parser.attribList.length = 0;
      }
      __name(openTag, "openTag");
      function closeTag(parser) {
        if (!parser.tagName) {
          strictFail(parser, "Weird empty close tag.");
          parser.textNode += "</>";
          parser.state = S.TEXT;
          return;
        }
        if (parser.script) {
          if (parser.tagName !== "script") {
            parser.script += "</" + parser.tagName + ">";
            parser.tagName = "";
            parser.state = S.SCRIPT;
            return;
          }
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
        var t = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) {
          tagName = tagName[parser.looseCase]();
        }
        var closeTo = tagName;
        while (t--) {
          var close = parser.tags[t];
          if (close.name !== closeTo) {
            strictFail(parser, "Unexpected close tag");
          } else {
            break;
          }
        }
        if (t < 0) {
          strictFail(parser, "Unmatched closing tag: " + parser.tagName);
          parser.textNode += "</" + parser.tagName + ">";
          parser.state = S.TEXT;
          return;
        }
        parser.tagName = tagName;
        var s2 = parser.tags.length;
        while (s2-- > t) {
          var tag = parser.tag = parser.tags.pop();
          parser.tagName = parser.tag.name;
          emitNode(parser, "onclosetag", parser.tagName);
          var x = {};
          for (var i in tag.ns) {
            x[i] = tag.ns[i];
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (parser.opt.xmlns && tag.ns !== parent.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              var n = tag.ns[p];
              emitNode(parser, "onclosenamespace", { prefix: p, uri: n });
            });
          }
        }
        if (t === 0)
          parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = "";
        parser.attribList.length = 0;
        parser.state = S.TEXT;
      }
      __name(closeTag, "closeTag");
      function parseEntity(parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser.ENTITIES[entity]) {
          return parser.ENTITIES[entity];
        }
        if (parser.ENTITIES[entityLC]) {
          return parser.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === "#") {
          if (entity.charAt(1) === "x") {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser, "Invalid character entity");
          return "&" + parser.entity + ";";
        }
        return String.fromCodePoint(num);
      }
      __name(parseEntity, "parseEntity");
      function beginWhiteSpace(parser, c) {
        if (c === "<") {
          parser.state = S.OPEN_WAKA;
          parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c)) {
          strictFail(parser, "Non-whitespace before first tag.");
          parser.textNode = c;
          parser.state = S.TEXT;
        }
      }
      __name(beginWhiteSpace, "beginWhiteSpace");
      function charAt(chunk, i) {
        var result = "";
        if (i < chunk.length) {
          result = chunk.charAt(i);
        }
        return result;
      }
      __name(charAt, "charAt");
      function write(chunk) {
        var parser = this;
        if (this.error) {
          throw this.error;
        }
        if (parser.closed) {
          return error(
            parser,
            "Cannot write after close. Assign an onready handler."
          );
        }
        if (chunk === null) {
          return end(parser);
        }
        if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        var i = 0;
        var c = "";
        while (true) {
          c = charAt(chunk, i++);
          parser.c = c;
          if (!c) {
            break;
          }
          if (parser.trackPosition) {
            parser.position++;
            if (c === "\n") {
              parser.line++;
              parser.column = 0;
            } else {
              parser.column++;
            }
          }
          switch (parser.state) {
            case S.BEGIN:
              parser.state = S.BEGIN_WHITESPACE;
              if (c === "\uFEFF") {
                continue;
              }
              beginWhiteSpace(parser, c);
              continue;
            case S.BEGIN_WHITESPACE:
              beginWhiteSpace(parser, c);
              continue;
            case S.TEXT:
              if (parser.sawRoot && !parser.closedRoot) {
                var starti = i - 1;
                while (c && c !== "<" && c !== "&") {
                  c = charAt(chunk, i++);
                  if (c && parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                }
                parser.textNode += chunk.substring(starti, i - 1);
              }
              if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else {
                if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                  strictFail(parser, "Text data outside of root node.");
                }
                if (c === "&") {
                  parser.state = S.TEXT_ENTITY;
                } else {
                  parser.textNode += c;
                }
              }
              continue;
            case S.SCRIPT:
              if (c === "<") {
                parser.state = S.SCRIPT_ENDING;
              } else {
                parser.script += c;
              }
              continue;
            case S.SCRIPT_ENDING:
              if (c === "/") {
                parser.state = S.CLOSE_TAG;
              } else {
                parser.script += "<" + c;
                parser.state = S.SCRIPT;
              }
              continue;
            case S.OPEN_WAKA:
              if (c === "!") {
                parser.state = S.SGML_DECL;
                parser.sgmlDecl = "";
              } else if (isWhitespace(c)) {
              } else if (isMatch(nameStart, c)) {
                parser.state = S.OPEN_TAG;
                parser.tagName = c;
              } else if (c === "/") {
                parser.state = S.CLOSE_TAG;
                parser.tagName = "";
              } else if (c === "?") {
                parser.state = S.PROC_INST;
                parser.procInstName = parser.procInstBody = "";
              } else {
                strictFail(parser, "Unencoded <");
                if (parser.startTagPosition + 1 < parser.position) {
                  var pad = parser.position - parser.startTagPosition;
                  c = new Array(pad).join(" ") + c;
                }
                parser.textNode += "<" + c;
                parser.state = S.TEXT;
              }
              continue;
            case S.SGML_DECL:
              if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                emitNode(parser, "onopencdata");
                parser.state = S.CDATA;
                parser.sgmlDecl = "";
                parser.cdata = "";
              } else if (parser.sgmlDecl + c === "--") {
                parser.state = S.COMMENT;
                parser.comment = "";
                parser.sgmlDecl = "";
              } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                parser.state = S.DOCTYPE;
                if (parser.doctype || parser.sawRoot) {
                  strictFail(
                    parser,
                    "Inappropriately located doctype declaration"
                  );
                }
                parser.doctype = "";
                parser.sgmlDecl = "";
              } else if (c === ">") {
                emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                parser.sgmlDecl = "";
                parser.state = S.TEXT;
              } else if (isQuote(c)) {
                parser.state = S.SGML_DECL_QUOTED;
                parser.sgmlDecl += c;
              } else {
                parser.sgmlDecl += c;
              }
              continue;
            case S.SGML_DECL_QUOTED:
              if (c === parser.q) {
                parser.state = S.SGML_DECL;
                parser.q = "";
              }
              parser.sgmlDecl += c;
              continue;
            case S.DOCTYPE:
              if (c === ">") {
                parser.state = S.TEXT;
                emitNode(parser, "ondoctype", parser.doctype);
                parser.doctype = true;
              } else {
                parser.doctype += c;
                if (c === "[") {
                  parser.state = S.DOCTYPE_DTD;
                } else if (isQuote(c)) {
                  parser.state = S.DOCTYPE_QUOTED;
                  parser.q = c;
                }
              }
              continue;
            case S.DOCTYPE_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.q = "";
                parser.state = S.DOCTYPE;
              }
              continue;
            case S.DOCTYPE_DTD:
              parser.doctype += c;
              if (c === "]") {
                parser.state = S.DOCTYPE;
              } else if (isQuote(c)) {
                parser.state = S.DOCTYPE_DTD_QUOTED;
                parser.q = c;
              }
              continue;
            case S.DOCTYPE_DTD_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.state = S.DOCTYPE_DTD;
                parser.q = "";
              }
              continue;
            case S.COMMENT:
              if (c === "-") {
                parser.state = S.COMMENT_ENDING;
              } else {
                parser.comment += c;
              }
              continue;
            case S.COMMENT_ENDING:
              if (c === "-") {
                parser.state = S.COMMENT_ENDED;
                parser.comment = textopts(parser.opt, parser.comment);
                if (parser.comment) {
                  emitNode(parser, "oncomment", parser.comment);
                }
                parser.comment = "";
              } else {
                parser.comment += "-" + c;
                parser.state = S.COMMENT;
              }
              continue;
            case S.COMMENT_ENDED:
              if (c !== ">") {
                strictFail(parser, "Malformed comment");
                parser.comment += "--" + c;
                parser.state = S.COMMENT;
              } else {
                parser.state = S.TEXT;
              }
              continue;
            case S.CDATA:
              if (c === "]") {
                parser.state = S.CDATA_ENDING;
              } else {
                parser.cdata += c;
              }
              continue;
            case S.CDATA_ENDING:
              if (c === "]") {
                parser.state = S.CDATA_ENDING_2;
              } else {
                parser.cdata += "]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.CDATA_ENDING_2:
              if (c === ">") {
                if (parser.cdata) {
                  emitNode(parser, "oncdata", parser.cdata);
                }
                emitNode(parser, "onclosecdata");
                parser.cdata = "";
                parser.state = S.TEXT;
              } else if (c === "]") {
                parser.cdata += "]";
              } else {
                parser.cdata += "]]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.PROC_INST:
              if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else if (isWhitespace(c)) {
                parser.state = S.PROC_INST_BODY;
              } else {
                parser.procInstName += c;
              }
              continue;
            case S.PROC_INST_BODY:
              if (!parser.procInstBody && isWhitespace(c)) {
                continue;
              } else if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else {
                parser.procInstBody += c;
              }
              continue;
            case S.PROC_INST_ENDING:
              if (c === ">") {
                emitNode(parser, "onprocessinginstruction", {
                  name: parser.procInstName,
                  body: parser.procInstBody
                });
                parser.procInstName = parser.procInstBody = "";
                parser.state = S.TEXT;
              } else {
                parser.procInstBody += "?" + c;
                parser.state = S.PROC_INST_BODY;
              }
              continue;
            case S.OPEN_TAG:
              if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else {
                newTag(parser);
                if (c === ">") {
                  openTag(parser);
                } else if (c === "/") {
                  parser.state = S.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c)) {
                    strictFail(parser, "Invalid character in tag name");
                  }
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.OPEN_TAG_SLASH:
              if (c === ">") {
                openTag(parser, true);
                closeTag(parser);
              } else {
                strictFail(parser, "Forward-slash in opening tag not followed by >");
                parser.state = S.ATTRIB;
              }
              continue;
            case S.ATTRIB:
              if (isWhitespace(c)) {
                continue;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (c === ">") {
                strictFail(parser, "Attribute without value");
                parser.attribValue = parser.attribName;
                attrib(parser);
                openTag(parser);
              } else if (isWhitespace(c)) {
                parser.state = S.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c)) {
                parser.attribName += c;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME_SAW_WHITE:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (isWhitespace(c)) {
                continue;
              } else {
                strictFail(parser, "Attribute without value");
                parser.tag.attributes[parser.attribName] = "";
                parser.attribValue = "";
                emitNode(parser, "onattribute", {
                  name: parser.attribName,
                  value: ""
                });
                parser.attribName = "";
                if (c === ">") {
                  openTag(parser);
                } else if (isMatch(nameStart, c)) {
                  parser.attribName = c;
                  parser.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser, "Invalid attribute name");
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.ATTRIB_VALUE:
              if (isWhitespace(c)) {
                continue;
              } else if (isQuote(c)) {
                parser.q = c;
                parser.state = S.ATTRIB_VALUE_QUOTED;
              } else {
                strictFail(parser, "Unquoted attribute value");
                parser.state = S.ATTRIB_VALUE_UNQUOTED;
                parser.attribValue = c;
              }
              continue;
            case S.ATTRIB_VALUE_QUOTED:
              if (c !== parser.q) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              parser.q = "";
              parser.state = S.ATTRIB_VALUE_CLOSED;
              continue;
            case S.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c)) {
                parser.state = S.ATTRIB;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                strictFail(parser, "No whitespace between attributes");
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c)) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              if (c === ">") {
                openTag(parser);
              } else {
                parser.state = S.ATTRIB;
              }
              continue;
            case S.CLOSE_TAG:
              if (!parser.tagName) {
                if (isWhitespace(c)) {
                  continue;
                } else if (notMatch(nameStart, c)) {
                  if (parser.script) {
                    parser.script += "</" + c;
                    parser.state = S.SCRIPT;
                  } else {
                    strictFail(parser, "Invalid tagname in closing tag.");
                  }
                } else {
                  parser.tagName = c;
                }
              } else if (c === ">") {
                closeTag(parser);
              } else if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else if (parser.script) {
                parser.script += "</" + parser.tagName;
                parser.tagName = "";
                parser.state = S.SCRIPT;
              } else {
                if (!isWhitespace(c)) {
                  strictFail(parser, "Invalid tagname in closing tag");
                }
                parser.state = S.CLOSE_TAG_SAW_WHITE;
              }
              continue;
            case S.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c)) {
                continue;
              }
              if (c === ">") {
                closeTag(parser);
              } else {
                strictFail(parser, "Invalid characters in closing tag");
              }
              continue;
            case S.TEXT_ENTITY:
            case S.ATTRIB_VALUE_ENTITY_Q:
            case S.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser.state) {
                case S.TEXT_ENTITY:
                  returnState = S.TEXT;
                  buffer = "textNode";
                  break;
                case S.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S.ATTRIB_VALUE_QUOTED;
                  buffer = "attribValue";
                  break;
                case S.ATTRIB_VALUE_ENTITY_U:
                  returnState = S.ATTRIB_VALUE_UNQUOTED;
                  buffer = "attribValue";
                  break;
              }
              if (c === ";") {
                parser[buffer] += parseEntity(parser);
                parser.entity = "";
                parser.state = returnState;
              } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                parser.entity += c;
              } else {
                strictFail(parser, "Invalid character in entity name");
                parser[buffer] += "&" + parser.entity + c;
                parser.entity = "";
                parser.state = returnState;
              }
              continue;
            default:
              throw new Error(parser, "Unknown state: " + parser.state);
          }
        }
        if (parser.position >= parser.bufferCheckPosition) {
          checkBufferLength(parser);
        }
        return parser;
      }
      __name(write, "write");
      if (!String.fromCodePoint) {
        (function() {
          var stringFromCharCode = String.fromCharCode;
          var floor = Math.floor;
          var fromCodePoint = /* @__PURE__ */ __name(function() {
            var MAX_SIZE = 16384;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return "";
            }
            var result = "";
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor(codePoint) !== codePoint) {
                throw RangeError("Invalid code point: " + codePoint);
              }
              if (codePoint <= 65535) {
                codeUnits.push(codePoint);
              } else {
                codePoint -= 65536;
                highSurrogate = (codePoint >> 10) + 55296;
                lowSurrogate = codePoint % 1024 + 56320;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                result += stringFromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result;
          }, "fromCodePoint");
          if (Object.defineProperty) {
            Object.defineProperty(String, "fromCodePoint", {
              value: fromCodePoint,
              configurable: true,
              writable: true
            });
          } else {
            String.fromCodePoint = fromCodePoint;
          }
        })();
      }
    })(typeof exports === "undefined" ? exports.sax = {} : exports);
  }
});

// ../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/bom.js
var require_bom = __commonJS({
  "../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/bom.js"(exports) {
    (function() {
      "use strict";
      exports.stripBOM = function(str) {
        if (str[0] === "\uFEFF") {
          return str.substring(1);
        } else {
          return str;
        }
      };
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/processors.js
var require_processors = __commonJS({
  "../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/processors.js"(exports) {
    (function() {
      "use strict";
      var prefixMatch;
      prefixMatch = new RegExp(/(?!xmlns)^.*:/);
      exports.normalize = function(str) {
        return str.toLowerCase();
      };
      exports.firstCharLowerCase = function(str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
      };
      exports.stripPrefix = function(str) {
        return str.replace(prefixMatch, "");
      };
      exports.parseNumbers = function(str) {
        if (!isNaN(str)) {
          str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
        }
        return str;
      };
      exports.parseBooleans = function(str) {
        if (/^(?:true|false)$/i.test(str)) {
          str = str.toLowerCase() === "true";
        }
        return str;
      };
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/parser.js
var require_parser2 = __commonJS({
  "../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/parser.js"(exports) {
    (function() {
      "use strict";
      var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate2, bind = /* @__PURE__ */ __name(function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      }, "bind"), extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      sax = require_sax();
      events = __require("events");
      bom = require_bom();
      processors = require_processors();
      setImmediate2 = __require("timers").setImmediate;
      defaults = require_defaults().defaults;
      isEmpty = /* @__PURE__ */ __name(function(thing) {
        return typeof thing === "object" && thing != null && Object.keys(thing).length === 0;
      }, "isEmpty");
      processItem = /* @__PURE__ */ __name(function(processors2, item, key) {
        var i, len, process2;
        for (i = 0, len = processors2.length; i < len; i++) {
          process2 = processors2[i];
          item = process2(item, key);
        }
        return item;
      }, "processItem");
      exports.Parser = function(superClass) {
        extend(Parser, superClass);
        function Parser(opts) {
          this.parseString = bind(this.parseString, this);
          this.reset = bind(this.reset, this);
          this.assignOrPush = bind(this.assignOrPush, this);
          this.processAsync = bind(this.processAsync, this);
          var key, ref, value;
          if (!(this instanceof exports.Parser)) {
            return new exports.Parser(opts);
          }
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key))
              continue;
            value = opts[key];
            this.options[key] = value;
          }
          if (this.options.xmlns) {
            this.options.xmlnskey = this.options.attrkey + "ns";
          }
          if (this.options.normalizeTags) {
            if (!this.options.tagNameProcessors) {
              this.options.tagNameProcessors = [];
            }
            this.options.tagNameProcessors.unshift(processors.normalize);
          }
          this.reset();
        }
        __name(Parser, "Parser");
        Parser.prototype.processAsync = function() {
          var chunk, err;
          try {
            if (this.remaining.length <= this.options.chunkSize) {
              chunk = this.remaining;
              this.remaining = "";
              this.saxParser = this.saxParser.write(chunk);
              return this.saxParser.close();
            } else {
              chunk = this.remaining.substr(0, this.options.chunkSize);
              this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
              this.saxParser = this.saxParser.write(chunk);
              return setImmediate2(this.processAsync);
            }
          } catch (error1) {
            err = error1;
            if (!this.saxParser.errThrown) {
              this.saxParser.errThrown = true;
              return this.emit(err);
            }
          }
        };
        Parser.prototype.assignOrPush = function(obj, key, newValue) {
          if (!(key in obj)) {
            if (!this.options.explicitArray) {
              return obj[key] = newValue;
            } else {
              return obj[key] = [newValue];
            }
          } else {
            if (!(obj[key] instanceof Array)) {
              obj[key] = [obj[key]];
            }
            return obj[key].push(newValue);
          }
        };
        Parser.prototype.reset = function() {
          var attrkey, charkey, ontext, stack;
          this.removeAllListeners();
          this.saxParser = sax.parser(this.options.strict, {
            trim: false,
            normalize: false,
            xmlns: this.options.xmlns
          });
          this.saxParser.errThrown = false;
          this.saxParser.onerror = function(_this) {
            return function(error) {
              _this.saxParser.resume();
              if (!_this.saxParser.errThrown) {
                _this.saxParser.errThrown = true;
                return _this.emit("error", error);
              }
            };
          }(this);
          this.saxParser.onend = function(_this) {
            return function() {
              if (!_this.saxParser.ended) {
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          this.saxParser.ended = false;
          this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
          this.resultObject = null;
          stack = [];
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          this.saxParser.onopentag = function(_this) {
            return function(node) {
              var key, newValue, obj, processedKey, ref;
              obj = {};
              obj[charkey] = "";
              if (!_this.options.ignoreAttrs) {
                ref = node.attributes;
                for (key in ref) {
                  if (!hasProp.call(ref, key))
                    continue;
                  if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                    obj[attrkey] = {};
                  }
                  newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
                  processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
                  if (_this.options.mergeAttrs) {
                    _this.assignOrPush(obj, processedKey, newValue);
                  } else {
                    obj[attrkey][processedKey] = newValue;
                  }
                }
              }
              obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
              if (_this.options.xmlns) {
                obj[_this.options.xmlnskey] = {
                  uri: node.uri,
                  local: node.local
                };
              }
              return stack.push(obj);
            };
          }(this);
          this.saxParser.onclosetag = function(_this) {
            return function() {
              var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
              obj = stack.pop();
              nodeName = obj["#name"];
              if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
                delete obj["#name"];
              }
              if (obj.cdata === true) {
                cdata = obj.cdata;
                delete obj.cdata;
              }
              s = stack[stack.length - 1];
              if (obj[charkey].match(/^\s*$/) && !cdata) {
                emptyStr = obj[charkey];
                delete obj[charkey];
              } else {
                if (_this.options.trim) {
                  obj[charkey] = obj[charkey].trim();
                }
                if (_this.options.normalize) {
                  obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                }
                obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
                if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                  obj = obj[charkey];
                }
              }
              if (isEmpty(obj)) {
                obj = _this.options.emptyTag !== "" ? _this.options.emptyTag : emptyStr;
              }
              if (_this.options.validator != null) {
                xpath = "/" + function() {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = stack.length; i < len; i++) {
                    node = stack[i];
                    results.push(node["#name"]);
                  }
                  return results;
                }().concat(nodeName).join("/");
                (function() {
                  var err;
                  try {
                    return obj = _this.options.validator(xpath, s && s[nodeName], obj);
                  } catch (error1) {
                    err = error1;
                    return _this.emit("error", err);
                  }
                })();
              }
              if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === "object") {
                if (!_this.options.preserveChildrenOrder) {
                  node = {};
                  if (_this.options.attrkey in obj) {
                    node[_this.options.attrkey] = obj[_this.options.attrkey];
                    delete obj[_this.options.attrkey];
                  }
                  if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                    node[_this.options.charkey] = obj[_this.options.charkey];
                    delete obj[_this.options.charkey];
                  }
                  if (Object.getOwnPropertyNames(obj).length > 0) {
                    node[_this.options.childkey] = obj;
                  }
                  obj = node;
                } else if (s) {
                  s[_this.options.childkey] = s[_this.options.childkey] || [];
                  objClone = {};
                  for (key in obj) {
                    if (!hasProp.call(obj, key))
                      continue;
                    objClone[key] = obj[key];
                  }
                  s[_this.options.childkey].push(objClone);
                  delete obj["#name"];
                  if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                    obj = obj[charkey];
                  }
                }
              }
              if (stack.length > 0) {
                return _this.assignOrPush(s, nodeName, obj);
              } else {
                if (_this.options.explicitRoot) {
                  old = obj;
                  obj = {};
                  obj[nodeName] = old;
                }
                _this.resultObject = obj;
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          ontext = function(_this) {
            return function(text) {
              var charChild, s;
              s = stack[stack.length - 1];
              if (s) {
                s[charkey] += text;
                if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, "").trim() !== "")) {
                  s[_this.options.childkey] = s[_this.options.childkey] || [];
                  charChild = {
                    "#name": "__text__"
                  };
                  charChild[charkey] = text;
                  if (_this.options.normalize) {
                    charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
                  }
                  s[_this.options.childkey].push(charChild);
                }
                return s;
              }
            };
          }(this);
          this.saxParser.ontext = ontext;
          return this.saxParser.oncdata = function(_this) {
            return function(text) {
              var s;
              s = ontext(text);
              if (s) {
                return s.cdata = true;
              }
            };
          }(this);
        };
        Parser.prototype.parseString = function(str, cb) {
          var err;
          if (cb != null && typeof cb === "function") {
            this.on("end", function(result) {
              this.reset();
              return cb(null, result);
            });
            this.on("error", function(err2) {
              this.reset();
              return cb(err2);
            });
          }
          try {
            str = str.toString();
            if (str.trim() === "") {
              this.emit("end", null);
              return true;
            }
            str = bom.stripBOM(str);
            if (this.options.async) {
              this.remaining = str;
              setImmediate2(this.processAsync);
              return this.saxParser;
            }
            return this.saxParser.write(str).close();
          } catch (error1) {
            err = error1;
            if (!(this.saxParser.errThrown || this.saxParser.ended)) {
              this.emit("error", err);
              return this.saxParser.errThrown = true;
            } else if (this.saxParser.ended) {
              throw err;
            }
          }
        };
        return Parser;
      }(events.EventEmitter);
      exports.parseString = function(str, a, b) {
        var cb, options, parser;
        if (b != null) {
          if (typeof b === "function") {
            cb = b;
          }
          if (typeof a === "object") {
            options = a;
          }
        } else {
          if (typeof a === "function") {
            cb = a;
          }
          options = {};
        }
        parser = new exports.Parser(options);
        return parser.parseString(str, cb);
      };
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/xml2js.js
var require_xml2js = __commonJS({
  "../../node_modules/.pnpm/xml2js@0.4.19/node_modules/xml2js/lib/xml2js.js"(exports) {
    (function() {
      "use strict";
      var builder, defaults, parser, processors, extend = /* @__PURE__ */ __name(function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        __name(ctor, "ctor");
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, "extend"), hasProp = {}.hasOwnProperty;
      defaults = require_defaults();
      builder = require_builder3();
      parser = require_parser2();
      processors = require_processors();
      exports.defaults = defaults.defaults;
      exports.processors = processors;
      exports.ValidationError = function(superClass) {
        extend(ValidationError, superClass);
        function ValidationError(message) {
          this.message = message;
        }
        __name(ValidationError, "ValidationError");
        return ValidationError;
      }(Error);
      exports.Builder = builder.Builder;
      exports.Parser = parser.Parser;
      exports.parseString = parser.parseString;
    }).call(exports);
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/node_parser.js
var require_node_parser = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/xml/node_parser.js"(exports, module) {
    var AWS2 = require_core();
    var util = AWS2.util;
    var Shape = AWS2.Model.Shape;
    var xml2js = require_xml2js();
    var options = {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      explicitRoot: false,
      emptyTag: null,
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      validator: null
    };
    function NodeXmlParser() {
    }
    __name(NodeXmlParser, "NodeXmlParser");
    NodeXmlParser.prototype.parse = function(xml, shape) {
      shape = shape || {};
      var result = null;
      var error = null;
      var parser = new xml2js.Parser(options);
      parser.parseString(xml, function(e, r) {
        error = e;
        result = r;
      });
      if (result) {
        var data = parseXml(result, shape);
        if (result.ResponseMetadata) {
          data.ResponseMetadata = parseXml(result.ResponseMetadata[0], {});
        }
        return data;
      } else if (error) {
        throw util.error(error, { code: "XMLParserError", retryable: true });
      } else {
        return parseXml({}, shape);
      }
    };
    function parseXml(xml, shape) {
      switch (shape.type) {
        case "structure":
          return parseStructure(xml, shape);
        case "map":
          return parseMap(xml, shape);
        case "list":
          return parseList(xml, shape);
        case void 0:
        case null:
          return parseUnknown(xml);
        default:
          return parseScalar(xml, shape);
      }
    }
    __name(parseXml, "parseXml");
    function parseStructure(xml, shape) {
      var data = {};
      if (xml === null)
        return data;
      util.each(shape.members, function(memberName, memberShape) {
        var xmlName = memberShape.name;
        if (Object.prototype.hasOwnProperty.call(xml, xmlName) && Array.isArray(xml[xmlName])) {
          var xmlChild = xml[xmlName];
          if (!memberShape.flattened)
            xmlChild = xmlChild[0];
          data[memberName] = parseXml(xmlChild, memberShape);
        } else if (memberShape.isXmlAttribute && xml.$ && Object.prototype.hasOwnProperty.call(xml.$, xmlName)) {
          data[memberName] = parseScalar(xml.$[xmlName], memberShape);
        } else if (memberShape.type === "list" && !shape.api.xmlNoDefaultLists) {
          data[memberName] = memberShape.defaultValue;
        }
      });
      return data;
    }
    __name(parseStructure, "parseStructure");
    function parseMap(xml, shape) {
      var data = {};
      if (xml === null)
        return data;
      var xmlKey = shape.key.name || "key";
      var xmlValue = shape.value.name || "value";
      var iterable = shape.flattened ? xml : xml.entry;
      if (Array.isArray(iterable)) {
        util.arrayEach(iterable, function(child) {
          data[child[xmlKey][0]] = parseXml(child[xmlValue][0], shape.value);
        });
      }
      return data;
    }
    __name(parseMap, "parseMap");
    function parseList(xml, shape) {
      var data = [];
      var name = shape.member.name || "member";
      if (shape.flattened) {
        util.arrayEach(xml, function(xmlChild) {
          data.push(parseXml(xmlChild, shape.member));
        });
      } else if (xml && Array.isArray(xml[name])) {
        util.arrayEach(xml[name], function(child) {
          data.push(parseXml(child, shape.member));
        });
      }
      return data;
    }
    __name(parseList, "parseList");
    function parseScalar(text, shape) {
      if (text && text.$ && text.$.encoding === "base64") {
        shape = new Shape.create({ type: text.$.encoding });
      }
      if (text && text._)
        text = text._;
      if (typeof shape.toType === "function") {
        return shape.toType(text);
      } else {
        return text;
      }
    }
    __name(parseScalar, "parseScalar");
    function parseUnknown(xml) {
      if (xml === void 0 || xml === null)
        return "";
      if (typeof xml === "string")
        return xml;
      if (Array.isArray(xml)) {
        var arr = [];
        for (i = 0; i < xml.length; i++) {
          arr.push(parseXml(xml[i], {}));
        }
        return arr;
      }
      var keys = Object.keys(xml), i;
      if (keys.length === 0 || keys.length === 1 && keys[0] === "$") {
        return {};
      }
      var data = {};
      for (i = 0; i < keys.length; i++) {
        var key = keys[i], value = xml[key];
        if (key === "$")
          continue;
        if (value.length > 1) {
          data[key] = parseList(value, { member: {} });
        } else {
          data[key] = parseXml(value[0], {});
        }
      }
      return data;
    }
    __name(parseUnknown, "parseUnknown");
    module.exports = NodeXmlParser;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/http/node.js
var require_node = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/http/node.js"() {
    var AWS2 = require_core();
    var Stream = AWS2.util.stream.Stream;
    var TransformStream = AWS2.util.stream.Transform;
    var ReadableStream = AWS2.util.stream.Readable;
    require_http4();
    var CONNECTION_REUSE_ENV_NAME = "AWS_NODEJS_CONNECTION_REUSE_ENABLED";
    AWS2.NodeHttpClient = AWS2.util.inherit({
      handleRequest: /* @__PURE__ */ __name(function handleRequest(httpRequest2, httpOptions, callback, errCallback) {
        var self = this;
        var endpoint = httpRequest2.endpoint;
        var pathPrefix = "";
        if (!httpOptions)
          httpOptions = {};
        if (httpOptions.proxy) {
          pathPrefix = endpoint.protocol + "//" + endpoint.hostname;
          if (endpoint.port !== 80 && endpoint.port !== 443) {
            pathPrefix += ":" + endpoint.port;
          }
          endpoint = new AWS2.Endpoint(httpOptions.proxy);
        }
        var useSSL = endpoint.protocol === "https:";
        var http = useSSL ? __require("https") : __require("http");
        var options = {
          host: endpoint.hostname,
          port: endpoint.port,
          method: httpRequest2.method,
          headers: httpRequest2.headers,
          path: pathPrefix + httpRequest2.path
        };
        if (!httpOptions.agent) {
          options.agent = this.getAgent(useSSL, {
            keepAlive: process.env[CONNECTION_REUSE_ENV_NAME] === "1" ? true : false
          });
        }
        AWS2.util.update(options, httpOptions);
        delete options.proxy;
        delete options.timeout;
        var stream = http.request(options, function(httpResp) {
          if (stream.didCallback)
            return;
          callback(httpResp);
          httpResp.emit(
            "headers",
            httpResp.statusCode,
            httpResp.headers,
            httpResp.statusMessage
          );
        });
        httpRequest2.stream = stream;
        stream.didCallback = false;
        if (httpOptions.connectTimeout) {
          var connectTimeoutId;
          stream.on("socket", function(socket) {
            if (socket.connecting) {
              connectTimeoutId = setTimeout(/* @__PURE__ */ __name(function connectTimeout() {
                if (stream.didCallback)
                  return;
                stream.didCallback = true;
                stream.abort();
                errCallback(AWS2.util.error(
                  new Error("Socket timed out without establishing a connection"),
                  { code: "TimeoutError" }
                ));
              }, "connectTimeout"), httpOptions.connectTimeout);
              socket.on("connect", function() {
                clearTimeout(connectTimeoutId);
                connectTimeoutId = null;
              });
            }
          });
        }
        stream.setTimeout(httpOptions.timeout || 0, function() {
          if (stream.didCallback)
            return;
          stream.didCallback = true;
          var msg = "Connection timed out after " + httpOptions.timeout + "ms";
          errCallback(AWS2.util.error(new Error(msg), { code: "TimeoutError" }));
          stream.abort();
        });
        stream.on("error", function(err) {
          if (connectTimeoutId) {
            clearTimeout(connectTimeoutId);
            connectTimeoutId = null;
          }
          if (stream.didCallback)
            return;
          stream.didCallback = true;
          if ("ECONNRESET" === err.code || "EPIPE" === err.code || "ETIMEDOUT" === err.code) {
            errCallback(AWS2.util.error(err, { code: "TimeoutError" }));
          } else {
            errCallback(err);
          }
        });
        var expect = httpRequest2.headers.Expect || httpRequest2.headers.expect;
        if (expect === "100-continue") {
          stream.once("continue", function() {
            self.writeBody(stream, httpRequest2);
          });
        } else {
          this.writeBody(stream, httpRequest2);
        }
        return stream;
      }, "handleRequest"),
      writeBody: /* @__PURE__ */ __name(function writeBody(stream, httpRequest2) {
        var body = httpRequest2.body;
        var totalBytes = parseInt(httpRequest2.headers["Content-Length"], 10);
        if (body instanceof Stream) {
          var progressStream = this.progressStream(stream, totalBytes);
          if (progressStream) {
            body.pipe(progressStream).pipe(stream);
          } else {
            body.pipe(stream);
          }
        } else if (body) {
          stream.once("finish", function() {
            stream.emit("sendProgress", {
              loaded: totalBytes,
              total: totalBytes
            });
          });
          stream.end(body);
        } else {
          stream.end();
        }
      }, "writeBody"),
      getAgent: /* @__PURE__ */ __name(function getAgent(useSSL, agentOptions) {
        var http = useSSL ? __require("https") : __require("http");
        if (useSSL) {
          if (!AWS2.NodeHttpClient.sslAgent) {
            AWS2.NodeHttpClient.sslAgent = new http.Agent(AWS2.util.merge({
              rejectUnauthorized: process.env.NODE_TLS_REJECT_UNAUTHORIZED === "0" ? false : true
            }, agentOptions || {}));
            AWS2.NodeHttpClient.sslAgent.setMaxListeners(0);
            Object.defineProperty(AWS2.NodeHttpClient.sslAgent, "maxSockets", {
              enumerable: true,
              get: function() {
                var defaultMaxSockets = 50;
                var globalAgent = http.globalAgent;
                if (globalAgent && globalAgent.maxSockets !== Infinity && typeof globalAgent.maxSockets === "number") {
                  return globalAgent.maxSockets;
                }
                return defaultMaxSockets;
              }
            });
          }
          return AWS2.NodeHttpClient.sslAgent;
        } else {
          if (!AWS2.NodeHttpClient.agent) {
            AWS2.NodeHttpClient.agent = new http.Agent(agentOptions);
          }
          return AWS2.NodeHttpClient.agent;
        }
      }, "getAgent"),
      progressStream: /* @__PURE__ */ __name(function progressStream(stream, totalBytes) {
        if (typeof TransformStream === "undefined") {
          return;
        }
        var loadedBytes = 0;
        var reporter = new TransformStream();
        reporter._transform = function(chunk, encoding, callback) {
          if (chunk) {
            loadedBytes += chunk.length;
            stream.emit("sendProgress", {
              loaded: loadedBytes,
              total: totalBytes
            });
          }
          callback(null, chunk);
        };
        return reporter;
      }, "progressStream"),
      emitter: null
    });
    AWS2.HttpClient.prototype = AWS2.NodeHttpClient.prototype;
    AWS2.HttpClient.streamsApiVersion = ReadableStream ? 2 : 1;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/token_file_web_identity_credentials.js
var require_token_file_web_identity_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/token_file_web_identity_credentials.js"() {
    var AWS2 = require_core();
    var fs = __require("fs");
    var STS = require_sts2();
    var iniLoader = AWS2.util.iniLoader;
    AWS2.TokenFileWebIdentityCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function TokenFileWebIdentityCredentials(clientConfig) {
        AWS2.Credentials.call(this);
        this.data = null;
        this.clientConfig = AWS2.util.copy(clientConfig || {});
      }, "TokenFileWebIdentityCredentials"),
      getParamsFromEnv: /* @__PURE__ */ __name(function getParamsFromEnv() {
        var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE", ENV_ROLE_ARN = "AWS_ROLE_ARN";
        if (process.env[ENV_TOKEN_FILE] && process.env[ENV_ROLE_ARN]) {
          return [{
            envTokenFile: process.env[ENV_TOKEN_FILE],
            roleArn: process.env[ENV_ROLE_ARN],
            roleSessionName: process.env["AWS_ROLE_SESSION_NAME"]
          }];
        }
      }, "getParamsFromEnv"),
      getParamsFromSharedConfig: /* @__PURE__ */ __name(function getParamsFromSharedConfig() {
        var profiles = AWS2.util.getProfilesFromSharedConfig(iniLoader);
        var profileName2 = process.env.AWS_PROFILE || AWS2.util.defaultProfile;
        var profile = profiles[profileName2] || {};
        if (Object.keys(profile).length === 0) {
          throw AWS2.util.error(
            new Error("Profile " + profileName2 + " not found"),
            { code: "TokenFileWebIdentityCredentialsProviderFailure" }
          );
        }
        var paramsArray = [];
        while (!profile["web_identity_token_file"] && profile["source_profile"]) {
          paramsArray.unshift({
            roleArn: profile["role_arn"],
            roleSessionName: profile["role_session_name"]
          });
          var sourceProfile = profile["source_profile"];
          profile = profiles[sourceProfile];
        }
        paramsArray.unshift({
          envTokenFile: profile["web_identity_token_file"],
          roleArn: profile["role_arn"],
          roleSessionName: profile["role_session_name"]
        });
        return paramsArray;
      }, "getParamsFromSharedConfig"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      assumeRoleChaining: /* @__PURE__ */ __name(function assumeRoleChaining(paramsArray, callback) {
        var self = this;
        if (paramsArray.length === 0) {
          self.service.credentialsFrom(self.data, self);
          callback();
        } else {
          var params = paramsArray.shift();
          self.service.config.credentials = self.service.credentialsFrom(self.data, self);
          self.service.assumeRole(
            {
              RoleArn: params.roleArn,
              RoleSessionName: params.roleSessionName || "token-file-web-identity"
            },
            function(err, data) {
              self.data = null;
              if (err) {
                callback(err);
              } else {
                self.data = data;
                self.assumeRoleChaining(paramsArray, callback);
              }
            }
          );
        }
      }, "assumeRoleChaining"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        try {
          var paramsArray = self.getParamsFromEnv();
          if (!paramsArray) {
            paramsArray = self.getParamsFromSharedConfig();
          }
          if (paramsArray) {
            var params = paramsArray.shift();
            var oidcToken = fs.readFileSync(params.envTokenFile, { encoding: "ascii" });
            if (!self.service) {
              self.createClients();
            }
            self.service.assumeRoleWithWebIdentity(
              {
                WebIdentityToken: oidcToken,
                RoleArn: params.roleArn,
                RoleSessionName: params.roleSessionName || "token-file-web-identity"
              },
              function(err, data) {
                self.data = null;
                if (err) {
                  callback(err);
                } else {
                  self.data = data;
                  self.assumeRoleChaining(paramsArray, callback);
                }
              }
            );
          }
        } catch (err) {
          callback(err);
        }
      }, "load"),
      createClients: function() {
        if (!this.service) {
          var stsConfig = AWS2.util.merge({}, this.clientConfig);
          this.service = new STS(stsConfig);
          this.service.retryableError = function(error) {
            if (error.code === "IDPCommunicationErrorException" || error.code === "InvalidIdentityToken") {
              return true;
            } else {
              return AWS2.Service.prototype.retryableError.call(this, error);
            }
          };
        }
      }
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint.js
var require_get_endpoint = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint.js"(exports, module) {
    var getEndpoint = /* @__PURE__ */ __name(function() {
      return {
        IPv4: "http://169.254.169.254",
        IPv6: "http://[fd00:ec2::254]"
      };
    }, "getEndpoint");
    module.exports = getEndpoint;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint_mode.js
var require_get_endpoint_mode = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint_mode.js"(exports, module) {
    var getEndpointMode = /* @__PURE__ */ __name(function() {
      return {
        IPv4: "IPv4",
        IPv6: "IPv6"
      };
    }, "getEndpointMode");
    module.exports = getEndpointMode;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint_config_options.js
var require_get_endpoint_config_options = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint_config_options.js"(exports, module) {
    var ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    var CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    var getEndpointConfigOptions = /* @__PURE__ */ __name(function() {
      return {
        environmentVariableSelector: function(env) {
          return env[ENV_ENDPOINT_NAME];
        },
        configFileSelector: function(profile) {
          return profile[CONFIG_ENDPOINT_NAME];
        },
        default: void 0
      };
    }, "getEndpointConfigOptions");
    module.exports = getEndpointConfigOptions;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint_mode_config_options.js
var require_get_endpoint_mode_config_options = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_endpoint_mode_config_options.js"(exports, module) {
    var EndpointMode = require_get_endpoint_mode()();
    var ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    var CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    var getEndpointModeConfigOptions = /* @__PURE__ */ __name(function() {
      return {
        environmentVariableSelector: function(env) {
          return env[ENV_ENDPOINT_MODE_NAME];
        },
        configFileSelector: function(profile) {
          return profile[CONFIG_ENDPOINT_MODE_NAME];
        },
        default: EndpointMode.IPv4
      };
    }, "getEndpointModeConfigOptions");
    module.exports = getEndpointModeConfigOptions;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_metadata_service_endpoint.js
var require_get_metadata_service_endpoint = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service/get_metadata_service_endpoint.js"(exports, module) {
    var AWS2 = require_core();
    var Endpoint = require_get_endpoint()();
    var EndpointMode = require_get_endpoint_mode()();
    var ENDPOINT_CONFIG_OPTIONS = require_get_endpoint_config_options()();
    var ENDPOINT_MODE_CONFIG_OPTIONS = require_get_endpoint_mode_config_options()();
    var getMetadataServiceEndpoint = /* @__PURE__ */ __name(function() {
      var endpoint = AWS2.util.loadConfig(ENDPOINT_CONFIG_OPTIONS);
      if (endpoint !== void 0)
        return endpoint;
      var endpointMode = AWS2.util.loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS);
      switch (endpointMode) {
        case EndpointMode.IPv4:
          return Endpoint.IPv4;
        case EndpointMode.IPv6:
          return Endpoint.IPv6;
        default:
          throw new Error("Unsupported endpoint mode: " + endpointMode);
      }
    }, "getMetadataServiceEndpoint");
    module.exports = getMetadataServiceEndpoint;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service.js
var require_metadata_service = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/metadata_service.js"(exports, module) {
    var AWS2 = require_core();
    require_http4();
    var inherit = AWS2.util.inherit;
    var getMetadataServiceEndpoint = require_get_metadata_service_endpoint();
    var URL3 = __require("url").URL;
    AWS2.MetadataService = inherit({
      endpoint: getMetadataServiceEndpoint(),
      httpOptions: { timeout: 0 },
      disableFetchToken: false,
      constructor: /* @__PURE__ */ __name(function MetadataService(options) {
        if (options && options.host) {
          options.endpoint = "http://" + options.host;
          delete options.host;
        }
        AWS2.util.update(this, options);
      }, "MetadataService"),
      request: /* @__PURE__ */ __name(function request(path, options, callback) {
        if (arguments.length === 2) {
          callback = options;
          options = {};
        }
        if (process.env[AWS2.util.imdsDisabledEnv]) {
          callback(new Error("EC2 Instance Metadata Service access disabled"));
          return;
        }
        path = path || "/";
        if (URL3) {
          new URL3(this.endpoint);
        }
        var httpRequest2 = new AWS2.HttpRequest(this.endpoint + path);
        httpRequest2.method = options.method || "GET";
        if (options.headers) {
          httpRequest2.headers = options.headers;
        }
        AWS2.util.handleRequestWithRetries(httpRequest2, this, callback);
      }, "request"),
      loadCredentialsCallbacks: [],
      fetchMetadataToken: /* @__PURE__ */ __name(function fetchMetadataToken(callback) {
        var self = this;
        var tokenFetchPath = "/latest/api/token";
        self.request(
          tokenFetchPath,
          {
            "method": "PUT",
            "headers": {
              "x-aws-ec2-metadata-token-ttl-seconds": "21600"
            }
          },
          callback
        );
      }, "fetchMetadataToken"),
      fetchCredentials: /* @__PURE__ */ __name(function fetchCredentials(options, cb) {
        var self = this;
        var basePath = "/latest/meta-data/iam/security-credentials/";
        self.request(basePath, options, function(err, roleName) {
          if (err) {
            self.disableFetchToken = !(err.statusCode === 401);
            cb(AWS2.util.error(
              err,
              {
                message: "EC2 Metadata roleName request returned error"
              }
            ));
            return;
          }
          roleName = roleName.split("\n")[0];
          self.request(basePath + roleName, options, function(credErr, credData) {
            if (credErr) {
              self.disableFetchToken = !(credErr.statusCode === 401);
              cb(AWS2.util.error(
                credErr,
                {
                  message: "EC2 Metadata creds request returned error"
                }
              ));
              return;
            }
            try {
              var credentials = JSON.parse(credData);
              cb(null, credentials);
            } catch (parseError) {
              cb(parseError);
            }
          });
        });
      }, "fetchCredentials"),
      loadCredentials: /* @__PURE__ */ __name(function loadCredentials(callback) {
        var self = this;
        self.loadCredentialsCallbacks.push(callback);
        if (self.loadCredentialsCallbacks.length > 1) {
          return;
        }
        function callbacks(err, creds) {
          var cb;
          while ((cb = self.loadCredentialsCallbacks.shift()) !== void 0) {
            cb(err, creds);
          }
        }
        __name(callbacks, "callbacks");
        if (self.disableFetchToken) {
          self.fetchCredentials({}, callbacks);
        } else {
          self.fetchMetadataToken(function(tokenError, token) {
            if (tokenError) {
              if (tokenError.code === "TimeoutError") {
                self.disableFetchToken = true;
              } else if (tokenError.retryable === true) {
                callbacks(AWS2.util.error(
                  tokenError,
                  {
                    message: "EC2 Metadata token request returned error"
                  }
                ));
                return;
              } else if (tokenError.statusCode === 400) {
                callbacks(AWS2.util.error(
                  tokenError,
                  {
                    message: "EC2 Metadata token request returned 400"
                  }
                ));
                return;
              }
            }
            var options = {};
            if (token) {
              options.headers = {
                "x-aws-ec2-metadata-token": token
              };
            }
            self.fetchCredentials(options, callbacks);
          });
        }
      }, "loadCredentials")
    });
    module.exports = AWS2.MetadataService;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/ec2_metadata_credentials.js
var require_ec2_metadata_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/ec2_metadata_credentials.js"() {
    var AWS2 = require_core();
    require_metadata_service();
    AWS2.EC2MetadataCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function EC2MetadataCredentials(options) {
        AWS2.Credentials.call(this);
        options = options ? AWS2.util.copy(options) : {};
        options = AWS2.util.merge(
          { maxRetries: this.defaultMaxRetries },
          options
        );
        if (!options.httpOptions)
          options.httpOptions = {};
        options.httpOptions = AWS2.util.merge(
          {
            timeout: this.defaultTimeout,
            connectTimeout: this.defaultConnectTimeout
          },
          options.httpOptions
        );
        this.metadataService = new AWS2.MetadataService(options);
        this.logger = options.logger || AWS2.config && AWS2.config.logger;
      }, "EC2MetadataCredentials"),
      defaultTimeout: 1e3,
      defaultConnectTimeout: 1e3,
      defaultMaxRetries: 3,
      originalExpiration: void 0,
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        self.metadataService.loadCredentials(function(err, creds) {
          if (err) {
            if (self.hasLoadedCredentials()) {
              self.extendExpirationIfExpired();
              callback();
            } else {
              callback(err);
            }
          } else {
            self.setCredentials(creds);
            self.extendExpirationIfExpired();
            callback();
          }
        });
      }, "load"),
      hasLoadedCredentials: /* @__PURE__ */ __name(function hasLoadedCredentials() {
        return this.AccessKeyId && this.secretAccessKey;
      }, "hasLoadedCredentials"),
      extendExpirationIfExpired: /* @__PURE__ */ __name(function extendExpirationIfExpired() {
        if (this.needsRefresh()) {
          this.originalExpiration = this.originalExpiration || this.expireTime;
          this.expired = false;
          var nextTimeout = 15 * 60 + Math.floor(Math.random() * 5 * 60);
          var currentTime = AWS2.util.date.getDate().getTime();
          this.expireTime = new Date(currentTime + nextTimeout * 1e3);
          this.logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted again at " + this.expireTime + "\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html");
        }
      }, "extendExpirationIfExpired"),
      setCredentials: /* @__PURE__ */ __name(function setCredentials(creds) {
        var currentTime = AWS2.util.date.getDate().getTime();
        var expireTime = new Date(creds.Expiration);
        this.expired = currentTime >= expireTime ? true : false;
        this.metadata = creds;
        this.accessKeyId = creds.AccessKeyId;
        this.secretAccessKey = creds.SecretAccessKey;
        this.sessionToken = creds.Token;
        this.expireTime = expireTime;
      }, "setCredentials")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/remote_credentials.js
var require_remote_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/remote_credentials.js"() {
    var AWS2 = require_core();
    var ENV_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var ENV_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var ENV_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var FULL_URI_UNRESTRICTED_PROTOCOLS = ["https:"];
    var FULL_URI_ALLOWED_PROTOCOLS = ["http:", "https:"];
    var FULL_URI_ALLOWED_HOSTNAMES = ["localhost", "127.0.0.1"];
    var RELATIVE_URI_HOST = "169.254.170.2";
    AWS2.RemoteCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function RemoteCredentials(options) {
        AWS2.Credentials.call(this);
        options = options ? AWS2.util.copy(options) : {};
        if (!options.httpOptions)
          options.httpOptions = {};
        options.httpOptions = AWS2.util.merge(
          this.httpOptions,
          options.httpOptions
        );
        AWS2.util.update(this, options);
      }, "RemoteCredentials"),
      httpOptions: { timeout: 1e3 },
      maxRetries: 3,
      isConfiguredForEcsCredentials: /* @__PURE__ */ __name(function isConfiguredForEcsCredentials() {
        return Boolean(
          process && process.env && (process.env[ENV_RELATIVE_URI] || process.env[ENV_FULL_URI])
        );
      }, "isConfiguredForEcsCredentials"),
      getECSFullUri: /* @__PURE__ */ __name(function getECSFullUri() {
        if (process && process.env) {
          var relative = process.env[ENV_RELATIVE_URI], full = process.env[ENV_FULL_URI];
          if (relative) {
            return "http://" + RELATIVE_URI_HOST + relative;
          } else if (full) {
            var parsed = AWS2.util.urlParse(full);
            if (FULL_URI_ALLOWED_PROTOCOLS.indexOf(parsed.protocol) < 0) {
              throw AWS2.util.error(
                new Error("Unsupported protocol:  AWS.RemoteCredentials supports " + FULL_URI_ALLOWED_PROTOCOLS.join(",") + " only; " + parsed.protocol + " requested."),
                { code: "ECSCredentialsProviderFailure" }
              );
            }
            if (FULL_URI_UNRESTRICTED_PROTOCOLS.indexOf(parsed.protocol) < 0 && FULL_URI_ALLOWED_HOSTNAMES.indexOf(parsed.hostname) < 0) {
              throw AWS2.util.error(
                new Error("Unsupported hostname: AWS.RemoteCredentials only supports " + FULL_URI_ALLOWED_HOSTNAMES.join(",") + " for " + parsed.protocol + "; " + parsed.protocol + "//" + parsed.hostname + " requested."),
                { code: "ECSCredentialsProviderFailure" }
              );
            }
            return full;
          } else {
            throw AWS2.util.error(
              new Error("Variable " + ENV_RELATIVE_URI + " or " + ENV_FULL_URI + " must be set to use AWS.RemoteCredentials."),
              { code: "ECSCredentialsProviderFailure" }
            );
          }
        } else {
          throw AWS2.util.error(
            new Error("No process info available"),
            { code: "ECSCredentialsProviderFailure" }
          );
        }
      }, "getECSFullUri"),
      getECSAuthToken: /* @__PURE__ */ __name(function getECSAuthToken() {
        if (process && process.env && process.env[ENV_FULL_URI]) {
          return process.env[ENV_AUTH_TOKEN];
        }
      }, "getECSAuthToken"),
      credsFormatIsValid: /* @__PURE__ */ __name(function credsFormatIsValid(credData) {
        return !!credData.accessKeyId && !!credData.secretAccessKey && !!credData.sessionToken && !!credData.expireTime;
      }, "credsFormatIsValid"),
      formatCreds: /* @__PURE__ */ __name(function formatCreds(credData) {
        if (!!credData.credentials) {
          credData = credData.credentials;
        }
        return {
          expired: false,
          accessKeyId: credData.accessKeyId || credData.AccessKeyId,
          secretAccessKey: credData.secretAccessKey || credData.SecretAccessKey,
          sessionToken: credData.sessionToken || credData.Token,
          expireTime: new Date(credData.expiration || credData.Expiration)
        };
      }, "formatCreds"),
      request: /* @__PURE__ */ __name(function request(url2, callback) {
        var httpRequest2 = new AWS2.HttpRequest(url2);
        httpRequest2.method = "GET";
        httpRequest2.headers.Accept = "application/json";
        var token = this.getECSAuthToken();
        if (token) {
          httpRequest2.headers.Authorization = token;
        }
        AWS2.util.handleRequestWithRetries(httpRequest2, this, callback);
      }, "request"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        var fullUri;
        try {
          fullUri = this.getECSFullUri();
        } catch (err) {
          callback(err);
          return;
        }
        this.request(fullUri, function(err, data) {
          if (!err) {
            try {
              data = JSON.parse(data);
              var creds = self.formatCreds(data);
              if (!self.credsFormatIsValid(creds)) {
                throw AWS2.util.error(
                  new Error("Response data is not in valid format"),
                  { code: "ECSCredentialsProviderFailure" }
                );
              }
              AWS2.util.update(self, creds);
            } catch (dataError) {
              err = dataError;
            }
          }
          callback(err, creds);
        });
      }, "load")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/ecs_credentials.js
var require_ecs_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/ecs_credentials.js"() {
    var AWS2 = require_core();
    AWS2.ECSCredentials = AWS2.RemoteCredentials;
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/environment_credentials.js
var require_environment_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/environment_credentials.js"() {
    var AWS2 = require_core();
    AWS2.EnvironmentCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function EnvironmentCredentials(envPrefix) {
        AWS2.Credentials.call(this);
        this.envPrefix = envPrefix;
        this.get(function() {
        });
      }, "EnvironmentCredentials"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        if (!callback)
          callback = AWS2.util.fn.callback;
        if (!process || !process.env) {
          callback(AWS2.util.error(
            new Error("No process info or environment variables available"),
            { code: "EnvironmentCredentialsProviderFailure" }
          ));
          return;
        }
        var keys = ["ACCESS_KEY_ID", "SECRET_ACCESS_KEY", "SESSION_TOKEN"];
        var values = [];
        for (var i = 0; i < keys.length; i++) {
          var prefix = "";
          if (this.envPrefix)
            prefix = this.envPrefix + "_";
          values[i] = process.env[prefix + keys[i]];
          if (!values[i] && keys[i] !== "SESSION_TOKEN") {
            callback(AWS2.util.error(
              new Error("Variable " + prefix + keys[i] + " not set."),
              { code: "EnvironmentCredentialsProviderFailure" }
            ));
            return;
          }
        }
        this.expired = false;
        AWS2.Credentials.apply(this, values);
        callback();
      }, "refresh")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/file_system_credentials.js
var require_file_system_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/file_system_credentials.js"() {
    var AWS2 = require_core();
    AWS2.FileSystemCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function FileSystemCredentials(filename) {
        AWS2.Credentials.call(this);
        this.filename = filename;
        this.get(function() {
        });
      }, "FileSystemCredentials"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        if (!callback)
          callback = AWS2.util.fn.callback;
        try {
          var creds = JSON.parse(AWS2.util.readFileSync(this.filename));
          AWS2.Credentials.call(this, creds);
          if (!this.accessKeyId || !this.secretAccessKey) {
            throw AWS2.util.error(
              new Error("Credentials not set in " + this.filename),
              { code: "FileSystemCredentialsProviderFailure" }
            );
          }
          this.expired = false;
          callback();
        } catch (err) {
          callback(err);
        }
      }, "refresh")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/shared_ini_file_credentials.js
var require_shared_ini_file_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/shared_ini_file_credentials.js"() {
    var AWS2 = require_core();
    var STS = require_sts2();
    var iniLoader = AWS2.util.iniLoader;
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    AWS2.SharedIniFileCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function SharedIniFileCredentials(options) {
        AWS2.Credentials.call(this);
        options = options || {};
        this.filename = options.filename;
        this.profile = options.profile || process.env.AWS_PROFILE || AWS2.util.defaultProfile;
        this.disableAssumeRole = Boolean(options.disableAssumeRole);
        this.preferStaticCredentials = Boolean(options.preferStaticCredentials);
        this.tokenCodeFn = options.tokenCodeFn || null;
        this.httpOptions = options.httpOptions || null;
        this.get(options.callback || AWS2.util.fn.noop);
      }, "SharedIniFileCredentials"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        try {
          var profiles = AWS2.util.getProfilesFromSharedConfig(iniLoader, this.filename);
          var profile = profiles[this.profile] || {};
          if (Object.keys(profile).length === 0) {
            throw AWS2.util.error(
              new Error("Profile " + this.profile + " not found"),
              { code: "SharedIniFileCredentialsProviderFailure" }
            );
          }
          var preferStaticCredentialsToRoleArn = Boolean(
            this.preferStaticCredentials && profile["aws_access_key_id"] && profile["aws_secret_access_key"]
          );
          if (profile["role_arn"] && !preferStaticCredentialsToRoleArn) {
            this.loadRoleProfile(profiles, profile, function(err, data) {
              if (err) {
                callback(err);
              } else {
                self.expired = false;
                self.accessKeyId = data.Credentials.AccessKeyId;
                self.secretAccessKey = data.Credentials.SecretAccessKey;
                self.sessionToken = data.Credentials.SessionToken;
                self.expireTime = data.Credentials.Expiration;
                callback(null);
              }
            });
            return;
          }
          this.accessKeyId = profile["aws_access_key_id"];
          this.secretAccessKey = profile["aws_secret_access_key"];
          this.sessionToken = profile["aws_session_token"];
          if (!this.accessKeyId || !this.secretAccessKey) {
            throw AWS2.util.error(
              new Error("Credentials not set for profile " + this.profile),
              { code: "SharedIniFileCredentialsProviderFailure" }
            );
          }
          this.expired = false;
          callback(null);
        } catch (err) {
          callback(err);
        }
      }, "load"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        iniLoader.clearCachedFiles();
        this.coalesceRefresh(
          callback || AWS2.util.fn.callback,
          this.disableAssumeRole
        );
      }, "refresh"),
      loadRoleProfile: /* @__PURE__ */ __name(function loadRoleProfile(creds, roleProfile, callback) {
        if (this.disableAssumeRole) {
          throw AWS2.util.error(
            new Error("Role assumption profiles are disabled. Failed to load profile " + this.profile + " from " + creds.filename),
            { code: "SharedIniFileCredentialsProviderFailure" }
          );
        }
        var self = this;
        var roleArn = roleProfile["role_arn"];
        var roleSessionName = roleProfile["role_session_name"];
        var externalId = roleProfile["external_id"];
        var mfaSerial = roleProfile["mfa_serial"];
        var sourceProfileName = roleProfile["source_profile"];
        var profileRegion = roleProfile["region"] || ASSUME_ROLE_DEFAULT_REGION;
        if (!sourceProfileName) {
          throw AWS2.util.error(
            new Error("source_profile is not set using profile " + this.profile),
            { code: "SharedIniFileCredentialsProviderFailure" }
          );
        }
        var sourceProfileExistanceTest = creds[sourceProfileName];
        if (typeof sourceProfileExistanceTest !== "object") {
          throw AWS2.util.error(
            new Error("source_profile " + sourceProfileName + " using profile " + this.profile + " does not exist"),
            { code: "SharedIniFileCredentialsProviderFailure" }
          );
        }
        var sourceCredentials = new AWS2.SharedIniFileCredentials(
          AWS2.util.merge(this.options || {}, {
            profile: sourceProfileName,
            preferStaticCredentials: true
          })
        );
        this.roleArn = roleArn;
        var sts = new STS({
          credentials: sourceCredentials,
          region: profileRegion,
          httpOptions: this.httpOptions
        });
        var roleParams = {
          RoleArn: roleArn,
          RoleSessionName: roleSessionName || "aws-sdk-js-" + Date.now()
        };
        if (externalId) {
          roleParams.ExternalId = externalId;
        }
        if (mfaSerial && self.tokenCodeFn) {
          roleParams.SerialNumber = mfaSerial;
          self.tokenCodeFn(mfaSerial, function(err, token) {
            if (err) {
              var message;
              if (err instanceof Error) {
                message = err.message;
              } else {
                message = err;
              }
              callback(
                AWS2.util.error(
                  new Error("Error fetching MFA token: " + message),
                  { code: "SharedIniFileCredentialsProviderFailure" }
                )
              );
              return;
            }
            roleParams.TokenCode = token;
            sts.assumeRole(roleParams, callback);
          });
          return;
        }
        sts.assumeRole(roleParams, callback);
      }, "loadRoleProfile")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/sso_credentials.js
var require_sso_credentials = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/credentials/sso_credentials.js"() {
    var AWS2 = require_core();
    var path = __require("path");
    var crypto5 = __require("crypto");
    var iniLoader = AWS2.util.iniLoader;
    AWS2.SsoCredentials = AWS2.util.inherit(AWS2.Credentials, {
      constructor: /* @__PURE__ */ __name(function SsoCredentials(options) {
        AWS2.Credentials.call(this);
        options = options || {};
        this.errorCode = "SsoCredentialsProviderFailure";
        this.expired = true;
        this.filename = options.filename;
        this.profile = options.profile || process.env.AWS_PROFILE || AWS2.util.defaultProfile;
        this.service = options.ssoClient;
        this.httpOptions = options.httpOptions || null;
        this.get(options.callback || AWS2.util.fn.noop);
      }, "SsoCredentials"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
        var self = this;
        try {
          var profiles = AWS2.util.getProfilesFromSharedConfig(iniLoader, this.filename);
          var profile = profiles[this.profile] || {};
          if (Object.keys(profile).length === 0) {
            throw AWS2.util.error(
              new Error("Profile " + this.profile + " not found"),
              { code: self.errorCode }
            );
          }
          if (!profile.sso_start_url || !profile.sso_account_id || !profile.sso_region || !profile.sso_role_name) {
            throw AWS2.util.error(
              new Error("Profile " + this.profile + ' does not have valid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html'),
              { code: self.errorCode }
            );
          }
          var hasher = crypto5.createHash("sha1");
          var fileName = hasher.update(profile.sso_start_url).digest("hex") + ".json";
          var cachePath = path.join(
            iniLoader.getHomeDir(),
            ".aws",
            "sso",
            "cache",
            fileName
          );
          var cacheFile = AWS2.util.readFileSync(cachePath);
          var cacheContent = null;
          if (cacheFile) {
            cacheContent = JSON.parse(cacheFile);
          }
          if (!cacheContent) {
            throw AWS2.util.error(
              new Error("Cached credentials not found under " + this.profile + " profile. Please make sure you log in with aws sso login first"),
              { code: self.errorCode }
            );
          }
          if (!cacheContent.startUrl || !cacheContent.region || !cacheContent.accessToken || !cacheContent.expiresAt) {
            throw AWS2.util.error(
              new Error("Cached credentials are missing required properties. Try running aws sso login.")
            );
          }
          if (new Date(cacheContent.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
            throw AWS2.util.error(new Error(
              "The SSO session associated with this profile has expired. To refresh this SSO session run aws sso login with the corresponding profile."
            ));
          }
          if (!self.service || self.service.config.region !== profile.sso_region) {
            self.service = new AWS2.SSO({
              region: profile.sso_region,
              httpOptions: this.httpOptions
            });
          }
          var request = {
            accessToken: cacheContent.accessToken,
            accountId: profile.sso_account_id,
            roleName: profile.sso_role_name
          };
          self.service.getRoleCredentials(request, function(err, data) {
            if (err || !data || !data.roleCredentials) {
              callback(AWS2.util.error(
                err || new Error('Please log in using "aws sso login"'),
                { code: self.errorCode }
              ), null);
            } else if (!data.roleCredentials.accessKeyId || !data.roleCredentials.secretAccessKey || !data.roleCredentials.sessionToken || !data.roleCredentials.expiration) {
              throw AWS2.util.error(new Error(
                "SSO returns an invalid temporary credential."
              ));
            } else {
              self.expired = false;
              self.accessKeyId = data.roleCredentials.accessKeyId;
              self.secretAccessKey = data.roleCredentials.secretAccessKey;
              self.sessionToken = data.roleCredentials.sessionToken;
              self.expireTime = new Date(data.roleCredentials.expiration);
              callback(null);
            }
          });
        } catch (err) {
          callback(err);
        }
      }, "load"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        iniLoader.clearCachedFiles();
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/token.js
var require_token2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/token.js"() {
    var AWS2 = require_core();
    AWS2.Token = AWS2.util.inherit({
      constructor: /* @__PURE__ */ __name(function Token(options) {
        AWS2.util.hideProperties(this, ["token"]);
        this.expired = false;
        this.expireTime = null;
        this.refreshCallbacks = [];
        if (arguments.length === 1) {
          var options = arguments[0];
          this.token = options.token;
          this.expireTime = options.expireTime;
        }
      }, "Token"),
      expiryWindow: 15,
      needsRefresh: /* @__PURE__ */ __name(function needsRefresh() {
        var currentTime = AWS2.util.date.getDate().getTime();
        var adjustedTime = new Date(currentTime + this.expiryWindow * 1e3);
        if (this.expireTime && adjustedTime > this.expireTime)
          return true;
        return this.expired || !this.token;
      }, "needsRefresh"),
      get: /* @__PURE__ */ __name(function get(callback) {
        var self = this;
        if (this.needsRefresh()) {
          this.refresh(function(err) {
            if (!err)
              self.expired = false;
            if (callback)
              callback(err);
          });
        } else if (callback) {
          callback();
        }
      }, "get"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        this.expired = false;
        callback();
      }, "refresh"),
      coalesceRefresh: /* @__PURE__ */ __name(function coalesceRefresh(callback, sync) {
        var self = this;
        if (self.refreshCallbacks.push(callback) === 1) {
          self.load(/* @__PURE__ */ __name(function onLoad(err) {
            AWS2.util.arrayEach(self.refreshCallbacks, function(callback2) {
              if (sync) {
                callback2(err);
              } else {
                AWS2.util.defer(function() {
                  callback2(err);
                });
              }
            });
            self.refreshCallbacks.length = 0;
          }, "onLoad"));
        }
      }, "coalesceRefresh"),
      load: /* @__PURE__ */ __name(function load(callback) {
        callback();
      }, "load")
    });
    AWS2.Token.addPromisesToClass = /* @__PURE__ */ __name(function addPromisesToClass(PromiseDependency) {
      this.prototype.getPromise = AWS2.util.promisifyMethod("get", PromiseDependency);
      this.prototype.refreshPromise = AWS2.util.promisifyMethod("refresh", PromiseDependency);
    }, "addPromisesToClass");
    AWS2.Token.deletePromisesFromClass = /* @__PURE__ */ __name(function deletePromisesFromClass() {
      delete this.prototype.getPromise;
      delete this.prototype.refreshPromise;
    }, "deletePromisesFromClass");
    AWS2.util.addPromises(AWS2.Token);
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/token/token_provider_chain.js
var require_token_provider_chain = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/token/token_provider_chain.js"() {
    var AWS2 = require_core();
    AWS2.TokenProviderChain = AWS2.util.inherit(AWS2.Token, {
      constructor: /* @__PURE__ */ __name(function TokenProviderChain(providers) {
        if (providers) {
          this.providers = providers;
        } else {
          this.providers = AWS2.TokenProviderChain.defaultProviders.slice(0);
        }
        this.resolveCallbacks = [];
      }, "TokenProviderChain"),
      resolve: /* @__PURE__ */ __name(function resolve(callback) {
        var self = this;
        if (self.providers.length === 0) {
          callback(new Error("No providers"));
          return self;
        }
        if (self.resolveCallbacks.push(callback) === 1) {
          let resolveNext2 = function(err, token) {
            if (!err && token || index === providers.length) {
              AWS2.util.arrayEach(self.resolveCallbacks, function(callback2) {
                callback2(err, token);
              });
              self.resolveCallbacks.length = 0;
              return;
            }
            var provider = providers[index++];
            if (typeof provider === "function") {
              token = provider.call();
            } else {
              token = provider;
            }
            if (token.get) {
              token.get(function(getErr) {
                resolveNext2(getErr, getErr ? null : token);
              });
            } else {
              resolveNext2(null, token);
            }
          };
          var resolveNext = resolveNext2;
          __name(resolveNext2, "resolveNext");
          var index = 0;
          var providers = self.providers.slice(0);
          resolveNext2();
        }
        return self;
      }, "resolve")
    });
    AWS2.TokenProviderChain.defaultProviders = [];
    AWS2.TokenProviderChain.addPromisesToClass = /* @__PURE__ */ __name(function addPromisesToClass(PromiseDependency) {
      this.prototype.resolvePromise = AWS2.util.promisifyMethod("resolve", PromiseDependency);
    }, "addPromisesToClass");
    AWS2.TokenProviderChain.deletePromisesFromClass = /* @__PURE__ */ __name(function deletePromisesFromClass() {
      delete this.prototype.resolvePromise;
    }, "deletePromisesFromClass");
    AWS2.util.addPromises(AWS2.TokenProviderChain);
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/token/sso_token_provider.js
var require_sso_token_provider = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/token/sso_token_provider.js"() {
    var AWS2 = require_core();
    var crypto5 = __require("crypto");
    var fs = __require("fs");
    var path = __require("path");
    var iniLoader = AWS2.util.iniLoader;
    var lastRefreshAttemptTime = 0;
    var validateTokenKey = /* @__PURE__ */ __name(function validateTokenKey2(token, key) {
      if (!token[key]) {
        throw AWS2.util.error(
          new Error('Key "' + key + '" not present in SSO Token'),
          { code: "SSOTokenProviderFailure" }
        );
      }
    }, "validateTokenKey");
    var refreshUnsuccessful = /* @__PURE__ */ __name(function refreshUnsuccessful2(currentTime, tokenExpireTime, callback) {
      if (tokenExpireTime > currentTime) {
        callback(null);
      } else {
        throw AWS2.util.error(
          new Error('SSO Token refresh failed. Please log in using "aws sso login"'),
          { code: "SSOTokenProviderFailure" }
        );
      }
    }, "refreshUnsuccessful");
    AWS2.SSOTokenProvider = AWS2.util.inherit(AWS2.Token, {
      expiryWindow: 5 * 60,
      constructor: /* @__PURE__ */ __name(function SSOTokenProvider(options) {
        AWS2.Token.call(this);
        options = options || {};
        this.expired = true;
        this.profile = options.profile || process.env.AWS_PROFILE || AWS2.util.defaultProfile;
        this.get(options.callback || AWS2.util.fn.noop);
      }, "SSOTokenProvider"),
      load: /* @__PURE__ */ __name(function load(callback) {
        var self = this;
        var profiles = iniLoader.loadFrom({ isConfig: true });
        var profile = profiles[this.profile] || {};
        if (Object.keys(profile).length === 0) {
          throw AWS2.util.error(
            new Error('Profile "' + this.profile + '" not found'),
            { code: "SSOTokenProviderFailure" }
          );
        } else if (!profile["sso_session"]) {
          throw AWS2.util.error(
            new Error('Profile "' + profileName + '" is missing required property "sso_session".'),
            { code: "SSOTokenProviderFailure" }
          );
        }
        var ssoSessionName = profile["sso_session"];
        var ssoSessions = iniLoader.loadSsoSessionsFrom();
        var ssoSession = ssoSessions[ssoSessionName];
        if (!ssoSession) {
          throw AWS2.util.error(
            new Error('Sso session "' + ssoSessionName + '" not found'),
            { code: "SSOTokenProviderFailure" }
          );
        } else if (!ssoSession["sso_start_url"]) {
          throw AWS2.util.error(
            new Error('Sso session "' + profileName + '" is missing required property "sso_start_url".'),
            { code: "SSOTokenProviderFailure" }
          );
        } else if (!ssoSession["sso_region"]) {
          throw AWS2.util.error(
            new Error('Sso session "' + profileName + '" is missing required property "sso_region".'),
            { code: "SSOTokenProviderFailure" }
          );
        }
        var hasher = crypto5.createHash("sha1");
        var fileName = hasher.update(ssoSessionName).digest("hex") + ".json";
        var cachePath = path.join(iniLoader.getHomeDir(), ".aws", "sso", "cache", fileName);
        var tokenFromCache = JSON.parse(fs.readFileSync(cachePath));
        if (!tokenFromCache) {
          throw AWS2.util.error(
            new Error('Cached token not found. Please log in using "aws sso login" for profile "' + this.profile + '".'),
            { code: "SSOTokenProviderFailure" }
          );
        }
        validateTokenKey(tokenFromCache, "accessToken");
        validateTokenKey(tokenFromCache, "expiresAt");
        var currentTime = AWS2.util.date.getDate().getTime();
        var adjustedTime = new Date(currentTime + this.expiryWindow * 1e3);
        var tokenExpireTime = new Date(tokenFromCache["expiresAt"]);
        if (tokenExpireTime > adjustedTime) {
          self.token = tokenFromCache.accessToken;
          self.expireTime = tokenExpireTime;
          self.expired = false;
          callback(null);
          return;
        }
        if (currentTime - lastRefreshAttemptTime < 30 * 1e3) {
          refreshUnsuccessful(currentTime, tokenExpireTime, callback);
          return;
        }
        validateTokenKey(tokenFromCache, "clientId");
        validateTokenKey(tokenFromCache, "clientSecret");
        validateTokenKey(tokenFromCache, "refreshToken");
        if (!self.service || self.service.config.region !== ssoSession.sso_region) {
          self.service = new AWS2.SSOOIDC({ region: ssoSession.sso_region });
        }
        var params = {
          clientId: tokenFromCache.clientId,
          clientSecret: tokenFromCache.clientSecret,
          refreshToken: tokenFromCache.refreshToken,
          grantType: "refresh_token"
        };
        lastRefreshAttemptTime = AWS2.util.date.getDate().getTime();
        self.service.createToken(params, function(err, data) {
          if (err || !data) {
            refreshUnsuccessful(currentTime, tokenExpireTime, callback);
          } else {
            try {
              validateTokenKey(data, "accessToken");
              validateTokenKey(data, "expiresIn");
              self.expired = false;
              self.token = data.accessToken;
              self.expireTime = new Date(Date.now() + data.expiresIn * 1e3);
              callback(null);
              try {
                tokenFromCache.accessToken = data.accessToken;
                tokenFromCache.expiresAt = self.expireTime.toISOString();
                tokenFromCache.refreshToken = data.refreshToken;
                fs.writeFileSync(cachePath, JSON.stringify(tokenFromCache, null, 2));
              } catch (error) {
              }
            } catch (error) {
              refreshUnsuccessful(currentTime, tokenExpireTime, callback);
            }
          }
        });
      }, "load"),
      refresh: /* @__PURE__ */ __name(function refresh(callback) {
        iniLoader.clearCachedFiles();
        this.coalesceRefresh(callback || AWS2.util.fn.callback);
      }, "refresh")
    });
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/node_loader.js
var require_node_loader = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/lib/node_loader.js"(exports, module) {
    var util = require_util3();
    var region_utils = require_utils3();
    var isFipsRegion = region_utils.isFipsRegion;
    var getRealRegion = region_utils.getRealRegion;
    util.isBrowser = function() {
      return false;
    };
    util.isNode = function() {
      return true;
    };
    util.crypto.lib = __require("crypto");
    util.Buffer = __require("buffer").Buffer;
    util.domain = __require("domain");
    util.stream = __require("stream");
    util.url = __require("url");
    util.querystring = __require("querystring");
    util.environment = "nodejs";
    util.createEventStream = util.stream.Readable ? require_streaming_create_event_stream().createEventStream : require_buffered_create_event_stream().createEventStream;
    util.realClock = require_nodeClock();
    util.clientSideMonitoring = {
      Publisher: require_publisher().Publisher,
      configProvider: require_configuration()
    };
    util.iniLoader = require_shared_ini().iniLoader;
    util.getSystemErrorName = __require("util").getSystemErrorName;
    util.loadConfig = function(options) {
      var envValue = options.environmentVariableSelector(process.env);
      if (envValue !== void 0) {
        return envValue;
      }
      var configFile = {};
      try {
        configFile = util.iniLoader ? util.iniLoader.loadFrom({
          isConfig: true,
          filename: process.env[util.sharedConfigFileEnv]
        }) : {};
      } catch (e) {
      }
      var sharedFileConfig = configFile[process.env.AWS_PROFILE || util.defaultProfile] || {};
      var configValue = options.configFileSelector(sharedFileConfig);
      if (configValue !== void 0) {
        return configValue;
      }
      if (typeof options.default === "function") {
        return options.default();
      }
      return options.default;
    };
    var AWS2;
    module.exports = AWS2 = require_core();
    require_credentials2();
    require_credential_provider_chain();
    require_temporary_credentials();
    require_chainable_temporary_credentials();
    require_web_identity_credentials();
    require_cognito_identity_credentials();
    require_saml_credentials();
    require_process_credentials();
    AWS2.XML.Parser = require_node_parser();
    require_node();
    require_ini_loader();
    require_token_file_web_identity_credentials();
    require_ec2_metadata_credentials();
    require_remote_credentials();
    require_ecs_credentials();
    require_environment_credentials();
    require_file_system_credentials();
    require_shared_ini_file_credentials();
    require_process_credentials();
    require_sso_credentials();
    AWS2.CredentialProviderChain.defaultProviders = [
      function() {
        return new AWS2.EnvironmentCredentials("AWS");
      },
      function() {
        return new AWS2.EnvironmentCredentials("AMAZON");
      },
      function() {
        return new AWS2.SsoCredentials();
      },
      function() {
        return new AWS2.SharedIniFileCredentials();
      },
      function() {
        return new AWS2.ECSCredentials();
      },
      function() {
        return new AWS2.ProcessCredentials();
      },
      function() {
        return new AWS2.TokenFileWebIdentityCredentials();
      },
      function() {
        return new AWS2.EC2MetadataCredentials();
      }
    ];
    require_token2();
    require_token_provider_chain();
    require_sso_token_provider();
    AWS2.TokenProviderChain.defaultProviders = [
      function() {
        return new AWS2.SSOTokenProvider();
      }
    ];
    var getRegion = /* @__PURE__ */ __name(function() {
      var env = process.env;
      var region = env.AWS_REGION || env.AMAZON_REGION;
      if (env[AWS2.util.configOptInEnv]) {
        var toCheck = [
          { filename: env[AWS2.util.sharedCredentialsFileEnv] },
          { isConfig: true, filename: env[AWS2.util.sharedConfigFileEnv] }
        ];
        var iniLoader = AWS2.util.iniLoader;
        while (!region && toCheck.length) {
          var configFile = {};
          var fileInfo = toCheck.shift();
          try {
            configFile = iniLoader.loadFrom(fileInfo);
          } catch (err) {
            if (fileInfo.isConfig)
              throw err;
          }
          var profile = configFile[env.AWS_PROFILE || AWS2.util.defaultProfile];
          region = profile && profile.region;
        }
      }
      return region;
    }, "getRegion");
    var getBooleanValue = /* @__PURE__ */ __name(function(value) {
      return value === "true" ? true : value === "false" ? false : void 0;
    }, "getBooleanValue");
    var USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: function(env) {
        return getBooleanValue(env["AWS_USE_FIPS_ENDPOINT"]);
      },
      configFileSelector: function(profile) {
        return getBooleanValue(profile["use_fips_endpoint"]);
      },
      default: false
    };
    var USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: function(env) {
        return getBooleanValue(env["AWS_USE_DUALSTACK_ENDPOINT"]);
      },
      configFileSelector: function(profile) {
        return getBooleanValue(profile["use_dualstack_endpoint"]);
      },
      default: false
    };
    AWS2.util.update(AWS2.Config.prototype.keys, {
      credentials: function() {
        var credentials = null;
        new AWS2.CredentialProviderChain([
          function() {
            return new AWS2.EnvironmentCredentials("AWS");
          },
          function() {
            return new AWS2.EnvironmentCredentials("AMAZON");
          },
          function() {
            return new AWS2.SharedIniFileCredentials({ disableAssumeRole: true });
          }
        ]).resolve(function(err, creds) {
          if (!err)
            credentials = creds;
        });
        return credentials;
      },
      credentialProvider: function() {
        return new AWS2.CredentialProviderChain();
      },
      logger: function() {
        return process.env.AWSJS_DEBUG ? console : null;
      },
      region: function() {
        var region = getRegion();
        return region ? getRealRegion(region) : void 0;
      },
      tokenProvider: function() {
        return new AWS2.TokenProviderChain();
      },
      useFipsEndpoint: function() {
        var region = getRegion();
        return isFipsRegion(region) ? true : util.loadConfig(USE_FIPS_ENDPOINT_CONFIG_OPTIONS);
      },
      useDualstackEndpoint: function() {
        return util.loadConfig(USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS);
      }
    });
    AWS2.config = new AWS2.Config();
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/ssm-2014-11-06.min.json
var require_ssm_2014_11_06_min = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/ssm-2014-11-06.min.json"(exports, module) {
    module.exports = {
      version: "2.0",
      metadata: {
        apiVersion: "2014-11-06",
        endpointPrefix: "ssm",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon SSM",
        serviceFullName: "Amazon Simple Systems Manager (SSM)",
        serviceId: "SSM",
        signatureVersion: "v4",
        targetPrefix: "AmazonSSM",
        uid: "ssm-2014-11-06"
      },
      operations: {
        AddTagsToResource: {
          input: {
            type: "structure",
            required: [
              "ResourceType",
              "ResourceId",
              "Tags"
            ],
            members: {
              ResourceType: {},
              ResourceId: {},
              Tags: {
                shape: "S4"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        AssociateOpsItemRelatedItem: {
          input: {
            type: "structure",
            required: [
              "OpsItemId",
              "AssociationType",
              "ResourceType",
              "ResourceUri"
            ],
            members: {
              OpsItemId: {},
              AssociationType: {},
              ResourceType: {},
              ResourceUri: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationId: {}
            }
          }
        },
        CancelCommand: {
          input: {
            type: "structure",
            required: [
              "CommandId"
            ],
            members: {
              CommandId: {},
              InstanceIds: {
                shape: "Si"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        CancelMaintenanceWindowExecution: {
          input: {
            type: "structure",
            required: [
              "WindowExecutionId"
            ],
            members: {
              WindowExecutionId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowExecutionId: {}
            }
          }
        },
        CreateActivation: {
          input: {
            type: "structure",
            required: [
              "IamRole"
            ],
            members: {
              Description: {},
              DefaultInstanceName: {},
              IamRole: {},
              RegistrationLimit: {
                type: "integer"
              },
              ExpirationDate: {
                type: "timestamp"
              },
              Tags: {
                shape: "S4"
              },
              RegistrationMetadata: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Value"
                  ],
                  members: {
                    Key: {},
                    Value: {}
                  }
                }
              }
            }
          },
          output: {
            type: "structure",
            members: {
              ActivationId: {},
              ActivationCode: {}
            }
          }
        },
        CreateAssociation: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              DocumentVersion: {},
              InstanceId: {},
              Parameters: {
                shape: "S14"
              },
              Targets: {
                shape: "S18"
              },
              ScheduleExpression: {},
              OutputLocation: {
                shape: "S1e"
              },
              AssociationName: {},
              AutomationTargetParameterName: {},
              MaxErrors: {},
              MaxConcurrency: {},
              ComplianceSeverity: {},
              SyncCompliance: {},
              ApplyOnlyAtCronInterval: {
                type: "boolean"
              },
              CalendarNames: {
                shape: "S1q"
              },
              TargetLocations: {
                shape: "S1s"
              },
              ScheduleOffset: {
                type: "integer"
              },
              TargetMaps: {
                shape: "S25"
              },
              Tags: {
                shape: "S4"
              },
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationDescription: {
                shape: "S2b"
              }
            }
          }
        },
        CreateAssociationBatch: {
          input: {
            type: "structure",
            required: [
              "Entries"
            ],
            members: {
              Entries: {
                type: "list",
                member: {
                  shape: "S2s"
                }
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Successful: {
                type: "list",
                member: {
                  shape: "S2b"
                }
              },
              Failed: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Entry: {
                      shape: "S2s"
                    },
                    Message: {},
                    Fault: {}
                  }
                }
              }
            }
          }
        },
        CreateDocument: {
          input: {
            type: "structure",
            required: [
              "Content",
              "Name"
            ],
            members: {
              Content: {},
              Requires: {
                shape: "S31"
              },
              Attachments: {
                shape: "S33"
              },
              Name: {},
              DisplayName: {},
              VersionName: {},
              DocumentType: {},
              DocumentFormat: {},
              TargetType: {},
              Tags: {
                shape: "S4"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              DocumentDescription: {
                shape: "S3g"
              }
            }
          }
        },
        CreateMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "Name",
              "Schedule",
              "Duration",
              "Cutoff",
              "AllowUnassociatedTargets"
            ],
            members: {
              Name: {},
              Description: {
                shape: "S4a"
              },
              StartDate: {},
              EndDate: {},
              Schedule: {},
              ScheduleTimezone: {},
              ScheduleOffset: {
                type: "integer"
              },
              Duration: {
                type: "integer"
              },
              Cutoff: {
                type: "integer"
              },
              AllowUnassociatedTargets: {
                type: "boolean"
              },
              ClientToken: {
                idempotencyToken: true
              },
              Tags: {
                shape: "S4"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {}
            }
          }
        },
        CreateOpsItem: {
          input: {
            type: "structure",
            required: [
              "Description",
              "Source",
              "Title"
            ],
            members: {
              Description: {},
              OpsItemType: {},
              OperationalData: {
                shape: "S4o"
              },
              Notifications: {
                shape: "S4t"
              },
              Priority: {
                type: "integer"
              },
              RelatedOpsItems: {
                shape: "S4x"
              },
              Source: {},
              Title: {},
              Tags: {
                shape: "S4"
              },
              Category: {},
              Severity: {},
              ActualStartTime: {
                type: "timestamp"
              },
              ActualEndTime: {
                type: "timestamp"
              },
              PlannedStartTime: {
                type: "timestamp"
              },
              PlannedEndTime: {
                type: "timestamp"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              OpsItemId: {}
            }
          }
        },
        CreateOpsMetadata: {
          input: {
            type: "structure",
            required: [
              "ResourceId"
            ],
            members: {
              ResourceId: {},
              Metadata: {
                shape: "S56"
              },
              Tags: {
                shape: "S4"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              OpsMetadataArn: {}
            }
          }
        },
        CreatePatchBaseline: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              OperatingSystem: {},
              Name: {},
              GlobalFilters: {
                shape: "S5f"
              },
              ApprovalRules: {
                shape: "S5l"
              },
              ApprovedPatches: {
                shape: "S5r"
              },
              ApprovedPatchesComplianceLevel: {},
              ApprovedPatchesEnableNonSecurity: {
                type: "boolean"
              },
              RejectedPatches: {
                shape: "S5r"
              },
              RejectedPatchesAction: {},
              Description: {},
              Sources: {
                shape: "S5v"
              },
              ClientToken: {
                idempotencyToken: true
              },
              Tags: {
                shape: "S4"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {}
            }
          }
        },
        CreateResourceDataSync: {
          input: {
            type: "structure",
            required: [
              "SyncName"
            ],
            members: {
              SyncName: {},
              S3Destination: {
                shape: "S65"
              },
              SyncType: {},
              SyncSource: {
                shape: "S6e"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeleteActivation: {
          input: {
            type: "structure",
            required: [
              "ActivationId"
            ],
            members: {
              ActivationId: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeleteAssociation: {
          input: {
            type: "structure",
            members: {
              Name: {},
              InstanceId: {},
              AssociationId: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeleteDocument: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              DocumentVersion: {},
              VersionName: {},
              Force: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeleteInventory: {
          input: {
            type: "structure",
            required: [
              "TypeName"
            ],
            members: {
              TypeName: {},
              SchemaDeleteOption: {},
              DryRun: {
                type: "boolean"
              },
              ClientToken: {
                idempotencyToken: true
              }
            }
          },
          output: {
            type: "structure",
            members: {
              DeletionId: {},
              TypeName: {},
              DeletionSummary: {
                shape: "S72"
              }
            }
          }
        },
        DeleteMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "WindowId"
            ],
            members: {
              WindowId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {}
            }
          }
        },
        DeleteOpsMetadata: {
          input: {
            type: "structure",
            required: [
              "OpsMetadataArn"
            ],
            members: {
              OpsMetadataArn: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeleteParameter: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeleteParameters: {
          input: {
            type: "structure",
            required: [
              "Names"
            ],
            members: {
              Names: {
                shape: "S7h"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              DeletedParameters: {
                shape: "S7h"
              },
              InvalidParameters: {
                shape: "S7h"
              }
            }
          }
        },
        DeletePatchBaseline: {
          input: {
            type: "structure",
            required: [
              "BaselineId"
            ],
            members: {
              BaselineId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {}
            }
          }
        },
        DeleteResourceDataSync: {
          input: {
            type: "structure",
            required: [
              "SyncName"
            ],
            members: {
              SyncName: {},
              SyncType: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeregisterManagedInstance: {
          input: {
            type: "structure",
            required: [
              "InstanceId"
            ],
            members: {
              InstanceId: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        DeregisterPatchBaselineForPatchGroup: {
          input: {
            type: "structure",
            required: [
              "BaselineId",
              "PatchGroup"
            ],
            members: {
              BaselineId: {},
              PatchGroup: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {},
              PatchGroup: {}
            }
          }
        },
        DeregisterTargetFromMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "WindowId",
              "WindowTargetId"
            ],
            members: {
              WindowId: {},
              WindowTargetId: {},
              Safe: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {},
              WindowTargetId: {}
            }
          }
        },
        DeregisterTaskFromMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "WindowId",
              "WindowTaskId"
            ],
            members: {
              WindowId: {},
              WindowTaskId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {},
              WindowTaskId: {}
            }
          }
        },
        DescribeActivations: {
          input: {
            type: "structure",
            members: {
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    FilterKey: {},
                    FilterValues: {
                      type: "list",
                      member: {}
                    }
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              ActivationList: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    ActivationId: {},
                    Description: {},
                    DefaultInstanceName: {},
                    IamRole: {},
                    RegistrationLimit: {
                      type: "integer"
                    },
                    RegistrationsCount: {
                      type: "integer"
                    },
                    ExpirationDate: {
                      type: "timestamp"
                    },
                    Expired: {
                      type: "boolean"
                    },
                    CreatedDate: {
                      type: "timestamp"
                    },
                    Tags: {
                      shape: "S4"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeAssociation: {
          input: {
            type: "structure",
            members: {
              Name: {},
              InstanceId: {},
              AssociationId: {},
              AssociationVersion: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationDescription: {
                shape: "S2b"
              }
            }
          }
        },
        DescribeAssociationExecutionTargets: {
          input: {
            type: "structure",
            required: [
              "AssociationId",
              "ExecutionId"
            ],
            members: {
              AssociationId: {},
              ExecutionId: {},
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Value"
                  ],
                  members: {
                    Key: {},
                    Value: {}
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationExecutionTargets: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    AssociationId: {},
                    AssociationVersion: {},
                    ExecutionId: {},
                    ResourceId: {},
                    ResourceType: {},
                    Status: {},
                    DetailedStatus: {},
                    LastExecutionDate: {
                      type: "timestamp"
                    },
                    OutputSource: {
                      type: "structure",
                      members: {
                        OutputSourceId: {},
                        OutputSourceType: {}
                      }
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeAssociationExecutions: {
          input: {
            type: "structure",
            required: [
              "AssociationId"
            ],
            members: {
              AssociationId: {},
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Value",
                    "Type"
                  ],
                  members: {
                    Key: {},
                    Value: {},
                    Type: {}
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationExecutions: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    AssociationId: {},
                    AssociationVersion: {},
                    ExecutionId: {},
                    Status: {},
                    DetailedStatus: {},
                    CreatedTime: {
                      type: "timestamp"
                    },
                    LastExecutionDate: {
                      type: "timestamp"
                    },
                    ResourceCountByStatus: {},
                    AlarmConfiguration: {
                      shape: "S1z"
                    },
                    TriggeredAlarms: {
                      shape: "S2n"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeAutomationExecutions: {
          input: {
            type: "structure",
            members: {
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    }
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AutomationExecutionMetadataList: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    AutomationExecutionId: {},
                    DocumentName: {},
                    DocumentVersion: {},
                    AutomationExecutionStatus: {},
                    ExecutionStartTime: {
                      type: "timestamp"
                    },
                    ExecutionEndTime: {
                      type: "timestamp"
                    },
                    ExecutedBy: {},
                    LogFile: {},
                    Outputs: {
                      shape: "S9c"
                    },
                    Mode: {},
                    ParentAutomationExecutionId: {},
                    CurrentStepName: {},
                    CurrentAction: {},
                    FailureMessage: {},
                    TargetParameterName: {},
                    Targets: {
                      shape: "S18"
                    },
                    TargetMaps: {
                      shape: "S25"
                    },
                    ResolvedTargets: {
                      shape: "S9h"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    Target: {},
                    AutomationType: {},
                    AlarmConfiguration: {
                      shape: "S1z"
                    },
                    TriggeredAlarms: {
                      shape: "S2n"
                    },
                    AutomationSubtype: {},
                    ScheduledTime: {
                      type: "timestamp"
                    },
                    Runbooks: {
                      shape: "S9l"
                    },
                    OpsItemId: {},
                    AssociationId: {},
                    ChangeRequestName: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeAutomationStepExecutions: {
          input: {
            type: "structure",
            required: [
              "AutomationExecutionId"
            ],
            members: {
              AutomationExecutionId: {},
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    }
                  }
                }
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              },
              ReverseOrder: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              StepExecutions: {
                shape: "S9v"
              },
              NextToken: {}
            }
          }
        },
        DescribeAvailablePatches: {
          input: {
            type: "structure",
            members: {
              Filters: {
                shape: "Sa5"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Patches: {
                type: "list",
                member: {
                  shape: "Sad"
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeDocument: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              DocumentVersion: {},
              VersionName: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Document: {
                shape: "S3g"
              }
            }
          }
        },
        DescribeDocumentPermission: {
          input: {
            type: "structure",
            required: [
              "Name",
              "PermissionType"
            ],
            members: {
              Name: {},
              PermissionType: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AccountIds: {
                shape: "Sb8"
              },
              AccountSharingInfoList: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    AccountId: {},
                    SharedDocumentVersion: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeEffectiveInstanceAssociations: {
          input: {
            type: "structure",
            required: [
              "InstanceId"
            ],
            members: {
              InstanceId: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Associations: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    AssociationId: {},
                    InstanceId: {},
                    Content: {},
                    AssociationVersion: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeEffectivePatchesForPatchBaseline: {
          input: {
            type: "structure",
            required: [
              "BaselineId"
            ],
            members: {
              BaselineId: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              EffectivePatches: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Patch: {
                      shape: "Sad"
                    },
                    PatchStatus: {
                      type: "structure",
                      members: {
                        DeploymentStatus: {},
                        ComplianceLevel: {},
                        ApprovalDate: {
                          type: "timestamp"
                        }
                      }
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeInstanceAssociationsStatus: {
          input: {
            type: "structure",
            required: [
              "InstanceId"
            ],
            members: {
              InstanceId: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              InstanceAssociationStatusInfos: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    AssociationId: {},
                    Name: {},
                    DocumentVersion: {},
                    AssociationVersion: {},
                    InstanceId: {},
                    ExecutionDate: {
                      type: "timestamp"
                    },
                    Status: {},
                    DetailedStatus: {},
                    ExecutionSummary: {},
                    ErrorCode: {},
                    OutputUrl: {
                      type: "structure",
                      members: {
                        S3OutputUrl: {
                          type: "structure",
                          members: {
                            OutputUrl: {}
                          }
                        }
                      }
                    },
                    AssociationName: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeInstanceInformation: {
          input: {
            type: "structure",
            members: {
              InstanceInformationFilterList: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "key",
                    "valueSet"
                  ],
                  members: {
                    key: {},
                    valueSet: {
                      shape: "Sc1"
                    }
                  }
                }
              },
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      shape: "Sc1"
                    }
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              InstanceInformationList: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    InstanceId: {},
                    PingStatus: {},
                    LastPingDateTime: {
                      type: "timestamp"
                    },
                    AgentVersion: {},
                    IsLatestVersion: {
                      type: "boolean"
                    },
                    PlatformType: {},
                    PlatformName: {},
                    PlatformVersion: {},
                    ActivationId: {},
                    IamRole: {},
                    RegistrationDate: {
                      type: "timestamp"
                    },
                    ResourceType: {},
                    Name: {},
                    IPAddress: {},
                    ComputerName: {},
                    AssociationStatus: {},
                    LastAssociationExecutionDate: {
                      type: "timestamp"
                    },
                    LastSuccessfulAssociationExecutionDate: {
                      type: "timestamp"
                    },
                    AssociationOverview: {
                      type: "structure",
                      members: {
                        DetailedStatus: {},
                        InstanceAssociationStatusAggregatedCount: {
                          type: "map",
                          key: {},
                          value: {
                            type: "integer"
                          }
                        }
                      }
                    },
                    SourceId: {},
                    SourceType: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeInstancePatchStates: {
          input: {
            type: "structure",
            required: [
              "InstanceIds"
            ],
            members: {
              InstanceIds: {
                shape: "Si"
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              InstancePatchStates: {
                type: "list",
                member: {
                  shape: "Scn"
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeInstancePatchStatesForPatchGroup: {
          input: {
            type: "structure",
            required: [
              "PatchGroup"
            ],
            members: {
              PatchGroup: {},
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values",
                    "Type"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    },
                    Type: {}
                  }
                }
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              InstancePatchStates: {
                type: "list",
                member: {
                  shape: "Scn"
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeInstancePatches: {
          input: {
            type: "structure",
            required: [
              "InstanceId"
            ],
            members: {
              InstanceId: {},
              Filters: {
                shape: "Sa5"
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Patches: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Title",
                    "KBId",
                    "Classification",
                    "Severity",
                    "State",
                    "InstalledTime"
                  ],
                  members: {
                    Title: {},
                    KBId: {},
                    Classification: {},
                    Severity: {},
                    State: {},
                    InstalledTime: {
                      type: "timestamp"
                    },
                    CVEIds: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeInventoryDeletions: {
          input: {
            type: "structure",
            members: {
              DeletionId: {},
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              InventoryDeletions: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    DeletionId: {},
                    TypeName: {},
                    DeletionStartTime: {
                      type: "timestamp"
                    },
                    LastStatus: {},
                    LastStatusMessage: {},
                    DeletionSummary: {
                      shape: "S72"
                    },
                    LastStatusUpdateTime: {
                      type: "timestamp"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindowExecutionTaskInvocations: {
          input: {
            type: "structure",
            required: [
              "WindowExecutionId",
              "TaskId"
            ],
            members: {
              WindowExecutionId: {},
              TaskId: {},
              Filters: {
                shape: "Sdt"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowExecutionTaskInvocationIdentities: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowExecutionId: {},
                    TaskExecutionId: {},
                    InvocationId: {},
                    ExecutionId: {},
                    TaskType: {},
                    Parameters: {
                      shape: "Se5"
                    },
                    Status: {},
                    StatusDetails: {},
                    StartTime: {
                      type: "timestamp"
                    },
                    EndTime: {
                      type: "timestamp"
                    },
                    OwnerInformation: {
                      shape: "Scq"
                    },
                    WindowTargetId: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindowExecutionTasks: {
          input: {
            type: "structure",
            required: [
              "WindowExecutionId"
            ],
            members: {
              WindowExecutionId: {},
              Filters: {
                shape: "Sdt"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowExecutionTaskIdentities: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowExecutionId: {},
                    TaskExecutionId: {},
                    Status: {},
                    StatusDetails: {},
                    StartTime: {
                      type: "timestamp"
                    },
                    EndTime: {
                      type: "timestamp"
                    },
                    TaskArn: {},
                    TaskType: {},
                    AlarmConfiguration: {
                      shape: "S1z"
                    },
                    TriggeredAlarms: {
                      shape: "S2n"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindowExecutions: {
          input: {
            type: "structure",
            required: [
              "WindowId"
            ],
            members: {
              WindowId: {},
              Filters: {
                shape: "Sdt"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowExecutions: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowId: {},
                    WindowExecutionId: {},
                    Status: {},
                    StatusDetails: {},
                    StartTime: {
                      type: "timestamp"
                    },
                    EndTime: {
                      type: "timestamp"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindowSchedule: {
          input: {
            type: "structure",
            members: {
              WindowId: {},
              Targets: {
                shape: "S18"
              },
              ResourceType: {},
              Filters: {
                shape: "Sa5"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              ScheduledWindowExecutions: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowId: {},
                    Name: {},
                    ExecutionTime: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindowTargets: {
          input: {
            type: "structure",
            required: [
              "WindowId"
            ],
            members: {
              WindowId: {},
              Filters: {
                shape: "Sdt"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Targets: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowId: {},
                    WindowTargetId: {},
                    ResourceType: {},
                    Targets: {
                      shape: "S18"
                    },
                    OwnerInformation: {
                      shape: "Scq"
                    },
                    Name: {},
                    Description: {
                      shape: "S4a"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindowTasks: {
          input: {
            type: "structure",
            required: [
              "WindowId"
            ],
            members: {
              WindowId: {},
              Filters: {
                shape: "Sdt"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Tasks: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowId: {},
                    WindowTaskId: {},
                    TaskArn: {},
                    Type: {},
                    Targets: {
                      shape: "S18"
                    },
                    TaskParameters: {
                      shape: "Sew"
                    },
                    Priority: {
                      type: "integer"
                    },
                    LoggingInfo: {
                      shape: "Sf2"
                    },
                    ServiceRoleArn: {},
                    MaxConcurrency: {},
                    MaxErrors: {},
                    Name: {},
                    Description: {
                      shape: "S4a"
                    },
                    CutoffBehavior: {},
                    AlarmConfiguration: {
                      shape: "S1z"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindows: {
          input: {
            type: "structure",
            members: {
              Filters: {
                shape: "Sdt"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowIdentities: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowId: {},
                    Name: {},
                    Description: {
                      shape: "S4a"
                    },
                    Enabled: {
                      type: "boolean"
                    },
                    Duration: {
                      type: "integer"
                    },
                    Cutoff: {
                      type: "integer"
                    },
                    Schedule: {},
                    ScheduleTimezone: {},
                    ScheduleOffset: {
                      type: "integer"
                    },
                    EndDate: {},
                    StartDate: {},
                    NextExecutionTime: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeMaintenanceWindowsForTarget: {
          input: {
            type: "structure",
            required: [
              "Targets",
              "ResourceType"
            ],
            members: {
              Targets: {
                shape: "S18"
              },
              ResourceType: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowIdentities: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    WindowId: {},
                    Name: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeOpsItems: {
          input: {
            type: "structure",
            members: {
              OpsItemFilters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values",
                    "Operator"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    },
                    Operator: {}
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              NextToken: {},
              OpsItemSummaries: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    CreatedBy: {},
                    CreatedTime: {
                      type: "timestamp"
                    },
                    LastModifiedBy: {},
                    LastModifiedTime: {
                      type: "timestamp"
                    },
                    Priority: {
                      type: "integer"
                    },
                    Source: {},
                    Status: {},
                    OpsItemId: {},
                    Title: {},
                    OperationalData: {
                      shape: "S4o"
                    },
                    Category: {},
                    Severity: {},
                    OpsItemType: {},
                    ActualStartTime: {
                      type: "timestamp"
                    },
                    ActualEndTime: {
                      type: "timestamp"
                    },
                    PlannedStartTime: {
                      type: "timestamp"
                    },
                    PlannedEndTime: {
                      type: "timestamp"
                    }
                  }
                }
              }
            }
          }
        },
        DescribeParameters: {
          input: {
            type: "structure",
            members: {
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    }
                  }
                }
              },
              ParameterFilters: {
                shape: "Sfw"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Parameters: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Name: {},
                    Type: {},
                    KeyId: {},
                    LastModifiedDate: {
                      type: "timestamp"
                    },
                    LastModifiedUser: {},
                    Description: {},
                    AllowedPattern: {},
                    Version: {
                      type: "long"
                    },
                    Tier: {},
                    Policies: {
                      shape: "Sgb"
                    },
                    DataType: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribePatchBaselines: {
          input: {
            type: "structure",
            members: {
              Filters: {
                shape: "Sa5"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineIdentities: {
                type: "list",
                member: {
                  shape: "Sgh"
                }
              },
              NextToken: {}
            }
          }
        },
        DescribePatchGroupState: {
          input: {
            type: "structure",
            required: [
              "PatchGroup"
            ],
            members: {
              PatchGroup: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Instances: {
                type: "integer"
              },
              InstancesWithInstalledPatches: {
                type: "integer"
              },
              InstancesWithInstalledOtherPatches: {
                type: "integer"
              },
              InstancesWithInstalledPendingRebootPatches: {
                type: "integer"
              },
              InstancesWithInstalledRejectedPatches: {
                type: "integer"
              },
              InstancesWithMissingPatches: {
                type: "integer"
              },
              InstancesWithFailedPatches: {
                type: "integer"
              },
              InstancesWithNotApplicablePatches: {
                type: "integer"
              },
              InstancesWithUnreportedNotApplicablePatches: {
                type: "integer"
              },
              InstancesWithCriticalNonCompliantPatches: {
                type: "integer"
              },
              InstancesWithSecurityNonCompliantPatches: {
                type: "integer"
              },
              InstancesWithOtherNonCompliantPatches: {
                type: "integer"
              }
            }
          }
        },
        DescribePatchGroups: {
          input: {
            type: "structure",
            members: {
              MaxResults: {
                type: "integer"
              },
              Filters: {
                shape: "Sa5"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Mappings: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    PatchGroup: {},
                    BaselineIdentity: {
                      shape: "Sgh"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DescribePatchProperties: {
          input: {
            type: "structure",
            required: [
              "OperatingSystem",
              "Property"
            ],
            members: {
              OperatingSystem: {},
              Property: {},
              PatchSet: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Properties: {
                type: "list",
                member: {
                  type: "map",
                  key: {},
                  value: {}
                }
              },
              NextToken: {}
            }
          }
        },
        DescribeSessions: {
          input: {
            type: "structure",
            required: [
              "State"
            ],
            members: {
              State: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {},
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "key",
                    "value"
                  ],
                  members: {
                    key: {},
                    value: {}
                  }
                }
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Sessions: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    SessionId: {},
                    Target: {},
                    Status: {},
                    StartDate: {
                      type: "timestamp"
                    },
                    EndDate: {
                      type: "timestamp"
                    },
                    DocumentName: {},
                    Owner: {},
                    Reason: {},
                    Details: {},
                    OutputUrl: {
                      type: "structure",
                      members: {
                        S3OutputUrl: {},
                        CloudWatchOutputUrl: {}
                      }
                    },
                    MaxSessionDuration: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        DisassociateOpsItemRelatedItem: {
          input: {
            type: "structure",
            required: [
              "OpsItemId",
              "AssociationId"
            ],
            members: {
              OpsItemId: {},
              AssociationId: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        GetAutomationExecution: {
          input: {
            type: "structure",
            required: [
              "AutomationExecutionId"
            ],
            members: {
              AutomationExecutionId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AutomationExecution: {
                type: "structure",
                members: {
                  AutomationExecutionId: {},
                  DocumentName: {},
                  DocumentVersion: {},
                  ExecutionStartTime: {
                    type: "timestamp"
                  },
                  ExecutionEndTime: {
                    type: "timestamp"
                  },
                  AutomationExecutionStatus: {},
                  StepExecutions: {
                    shape: "S9v"
                  },
                  StepExecutionsTruncated: {
                    type: "boolean"
                  },
                  Parameters: {
                    shape: "S9c"
                  },
                  Outputs: {
                    shape: "S9c"
                  },
                  FailureMessage: {},
                  Mode: {},
                  ParentAutomationExecutionId: {},
                  ExecutedBy: {},
                  CurrentStepName: {},
                  CurrentAction: {},
                  TargetParameterName: {},
                  Targets: {
                    shape: "S18"
                  },
                  TargetMaps: {
                    shape: "S25"
                  },
                  ResolvedTargets: {
                    shape: "S9h"
                  },
                  MaxConcurrency: {},
                  MaxErrors: {},
                  Target: {},
                  TargetLocations: {
                    shape: "S1s"
                  },
                  ProgressCounters: {
                    type: "structure",
                    members: {
                      TotalSteps: {
                        type: "integer"
                      },
                      SuccessSteps: {
                        type: "integer"
                      },
                      FailedSteps: {
                        type: "integer"
                      },
                      CancelledSteps: {
                        type: "integer"
                      },
                      TimedOutSteps: {
                        type: "integer"
                      }
                    }
                  },
                  AlarmConfiguration: {
                    shape: "S1z"
                  },
                  TriggeredAlarms: {
                    shape: "S2n"
                  },
                  AutomationSubtype: {},
                  ScheduledTime: {
                    type: "timestamp"
                  },
                  Runbooks: {
                    shape: "S9l"
                  },
                  OpsItemId: {},
                  AssociationId: {},
                  ChangeRequestName: {}
                }
              }
            }
          }
        },
        GetCalendarState: {
          input: {
            type: "structure",
            required: [
              "CalendarNames"
            ],
            members: {
              CalendarNames: {
                shape: "S1q"
              },
              AtTime: {}
            }
          },
          output: {
            type: "structure",
            members: {
              State: {},
              AtTime: {},
              NextTransitionTime: {}
            }
          }
        },
        GetCommandInvocation: {
          input: {
            type: "structure",
            required: [
              "CommandId",
              "InstanceId"
            ],
            members: {
              CommandId: {},
              InstanceId: {},
              PluginName: {}
            }
          },
          output: {
            type: "structure",
            members: {
              CommandId: {},
              InstanceId: {},
              Comment: {},
              DocumentName: {},
              DocumentVersion: {},
              PluginName: {},
              ResponseCode: {
                type: "integer"
              },
              ExecutionStartDateTime: {},
              ExecutionElapsedTime: {},
              ExecutionEndDateTime: {},
              Status: {},
              StatusDetails: {},
              StandardOutputContent: {},
              StandardOutputUrl: {},
              StandardErrorContent: {},
              StandardErrorUrl: {},
              CloudWatchOutputConfig: {
                shape: "Si2"
              }
            }
          }
        },
        GetConnectionStatus: {
          input: {
            type: "structure",
            required: [
              "Target"
            ],
            members: {
              Target: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Target: {},
              Status: {}
            }
          }
        },
        GetDefaultPatchBaseline: {
          input: {
            type: "structure",
            members: {
              OperatingSystem: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {},
              OperatingSystem: {}
            }
          }
        },
        GetDeployablePatchSnapshotForInstance: {
          input: {
            type: "structure",
            required: [
              "InstanceId",
              "SnapshotId"
            ],
            members: {
              InstanceId: {},
              SnapshotId: {},
              BaselineOverride: {
                type: "structure",
                members: {
                  OperatingSystem: {},
                  GlobalFilters: {
                    shape: "S5f"
                  },
                  ApprovalRules: {
                    shape: "S5l"
                  },
                  ApprovedPatches: {
                    shape: "S5r"
                  },
                  ApprovedPatchesComplianceLevel: {},
                  RejectedPatches: {
                    shape: "S5r"
                  },
                  RejectedPatchesAction: {},
                  ApprovedPatchesEnableNonSecurity: {
                    type: "boolean"
                  },
                  Sources: {
                    shape: "S5v"
                  }
                }
              }
            }
          },
          output: {
            type: "structure",
            members: {
              InstanceId: {},
              SnapshotId: {},
              SnapshotDownloadUrl: {},
              Product: {}
            }
          }
        },
        GetDocument: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              VersionName: {},
              DocumentVersion: {},
              DocumentFormat: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Name: {},
              CreatedDate: {
                type: "timestamp"
              },
              DisplayName: {},
              VersionName: {},
              DocumentVersion: {},
              Status: {},
              StatusInformation: {},
              Content: {},
              DocumentType: {},
              DocumentFormat: {},
              Requires: {
                shape: "S31"
              },
              AttachmentsContent: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Name: {},
                    Size: {
                      type: "long"
                    },
                    Hash: {},
                    HashType: {},
                    Url: {}
                  }
                }
              },
              ReviewStatus: {}
            }
          }
        },
        GetInventory: {
          input: {
            type: "structure",
            members: {
              Filters: {
                shape: "Sio"
              },
              Aggregators: {
                shape: "Siu"
              },
              ResultAttributes: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "TypeName"
                  ],
                  members: {
                    TypeName: {}
                  }
                }
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Entities: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Id: {},
                    Data: {
                      type: "map",
                      key: {},
                      value: {
                        type: "structure",
                        required: [
                          "TypeName",
                          "SchemaVersion",
                          "Content"
                        ],
                        members: {
                          TypeName: {},
                          SchemaVersion: {},
                          CaptureTime: {},
                          ContentHash: {},
                          Content: {
                            shape: "Sjb"
                          }
                        }
                      }
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        GetInventorySchema: {
          input: {
            type: "structure",
            members: {
              TypeName: {},
              NextToken: {},
              MaxResults: {
                type: "integer"
              },
              Aggregator: {
                type: "boolean"
              },
              SubType: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Schemas: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "TypeName",
                    "Attributes"
                  ],
                  members: {
                    TypeName: {},
                    Version: {},
                    Attributes: {
                      type: "list",
                      member: {
                        type: "structure",
                        required: [
                          "Name",
                          "DataType"
                        ],
                        members: {
                          Name: {},
                          DataType: {}
                        }
                      }
                    },
                    DisplayName: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        GetMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "WindowId"
            ],
            members: {
              WindowId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {},
              Name: {},
              Description: {
                shape: "S4a"
              },
              StartDate: {},
              EndDate: {},
              Schedule: {},
              ScheduleTimezone: {},
              ScheduleOffset: {
                type: "integer"
              },
              NextExecutionTime: {},
              Duration: {
                type: "integer"
              },
              Cutoff: {
                type: "integer"
              },
              AllowUnassociatedTargets: {
                type: "boolean"
              },
              Enabled: {
                type: "boolean"
              },
              CreatedDate: {
                type: "timestamp"
              },
              ModifiedDate: {
                type: "timestamp"
              }
            }
          }
        },
        GetMaintenanceWindowExecution: {
          input: {
            type: "structure",
            required: [
              "WindowExecutionId"
            ],
            members: {
              WindowExecutionId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowExecutionId: {},
              TaskIds: {
                type: "list",
                member: {}
              },
              Status: {},
              StatusDetails: {},
              StartTime: {
                type: "timestamp"
              },
              EndTime: {
                type: "timestamp"
              }
            }
          }
        },
        GetMaintenanceWindowExecutionTask: {
          input: {
            type: "structure",
            required: [
              "WindowExecutionId",
              "TaskId"
            ],
            members: {
              WindowExecutionId: {},
              TaskId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowExecutionId: {},
              TaskExecutionId: {},
              TaskArn: {},
              ServiceRole: {},
              Type: {},
              TaskParameters: {
                type: "list",
                member: {
                  shape: "Sew"
                },
                sensitive: true
              },
              Priority: {
                type: "integer"
              },
              MaxConcurrency: {},
              MaxErrors: {},
              Status: {},
              StatusDetails: {},
              StartTime: {
                type: "timestamp"
              },
              EndTime: {
                type: "timestamp"
              },
              AlarmConfiguration: {
                shape: "S1z"
              },
              TriggeredAlarms: {
                shape: "S2n"
              }
            }
          }
        },
        GetMaintenanceWindowExecutionTaskInvocation: {
          input: {
            type: "structure",
            required: [
              "WindowExecutionId",
              "TaskId",
              "InvocationId"
            ],
            members: {
              WindowExecutionId: {},
              TaskId: {},
              InvocationId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowExecutionId: {},
              TaskExecutionId: {},
              InvocationId: {},
              ExecutionId: {},
              TaskType: {},
              Parameters: {
                shape: "Se5"
              },
              Status: {},
              StatusDetails: {},
              StartTime: {
                type: "timestamp"
              },
              EndTime: {
                type: "timestamp"
              },
              OwnerInformation: {
                shape: "Scq"
              },
              WindowTargetId: {}
            }
          }
        },
        GetMaintenanceWindowTask: {
          input: {
            type: "structure",
            required: [
              "WindowId",
              "WindowTaskId"
            ],
            members: {
              WindowId: {},
              WindowTaskId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {},
              WindowTaskId: {},
              Targets: {
                shape: "S18"
              },
              TaskArn: {},
              ServiceRoleArn: {},
              TaskType: {},
              TaskParameters: {
                shape: "Sew"
              },
              TaskInvocationParameters: {
                shape: "Sk2"
              },
              Priority: {
                type: "integer"
              },
              MaxConcurrency: {},
              MaxErrors: {},
              LoggingInfo: {
                shape: "Sf2"
              },
              Name: {},
              Description: {
                shape: "S4a"
              },
              CutoffBehavior: {},
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          }
        },
        GetOpsItem: {
          input: {
            type: "structure",
            required: [
              "OpsItemId"
            ],
            members: {
              OpsItemId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              OpsItem: {
                type: "structure",
                members: {
                  CreatedBy: {},
                  OpsItemType: {},
                  CreatedTime: {
                    type: "timestamp"
                  },
                  Description: {},
                  LastModifiedBy: {},
                  LastModifiedTime: {
                    type: "timestamp"
                  },
                  Notifications: {
                    shape: "S4t"
                  },
                  Priority: {
                    type: "integer"
                  },
                  RelatedOpsItems: {
                    shape: "S4x"
                  },
                  Status: {},
                  OpsItemId: {},
                  Version: {},
                  Title: {},
                  Source: {},
                  OperationalData: {
                    shape: "S4o"
                  },
                  Category: {},
                  Severity: {},
                  ActualStartTime: {
                    type: "timestamp"
                  },
                  ActualEndTime: {
                    type: "timestamp"
                  },
                  PlannedStartTime: {
                    type: "timestamp"
                  },
                  PlannedEndTime: {
                    type: "timestamp"
                  }
                }
              }
            }
          }
        },
        GetOpsMetadata: {
          input: {
            type: "structure",
            required: [
              "OpsMetadataArn"
            ],
            members: {
              OpsMetadataArn: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              ResourceId: {},
              Metadata: {
                shape: "S56"
              },
              NextToken: {}
            }
          }
        },
        GetOpsSummary: {
          input: {
            type: "structure",
            members: {
              SyncName: {},
              Filters: {
                shape: "Skp"
              },
              Aggregators: {
                shape: "Skv"
              },
              ResultAttributes: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "TypeName"
                  ],
                  members: {
                    TypeName: {}
                  }
                }
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Entities: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Id: {},
                    Data: {
                      type: "map",
                      key: {},
                      value: {
                        type: "structure",
                        members: {
                          CaptureTime: {},
                          Content: {
                            type: "list",
                            member: {
                              type: "map",
                              key: {},
                              value: {}
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        GetParameter: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              WithDecryption: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Parameter: {
                shape: "Slh"
              }
            }
          }
        },
        GetParameterHistory: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              WithDecryption: {
                type: "boolean"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Parameters: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Name: {},
                    Type: {},
                    KeyId: {},
                    LastModifiedDate: {
                      type: "timestamp"
                    },
                    LastModifiedUser: {},
                    Description: {},
                    Value: {
                      shape: "Sli"
                    },
                    AllowedPattern: {},
                    Version: {
                      type: "long"
                    },
                    Labels: {
                      shape: "Slo"
                    },
                    Tier: {},
                    Policies: {
                      shape: "Sgb"
                    },
                    DataType: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        GetParameters: {
          input: {
            type: "structure",
            required: [
              "Names"
            ],
            members: {
              Names: {
                shape: "S7h"
              },
              WithDecryption: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Parameters: {
                shape: "Sls"
              },
              InvalidParameters: {
                shape: "S7h"
              }
            }
          }
        },
        GetParametersByPath: {
          input: {
            type: "structure",
            required: [
              "Path"
            ],
            members: {
              Path: {},
              Recursive: {
                type: "boolean"
              },
              ParameterFilters: {
                shape: "Sfw"
              },
              WithDecryption: {
                type: "boolean"
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Parameters: {
                shape: "Sls"
              },
              NextToken: {}
            }
          }
        },
        GetPatchBaseline: {
          input: {
            type: "structure",
            required: [
              "BaselineId"
            ],
            members: {
              BaselineId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {},
              Name: {},
              OperatingSystem: {},
              GlobalFilters: {
                shape: "S5f"
              },
              ApprovalRules: {
                shape: "S5l"
              },
              ApprovedPatches: {
                shape: "S5r"
              },
              ApprovedPatchesComplianceLevel: {},
              ApprovedPatchesEnableNonSecurity: {
                type: "boolean"
              },
              RejectedPatches: {
                shape: "S5r"
              },
              RejectedPatchesAction: {},
              PatchGroups: {
                type: "list",
                member: {}
              },
              CreatedDate: {
                type: "timestamp"
              },
              ModifiedDate: {
                type: "timestamp"
              },
              Description: {},
              Sources: {
                shape: "S5v"
              }
            }
          }
        },
        GetPatchBaselineForPatchGroup: {
          input: {
            type: "structure",
            required: [
              "PatchGroup"
            ],
            members: {
              PatchGroup: {},
              OperatingSystem: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {},
              PatchGroup: {},
              OperatingSystem: {}
            }
          }
        },
        GetServiceSetting: {
          input: {
            type: "structure",
            required: [
              "SettingId"
            ],
            members: {
              SettingId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              ServiceSetting: {
                shape: "Sm4"
              }
            }
          }
        },
        LabelParameterVersion: {
          input: {
            type: "structure",
            required: [
              "Name",
              "Labels"
            ],
            members: {
              Name: {},
              ParameterVersion: {
                type: "long"
              },
              Labels: {
                shape: "Slo"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              InvalidLabels: {
                shape: "Slo"
              },
              ParameterVersion: {
                type: "long"
              }
            }
          }
        },
        ListAssociationVersions: {
          input: {
            type: "structure",
            required: [
              "AssociationId"
            ],
            members: {
              AssociationId: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationVersions: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    AssociationId: {},
                    AssociationVersion: {},
                    CreatedDate: {
                      type: "timestamp"
                    },
                    Name: {},
                    DocumentVersion: {},
                    Parameters: {
                      shape: "S14"
                    },
                    Targets: {
                      shape: "S18"
                    },
                    ScheduleExpression: {},
                    OutputLocation: {
                      shape: "S1e"
                    },
                    AssociationName: {},
                    MaxErrors: {},
                    MaxConcurrency: {},
                    ComplianceSeverity: {},
                    SyncCompliance: {},
                    ApplyOnlyAtCronInterval: {
                      type: "boolean"
                    },
                    CalendarNames: {
                      shape: "S1q"
                    },
                    TargetLocations: {
                      shape: "S1s"
                    },
                    ScheduleOffset: {
                      type: "integer"
                    },
                    TargetMaps: {
                      shape: "S25"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListAssociations: {
          input: {
            type: "structure",
            members: {
              AssociationFilterList: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "key",
                    "value"
                  ],
                  members: {
                    key: {},
                    value: {}
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Associations: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Name: {},
                    InstanceId: {},
                    AssociationId: {},
                    AssociationVersion: {},
                    DocumentVersion: {},
                    Targets: {
                      shape: "S18"
                    },
                    LastExecutionDate: {
                      type: "timestamp"
                    },
                    Overview: {
                      shape: "S2i"
                    },
                    ScheduleExpression: {},
                    AssociationName: {},
                    ScheduleOffset: {
                      type: "integer"
                    },
                    TargetMaps: {
                      shape: "S25"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListCommandInvocations: {
          input: {
            type: "structure",
            members: {
              CommandId: {},
              InstanceId: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {},
              Filters: {
                shape: "Smm"
              },
              Details: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              CommandInvocations: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    CommandId: {},
                    InstanceId: {},
                    InstanceName: {},
                    Comment: {},
                    DocumentName: {},
                    DocumentVersion: {},
                    RequestedDateTime: {
                      type: "timestamp"
                    },
                    Status: {},
                    StatusDetails: {},
                    TraceOutput: {},
                    StandardOutputUrl: {},
                    StandardErrorUrl: {},
                    CommandPlugins: {
                      type: "list",
                      member: {
                        type: "structure",
                        members: {
                          Name: {},
                          Status: {},
                          StatusDetails: {},
                          ResponseCode: {
                            type: "integer"
                          },
                          ResponseStartDateTime: {
                            type: "timestamp"
                          },
                          ResponseFinishDateTime: {
                            type: "timestamp"
                          },
                          Output: {},
                          StandardOutputUrl: {},
                          StandardErrorUrl: {},
                          OutputS3Region: {},
                          OutputS3BucketName: {},
                          OutputS3KeyPrefix: {}
                        }
                      }
                    },
                    ServiceRole: {},
                    NotificationConfig: {
                      shape: "Sk4"
                    },
                    CloudWatchOutputConfig: {
                      shape: "Si2"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListCommands: {
          input: {
            type: "structure",
            members: {
              CommandId: {},
              InstanceId: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {},
              Filters: {
                shape: "Smm"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Commands: {
                type: "list",
                member: {
                  shape: "Sn2"
                }
              },
              NextToken: {}
            }
          }
        },
        ListComplianceItems: {
          input: {
            type: "structure",
            members: {
              Filters: {
                shape: "Sn9"
              },
              ResourceIds: {
                type: "list",
                member: {}
              },
              ResourceTypes: {
                type: "list",
                member: {}
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              ComplianceItems: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    ComplianceType: {},
                    ResourceType: {},
                    ResourceId: {},
                    Id: {},
                    Title: {},
                    Status: {},
                    Severity: {},
                    ExecutionSummary: {
                      shape: "Snr"
                    },
                    Details: {
                      shape: "Snu"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListComplianceSummaries: {
          input: {
            type: "structure",
            members: {
              Filters: {
                shape: "Sn9"
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              ComplianceSummaryItems: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    ComplianceType: {},
                    CompliantSummary: {
                      shape: "Snz"
                    },
                    NonCompliantSummary: {
                      shape: "So2"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListDocumentMetadataHistory: {
          input: {
            type: "structure",
            required: [
              "Name",
              "Metadata"
            ],
            members: {
              Name: {},
              DocumentVersion: {},
              Metadata: {},
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Name: {},
              DocumentVersion: {},
              Author: {},
              Metadata: {
                type: "structure",
                members: {
                  ReviewerResponse: {
                    type: "list",
                    member: {
                      type: "structure",
                      members: {
                        CreateTime: {
                          type: "timestamp"
                        },
                        UpdatedTime: {
                          type: "timestamp"
                        },
                        ReviewStatus: {},
                        Comment: {
                          shape: "So9"
                        },
                        Reviewer: {}
                      }
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListDocumentVersions: {
          input: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              DocumentVersions: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Name: {},
                    DisplayName: {},
                    DocumentVersion: {},
                    VersionName: {},
                    CreatedDate: {
                      type: "timestamp"
                    },
                    IsDefaultVersion: {
                      type: "boolean"
                    },
                    DocumentFormat: {},
                    Status: {},
                    StatusInformation: {},
                    ReviewStatus: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListDocuments: {
          input: {
            type: "structure",
            members: {
              DocumentFilterList: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "key",
                    "value"
                  ],
                  members: {
                    key: {},
                    value: {}
                  }
                }
              },
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    }
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              DocumentIdentifiers: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    Name: {},
                    CreatedDate: {
                      type: "timestamp"
                    },
                    DisplayName: {},
                    Owner: {},
                    VersionName: {},
                    PlatformTypes: {
                      shape: "S3u"
                    },
                    DocumentVersion: {},
                    DocumentType: {},
                    SchemaVersion: {},
                    DocumentFormat: {},
                    TargetType: {},
                    Tags: {
                      shape: "S4"
                    },
                    Requires: {
                      shape: "S31"
                    },
                    ReviewStatus: {},
                    Author: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListInventoryEntries: {
          input: {
            type: "structure",
            required: [
              "InstanceId",
              "TypeName"
            ],
            members: {
              InstanceId: {},
              TypeName: {},
              Filters: {
                shape: "Sio"
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              TypeName: {},
              InstanceId: {},
              SchemaVersion: {},
              CaptureTime: {},
              Entries: {
                shape: "Sjb"
              },
              NextToken: {}
            }
          }
        },
        ListOpsItemEvents: {
          input: {
            type: "structure",
            members: {
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values",
                    "Operator"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    },
                    Operator: {}
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              NextToken: {},
              Summaries: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    OpsItemId: {},
                    EventId: {},
                    Source: {},
                    DetailType: {},
                    Detail: {},
                    CreatedBy: {
                      shape: "Sp7"
                    },
                    CreatedTime: {
                      type: "timestamp"
                    }
                  }
                }
              }
            }
          }
        },
        ListOpsItemRelatedItems: {
          input: {
            type: "structure",
            members: {
              OpsItemId: {},
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values",
                    "Operator"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    },
                    Operator: {}
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              NextToken: {},
              Summaries: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    OpsItemId: {},
                    AssociationId: {},
                    ResourceType: {},
                    AssociationType: {},
                    ResourceUri: {},
                    CreatedBy: {
                      shape: "Sp7"
                    },
                    CreatedTime: {
                      type: "timestamp"
                    },
                    LastModifiedBy: {
                      shape: "Sp7"
                    },
                    LastModifiedTime: {
                      type: "timestamp"
                    }
                  }
                }
              }
            }
          }
        },
        ListOpsMetadata: {
          input: {
            type: "structure",
            members: {
              Filters: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Key",
                    "Values"
                  ],
                  members: {
                    Key: {},
                    Values: {
                      type: "list",
                      member: {}
                    }
                  }
                }
              },
              MaxResults: {
                type: "integer"
              },
              NextToken: {}
            }
          },
          output: {
            type: "structure",
            members: {
              OpsMetadataList: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    ResourceId: {},
                    OpsMetadataArn: {},
                    LastModifiedDate: {
                      type: "timestamp"
                    },
                    LastModifiedUser: {},
                    CreationDate: {
                      type: "timestamp"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListResourceComplianceSummaries: {
          input: {
            type: "structure",
            members: {
              Filters: {
                shape: "Sn9"
              },
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              ResourceComplianceSummaryItems: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    ComplianceType: {},
                    ResourceType: {},
                    ResourceId: {},
                    Status: {},
                    OverallSeverity: {},
                    ExecutionSummary: {
                      shape: "Snr"
                    },
                    CompliantSummary: {
                      shape: "Snz"
                    },
                    NonCompliantSummary: {
                      shape: "So2"
                    }
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListResourceDataSync: {
          input: {
            type: "structure",
            members: {
              SyncType: {},
              NextToken: {},
              MaxResults: {
                type: "integer"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              ResourceDataSyncItems: {
                type: "list",
                member: {
                  type: "structure",
                  members: {
                    SyncName: {},
                    SyncType: {},
                    SyncSource: {
                      type: "structure",
                      members: {
                        SourceType: {},
                        AwsOrganizationsSource: {
                          shape: "S6g"
                        },
                        SourceRegions: {
                          shape: "S6l"
                        },
                        IncludeFutureRegions: {
                          type: "boolean"
                        },
                        State: {},
                        EnableAllOpsDataSources: {
                          type: "boolean"
                        }
                      }
                    },
                    S3Destination: {
                      shape: "S65"
                    },
                    LastSyncTime: {
                      type: "timestamp"
                    },
                    LastSuccessfulSyncTime: {
                      type: "timestamp"
                    },
                    SyncLastModifiedTime: {
                      type: "timestamp"
                    },
                    LastStatus: {},
                    SyncCreatedTime: {
                      type: "timestamp"
                    },
                    LastSyncStatusMessage: {}
                  }
                }
              },
              NextToken: {}
            }
          }
        },
        ListTagsForResource: {
          input: {
            type: "structure",
            required: [
              "ResourceType",
              "ResourceId"
            ],
            members: {
              ResourceType: {},
              ResourceId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              TagList: {
                shape: "S4"
              }
            }
          }
        },
        ModifyDocumentPermission: {
          input: {
            type: "structure",
            required: [
              "Name",
              "PermissionType"
            ],
            members: {
              Name: {},
              PermissionType: {},
              AccountIdsToAdd: {
                shape: "Sb8"
              },
              AccountIdsToRemove: {
                shape: "Sb8"
              },
              SharedDocumentVersion: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        PutComplianceItems: {
          input: {
            type: "structure",
            required: [
              "ResourceId",
              "ResourceType",
              "ComplianceType",
              "ExecutionSummary",
              "Items"
            ],
            members: {
              ResourceId: {},
              ResourceType: {},
              ComplianceType: {},
              ExecutionSummary: {
                shape: "Snr"
              },
              Items: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Severity",
                    "Status"
                  ],
                  members: {
                    Id: {},
                    Title: {},
                    Severity: {},
                    Status: {},
                    Details: {
                      shape: "Snu"
                    }
                  }
                }
              },
              ItemContentHash: {},
              UploadType: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        PutInventory: {
          input: {
            type: "structure",
            required: [
              "InstanceId",
              "Items"
            ],
            members: {
              InstanceId: {},
              Items: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "TypeName",
                    "SchemaVersion",
                    "CaptureTime"
                  ],
                  members: {
                    TypeName: {},
                    SchemaVersion: {},
                    CaptureTime: {},
                    ContentHash: {},
                    Content: {
                      shape: "Sjb"
                    },
                    Context: {
                      type: "map",
                      key: {},
                      value: {}
                    }
                  }
                }
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Message: {}
            }
          }
        },
        PutParameter: {
          input: {
            type: "structure",
            required: [
              "Name",
              "Value"
            ],
            members: {
              Name: {},
              Description: {},
              Value: {
                shape: "Sli"
              },
              Type: {},
              KeyId: {},
              Overwrite: {
                type: "boolean"
              },
              AllowedPattern: {},
              Tags: {
                shape: "S4"
              },
              Tier: {},
              Policies: {},
              DataType: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Version: {
                type: "long"
              },
              Tier: {}
            }
          }
        },
        RegisterDefaultPatchBaseline: {
          input: {
            type: "structure",
            required: [
              "BaselineId"
            ],
            members: {
              BaselineId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {}
            }
          }
        },
        RegisterPatchBaselineForPatchGroup: {
          input: {
            type: "structure",
            required: [
              "BaselineId",
              "PatchGroup"
            ],
            members: {
              BaselineId: {},
              PatchGroup: {}
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {},
              PatchGroup: {}
            }
          }
        },
        RegisterTargetWithMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "WindowId",
              "ResourceType",
              "Targets"
            ],
            members: {
              WindowId: {},
              ResourceType: {},
              Targets: {
                shape: "S18"
              },
              OwnerInformation: {
                shape: "Scq"
              },
              Name: {},
              Description: {
                shape: "S4a"
              },
              ClientToken: {
                idempotencyToken: true
              }
            }
          },
          output: {
            type: "structure",
            members: {
              WindowTargetId: {}
            }
          }
        },
        RegisterTaskWithMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "WindowId",
              "TaskArn",
              "TaskType"
            ],
            members: {
              WindowId: {},
              Targets: {
                shape: "S18"
              },
              TaskArn: {},
              ServiceRoleArn: {},
              TaskType: {},
              TaskParameters: {
                shape: "Sew"
              },
              TaskInvocationParameters: {
                shape: "Sk2"
              },
              Priority: {
                type: "integer"
              },
              MaxConcurrency: {},
              MaxErrors: {},
              LoggingInfo: {
                shape: "Sf2"
              },
              Name: {},
              Description: {
                shape: "S4a"
              },
              ClientToken: {
                idempotencyToken: true
              },
              CutoffBehavior: {},
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              WindowTaskId: {}
            }
          }
        },
        RemoveTagsFromResource: {
          input: {
            type: "structure",
            required: [
              "ResourceType",
              "ResourceId",
              "TagKeys"
            ],
            members: {
              ResourceType: {},
              ResourceId: {},
              TagKeys: {
                type: "list",
                member: {}
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        ResetServiceSetting: {
          input: {
            type: "structure",
            required: [
              "SettingId"
            ],
            members: {
              SettingId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              ServiceSetting: {
                shape: "Sm4"
              }
            }
          }
        },
        ResumeSession: {
          input: {
            type: "structure",
            required: [
              "SessionId"
            ],
            members: {
              SessionId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              SessionId: {},
              TokenValue: {},
              StreamUrl: {}
            }
          }
        },
        SendAutomationSignal: {
          input: {
            type: "structure",
            required: [
              "AutomationExecutionId",
              "SignalType"
            ],
            members: {
              AutomationExecutionId: {},
              SignalType: {},
              Payload: {
                shape: "S9c"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        SendCommand: {
          input: {
            type: "structure",
            required: [
              "DocumentName"
            ],
            members: {
              InstanceIds: {
                shape: "Si"
              },
              Targets: {
                shape: "S18"
              },
              DocumentName: {},
              DocumentVersion: {},
              DocumentHash: {},
              DocumentHashType: {},
              TimeoutSeconds: {
                type: "integer"
              },
              Comment: {},
              Parameters: {
                shape: "S14"
              },
              OutputS3Region: {},
              OutputS3BucketName: {},
              OutputS3KeyPrefix: {},
              MaxConcurrency: {},
              MaxErrors: {},
              ServiceRoleArn: {},
              NotificationConfig: {
                shape: "Sk4"
              },
              CloudWatchOutputConfig: {
                shape: "Si2"
              },
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              Command: {
                shape: "Sn2"
              }
            }
          }
        },
        StartAssociationsOnce: {
          input: {
            type: "structure",
            required: [
              "AssociationIds"
            ],
            members: {
              AssociationIds: {
                type: "list",
                member: {}
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        StartAutomationExecution: {
          input: {
            type: "structure",
            required: [
              "DocumentName"
            ],
            members: {
              DocumentName: {},
              DocumentVersion: {},
              Parameters: {
                shape: "S9c"
              },
              ClientToken: {},
              Mode: {},
              TargetParameterName: {},
              Targets: {
                shape: "S18"
              },
              TargetMaps: {
                shape: "S25"
              },
              MaxConcurrency: {},
              MaxErrors: {},
              TargetLocations: {
                shape: "S1s"
              },
              Tags: {
                shape: "S4"
              },
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              AutomationExecutionId: {}
            }
          }
        },
        StartChangeRequestExecution: {
          input: {
            type: "structure",
            required: [
              "DocumentName",
              "Runbooks"
            ],
            members: {
              ScheduledTime: {
                type: "timestamp"
              },
              DocumentName: {},
              DocumentVersion: {},
              Parameters: {
                shape: "S9c"
              },
              ChangeRequestName: {},
              ClientToken: {},
              AutoApprove: {
                type: "boolean"
              },
              Runbooks: {
                shape: "S9l"
              },
              Tags: {
                shape: "S4"
              },
              ScheduledEndTime: {
                type: "timestamp"
              },
              ChangeDetails: {}
            }
          },
          output: {
            type: "structure",
            members: {
              AutomationExecutionId: {}
            }
          }
        },
        StartSession: {
          input: {
            type: "structure",
            required: [
              "Target"
            ],
            members: {
              Target: {},
              DocumentName: {},
              Reason: {},
              Parameters: {
                type: "map",
                key: {},
                value: {
                  type: "list",
                  member: {}
                }
              }
            }
          },
          output: {
            type: "structure",
            members: {
              SessionId: {},
              TokenValue: {},
              StreamUrl: {}
            }
          }
        },
        StopAutomationExecution: {
          input: {
            type: "structure",
            required: [
              "AutomationExecutionId"
            ],
            members: {
              AutomationExecutionId: {},
              Type: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        TerminateSession: {
          input: {
            type: "structure",
            required: [
              "SessionId"
            ],
            members: {
              SessionId: {}
            }
          },
          output: {
            type: "structure",
            members: {
              SessionId: {}
            }
          }
        },
        UnlabelParameterVersion: {
          input: {
            type: "structure",
            required: [
              "Name",
              "ParameterVersion",
              "Labels"
            ],
            members: {
              Name: {},
              ParameterVersion: {
                type: "long"
              },
              Labels: {
                shape: "Slo"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              RemovedLabels: {
                shape: "Slo"
              },
              InvalidLabels: {
                shape: "Slo"
              }
            }
          }
        },
        UpdateAssociation: {
          input: {
            type: "structure",
            required: [
              "AssociationId"
            ],
            members: {
              AssociationId: {},
              Parameters: {
                shape: "S14"
              },
              DocumentVersion: {},
              ScheduleExpression: {},
              OutputLocation: {
                shape: "S1e"
              },
              Name: {},
              Targets: {
                shape: "S18"
              },
              AssociationName: {},
              AssociationVersion: {},
              AutomationTargetParameterName: {},
              MaxErrors: {},
              MaxConcurrency: {},
              ComplianceSeverity: {},
              SyncCompliance: {},
              ApplyOnlyAtCronInterval: {
                type: "boolean"
              },
              CalendarNames: {
                shape: "S1q"
              },
              TargetLocations: {
                shape: "S1s"
              },
              ScheduleOffset: {
                type: "integer"
              },
              TargetMaps: {
                shape: "S25"
              },
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationDescription: {
                shape: "S2b"
              }
            }
          }
        },
        UpdateAssociationStatus: {
          input: {
            type: "structure",
            required: [
              "Name",
              "InstanceId",
              "AssociationStatus"
            ],
            members: {
              Name: {},
              InstanceId: {},
              AssociationStatus: {
                shape: "S2e"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              AssociationDescription: {
                shape: "S2b"
              }
            }
          }
        },
        UpdateDocument: {
          input: {
            type: "structure",
            required: [
              "Content",
              "Name"
            ],
            members: {
              Content: {},
              Attachments: {
                shape: "S33"
              },
              Name: {},
              DisplayName: {},
              VersionName: {},
              DocumentVersion: {},
              DocumentFormat: {},
              TargetType: {}
            }
          },
          output: {
            type: "structure",
            members: {
              DocumentDescription: {
                shape: "S3g"
              }
            }
          }
        },
        UpdateDocumentDefaultVersion: {
          input: {
            type: "structure",
            required: [
              "Name",
              "DocumentVersion"
            ],
            members: {
              Name: {},
              DocumentVersion: {}
            }
          },
          output: {
            type: "structure",
            members: {
              Description: {
                type: "structure",
                members: {
                  Name: {},
                  DefaultVersion: {},
                  DefaultVersionName: {}
                }
              }
            }
          }
        },
        UpdateDocumentMetadata: {
          input: {
            type: "structure",
            required: [
              "Name",
              "DocumentReviews"
            ],
            members: {
              Name: {},
              DocumentVersion: {},
              DocumentReviews: {
                type: "structure",
                required: [
                  "Action"
                ],
                members: {
                  Action: {},
                  Comment: {
                    shape: "So9"
                  }
                }
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        UpdateMaintenanceWindow: {
          input: {
            type: "structure",
            required: [
              "WindowId"
            ],
            members: {
              WindowId: {},
              Name: {},
              Description: {
                shape: "S4a"
              },
              StartDate: {},
              EndDate: {},
              Schedule: {},
              ScheduleTimezone: {},
              ScheduleOffset: {
                type: "integer"
              },
              Duration: {
                type: "integer"
              },
              Cutoff: {
                type: "integer"
              },
              AllowUnassociatedTargets: {
                type: "boolean"
              },
              Enabled: {
                type: "boolean"
              },
              Replace: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {},
              Name: {},
              Description: {
                shape: "S4a"
              },
              StartDate: {},
              EndDate: {},
              Schedule: {},
              ScheduleTimezone: {},
              ScheduleOffset: {
                type: "integer"
              },
              Duration: {
                type: "integer"
              },
              Cutoff: {
                type: "integer"
              },
              AllowUnassociatedTargets: {
                type: "boolean"
              },
              Enabled: {
                type: "boolean"
              }
            }
          }
        },
        UpdateMaintenanceWindowTarget: {
          input: {
            type: "structure",
            required: [
              "WindowId",
              "WindowTargetId"
            ],
            members: {
              WindowId: {},
              WindowTargetId: {},
              Targets: {
                shape: "S18"
              },
              OwnerInformation: {
                shape: "Scq"
              },
              Name: {},
              Description: {
                shape: "S4a"
              },
              Replace: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {},
              WindowTargetId: {},
              Targets: {
                shape: "S18"
              },
              OwnerInformation: {
                shape: "Scq"
              },
              Name: {},
              Description: {
                shape: "S4a"
              }
            }
          }
        },
        UpdateMaintenanceWindowTask: {
          input: {
            type: "structure",
            required: [
              "WindowId",
              "WindowTaskId"
            ],
            members: {
              WindowId: {},
              WindowTaskId: {},
              Targets: {
                shape: "S18"
              },
              TaskArn: {},
              ServiceRoleArn: {},
              TaskParameters: {
                shape: "Sew"
              },
              TaskInvocationParameters: {
                shape: "Sk2"
              },
              Priority: {
                type: "integer"
              },
              MaxConcurrency: {},
              MaxErrors: {},
              LoggingInfo: {
                shape: "Sf2"
              },
              Name: {},
              Description: {
                shape: "S4a"
              },
              Replace: {
                type: "boolean"
              },
              CutoffBehavior: {},
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              WindowId: {},
              WindowTaskId: {},
              Targets: {
                shape: "S18"
              },
              TaskArn: {},
              ServiceRoleArn: {},
              TaskParameters: {
                shape: "Sew"
              },
              TaskInvocationParameters: {
                shape: "Sk2"
              },
              Priority: {
                type: "integer"
              },
              MaxConcurrency: {},
              MaxErrors: {},
              LoggingInfo: {
                shape: "Sf2"
              },
              Name: {},
              Description: {
                shape: "S4a"
              },
              CutoffBehavior: {},
              AlarmConfiguration: {
                shape: "S1z"
              }
            }
          }
        },
        UpdateManagedInstanceRole: {
          input: {
            type: "structure",
            required: [
              "InstanceId",
              "IamRole"
            ],
            members: {
              InstanceId: {},
              IamRole: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        UpdateOpsItem: {
          input: {
            type: "structure",
            required: [
              "OpsItemId"
            ],
            members: {
              Description: {},
              OperationalData: {
                shape: "S4o"
              },
              OperationalDataToDelete: {
                type: "list",
                member: {}
              },
              Notifications: {
                shape: "S4t"
              },
              Priority: {
                type: "integer"
              },
              RelatedOpsItems: {
                shape: "S4x"
              },
              Status: {},
              OpsItemId: {},
              Title: {},
              Category: {},
              Severity: {},
              ActualStartTime: {
                type: "timestamp"
              },
              ActualEndTime: {
                type: "timestamp"
              },
              PlannedStartTime: {
                type: "timestamp"
              },
              PlannedEndTime: {
                type: "timestamp"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        UpdateOpsMetadata: {
          input: {
            type: "structure",
            required: [
              "OpsMetadataArn"
            ],
            members: {
              OpsMetadataArn: {},
              MetadataToUpdate: {
                shape: "S56"
              },
              KeysToDelete: {
                type: "list",
                member: {}
              }
            }
          },
          output: {
            type: "structure",
            members: {
              OpsMetadataArn: {}
            }
          }
        },
        UpdatePatchBaseline: {
          input: {
            type: "structure",
            required: [
              "BaselineId"
            ],
            members: {
              BaselineId: {},
              Name: {},
              GlobalFilters: {
                shape: "S5f"
              },
              ApprovalRules: {
                shape: "S5l"
              },
              ApprovedPatches: {
                shape: "S5r"
              },
              ApprovedPatchesComplianceLevel: {},
              ApprovedPatchesEnableNonSecurity: {
                type: "boolean"
              },
              RejectedPatches: {
                shape: "S5r"
              },
              RejectedPatchesAction: {},
              Description: {},
              Sources: {
                shape: "S5v"
              },
              Replace: {
                type: "boolean"
              }
            }
          },
          output: {
            type: "structure",
            members: {
              BaselineId: {},
              Name: {},
              OperatingSystem: {},
              GlobalFilters: {
                shape: "S5f"
              },
              ApprovalRules: {
                shape: "S5l"
              },
              ApprovedPatches: {
                shape: "S5r"
              },
              ApprovedPatchesComplianceLevel: {},
              ApprovedPatchesEnableNonSecurity: {
                type: "boolean"
              },
              RejectedPatches: {
                shape: "S5r"
              },
              RejectedPatchesAction: {},
              CreatedDate: {
                type: "timestamp"
              },
              ModifiedDate: {
                type: "timestamp"
              },
              Description: {},
              Sources: {
                shape: "S5v"
              }
            }
          }
        },
        UpdateResourceDataSync: {
          input: {
            type: "structure",
            required: [
              "SyncName",
              "SyncType",
              "SyncSource"
            ],
            members: {
              SyncName: {},
              SyncType: {},
              SyncSource: {
                shape: "S6e"
              }
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        },
        UpdateServiceSetting: {
          input: {
            type: "structure",
            required: [
              "SettingId",
              "SettingValue"
            ],
            members: {
              SettingId: {},
              SettingValue: {}
            }
          },
          output: {
            type: "structure",
            members: {}
          }
        }
      },
      shapes: {
        S4: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Key",
              "Value"
            ],
            members: {
              Key: {},
              Value: {}
            }
          }
        },
        Si: {
          type: "list",
          member: {}
        },
        S14: {
          type: "map",
          key: {},
          value: {
            type: "list",
            member: {}
          },
          sensitive: true
        },
        S18: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Key: {},
              Values: {
                type: "list",
                member: {}
              }
            }
          }
        },
        S1e: {
          type: "structure",
          members: {
            S3Location: {
              type: "structure",
              members: {
                OutputS3Region: {},
                OutputS3BucketName: {},
                OutputS3KeyPrefix: {}
              }
            }
          }
        },
        S1q: {
          type: "list",
          member: {}
        },
        S1s: {
          type: "list",
          member: {
            shape: "S1t"
          }
        },
        S1t: {
          type: "structure",
          members: {
            Accounts: {
              type: "list",
              member: {}
            },
            Regions: {
              type: "list",
              member: {}
            },
            TargetLocationMaxConcurrency: {},
            TargetLocationMaxErrors: {},
            ExecutionRoleName: {},
            TargetLocationAlarmConfiguration: {
              shape: "S1z"
            }
          }
        },
        S1z: {
          type: "structure",
          required: [
            "Alarms"
          ],
          members: {
            IgnorePollAlarmFailure: {
              type: "boolean"
            },
            Alarms: {
              type: "list",
              member: {
                type: "structure",
                required: [
                  "Name"
                ],
                members: {
                  Name: {}
                }
              }
            }
          }
        },
        S25: {
          type: "list",
          member: {
            type: "map",
            key: {},
            value: {
              type: "list",
              member: {}
            }
          }
        },
        S2b: {
          type: "structure",
          members: {
            Name: {},
            InstanceId: {},
            AssociationVersion: {},
            Date: {
              type: "timestamp"
            },
            LastUpdateAssociationDate: {
              type: "timestamp"
            },
            Status: {
              shape: "S2e"
            },
            Overview: {
              shape: "S2i"
            },
            DocumentVersion: {},
            AutomationTargetParameterName: {},
            Parameters: {
              shape: "S14"
            },
            AssociationId: {},
            Targets: {
              shape: "S18"
            },
            ScheduleExpression: {},
            OutputLocation: {
              shape: "S1e"
            },
            LastExecutionDate: {
              type: "timestamp"
            },
            LastSuccessfulExecutionDate: {
              type: "timestamp"
            },
            AssociationName: {},
            MaxErrors: {},
            MaxConcurrency: {},
            ComplianceSeverity: {},
            SyncCompliance: {},
            ApplyOnlyAtCronInterval: {
              type: "boolean"
            },
            CalendarNames: {
              shape: "S1q"
            },
            TargetLocations: {
              shape: "S1s"
            },
            ScheduleOffset: {
              type: "integer"
            },
            TargetMaps: {
              shape: "S25"
            },
            AlarmConfiguration: {
              shape: "S1z"
            },
            TriggeredAlarms: {
              shape: "S2n"
            }
          }
        },
        S2e: {
          type: "structure",
          required: [
            "Date",
            "Name",
            "Message"
          ],
          members: {
            Date: {
              type: "timestamp"
            },
            Name: {},
            Message: {},
            AdditionalInfo: {}
          }
        },
        S2i: {
          type: "structure",
          members: {
            Status: {},
            DetailedStatus: {},
            AssociationStatusAggregatedCount: {
              type: "map",
              key: {},
              value: {
                type: "integer"
              }
            }
          }
        },
        S2n: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Name",
              "State"
            ],
            members: {
              Name: {},
              State: {}
            }
          }
        },
        S2s: {
          type: "structure",
          required: [
            "Name"
          ],
          members: {
            Name: {},
            InstanceId: {},
            Parameters: {
              shape: "S14"
            },
            AutomationTargetParameterName: {},
            DocumentVersion: {},
            Targets: {
              shape: "S18"
            },
            ScheduleExpression: {},
            OutputLocation: {
              shape: "S1e"
            },
            AssociationName: {},
            MaxErrors: {},
            MaxConcurrency: {},
            ComplianceSeverity: {},
            SyncCompliance: {},
            ApplyOnlyAtCronInterval: {
              type: "boolean"
            },
            CalendarNames: {
              shape: "S1q"
            },
            TargetLocations: {
              shape: "S1s"
            },
            ScheduleOffset: {
              type: "integer"
            },
            TargetMaps: {
              shape: "S25"
            },
            AlarmConfiguration: {
              shape: "S1z"
            }
          }
        },
        S31: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Name"
            ],
            members: {
              Name: {},
              Version: {}
            }
          }
        },
        S33: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Key: {},
              Values: {
                type: "list",
                member: {}
              },
              Name: {}
            }
          }
        },
        S3g: {
          type: "structure",
          members: {
            Sha1: {},
            Hash: {},
            HashType: {},
            Name: {},
            DisplayName: {},
            VersionName: {},
            Owner: {},
            CreatedDate: {
              type: "timestamp"
            },
            Status: {},
            StatusInformation: {},
            DocumentVersion: {},
            Description: {},
            Parameters: {
              type: "list",
              member: {
                type: "structure",
                members: {
                  Name: {},
                  Type: {},
                  Description: {},
                  DefaultValue: {}
                }
              }
            },
            PlatformTypes: {
              shape: "S3u"
            },
            DocumentType: {},
            SchemaVersion: {},
            LatestVersion: {},
            DefaultVersion: {},
            DocumentFormat: {},
            TargetType: {},
            Tags: {
              shape: "S4"
            },
            AttachmentsInformation: {
              type: "list",
              member: {
                type: "structure",
                members: {
                  Name: {}
                }
              }
            },
            Requires: {
              shape: "S31"
            },
            Author: {},
            ReviewInformation: {
              type: "list",
              member: {
                type: "structure",
                members: {
                  ReviewedTime: {
                    type: "timestamp"
                  },
                  Status: {},
                  Reviewer: {}
                }
              }
            },
            ApprovedVersion: {},
            PendingReviewVersion: {},
            ReviewStatus: {},
            Category: {
              type: "list",
              member: {}
            },
            CategoryEnum: {
              type: "list",
              member: {}
            }
          }
        },
        S3u: {
          type: "list",
          member: {}
        },
        S4a: {
          type: "string",
          sensitive: true
        },
        S4o: {
          type: "map",
          key: {},
          value: {
            type: "structure",
            members: {
              Value: {},
              Type: {}
            }
          }
        },
        S4t: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Arn: {}
            }
          }
        },
        S4x: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "OpsItemId"
            ],
            members: {
              OpsItemId: {}
            }
          }
        },
        S56: {
          type: "map",
          key: {},
          value: {
            type: "structure",
            members: {
              Value: {}
            }
          }
        },
        S5f: {
          type: "structure",
          required: [
            "PatchFilters"
          ],
          members: {
            PatchFilters: {
              type: "list",
              member: {
                type: "structure",
                required: [
                  "Key",
                  "Values"
                ],
                members: {
                  Key: {},
                  Values: {
                    type: "list",
                    member: {}
                  }
                }
              }
            }
          }
        },
        S5l: {
          type: "structure",
          required: [
            "PatchRules"
          ],
          members: {
            PatchRules: {
              type: "list",
              member: {
                type: "structure",
                required: [
                  "PatchFilterGroup"
                ],
                members: {
                  PatchFilterGroup: {
                    shape: "S5f"
                  },
                  ComplianceLevel: {},
                  ApproveAfterDays: {
                    type: "integer"
                  },
                  ApproveUntilDate: {},
                  EnableNonSecurity: {
                    type: "boolean"
                  }
                }
              }
            }
          }
        },
        S5r: {
          type: "list",
          member: {}
        },
        S5v: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Name",
              "Products",
              "Configuration"
            ],
            members: {
              Name: {},
              Products: {
                type: "list",
                member: {}
              },
              Configuration: {
                type: "string",
                sensitive: true
              }
            }
          }
        },
        S65: {
          type: "structure",
          required: [
            "BucketName",
            "SyncFormat",
            "Region"
          ],
          members: {
            BucketName: {},
            Prefix: {},
            SyncFormat: {},
            Region: {},
            AWSKMSKeyARN: {},
            DestinationDataSharing: {
              type: "structure",
              members: {
                DestinationDataSharingType: {}
              }
            }
          }
        },
        S6e: {
          type: "structure",
          required: [
            "SourceType",
            "SourceRegions"
          ],
          members: {
            SourceType: {},
            AwsOrganizationsSource: {
              shape: "S6g"
            },
            SourceRegions: {
              shape: "S6l"
            },
            IncludeFutureRegions: {
              type: "boolean"
            },
            EnableAllOpsDataSources: {
              type: "boolean"
            }
          }
        },
        S6g: {
          type: "structure",
          required: [
            "OrganizationSourceType"
          ],
          members: {
            OrganizationSourceType: {},
            OrganizationalUnits: {
              type: "list",
              member: {
                type: "structure",
                members: {
                  OrganizationalUnitId: {}
                }
              }
            }
          }
        },
        S6l: {
          type: "list",
          member: {}
        },
        S72: {
          type: "structure",
          members: {
            TotalCount: {
              type: "integer"
            },
            RemainingCount: {
              type: "integer"
            },
            SummaryItems: {
              type: "list",
              member: {
                type: "structure",
                members: {
                  Version: {},
                  Count: {
                    type: "integer"
                  },
                  RemainingCount: {
                    type: "integer"
                  }
                }
              }
            }
          }
        },
        S7h: {
          type: "list",
          member: {}
        },
        S9c: {
          type: "map",
          key: {},
          value: {
            type: "list",
            member: {}
          }
        },
        S9h: {
          type: "structure",
          members: {
            ParameterValues: {
              type: "list",
              member: {}
            },
            Truncated: {
              type: "boolean"
            }
          }
        },
        S9l: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "DocumentName"
            ],
            members: {
              DocumentName: {},
              DocumentVersion: {},
              Parameters: {
                shape: "S9c"
              },
              TargetParameterName: {},
              Targets: {
                shape: "S18"
              },
              TargetMaps: {
                shape: "S25"
              },
              MaxConcurrency: {},
              MaxErrors: {},
              TargetLocations: {
                shape: "S1s"
              }
            }
          }
        },
        S9v: {
          type: "list",
          member: {
            type: "structure",
            members: {
              StepName: {},
              Action: {},
              TimeoutSeconds: {
                type: "long"
              },
              OnFailure: {},
              MaxAttempts: {
                type: "integer"
              },
              ExecutionStartTime: {
                type: "timestamp"
              },
              ExecutionEndTime: {
                type: "timestamp"
              },
              StepStatus: {},
              ResponseCode: {},
              Inputs: {
                type: "map",
                key: {},
                value: {}
              },
              Outputs: {
                shape: "S9c"
              },
              Response: {},
              FailureMessage: {},
              FailureDetails: {
                type: "structure",
                members: {
                  FailureStage: {},
                  FailureType: {},
                  Details: {
                    shape: "S9c"
                  }
                }
              },
              StepExecutionId: {},
              OverriddenParameters: {
                shape: "S9c"
              },
              IsEnd: {
                type: "boolean"
              },
              NextStep: {},
              IsCritical: {
                type: "boolean"
              },
              ValidNextSteps: {
                type: "list",
                member: {}
              },
              Targets: {
                shape: "S18"
              },
              TargetLocation: {
                shape: "S1t"
              },
              TriggeredAlarms: {
                shape: "S2n"
              }
            }
          }
        },
        Sa5: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Key: {},
              Values: {
                type: "list",
                member: {}
              }
            }
          }
        },
        Sad: {
          type: "structure",
          members: {
            Id: {},
            ReleaseDate: {
              type: "timestamp"
            },
            Title: {},
            Description: {},
            ContentUrl: {},
            Vendor: {},
            ProductFamily: {},
            Product: {},
            Classification: {},
            MsrcSeverity: {},
            KbNumber: {},
            MsrcNumber: {},
            Language: {},
            AdvisoryIds: {
              type: "list",
              member: {}
            },
            BugzillaIds: {
              type: "list",
              member: {}
            },
            CVEIds: {
              type: "list",
              member: {}
            },
            Name: {},
            Epoch: {
              type: "integer"
            },
            Version: {},
            Release: {},
            Arch: {},
            Severity: {},
            Repository: {}
          }
        },
        Sb8: {
          type: "list",
          member: {}
        },
        Sc1: {
          type: "list",
          member: {}
        },
        Scn: {
          type: "structure",
          required: [
            "InstanceId",
            "PatchGroup",
            "BaselineId",
            "OperationStartTime",
            "OperationEndTime",
            "Operation"
          ],
          members: {
            InstanceId: {},
            PatchGroup: {},
            BaselineId: {},
            SnapshotId: {},
            InstallOverrideList: {},
            OwnerInformation: {
              shape: "Scq"
            },
            InstalledCount: {
              type: "integer"
            },
            InstalledOtherCount: {
              type: "integer"
            },
            InstalledPendingRebootCount: {
              type: "integer"
            },
            InstalledRejectedCount: {
              type: "integer"
            },
            MissingCount: {
              type: "integer"
            },
            FailedCount: {
              type: "integer"
            },
            UnreportedNotApplicableCount: {
              type: "integer"
            },
            NotApplicableCount: {
              type: "integer"
            },
            OperationStartTime: {
              type: "timestamp"
            },
            OperationEndTime: {
              type: "timestamp"
            },
            Operation: {},
            LastNoRebootInstallOperationTime: {
              type: "timestamp"
            },
            RebootOption: {},
            CriticalNonCompliantCount: {
              type: "integer"
            },
            SecurityNonCompliantCount: {
              type: "integer"
            },
            OtherNonCompliantCount: {
              type: "integer"
            }
          }
        },
        Scq: {
          type: "string",
          sensitive: true
        },
        Sdt: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Key: {},
              Values: {
                type: "list",
                member: {}
              }
            }
          }
        },
        Se5: {
          type: "string",
          sensitive: true
        },
        Sew: {
          type: "map",
          key: {},
          value: {
            type: "structure",
            members: {
              Values: {
                type: "list",
                member: {
                  type: "string",
                  sensitive: true
                },
                sensitive: true
              }
            },
            sensitive: true
          },
          sensitive: true
        },
        Sf2: {
          type: "structure",
          required: [
            "S3BucketName",
            "S3Region"
          ],
          members: {
            S3BucketName: {},
            S3KeyPrefix: {},
            S3Region: {}
          }
        },
        Sfw: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Key"
            ],
            members: {
              Key: {},
              Option: {},
              Values: {
                type: "list",
                member: {}
              }
            }
          }
        },
        Sgb: {
          type: "list",
          member: {
            type: "structure",
            members: {
              PolicyText: {},
              PolicyType: {},
              PolicyStatus: {}
            }
          }
        },
        Sgh: {
          type: "structure",
          members: {
            BaselineId: {},
            BaselineName: {},
            OperatingSystem: {},
            BaselineDescription: {},
            DefaultBaseline: {
              type: "boolean"
            }
          }
        },
        Si2: {
          type: "structure",
          members: {
            CloudWatchLogGroupName: {},
            CloudWatchOutputEnabled: {
              type: "boolean"
            }
          }
        },
        Sio: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Key",
              "Values"
            ],
            members: {
              Key: {},
              Values: {
                type: "list",
                member: {}
              },
              Type: {}
            }
          }
        },
        Siu: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Expression: {},
              Aggregators: {
                shape: "Siu"
              },
              Groups: {
                type: "list",
                member: {
                  type: "structure",
                  required: [
                    "Name",
                    "Filters"
                  ],
                  members: {
                    Name: {},
                    Filters: {
                      shape: "Sio"
                    }
                  }
                }
              }
            }
          }
        },
        Sjb: {
          type: "list",
          member: {
            type: "map",
            key: {},
            value: {}
          }
        },
        Sk2: {
          type: "structure",
          members: {
            RunCommand: {
              type: "structure",
              members: {
                Comment: {},
                CloudWatchOutputConfig: {
                  shape: "Si2"
                },
                DocumentHash: {},
                DocumentHashType: {},
                DocumentVersion: {},
                NotificationConfig: {
                  shape: "Sk4"
                },
                OutputS3BucketName: {},
                OutputS3KeyPrefix: {},
                Parameters: {
                  shape: "S14"
                },
                ServiceRoleArn: {},
                TimeoutSeconds: {
                  type: "integer"
                }
              }
            },
            Automation: {
              type: "structure",
              members: {
                DocumentVersion: {},
                Parameters: {
                  shape: "S9c"
                }
              }
            },
            StepFunctions: {
              type: "structure",
              members: {
                Input: {
                  type: "string",
                  sensitive: true
                },
                Name: {}
              }
            },
            Lambda: {
              type: "structure",
              members: {
                ClientContext: {},
                Qualifier: {},
                Payload: {
                  type: "blob",
                  sensitive: true
                }
              }
            }
          }
        },
        Sk4: {
          type: "structure",
          members: {
            NotificationArn: {},
            NotificationEvents: {
              type: "list",
              member: {}
            },
            NotificationType: {}
          }
        },
        Skp: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "Key",
              "Values"
            ],
            members: {
              Key: {},
              Values: {
                type: "list",
                member: {}
              },
              Type: {}
            }
          }
        },
        Skv: {
          type: "list",
          member: {
            type: "structure",
            members: {
              AggregatorType: {},
              TypeName: {},
              AttributeName: {},
              Values: {
                type: "map",
                key: {},
                value: {}
              },
              Filters: {
                shape: "Skp"
              },
              Aggregators: {
                shape: "Skv"
              }
            }
          }
        },
        Slh: {
          type: "structure",
          members: {
            Name: {},
            Type: {},
            Value: {
              shape: "Sli"
            },
            Version: {
              type: "long"
            },
            Selector: {},
            SourceResult: {},
            LastModifiedDate: {
              type: "timestamp"
            },
            ARN: {},
            DataType: {}
          }
        },
        Sli: {
          type: "string",
          sensitive: true
        },
        Slo: {
          type: "list",
          member: {}
        },
        Sls: {
          type: "list",
          member: {
            shape: "Slh"
          }
        },
        Sm4: {
          type: "structure",
          members: {
            SettingId: {},
            SettingValue: {},
            LastModifiedDate: {
              type: "timestamp"
            },
            LastModifiedUser: {},
            ARN: {},
            Status: {}
          }
        },
        Smm: {
          type: "list",
          member: {
            type: "structure",
            required: [
              "key",
              "value"
            ],
            members: {
              key: {},
              value: {}
            }
          }
        },
        Sn2: {
          type: "structure",
          members: {
            CommandId: {},
            DocumentName: {},
            DocumentVersion: {},
            Comment: {},
            ExpiresAfter: {
              type: "timestamp"
            },
            Parameters: {
              shape: "S14"
            },
            InstanceIds: {
              shape: "Si"
            },
            Targets: {
              shape: "S18"
            },
            RequestedDateTime: {
              type: "timestamp"
            },
            Status: {},
            StatusDetails: {},
            OutputS3Region: {},
            OutputS3BucketName: {},
            OutputS3KeyPrefix: {},
            MaxConcurrency: {},
            MaxErrors: {},
            TargetCount: {
              type: "integer"
            },
            CompletedCount: {
              type: "integer"
            },
            ErrorCount: {
              type: "integer"
            },
            DeliveryTimedOutCount: {
              type: "integer"
            },
            ServiceRole: {},
            NotificationConfig: {
              shape: "Sk4"
            },
            CloudWatchOutputConfig: {
              shape: "Si2"
            },
            TimeoutSeconds: {
              type: "integer"
            },
            AlarmConfiguration: {
              shape: "S1z"
            },
            TriggeredAlarms: {
              shape: "S2n"
            }
          }
        },
        Sn9: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Key: {},
              Values: {
                type: "list",
                member: {}
              },
              Type: {}
            }
          }
        },
        Snr: {
          type: "structure",
          required: [
            "ExecutionTime"
          ],
          members: {
            ExecutionTime: {
              type: "timestamp"
            },
            ExecutionId: {},
            ExecutionType: {}
          }
        },
        Snu: {
          type: "map",
          key: {},
          value: {}
        },
        Snz: {
          type: "structure",
          members: {
            CompliantCount: {
              type: "integer"
            },
            SeveritySummary: {
              shape: "So1"
            }
          }
        },
        So1: {
          type: "structure",
          members: {
            CriticalCount: {
              type: "integer"
            },
            HighCount: {
              type: "integer"
            },
            MediumCount: {
              type: "integer"
            },
            LowCount: {
              type: "integer"
            },
            InformationalCount: {
              type: "integer"
            },
            UnspecifiedCount: {
              type: "integer"
            }
          }
        },
        So2: {
          type: "structure",
          members: {
            NonCompliantCount: {
              type: "integer"
            },
            SeveritySummary: {
              shape: "So1"
            }
          }
        },
        So9: {
          type: "list",
          member: {
            type: "structure",
            members: {
              Type: {},
              Content: {}
            }
          }
        },
        Sp7: {
          type: "structure",
          members: {
            Arn: {}
          }
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/ssm-2014-11-06.paginators.json
var require_ssm_2014_11_06_paginators = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/ssm-2014-11-06.paginators.json"(exports, module) {
    module.exports = {
      pagination: {
        DescribeActivations: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "ActivationList"
        },
        DescribeAssociationExecutionTargets: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "AssociationExecutionTargets"
        },
        DescribeAssociationExecutions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "AssociationExecutions"
        },
        DescribeAutomationExecutions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "AutomationExecutionMetadataList"
        },
        DescribeAutomationStepExecutions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "StepExecutions"
        },
        DescribeAvailablePatches: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Patches"
        },
        DescribeEffectiveInstanceAssociations: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Associations"
        },
        DescribeEffectivePatchesForPatchBaseline: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "EffectivePatches"
        },
        DescribeInstanceAssociationsStatus: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "InstanceAssociationStatusInfos"
        },
        DescribeInstanceInformation: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "InstanceInformationList"
        },
        DescribeInstancePatchStates: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "InstancePatchStates"
        },
        DescribeInstancePatchStatesForPatchGroup: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "InstancePatchStates"
        },
        DescribeInstancePatches: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Patches"
        },
        DescribeInventoryDeletions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "InventoryDeletions"
        },
        DescribeMaintenanceWindowExecutionTaskInvocations: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "WindowExecutionTaskInvocationIdentities"
        },
        DescribeMaintenanceWindowExecutionTasks: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "WindowExecutionTaskIdentities"
        },
        DescribeMaintenanceWindowExecutions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "WindowExecutions"
        },
        DescribeMaintenanceWindowSchedule: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "ScheduledWindowExecutions"
        },
        DescribeMaintenanceWindowTargets: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Targets"
        },
        DescribeMaintenanceWindowTasks: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Tasks"
        },
        DescribeMaintenanceWindows: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "WindowIdentities"
        },
        DescribeMaintenanceWindowsForTarget: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "WindowIdentities"
        },
        DescribeOpsItems: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "OpsItemSummaries"
        },
        DescribeParameters: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken"
        },
        DescribePatchBaselines: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "BaselineIdentities"
        },
        DescribePatchGroups: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Mappings"
        },
        DescribePatchProperties: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Properties"
        },
        DescribeSessions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Sessions"
        },
        GetInventory: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Entities"
        },
        GetInventorySchema: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Schemas"
        },
        GetOpsSummary: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Entities"
        },
        GetParameterHistory: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken"
        },
        GetParametersByPath: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken"
        },
        ListAssociationVersions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "AssociationVersions"
        },
        ListAssociations: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Associations"
        },
        ListCommandInvocations: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "CommandInvocations"
        },
        ListCommands: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Commands"
        },
        ListComplianceItems: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "ComplianceItems"
        },
        ListComplianceSummaries: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "ComplianceSummaryItems"
        },
        ListDocumentVersions: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "DocumentVersions"
        },
        ListDocuments: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "DocumentIdentifiers"
        },
        ListOpsItemEvents: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Summaries"
        },
        ListOpsItemRelatedItems: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "Summaries"
        },
        ListOpsMetadata: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "OpsMetadataList"
        },
        ListResourceComplianceSummaries: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "ResourceComplianceSummaryItems"
        },
        ListResourceDataSync: {
          input_token: "NextToken",
          limit_key: "MaxResults",
          output_token: "NextToken",
          result_key: "ResourceDataSyncItems"
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/ssm-2014-11-06.waiters2.json
var require_ssm_2014_11_06_waiters2 = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/apis/ssm-2014-11-06.waiters2.json"(exports, module) {
    module.exports = {
      version: 2,
      waiters: {
        CommandExecuted: {
          delay: 5,
          operation: "GetCommandInvocation",
          maxAttempts: 20,
          acceptors: [
            {
              expected: "Pending",
              matcher: "path",
              state: "retry",
              argument: "Status"
            },
            {
              expected: "InProgress",
              matcher: "path",
              state: "retry",
              argument: "Status"
            },
            {
              expected: "Delayed",
              matcher: "path",
              state: "retry",
              argument: "Status"
            },
            {
              expected: "Success",
              matcher: "path",
              state: "success",
              argument: "Status"
            },
            {
              expected: "Cancelled",
              matcher: "path",
              state: "failure",
              argument: "Status"
            },
            {
              expected: "TimedOut",
              matcher: "path",
              state: "failure",
              argument: "Status"
            },
            {
              expected: "Failed",
              matcher: "path",
              state: "failure",
              argument: "Status"
            },
            {
              expected: "Cancelling",
              matcher: "path",
              state: "failure",
              argument: "Status"
            },
            {
              state: "retry",
              matcher: "error",
              expected: "InvocationDoesNotExist"
            }
          ]
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/clients/ssm.js
var require_ssm = __commonJS({
  "../../node_modules/.pnpm/aws-sdk@2.1252.0/node_modules/aws-sdk/clients/ssm.js"(exports, module) {
    require_node_loader();
    var AWS2 = require_core();
    var Service = AWS2.Service;
    var apiLoader = AWS2.apiLoader;
    apiLoader.services["ssm"] = {};
    AWS2.SSM = Service.defineService("ssm", ["2014-11-06"]);
    Object.defineProperty(apiLoader.services["ssm"], "2014-11-06", {
      get: /* @__PURE__ */ __name(function get() {
        var model = require_ssm_2014_11_06_min();
        model.paginators = require_ssm_2014_11_06_paginators().pagination;
        model.waiters = require_ssm_2014_11_06_waiters2().waiters;
        return model;
      }, "get"),
      enumerable: true,
      configurable: true
    });
    module.exports = AWS2.SSM;
  }
});

// support/custom-resources/auth-keys.ts
var import_client_ssm = __toESM(require_dist_cjs48(), 1);
import crypto4 from "crypto";
import { promisify } from "util";
var generateKeyPair = promisify(crypto4.generateKeyPair);
async function AuthKeys(cfnRequest) {
  const { privatePath, publicPath } = cfnRequest.ResourceProperties;
  const client = new import_client_ssm.SSMClient({ logger: console });
  switch (cfnRequest.RequestType) {
    case "Create":
      const { publicKey, privateKey } = await generateKeyPair("rsa", {
        modulusLength: 2048,
        publicKeyEncoding: {
          type: "spki",
          format: "pem"
        },
        privateKeyEncoding: {
          type: "pkcs8",
          format: "pem"
        }
      });
      await Promise.all([
        client.send(
          new import_client_ssm.PutParameterCommand({
            Name: privatePath,
            Value: privateKey,
            Type: "SecureString"
          })
        ),
        client.send(
          new import_client_ssm.PutParameterCommand({
            Name: publicPath,
            Value: publicKey,
            Type: "SecureString"
          })
        )
      ]);
      break;
    case "Update":
      const {
        privatePath: oldPrivatePath,
        publicPath: oldPublicPath
      } = cfnRequest.OldResourceProperties;
      if (oldPrivatePath !== privatePath) {
        try {
          const oldPrivateKey = await client.send(
            new import_client_ssm.GetParameterCommand({
              Name: oldPrivatePath,
              WithDecryption: true
            })
          );
          await client.send(
            new import_client_ssm.PutParameterCommand({
              Name: privatePath,
              Value: oldPrivateKey.Parameter?.Value,
              Type: "SecureString",
              Overwrite: true
            })
          );
        } catch (e) {
          if (e.name !== "ParameterNotFound") {
            throw e;
          }
        }
      }
      if (oldPublicPath !== publicPath) {
        try {
          const oldPublicKey = await client.send(
            new import_client_ssm.GetParameterCommand({
              Name: oldPublicPath,
              WithDecryption: true
            })
          );
          await client.send(
            new import_client_ssm.PutParameterCommand({
              Name: publicPath,
              Value: oldPublicKey.Parameter?.Value,
              Type: "SecureString",
              Overwrite: true
            })
          );
        } catch (e) {
          if (e.name !== "ParameterNotFound") {
            throw e;
          }
        }
      }
      break;
    case "Delete":
      await Promise.all([
        client.send(
          new import_client_ssm.DeleteParameterCommand({
            Name: privatePath
          })
        ),
        client.send(
          new import_client_ssm.DeleteParameterCommand({
            Name: publicPath
          })
        )
      ]);
      break;
    default:
      throw new Error("Unsupported request type");
  }
}
__name(AuthKeys, "AuthKeys");

// support/custom-resources/secrets-migration.ts
var import_ssm = __toESM(require_ssm(), 1);

// support/custom-resources/cfn-response.ts
import https from "https";
import url from "url";
var CREATE_FAILED_PHYSICAL_ID_MARKER = "AWSCDK::CustomResourceProviderFramework::CREATE_FAILED";
var MISSING_PHYSICAL_ID_MARKER = "AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";
async function submitResponse(status, event, options = {}) {
  const json = {
    Status: status,
    Reason: options.reason || status,
    StackId: event.StackId,
    RequestId: event.RequestId,
    PhysicalResourceId: event.PhysicalResourceId || MISSING_PHYSICAL_ID_MARKER,
    LogicalResourceId: event.LogicalResourceId,
    NoEcho: options.noEcho,
    Data: event.Data
  };
  log("submit response to cloudformation", json);
  const responseBody = JSON.stringify(json);
  const parsedUrl = url.parse(event.ResponseURL);
  await httpRequest(
    {
      hostname: parsedUrl.hostname,
      path: parsedUrl.path,
      method: "PUT",
      headers: {
        "content-type": "",
        "content-length": responseBody.length
      }
    },
    responseBody
  );
}
__name(submitResponse, "submitResponse");
function safeHandler(block) {
  return async (event) => {
    try {
      await block(event);
    } catch (e) {
      log(e);
      if (e instanceof Retry) {
        log("retry requested by handler");
        throw e;
      }
      if (!event.PhysicalResourceId) {
        if (event.RequestType === "Create") {
          log(
            "CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"
          );
          event.PhysicalResourceId = CREATE_FAILED_PHYSICAL_ID_MARKER;
        } else {
          log(
            `ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(
              event
            )}`
          );
        }
      }
      const reason = [
        e.message,
        `Logs: https://${process.env.AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${process.env.AWS_REGION}#logsV2:log-groups/log-group/${encodeURIComponent(
          process.env.AWS_LAMBDA_LOG_GROUP_NAME
        )}/log-events/${encodeURIComponent(
          process.env.AWS_LAMBDA_LOG_STREAM_NAME
        )}`
      ].join("\n");
      await submitResponse("FAILED", event, { reason });
    }
  };
}
__name(safeHandler, "safeHandler");
var Retry = class extends Error {
};
__name(Retry, "Retry");
async function httpRequest(options, responseBody) {
  return new Promise((resolve, reject) => {
    try {
      const request = https.request(options, resolve);
      request.on("error", reject);
      request.write(responseBody);
      request.end();
    } catch (e) {
      reject(e);
    }
  });
}
__name(httpRequest, "httpRequest");

// support/custom-resources/util.ts
function wrapper(block) {
  return safeHandler(
    async (cfnRequest) => {
      await block(cfnRequest);
      return submitResponse("SUCCESS", {
        ...cfnRequest,
        PhysicalResourceId: defaultPhysicalResourceId(cfnRequest)
      });
    }
  );
}
__name(wrapper, "wrapper");
function log(title, ...args) {
  console.log(
    "[provider-framework]",
    title,
    ...args.map(
      (x) => typeof x === "object" ? JSON.stringify(x, void 0, 2) : x
    )
  );
}
__name(log, "log");
function defaultPhysicalResourceId(req) {
  switch (req.RequestType) {
    case "Create":
      return req.RequestId;
    case "Update":
    case "Delete":
      return req.PhysicalResourceId;
    default:
      throw new Error(
        `Invalid "RequestType" in request "${JSON.stringify(req)}"`
      );
  }
}
__name(defaultPhysicalResourceId, "defaultPhysicalResourceId");

// support/custom-resources/secrets-migration.ts
var ssm = new import_ssm.default({
  logger: console
});
async function SecretsMigration(cfnRequest) {
  log("SecretsMigration()");
  const {
    App: app,
    Stage: stage
  } = cfnRequest.ResourceProperties;
  const {
    SSTVersion: version2
  } = cfnRequest.OldResourceProperties || {};
  switch (cfnRequest.RequestType) {
    case "Create":
    case "Update":
      await migrateSecretsSSMPath({ version: version2, app, stage });
      await migrateSecretsSSMPath({ version: version2, app, stage: ".fallback" });
      break;
    case "Delete":
      break;
    default:
      throw new Error("Unsupported request type");
  }
}
__name(SecretsMigration, "SecretsMigration");
async function migrateSecretsSSMPath(input) {
  log("migrateSecretsSSMPath()", input);
  const { version: version2, app, stage } = input;
  if (version2) {
    const parts = version2.split(".");
    const majorVersion = parseInt(parts[0]);
    const minorVersion = parseInt(parts[1]);
    if (majorVersion === 0 && minorVersion === 0) {
      return;
    }
    const needToMigrate = majorVersion < 1 || majorVersion === 1 && minorVersion < 16;
    if (!needToMigrate) {
      return;
    }
  }
  const prefix = `/sst/${app}/${stage}/secrets/`;
  const secrets = await ssmGetAllPrametersByPath(prefix);
  for (const secret of secrets) {
    const name = secret.Name.split("/")[5];
    if (name === "SST_AUTH_PRIVATE" || name === "SST_AUTH_PUBLIC") {
      continue;
    }
    const newKey = `/sst/${app}/${stage}/Secret/${name}/value`;
    await ssmPutParameter({
      Name: newKey,
      Value: secret.Value,
      Type: secret.Type,
      Overwrite: true
    });
  }
}
__name(migrateSecretsSSMPath, "migrateSecretsSSMPath");
async function ssmGetAllPrametersByPath(prefix, token) {
  const result = await ssmGetParametersByPath({
    WithDecryption: true,
    Recursive: true,
    Path: prefix,
    NextToken: token
  });
  return [
    ...result.Parameters || [],
    ...result.NextToken ? await ssmGetAllPrametersByPath(prefix, result.NextToken) : []
  ];
}
__name(ssmGetAllPrametersByPath, "ssmGetAllPrametersByPath");
async function ssmGetParametersByPath(params) {
  try {
    return await ssm.getParametersByPath(params).promise();
  } catch (e) {
    if (isRetryableException(e)) {
      return await ssmGetParametersByPath(params);
    }
    throw e;
  }
}
__name(ssmGetParametersByPath, "ssmGetParametersByPath");
async function ssmPutParameter(params) {
  try {
    return await ssm.putParameter(params).promise();
  } catch (e) {
    if (isRetryableException(e)) {
      return await ssmPutParameter(params);
    }
    throw e;
  }
}
__name(ssmPutParameter, "ssmPutParameter");
function isRetryableException(e) {
  return e.code === "ThrottlingException" && e.message === "Rate exceeded" || e.code === "Throttling" && e.message === "Rate exceeded" || e.code === "TooManyRequestsException" && e.message === "Too Many Requests" || e.code === "TooManyUpdates" || e.code === "OperationAbortedException" || e.code === "TimeoutError" || e.code === "NetworkingError" || e.code === "ResourceConflictException";
}
__name(isRetryableException, "isRetryableException");

// support/custom-resources/index.ts
var handler = wrapper(async (cfnRequest) => {
  log("onEventHandler", cfnRequest);
  switch (cfnRequest.ResourceType) {
    case "Custom::SecretsMigration":
      await SecretsMigration(cfnRequest);
      break;
    case "Custom::AuthKeys":
      await AuthKeys(cfnRequest);
      break;
  }
});
export {
  handler
};
/*! Bundled license information:

sax/lib/sax.js:
  (*! http://mths.be/fromcodepoint v0.1.0 by @mathias *)
*/
